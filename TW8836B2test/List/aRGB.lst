C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE ARGB
OBJECT MODULE PLACED IN .\Output\aRGB.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Source36\aRGB.c LARGE OMF2 ROM(D512K) OPTIMIZE(9,SPEED) REGFILE(.\Output
                    -\TW8836B_EVB11.ORC) BROWSE INCDIR(SiI-SW;SiI-SW\HAL;SiI-SW\DEBUG;SiI-SW\CEC;.\Source36\LIB) DEFINE(EVB_11,nullFn=//) DEB
                    -UG CODE PRINT(.\List\aRGB.lst) TABS(2) OBJECT(.\Output\aRGB.obj)

line level    source

   1          /**
   2           * @file
   3           *   aRGB.c
   4           * @author Brian Kang
   5           * @version 1.0
   6           * @section LICENSE
   7           *  Copyright (C) 2011~2012 Intersil Corporation
   8           * @section DESCRIPTION
   9           *  Video HighSpeed ADC module for aRGB 
  10           *
  11           *  VADC means Video ADC. we also call it as aRGB.
  12           *  VADC consist of "SYNC Processor" + "LLPLL" + "ADC".
  13           *  Component & PC inputs use VADC module.  
  14           ******************************************************************************
  15           */
  16          /*
  17          Disclaimer: THIS INFORMATION IS PROVIDED 'AS-IS' FOR EVALUATION PURPOSES ONLY.  
  18          INTERSIL CORPORATION AND ITS SUBSIDIARIES ('INTERSIL') DISCLAIM ALL WARRANTIES, 
  19          INCLUDING WITHOUT LIMITATION FITNESS FOR A PARTICULAR PURPOSE AND MERCHANTABILITY.  
  20          Intersil provides evaluation platforms to help our customers to develop products. 
  21          However, factors beyond Intersil's control could significantly affect Intersil 
  22          product performance. 
  23          It remains the customers' responsibility to verify the actual system performance.
  24          */
  25          //-------------------------------------------------------------------
  26          // global function
  27          //  CheckAndSetComponent
  28          //  CheckAndSetPC
  29          //  aRGB_SetDefault
  30          //-------------------------------------------------------------------
  31          #include "Config.h"
  32          #include "reg.h"
  33          #include "typedefs.h"
  34          #include "TW8836.h"
  35          
  36          #include "Printf.h"
  37          #include "Monitor.h"
  38          #include "I2C.h"
  39          #include "CPU.h"
  40          #include "global.h"
  41          #include "Scaler.h"
  42          
  43          #include "InputCtrl.h"
  44          
  45          #include "measure.h"
  46          #include "PC_modes.h"
  47            
  48          #include "aRGB.h"
  49          #include "eeprom.h"
  50          #include "settings.h"
  51          
  52          #include "util.h"
  53          #include "FOsd.h"
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 2   

  54          
  55          void dummy_argb_code(void)
  56          {
  57   1        Puts("dummy_argb_code");
  58   1      }
  59          
  60          XDATA BYTE  Input_aRGBMode;
  61          
  62          
  63          #if defined(DEBUG_COMP) || defined(DEBUG_PC)
  64            #define argb_Printf   Printf
  65            #define argb_Puts   Puts  
  66            #define argb_ePrintf  ePrintf
  67            #define argb_ePuts    ePuts 
  68            #define argb_wPrintf  wPrintf
  69            #define argb_wPuts    wPuts 
  70            #define argb_dPrintf  dPrintf
  71            #define argb_dPuts    dPuts 
  72          #else
                #define argb_Printf   nullFn
                #define argb_Puts   nullFn  
                #define argb_ePrintf  nullFn
                #define argb_ePuts    nullFn  
                #define argb_wPrintf  nullFn
                #define argb_wPuts    nullFn  
                #define argb_dPrintf  nullFn
                #define argb_dPuts    nullFn  
              #endif
  82          
  83          
  84          /*    
  85          
  86          Component PATH
  87          ==============
  88                               +=>vSync=> VSYNCO =>        Scaler
  89                               |
  90           SOG  => SOG Slicer  => SyncSeperator =+   
  91                               |
  92                               +=>hSync=> LLPLL  => HSO =>     Scaler
  93          
  94          
  95          PC PATH
  96          =======
  97          
  98           HSYNC => LLPLL =>  HSO   =>   Scaler
  99                           Scaler
 100           VSYNC          =>
 101          
 102          
 103          Module Polarity
 104          ===============                                           
 105                          Fixed
 106                          module      output
 107                  ======       polarity
 108                +----------+         +-+
 109                | SOG    |   ==>   | |
 110                | Slicer |        -+ +-
 111                +----------+
 112          
 113          
 114             Request            Fixed
 115             INPUT        module          output
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 3   

 116             polarity           polarity
 117             =====    =======     ======
 118              +-+     +---------+   -+ +-
 119              | |   =>  |  Sync   |  =>    | |
 120             -+ +-      |Seperator|    +-+
 121            active      +---------+      active 
 122              High              Low
 123                                       V: VSYNCO
 124                         H: CS_PAS
 125          
 126          
 127             Request            Fixed
 128             INPUT        module          output
 129             polarity           polarity
 130             =====    =======     ======
 131             -+ +-    +---------+    +-+   
 132              | |   =>  |  LLPLL  |  =>    | |
 133            +-+     +---------+   -+ +-
 134            active             active 
 135              low               high
 136          
 137          
 138             Prefer
 139             INPUT        module    
 140             =====     =======  
 141              +-+       +---------+
 142              | |   =>  | measure | 
 143             -+ +-    +---------+
 144             active         
 145              high          
 146          
 147          */
 148          
 149          
 150          static BYTE WaitStableLLPLL(void);
 151          
 152          
 153          
 154          /**
 155          * Description
 156          * Set aRGB signal path.
 157          * @param input
 158          * 0:component, 1:PC.
 159          *
 160          * registers
 161          * REG1C0[3]
 162          * REG1C0[4]
 163          * REG1CC[4]
 164          * REG1CC[3:2] - always HSO.
 165          * REG1CC[0] - if HSO, always 0.(ByPass)
 166          */
 167          #ifdef SUPPORT_ARGB
 168          void aRGB_setSignalPath(BYTE fInputPC)
 169          {
 170   1        BYTE bTemp;
 171   1      
 172   1        bTemp = ReadTW88(REG1C0);
 173   1        bTemp &= ~0x18;
 174   1        if(fInputPC)  bTemp |=  0x08;
 175   1        else      bTemp |=  0x10;
 176   1        WriteTW88(REG1C0, bTemp);
 177   1      
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 4   

 178   1        bTemp = ReadTW88(REG1CC);
 179   1        bTemp &= ~0x1D;
 180   1        if(fInputPC) bTemp |= 0x10;
 181   1        WriteTW88(REG1CC,bTemp);
 182   1      }
 183          #endif
 184          
 185          
 186          /**
 187          * Description
 188          * Select LLPLL input polarity.
 189          *   This function needs a correct Path.
 190          * Execute aRGB_setSignalPath first.
 191          *
 192          * @param fInputPC
 193          * 0:component
 194          * 1:PC
 195          * @param fActiveHighPol.Positive
 196          * if input is component, select value will be bypass,REG1C0[2]=1.
 197          *   because, video path will be SOG_Slicer=>SyncSeperator. 
 198          *   and hPol is active low that LLPLL requests. 
 199          * if input is PC, use fPol value that comes from REG1C1[6].
 200          *   If hSync is active high (REG1C1[6] is 1), invert it. 
 201          *   LLPLL requests an Active Low.
 202          *
 203          * register REG1C0[2]
 204          */
 205          #ifdef SUPPORT_ARGB
 206          void aRGB_SetLLPLL_InputPolarity(BYTE fInputPC, BYTE fActiveHighPol)
 207          {
 208   1        BYTE bTemp;
 209   1      
 210   1        bTemp = ReadTW88(REG1C0);
 211   1        if(fInputPC) {
 212   2          if(fActiveHighPol)  bTemp &= ~0x04;  //invert.
 213   2          else        bTemp |=  0x04;  //bypass.      
 214   2        }
 215   1        else {
 216   2          bTemp |=  0x04; //bypass
 217   2        }
 218   1        WriteTW88(REG1C0, bTemp);
 219   1      }
 220          #endif
 221          
 222          /**
 223          * Description
 224          *   select vSync output polarity.
 225          *
 226          * scaler & measure like a positive polarity.
 227          * if input is component, SyncSeperator output is active low.
 228          *   scaler need a inverted sync input.
 229          * if input is PC, make the scaler input as an active high.
 230          */
 231          #ifdef SUPPORT_ARGB
 232          void aRGB_Set_vSyncOutPolarity(BYTE fInputPC, BYTE fActiveHighPol)
 233          {
 234   1        BYTE bTemp;
 235   1      
 236   1        bTemp = ReadTW88(REG1CC);
 237   1        if(fInputPC) {
 238   2          if(fActiveHighPol) bTemp &= ~0x02;  //bypass
 239   2          else               bTemp |=  0x02;  //invert
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 5   

 240   2        }
 241   1        else
 242   1          bTemp |= 0x02;    //invert
 243   1        WriteTW88(REG1CC,bTemp);
 244   1      }
 245          #endif
 246          
 247          //-----------------------------------------------------------------------------
 248          // component video table.
 249          // Overscanned value.
 250          //-----------------------------------------------------------------------------
 251          
 252          
 253          extern code struct COMP_VIDEO_TIME_TABLE_s TW8836_COMP_TABLE[];
 254          
 255          
 256          #if defined(SUPPORT_COMPONENT) || defined(SUPPORT_PC) || defined(SUPPORT_BT656_LOOP)
 257          //-----------------------------------------------------------------------------
 258          /**
 259          * Read aRGB(VAdc) InputStauts
 260          *
 261          * register
 262          * R1C1  LLPLL Input Detection Register
 263          * R1C1[7] - VSync input polarity. 1:Active High. 
 264          * R1C1[6] - HSync input polarity. 1:Active High.
 265          * R1C1[5] - VSYNC pulse detection status. 1=detected
 266          * R1C1[4] - HSYNC pulse detection status. 1=detected
 267          * R1C1[3] - Composite Sync detection status 
 268          * R1C1[2:0] Input source format detection in case of composite sync.
 269          *       0:480i  1:576i  3:480p  3:576p
 270          *       4:1080i 5:720p  6:1080p 7:fail
 271          */
 272          #ifdef SUPPORT_ARGB
 273          BYTE aRGB_GetInputStatus(void)
 274          {
 275   1        BYTE value;
 276   1        value = ReadTW88(REG1C1);
 277   1        return value;
 278   1      }
 279          #endif
 280          #endif
 281          
 282          
 283          #if defined(SUPPORT_COMPONENT) || defined(SUPPORT_PC)
 284          #define LLPLL_POST_8    0x00
 285          #define LLPLL_POST_4    0x40
 286          #define LLPLL_POST_2    0x80
 287          #define LLPLL_POST_1    0xC0 //*
 288          #define LLPLL_VCO_40TO216 0x30 //*
 289          #define LLPLL_PUMP_5    0x02 //*
 290          //-----------------------------------------------------------------------------
 291          /**
 292          * Set LLPLL Control
 293          *
 294          * register
 295          * R1C2[7:6] PLL post divider
 296          * R1C2[5:4] VCO range select
 297          * R1C2[2:0] Charge pump current
 298          */
 299          void aRGB_SetLLPLLControl(BYTE value)
 300          {
 301   1        WriteTW88(REG1C2, value);
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 6   

 302   1      }
 303          #endif
 304          
 305          
 306          //-----------------------------------------------------------------------------
 307          // LLPLL Divider
 308          //-----------------------------------------------------------------------------
 309          #if defined(SUPPORT_COMPONENT) || defined(SUPPORT_PC)
 310          //-----------------------------------------------------------------------------
 311          /**
 312          * Write LLPLL divider
 313          *
 314          * @param  value: PLL value. Use (Htotal-1)
 315          * @param  fInit:  init flag
 316          *
 317          * register
 318          *   R1C3[3:0]R1C4[7:0] - LLPLL Divider. PLL feedback divider. A 12-bit register 
 319          */
 320          void aRGB_LLPLLSetDivider(WORD value, BYTE fInit)
 321          {
 322   1        volatile BYTE mode;
 323   1      
 324   1        Write2TW88(REG1C3,REG1C4, value);
 325   1        if(fInit) { 
 326   2          WriteTW88(REG1CD, ReadTW88(REG1CD) | 0x01);   // PLL init
 327   2          //wait
 328   2          do {
 329   3            mode = TW8835_R1CD;
 330   3          } while(mode & 0x01);
 331   2        }
 332   1      }
 333          #endif
 334          
 335          #if defined(SUPPORT_PC)
 336          //-----------------------------------------------------------------------------
 337          /**
 338          * Read LLPLL divider value
 339          *
 340          * other name: GetCoarse(void)
 341          */
 342          WORD aRGB_LLPLLGetDivider(void)
 343          {
 344   1        WORD value;
 345   1      
 346   1        Read2TW88(REG1C3,REG1C4,value);
 347   1        return value & 0x0FFF;
 348   1      }
 349          #endif
 350          
 351          //-----------------------------------------------------------------------------
 352          // LLPLL Clock PHASE
 353          //-----------------------------------------------------------------------------
 354          #if defined(SUPPORT_COMPONENT) || defined(SUPPORT_PC)
 355          //-----------------------------------------------------------------------------
 356          /**
 357          * set Phase value
 358          *
 359          * register
 360          * R1C5[4:0]
 361          * @param value: Phase value
 362          * @param fInit: init flag
 363          */
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 7   

 364          void aRGB_SetPhase(BYTE value, BYTE fInit)
 365          {
 366   1        volatile BYTE mode;
 367   1      
 368   1        WriteTW88(REG1C5, value&0x1f);
 369   1        if(fInit) {
 370   2          WriteTW88(REG1CD, ReadTW88(REG1CD) | 0x01); // PLL init
 371   2          //wait
 372   2          do {
 373   3            mode = TW8835_R1CD;
 374   3          } while(mode & 0x01);
 375   2        }
 376   1      }
 377          #endif
 378          
 379          #if defined(SUPPORT_PC)
 380          //-----------------------------------------------------------------------------
 381          /**
 382          * get Phase value
 383          */
 384          //-----------------------------------------------------------------------------
 385          BYTE aRGB_GetPhase(void)
 386          {
 387   1        return ReadTW88(REG1C5) & 0x1f;   //VADC_PHASE
 388   1      }
 389          #endif
 390          
 391          
 392          
 393          //-----------------------------------------------------------------------------
 394          // LLPLL Filter BandWidth
 395          //---------------------------
 396          //-----------------------------------------------------------------------------
 397          /**
 398          * set filter bandwidth
 399          *
 400          * register
 401          * R1C6[2:0] R1C6 default: 0x20.
 402          */
 403          void aRGB_SetFilterBandwidth(BYTE value, WORD delay)
 404          {            
 405   1        if(delay)
 406   1          delay1ms(delay);
 407   1      
 408   1        WriteTW88(REG1C6, (ReadTW88(REG1C6) & 0xF8) | value);
 409   1      }
 410          
 411          
 412          
 413          
 414          //-----------------------------------------------------------------------------
 415          #ifdef SUPPORT_COMPONENT
 416          /**
 417          * set clamp mode and HSync Edge
 418          *
 419          * register
 420          * R1D4[5]
 421          */
 422          void aRGB_SetClampModeHSyncEdge(BYTE fOn)
 423          {
 424   1        BYTE bTemp;
 425   1        bTemp =  ReadTW88(REG1D4);
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 8   

 426   1      
 427   1        if(fOn) bTemp |=  0x20;
 428   1        else  bTemp &= ~0x20;
 429   1      
 430   1        WriteTW88(REG1D4, bTemp);
 431   1      }
 432          #endif
 433          
 434          #ifdef SUPPORT_COMPONENT
 435          //-----------------------------------------------------------------------------
 436          /**
 437          * set clamp position
 438          *
 439          * register
 440          * R1D7[7:0]
 441          */
 442          void aRGB_SetClampPosition(BYTE value)
 443          {
 444   1        WriteTW88(REG1D7, value );  // ADC clamp position from HSync edge by TABLE ClampPos[]
 445   1      }
 446          #endif
 447          
 448          
 449          //===================================================================
 450          //
 451          //===================================================================
 452          //-----------------------------------------------------------------------------
 453          /**
 454          * set default VAdc for PC & Component.
 455          *
 456          * If input is not PC or Component, powerdown VAdc.
 457          * R1C0[]  10
 458          * R1C2[]  d2
 459          * * R1C6  20
 460          * R1CB[]
 461          * R1CC[]
 462          * R1D4[]  00  20
 463          * R1D6[]  10  10
 464          * R1D7[]    00
 465          * R1DA[]  80  01
 466          * R1DB[]  80  01
 467          * R1E6[]  00  20    PGA high
 468          * external
 469          *  InputMain
 470          * @todo pls, remove or refind. it is too big.
 471          */
 472          
 473          void aRGB_SetDefaultFor(void)
 474          {
 475   1      #if defined(SUPPORT_COMPONENT) || defined(SUPPORT_PC)
 476   1        BYTE rvalue;
 477   1      #endif
 478   1        //dPrintf("\n\raRGB_SetDefaultFor()");
 479   1      
 480   1        if ( InputMain == INPUT_COMP ) {
 481   2      #ifdef SUPPORT_COMPONENT
 482   2          WriteTW88(REG1C0,0x10); // mode for SOG slicer
 483   2          WriteTW88(REG1C2,0xD2); // ==> VCO Charge pump    POST:1. VCO:10~54MHz Pump:5uA
 484   2          WriteTW88(REG1C6,0x20); // PLL loop control
 485   2          WriteTW88(REG1C9,0x00); // Pre-coast = 0
 486   2          WriteTW88(REG1CA,0x00); // Post-coast = 0
 487   2          WriteTW88(REG1CB,0xD6); // Power up PLL, SOG
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 9   

 488   2          WriteTW88(REG1CC,0x00); // ==> Sync selection
 489   2      
 490   2          WriteTW88(REG1D0,0x00); // ADC gain
 491   2          WriteTW88(REG1D1,0xF0); // 
 492   2          WriteTW88(REG1D2,0xF0); // 
 493   2          WriteTW88(REG1D3,0xF0); // 
 494   2      
 495   2          WriteTW88(REG1D4,0x20); // clamp mode
 496   2          WriteTW88(REG1D5,0x00); // clamp start
 497   2          WriteTW88(REG1D6,0x10); // clamp stop
 498   2          WriteTW88(REG1D7,0x00); // clamp pos.
 499   2          WriteTW88(REG1D9,0x02); // clamp Y level
 500   2          WriteTW88(REG1DA,0x80); // clamp U level
 501   2          WriteTW88(REG1DB,0x80); // clamp V level
 502   2          WriteTW88(REG1DC,0x10); // HS width
 503   2      
 504   2          WriteTW88(REG1E2,0x59); //*** 0x59
 505   2          WriteTW88(REG1E3,0x17); //*** 0x37
 506   2          WriteTW88(REG1E4,0x34); //*** 0x55
 507   2          WriteTW88(REG1E5,0x33); //*** 0x55
 508   2      
 509   2          WriteTW88(REG1E6,0x20); // PGA high speed
 510   2      
 511   2          //set default divider(856-1. for 480i or 480p) & phase. 
 512   2          aRGB_LLPLLSetDivider(0x035A, 1);
 513   2          //rvalue=GetPhaseEE(EE_YUVDATA_START+0);
 514   2          //if(rvalue==0xff)
 515   2            rvalue=0;
 516   2          aRGB_SetPhase(rvalue, 0);
 517   2      
 518   2          aRGB_setSignalPath(0); //add 130227
 519   2      
 520   2      #endif
 521   2        }
 522   1        else if ( InputMain == INPUT_PC ) {
 523   2      #ifdef SUPPORT_PC
 524   2          WriteTW88(REG1C0,0x08); // mode for HV sync
 525   2          WriteTW88(REG1C2,0xD2); // ==> VCO Charge pump    POST:1. VCO:10~54MHz Pump:5uA
 526   2          WriteTW88(REG1C6,0x20); // PLL loop control
 527   2          WriteTW88(REG1C9,0x00); // Pre-coast = 0
 528   2          WriteTW88(REG1CA,0x00); // Post-coast = 0
 529   2          WriteTW88(REG1CB,0x56); // Power up PLL
 530   2          WriteTW88(REG1CC,0x12); // ==> Sync selection
 531   2      
 532   2          WriteTW88(REG1D0,0x00); // ADC gain
 533   2          WriteTW88(REG1D1,0xF0); // 
 534   2          WriteTW88(REG1D2,0xF0); // 
 535   2          WriteTW88(REG1D3,0xF0); // 
 536   2      
 537   2          WriteTW88(REG1D4,0x20); // clamp mode
 538   2          WriteTW88(REG1D5,0x00); // clamp start
 539   2          WriteTW88(REG1D6,0x10); // clamp stop
 540   2          WriteTW88(REG1D7,0x00); // clamp pos.
 541   2          WriteTW88(REG1D9,0x02); // clamp G/Y level
 542   2          WriteTW88(REG1DA,0x01); // clamp B/U level
 543   2          WriteTW88(REG1DB,0x01); // clamp R/V level
 544   2          WriteTW88(REG1DC,0x10); // HS width
 545   2      
 546   2          WriteTW88(REG1E2,0x59); //***  0x59
 547   2          WriteTW88(REG1E3,0x17); //***  0x37
 548   2          WriteTW88(REG1E4,0x34); //***  0x55
 549   2          WriteTW88(REG1E5,0x33); //***  0x55
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 10  

 550   2      
 551   2          WriteTW88(REG1E6,0x20); // PGA high speed
 552   2      
 553   2          //set default divider(1056, for SVGA) & phase. 
 554   2          aRGB_LLPLLSetDivider(0x0420, 1);  
 555   2          rvalue=GetPhaseEE(5); //SVGA.
 556   2          if(rvalue==0xff)
 557   2            rvalue=0;
 558   2          aRGB_SetPhase(rvalue, 0); //VGA
 559   2      
 560   2          aRGB_setSignalPath(1); //add 130207
 561   2      #endif
 562   2        }
 563   1        else {
 564   2          //power down SOG,PLL,Coast
 565   2          //same as aRGB_SetPowerDown();  
 566   2          WriteTW88(REG1CB, (ReadTW88(REG1CB) & 0x1F));
 567   2          aRGBSetClockSource(1);      //select 27MHz. R1C0[0]
 568   2        } 
 569   1      }
 570          
 571          
 572          
 573          
 574          //-----------------------------------------------------------------------------
 575          //R1D0
 576          //R1D1 Y channel gain
 577          //R1D2 C channel gain
 578          //R1D3 V channel gain
 579          //read RGB max value from meas and adjust color gain value on VAdc.
 580          //-----------------------------------------------------------------------------
 581          
 582          #if defined(SUPPORT_COMPONENT) || defined(SUPPORT_PC)
 583          //-----------------------------------------------------------------------------
 584          //extern BYTE WaitStableLLPLL(WORD delay);
 585          //BYTE aRGB_SetupLLPLL(WORD divider, /*BYTE ctrl,*/ BYTE fInit, BYTE delay)
 586          //-----------------------------------------------------------------------------
 587          /**
 588          * update LLPLL divider
 589          *
 590          */
 591          BYTE aRGB_LLPLLUpdateDivider(WORD divider, BYTE fInit, BYTE delay)
 592          {
 593   1        BYTE ret;
 594   1        
 595   1        ret = ERR_SUCCESS;
 596   1        
 597   1        aRGB_SetFilterBandwidth(0, 0);  //clear filter bandwidth
 598   1      
 599   1        aRGB_LLPLLSetDivider(divider, fInit);
 600   1        if(fInit) {
 601   2          delay1ms(delay);
 602   2          if(WaitStableLLPLL())
 603   2            ret = ERR_FAIL;
 604   2        }
 605   1        aRGB_SetFilterBandwidth(7, 0);  //restore
 606   1        
 607   1        return ret;
 608   1      }
 609          #endif
 610          
 611          
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 11  

 612          #if defined(SUPPORT_COMPONENT) || defined(SUPPORT_PC)
 613          //-----------------------------------------------------------------------------
 614          /**
 615          * wait stable LLPLL input.
 616          *
 617          * @return
 618          * 0:success. ERR_SUCCESS.
 619          * 1:fail. ERR_FAIL
 620          */
 621          static BYTE WaitStableLLPLL(void)
 622          {
 623   1        BYTE  i;
 624   1        WORD  HActive, HActiveOld, HStart;
 625   1        volatile BYTE status;
 626   1        BYTE StatusOld;
 627   1      
 628   1        //if(delay)
 629   1        //  delay1ms(delay);
 630   1      
 631   1        argb_dPrintf("WaitStableLLPLL: ");
 632   1        for(i=0; i < 128; i++) {  //max loop
 633   2          Meas_StartMeasure();
 634   2          if(Meas_IsMeasureDone(50)) {
 635   3            argb_dPrintf("fail measure\n");
 636   3            return ERR_FAIL;
 637   3          }
 638   2          HActive = MeasGetHActive( &HStart );
 639   2          status = aRGB_GetInputStatus();
 640   2          if(i==0) {
 641   3            //skip. 
 642   3            //I will update StatusOld and HActiveOld.
 643   3          }
 644   2          else if((HActive==HActiveOld) && (status == StatusOld)) {
 645   3            argb_dPrintf("%bd times, HStart:%d, HActive:%d InputStatus:0x%bx\n", i, HStart, HActive, status);
 646   3            return ERR_SUCCESS;
 647   3          }
 648   2          HActiveOld = HActive;
 649   2          StatusOld = status;
 650   2        }
 651   1        argb_dPrintf("fail max loop\n");
 652   1        return ERR_FAIL;
 653   1      }
 654          #endif
 655          
 656          
 657          #if defined(SUPPORT_PC) || defined(SUPPORT_DVI) || defined(SUPPORT_HDMI)
 658          //-----------------------------------------------------------------------------
 659          /** 
 660          * adjust the pixel clock
 661          *
 662          * oldname: void PCLKAdjust( BYTE mode )
 663          *
 664          * INPUT_PC
 665          * use mode.
 666          *
 667          * INPUT_DVI
 668          * skip divider & mode.
 669          *
 670          * INPUT_HDMI
 671          * use divider.
 672          */
 673          #ifdef SUPPORT_ARGB
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 12  

 674          void AdjustPixelClk(WORD digital_divider, BYTE mode )
 675          {
 676   1      #if defined(PANEL_AUO_B133EW01) || defined(PANEL_1024X600)
                //do nothing
                WORD wTemp;
                wTemp = digital_divider;
                wTemp = mode;
              #else
 682   1        DWORD PCLK, PCLK1, PCLK2; 
 683   1        BYTE  i, PCLKO;
 684   1        WORD  HDown, /*HPeriod,*/  Divider, VPN, VScale, HActive, H_DE;
 685   1        DWORD /*VPeriod,*/ VFreq;
 686   1      
 687   1      
 688   1        PCLK = Sspll2GetFreq();
 689   1        //  FPCLK1 calculation
 690   1        //  FREQ = REG(0x0f8[3:0],0x0f9[7:0],0x0fa[7:0])                                  
 691   1        //  POST = REG(0x0fd[7:6])
 692   1        //  Hperiod = REG(0x524[7:0],0x525[7:0])
 693   1        //  Divider = REG(0x1c3[3:0],0x1c4[7:0]) ;;InFreq = (Divider+1) * (27000000 * FREQ / ((2^15)*(2^POST))) / 
             -Hperiod
 694   1        //  Hdown = REG(0x20a[3:0],0x209[7:0])
 695   1        //  PCLKO = REG(0x20d[1:0]) {1,1,2,3}
 696   1        //  PCLKx = REG(0x20d[1:0]) {1,2,3,4}
 697   1        //  result = ((Divider+1) * (27000000 * FREQ / ((2^15)*(2^POST))) / Hperiod) * (1024 / Hdown) * (PCLKx / P
             -CLKO)
 698   1        //  result = ((Divider+1) * FPCLK / Hperiod) * (1024 / Hdown) * (PCLKx / PCLKO)
 699   1      
 700   1        HDown=ScalerReadXDownReg();
 701   1        //HPeriod = MeasGetHPeriodReg();
 702   1        //VPeriod = MeasGetVPeriod27();
 703   1        //VFreq = 27000000L / VPeriod;
 704   1        VFreq = MeasGetVFreq();
 705   1      #if defined(SUPPORT_PC)
 706   1        if(InputMain==INPUT_PC /*|| InputMain==INPUT_COMP*/) {
 707   2          Divider = aRGB_LLPLLGetDivider() + 1;
 708   2          //Divider = PCMDATA[ mode ].htotal - 1 +1;
 709   2        }
 710   1        else 
 711   1      #endif
 712   1        {
 713   2          //DTV input(DVI,HDMI)
 714   2      #ifdef SUPPORT_DVI
                  //if DVI ??. No Component
                  if(InputMain==INPUT_DVI) {
                    Divider = MeasGetDviDivider();
                  }
                  else 
              #endif
 721   2          {
 722   3            //HDMI
 723   3            Divider = digital_divider; //DVI_Divider;
 724   3          }
 725   2        }
 726   1      
 727   1        VPN = MeasGetVPeriod();
 728   1        VScale = ScalerReadVScaleReg();
 729   1      
 730   1        H_DE = ScalerReadHDEReg();
 731   1        HActive = ScalerReadOutputWidth();
 732   1        //  FPCLK2 calculation
 733   1        //  PCLKx = REG(0x20d[1:0]) {1,2,3,4}
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 13  

 734   1        //  VPN    = REG(0x522[7:0],0x523[7:0])
 735   1        //  Vscale = REG(0x206[7:0],0x205[7:0]) ;;Vtotal = VPN / (Vscale / 8192)
 736   1        //  H_DE   = REG(0x210[7:0])
 737   1        //  Hactive= REG(0x212[3:0],0x211[7:0]) ;;Htotal = H_DE + Hactive + 10
 738   1        //  Vperiod = REG(0x543[7:0],0x544[7:0],0x545[7:0]) ;;Vfreq = 27000000 / Vperiod
 739   1        //  result = (H_DE + Hactive + 1) * (VPN / (Vscale / 8192)) * (27000000 / Vperiod) * PCLKx
 740   1      
 741   1        //dPrintf("\n\rPCLK:%ld, Divider: %d, HPeriod: %d, HDown: %d", PCLK, Divider, HPeriod, HDown);
 742   1        dPrintf("PCLK:%ld, Divider: %d,  HDown: %d\n", PCLK, Divider, HDown);
 743   1        if(InputMain==INPUT_PC) {
 744   2          for ( i=2; i<=4; i++ ) {
 745   3            //PCLK1 = (DWORD)(((Divider+1) * PCLK / HPeriod) * (1024 / HDown) * i ) / (i-1);
 746   3            /*
 747   3            PCLK1 = PCLK / HPeriod;
 748   3            dPrintf("\n\r PCLK1 = PCLK / HPeriod :: %ld", PCLK1 );
 749   3            PCLK1 *= (Divider+1);
 750   3            dPrintf("\n\r PCLK1 *= (Divider+1) :: %ld", PCLK1 );
 751   3            PCLK1 /= HDown;
 752   3            dPrintf("\n\r PCLK1 /= HDown :: %ld", PCLK1 );
 753   3            PCLK1 *= 1024;
 754   3            dPrintf("\n\r PCLK1 *= 1024 :: %ld", PCLK1 );
 755   3            PCLK1 = (PCLK1 * i) / (i-1);
 756   3            */
 757   3            PCLK1 = ((((Divider+1) * VFreq * VPN ) / HDown) * 1024 * i ) / (i-1);
 758   3            PCLK2 = (DWORD)( H_DE + HActive + 1 ) * ( VPN * 8192L* VFreq * i / VScale ) ;
 759   3            /*
 760   3            pclk1 = hPeriod * vPeriod * vfreq * (1024 / h_down) * (i / (i-1))
 761   3                  = input_pclk * (1024/h_down) * (i/(i-1))
 762   3            pclk2 = (hDE+PANEL_H + 1) * vPeriod * (8192/vScale) * vFreq * i
 763   3                  = min_output_h_total * output_vTotal * vFreq * i
 764   3                = min_output_pclk *i
 765   3            */
 766   3            dPrintf("[%bd] - PCLK1: %ld, PCLK2: %ld\n", i, PCLK1, PCLK2);
 767   3            if ( i == 2 ) {
 768   4              PCLKO = 2;
 769   4              if ( PCLK1 > PCLK2 ) {
 770   5                PCLK = PCLK1;
 771   5              }
 772   4              else {
 773   5                PCLK = PCLK2;
 774   5              }
 775   4            }
 776   3            else {
 777   4              if ( PCLK1 > PCLK2 ) {
 778   5                if ( PCLK > PCLK1 ) {
 779   6                  PCLK = PCLK1;
 780   6                  PCLKO = i;
 781   6                }
 782   5              }
 783   4              else {
 784   5                if ( PCLK > PCLK2 ) {
 785   6                  PCLK = PCLK2;
 786   6                  PCLKO = i;
 787   6                }
 788   5              }
 789   4            }
 790   3          }
 791   2          PclkoSetDiv(PCLKO-1);
 792   2          if(mode>=5 && mode <= 8)  //640x480@60 
 793   2            PclkoSetPolarity(0);  //normal
 794   2          else
 795   2            PclkoSetPolarity(1);  //invert
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 14  

 796   2      
 797   2      
 798   2          dPrintf("Minimum PCLK is %ld at PCLKO: %bd", PCLK, PCLKO );
 799   2          PCLK = PCLK + 4000000L;
 800   2          dPrintf("  Add 2MHz to PCLK is %ld\n", PCLK );
 801   2        
 802   2          Sspll2SetFreq(PCLK, 0);   
 803   2        }
 804   1        else {
 805   2          //DVI & HDMI
 806   2          i = 3;
 807   2          {
 808   3            PCLK1 = ((((Divider+1) * VFreq * VPN ) / HDown) * 1024 * i ) / (i-1);
 809   3            PCLK2 = (DWORD)( H_DE + HActive + 1 ) * ( VPN * 8192L* VFreq * i / VScale ) ;
 810   3            dPrintf("[%bd] - PCLK1: %ld, PCLK2: %ld\n", i, PCLK1, PCLK2);
 811   3            if ( PCLK1 > PCLK2 ) {
 812   4              PCLK = PCLK1;
 813   4            }
 814   3            else {
 815   4              PCLK = PCLK2;
 816   4            }
 817   3            PCLK += 5000000L;
 818   3            if ( PCLK < 108000000L )  
 819   3              PCLK = 108000000L;
 820   3            else if ( PCLK > 120000000L )
 821   3              PCLK = 120000000L;
 822   3          }
 823   2          dPrintf("  Found PCLK is %ld\n", PCLK, PCLKO );
 824   2          Sspll2SetFreq(PCLK, 0); 
 825   2        }
 826   1      #endif //..PANEL_AUO_B133EW01
 827   1      }
 828          #endif
 829          #endif
 830          
 831          
 832          #if 0 //only for test
              code BYTE div2_table[5] = { 2,3,4,6,8 };
              //BKFYI: PANEL_AUO_B133EW01 needs high speed sspll for SPI OSD.
              //       we can use this method.
              //       But, the other will be working.
              void AdjustPixelClk_TEST(DWORD hPeriod)
              {
                DWORD sspll;
                WORD hDownScale;
                BYTE vfreq;
                WORD vPeriod, vScale;
                BYTE i;
                DWORD output_pclk;
                DWORD target_hPeriod;
                DWORD output_vPeriod;
                BYTE start,suggest,stop;
              
              
                sspll = Sspll1GetFreq();
                hDownScale=ScalerReadXDownReg();
                vfreq = MeasGetVFreq();
                //hPeriod = 
                vPeriod = MeasGetVPeriod();
                vScale = ScalerReadVScaleReg();
              
                //Output_hDE = ScalerReadHDEReg();
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 15  

                //Output_hActive = ScalerReadOutputWidth();
              //  output_min_hPeriod = ScalerReadHDEReg() +  PANEL_H + 1;
                output_vPeriod = (DWORD)vPeriod * 8192 / vScale;    //it is a fixed value.
              
              //  input_pclk = hPeriod * vPeriod * vfreq * 1024 / hDownScale;
              //  output_pclk = min_output_hPeriod * output_vPeriod * vfreq;
              
                //output_hPeriod
              
                start = 0;
                suggest = 0;
                stop = 0;
                //We have a panel spec that indicate min, max value for panel
                for(i= PANEL_PCLK_MIN; i <= PANEL_PCLK_MAX; i++) {
                  output_pclk = (DWORD)i * 1000000; //make MHz. *0xF4240
                  target_hPeriod = output_pclk / output_vPeriod / vfreq;
                  Printf("\n\ri:%bd hPeriod:%ld",i,target_hPeriod);
                  if(PANEL_H_MIN && start==0) {
                    if(target_hPeriod > PANEL_H_MIN) {
                      Printf(" --> start");
                      start=i;
                    }
                  }
                  if(suggest==0) {
                    if(target_hPeriod > PANEL_H_TYP) {
                      Printf(" --> suggest. I want to use big#");
                      suggest = i;
                    }
                  }
                  if(PANEL_H_MAX && stop == 0) {
                    if(target_hPeriod > PANEL_H_MAX) {
                      Printf(" --> stop. do not use it");
                      stop=i;
                      break;
                    }
                  }
                }
                if(start==0) {
                  Printf("\n\rNo start. Use SSPLL:%bd PCLKO:%bd", PANEL_SSPLL, PANEL_PCLKO_DIV);
                  return; //fail
                }
                if(suggest==0) {
                  suggest = PANEL_PCLK_MAX;   
                }
                //find divider & sspll. 
                i = 5;
                do {
                  i--;
                  sspll = suggest * div2_table[i];
                  sspll >>= 1;
                  Printf("\n\ri:%bd sspll:%ld",i,sspll);
              
                  if(sspll < 130) {   
                    if(sspll > 80) {
                      Printf(" --> use it. div%bd.%bd", div2_table[i] >> 1, div2_table[i] & 1 ? 5: 0);        
                    }
                  }
                } while(i);
              }
              #endif
 918          
 919          //=============================================================================
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 16  

 920          //setup menu interface
 921          //=============================================================================
 922          #ifdef SUPPORT_PC
 923          //-----------------------------------------------------------------------------
 924          /**
 925          *
 926          * extern
 927          * RGB_hStart
 928          */
 929          void PCRestoreH(void)
 930          {
 931   1        WORD hstart;
 932   1        hstart = RGB_hStart;
 933   1      
 934   1        if(Input_aRGBMode==0) {
 935   2          //?Freerun mode
 936   2          return;
 937   2        }
 938   1        //adjust EEPROM. 0..100. base 50. reversed value.
 939   1        hstart += 50;
 940   1        hstart -= GetHActiveEE(Input_aRGBMode); //PcBasePosH;
 941   1        InputSetHStart(hstart);
 942   1      }
 943          //-----------------------------------------------------------------------------
 944          /**
 945          *
 946          * extern
 947          * RGB_vDE
 948          */
 949          void PCRestoreV(void)
 950          {
 951   1        WORD temp16;
 952   1        temp16 = RGB_vDE;
 953   1        dPrintf("\n\r\tV-DE start = %d", temp16);
 954   1      
 955   1        if(Input_aRGBMode==0) {
 956   2          //?Freerun mode
 957   2          return;
 958   2        }
 959   1      
 960   1        temp16 += GetVBackPorchEE(Input_aRGBMode);
 961   1        temp16 -= 50;
 962   1        dPrintf("=> %d", temp16);
 963   1        ScalerWriteVDEReg((BYTE)temp16);
 964   1      //BKTODO131011: use void ScalerSet_vDE_value(BYTE vStart)
 965   1      }
 966          //-----------------------------------------------------------------------------
 967          /**
 968          *
 969          * extern
 970          * Input_aRGBMode
 971          */
 972          void PCResetCurrEEPROMMode(void)
 973          {
 974   1        BYTE temp;
 975   1        temp = GetPixelClkEE(Input_aRGBMode);
 976   1        if(temp!=50)
 977   1          SavePixelClkEE(Input_aRGBMode,50);
 978   1      
 979   1        temp = GetPhaseEE(Input_aRGBMode);
 980   1        if(temp != 0xFF)
 981   1          SavePhaseEE(Input_aRGBMode,0xFF); 
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 17  

 982   1      
 983   1        temp = GetHActiveEE(Input_aRGBMode);
 984   1        if(temp!=50)
 985   1          SaveHActiveEE(Input_aRGBMode,50);
 986   1      
 987   1        temp = GetVBackPorchEE(Input_aRGBMode);
 988   1        if(temp!=50)
 989   1          SaveVBackPorchEE(Input_aRGBMode,50);  
 990   1      
 991   1        //BK131025 ?? Where is VActive? No one uses it.
 992   1        //char GetVActiveEE(BYTE mode)
 993   1        //void SaveVActiveEE(BYTE mode, char value)
 994   1      }
 995          #endif
 996          
 997          
 998          
 999          //=============================================================================
1000          // Change to COMPONENT (YPBPR)
1001          //=============================================================================
1002          
1003          
1004          #ifdef SUPPORT_COMPONENT
1005          
1006          
1007          //-----------------------------------------------------------------------------
1008          /**
1009          * find component input mode
1010          *
1011          * @return
1012          * 0xFF: fail.
1013          * other:success. component mode value.
1014          *
1015          * 0:480i
1016          * 1:576i@50
1017          * 2:480p
1018          * 3:576p@50
1019          * 4:1080i@50
1020          * 5:1080i
1021          * 6:720p@50
1022          * 7:720p
1023          * 8:1080p@50
1024          *   9:1080p
1025          *
1026          */
1027          static BYTE FindInputModeCOMP( void )
1028          {
1029   1        WORD  vtotal;
1030   1        BYTE  vfreq, i;
1031   1        WORD wTemp;
1032   1      
1033   1        //
1034   1        // get a vertical frequency and  a vertical total scan lines.
1035   1        //
1036   1        //BKFYI. We donot have a PLL value yet that depend on the mode.
1037   1        //so, we better use 27MHz register.
1038   1      
1039   1        vtotal = MeasGetVPeriod();  //Vertical Period Registers
1040   1      
1041   1        //if video signal starts, HW needs a time.
1042   1        //normally 30mS.
1043   1        for(i=0; i < 10; i++) {
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 18  

1044   2          Meas_StartMeasure();
1045   2          Meas_IsMeasureDone(50);
1046   2          wTemp = MeasGetVPeriod(); //Vertical Period Registers 
1047   2          if(wTemp == vtotal)
1048   2            break;
1049   2          vtotal = wTemp;
1050   2          delay1ms(5);
1051   2        }
1052   1        vfreq = MeasGetVFreq();
1053   1        if ( vfreq < 55 ) vfreq = 50;
1054   1        else  vfreq = 60;
1055   1      
1056   1        if ( vfreq == 50 ) {
1057   2          if ( vtotal < 200)      i = 0xFF;
1058   2          else if ( vtotal < 320 )  i = MEAS_COMP_MODE_576I;  // 576i  = 625 for 2, 312.5
1059   2          else if ( vtotal < 590 )  i = MEAS_COMP_MODE_1080I25; // 1080i50A
1060   2          else if ( vtotal < 630 )  i = MEAS_COMP_MODE_576P;  // 576P=625 or 1080i50B = sync=5    
1061   2                                      // vblank length different 576P=45, 1080i=21
1062   2                                      // can check with even/odd measure
1063   2          else if ( vtotal < 800 )  i = MEAS_COMP_MODE_720P50;  // 720P = 750
1064   2          else if ( vtotal < 1300 ) i = MEAS_COMP_MODE_1080P50; // 1080P = 1250 total from set-top box
1065   2          else            i = 0xFF; 
1066   2        }
1067   1        else {
1068   2          if ( vtotal < 200)      i = 0xFF;
1069   2          else if ( vtotal < 300 )  i = MEAS_COMP_MODE_480I;  // 480i = 525 for 2, 262.5
1070   2          else if ( vtotal < 540 )  i = MEAS_COMP_MODE_480P;  // 480P = 525
1071   2          else if ( vtotal < 600 )  i = MEAS_COMP_MODE_1080I30; // 1080i
1072   2          else if ( vtotal < 800 )  i = MEAS_COMP_MODE_720P60;  // 720P = 750
1073   2          else if ( vtotal < 1300 ) i = MEAS_COMP_MODE_1080P60; // 1080P
1074   2          else            i = 0xFF; 
1075   2        }
1076   1      
1077   1        dPrintf( "\n\rCOMP %bd: vFreq:%bdHz, vTotal:%d", i, vfreq, vtotal );
1078   1        return (i);             // if 0xff, not support
1079   1      }
1080          
1081          //-----------------------------------------------------------------------------
1082          /**
1083          * convert the component mode to HW mode.
1084          *
1085          * SW and HW use a different mode value.
1086          * ISR will check the HW mode value to check the SYNC change.
1087          *
1088          * Or, just read REG1C1[2:0].
1089          */
1090          static BYTE ConvertComponentMode2HW(BYTE mode)
1091          {
1092   1        BYTE new_mode;
1093   1        switch(mode) {
1094   2        case 0: new_mode = mode;  break;  //480i
1095   2        case 1: new_mode = mode;  break;  //576i
1096   2        case 2: new_mode = mode;  break;  //480p
1097   2        case 3: new_mode = mode;  break;  //576p
1098   2        case 4: new_mode = 4;   break;  //1080i25->1080i
1099   2        case 5: new_mode = 4;   break;  //1080i30->1080i
1100   2        case 6: new_mode = 5;   break;  //720p50->720p
1101   2        case 7: new_mode = 5;   break;  //720p60->720p
1102   2        case 8: new_mode = 6;     break;  //1080p50->1080p
1103   2        case 9: new_mode = 6;   break;  //1080p60->1080p
1104   2        default: new_mode = 7;    break;  //UNKNOWN->non of above
1105   2        }
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 19  

1106   1        return new_mode;
1107   1      }
1108          //BYTE ConvertComponentMode2SW(BYTE mode)
1109          //{
1110          //  BYTE new_mode;
1111          //  switch(mode) {
1112          //  case 0: new_mode = mode;  break;  //480i
1113          //  case 1: new_mode = mode;  break;  //576i
1114          //  case 2: new_mode = mode;  break;  //480p
1115          //  case 3: new_mode = mode;  break;  //576p
1116          //  case 4: new_mode = 5;       break;  //1080i->1080i30
1117          //  case 5: new_mode = 7;   break;  //720p->720p60
1118          //  case 6: new_mode = 9;   break;  //1080p->1080p60
1119          //  default: new_mode = 2;    break;  //unknown->480p
1120          //  }
1121          //  return new_mode;
1122          //}
1123          
1124          
1125          /**
1126           *
1127           * param fOverScan : turn on overscan feature.
1128           *
1129           */
1130          //#if 0
1131          //void aRGB_COMP_set_scaler(BYTE mode, BYTE fBT656, BYTE fOverScan)
1132          //{
1133          //  //BYTE  i,j;
1134          //  //BYTE  mode, modeNew;
1135          //  //BYTE ret;
1136          //
1137          //  BYTE bTemp;
1138          //  WORD wTemp;
1139          //  WORD hStart,vStart;
1140          //  WORD hActive,vActive;
1141          //  struct COMP_VIDEO_TIME_TABLE_s *pTimeTable;
1142          //
1143          //  pTimeTable = &TW8836_COMP_TABLE[mode];
1144          //
1145          //  Printf("\n\raRGB_COMP_set_scaler(%bd,%bd)",mode,fOverScan);
1146          //  Printf(" %dx%d%s@%bd", pTimeTable->hActive, pTimeTable->vActive, pTimeTable->pol & INTERLACED ? "I":"P"
             -, pTimeTable->vFreq);
1147          //
1148          //  hStart  = pTimeTable->hStart;
1149          //  hActive = pTimeTable->hActive;
1150          //  vStart  = pTimeTable->vBPorch + pTimeTable->vSync;
1151          //  vActive = pTimeTable->vActive;
1152          //  if(fOverScan) {
1153          //    hStart  += pTimeTable->hOverScan;
1154          //    hActive -= pTimeTable->hOverScan*2;
1155          //    vStart  += pTimeTable->vOverScan;
1156          //    vActive -= pTimeTable->vOverScan*2;
1157          //  }
1158          //  if(fBT656) {
1159          //    hStart += 57;
1160          //
1161          //    hActive += 8;
1162          //    hActive *= 2;
1163          //  }     
1164          //  
1165          //  InputSetCrop(hStart, vStart, hActive, vActive); 
1166          //  if(mode==MEAS_COMP_MODE_480I 
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 20  

1167          //  || mode==MEAS_COMP_MODE_576I 
1168          //  || mode==MEAS_COMP_MODE_720P60)
1169          //    InputSetFieldPolarity(0);
1170          //  else
1171          //    InputSetFieldPolarity(1);
1172          //
1173          //  //if(pTimeTable->pol & INTERLACED)
1174          //  //  WriteTW88(REG041, ReadTW88(REG041) & ~0x20);
1175          //  InputSetProgressiveField(pTimeTable->pol & INTERLACED ? 0 : 1)
1176          //  if(fBT656)
1177          //    hActive /= 2;
1178          //
1179          //  ScalerSetHScale(hActive);
1180          //  ScalerSetVScale(vActive);
1181          //
1182          //  //hDE
1183          //  bTemp = ScalerCalcHDE();  //ScalerReadLineBufferDelay() + 32;
1184          //  ScalerWriteHDEReg(bTemp);
1185          //  //vDE
1186          //  wTemp = (DWORD)vStart * PANEL_V / vActive;
1187          //  ScalerWriteVDEReg(wTemp);
1188          ////BKTODO131011: use void ScalerSet_vDE_value(BYTE vStart)
1189          //
1190          //  //temp for BT656....
1191          //  ScalerSetLineBufferSize(hActive);
1192          //}
1193          //#endif
1194          
1195          
1196          /**
1197          * prepare Info String for Component.
1198          * ex: "Component 1080p 60Hz".
1199          */
1200          static void YUV_PrepareInfoString(BYTE mode)
1201          {
1202   1        FOsdSetInputMainString2FOsdMsgBuff();                     
1203   1        TWstrcat(FOsdMsgBuff," ");
1204   1        switch(mode) {
1205   2        case 0: TWstrcat(FOsdMsgBuff,"480i"); break;
1206   2        case 1: TWstrcat(FOsdMsgBuff,"576i"); break;
1207   2        case 2: TWstrcat(FOsdMsgBuff,"480p"); break;
1208   2        case 3: TWstrcat(FOsdMsgBuff,"576p"); break;
1209   2        case 4: TWstrcat(FOsdMsgBuff,"1080i 50Hz"); break;
1210   2        case 5: TWstrcat(FOsdMsgBuff,"1080i 60Hz"); break;
1211   2        case 6: TWstrcat(FOsdMsgBuff,"720p 50Hz");  break;
1212   2        case 7: TWstrcat(FOsdMsgBuff,"720p 60Hz");  break;
1213   2        case 8: TWstrcat(FOsdMsgBuff,"1080p 50Hz"); break;
1214   2        case 9: TWstrcat(FOsdMsgBuff,"1080p 60Hz"); break;
1215   2        default:TWstrcat(FOsdMsgBuff,"Unknown");  break;
1216   2        }
1217   1      }
1218          
1219          //-----------------------------------------------------------------------------
1220          /**
1221          * check and set the componnent
1222          *
1223          * oldname: BYTE CheckAndSetYPBPR( void )
1224          * @return
1225          * success :ERR_SUCCESS
1226          * fail  :ERR_FAIL
1227          */
1228          BYTE CheckAndSetComponent( void )
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 21  

1229          {
1230   1        BYTE  i,j;
1231   1        BYTE  mode, modeNew;
1232   1        BYTE ret;
1233   1      
1234   1        BYTE bTemp;
1235   1        WORD hStart,vStart;
1236   1        WORD hActive,vActive;
1237   1        BYTE fScale;
1238   1      
1239   1        struct COMP_VIDEO_TIME_TABLE_s *pTimeTable;
1240   1        struct SCALER_TIME_TABLE_s *pScaler;
1241   1      
1242   1        /*search component video mode by vFreq and vTotal.*/
1243   1        Input_aRGBMode = 0;
1244   1        for(i=0; i < 10; i++) {
1245   2          for(j=0; j < 10; j++) {
1246   3            Meas_StartMeasure();
1247   3            if(Meas_IsMeasureDone(50)) {
1248   4              return ERR_FAIL;
1249   4            }
1250   3            /* find input mode from Vfreq and VPeriod */
1251   3            mode = FindInputModeCOMP(); 
1252   3            if(mode != 0xFF)
1253   3              break;
1254   3          } 
1255   2          if(mode==0xFF) {
1256   3            return ERR_FAIL;
1257   3          }
1258   2      
1259   2          pTimeTable = &TW8836_COMP_TABLE[mode];
1260   2      
1261   2          aRGB_SetLLPLLControl(0xF2); // POST[7:6]= 3 -> div 1, VCO: 40~216, Charge Pump: 5uA
1262   2          ret = aRGB_LLPLLUpdateDivider(pTimeTable->hTotal - 1, 1, 0 );
1263   2          if(ret==ERR_FAIL) {
1264   3            return ERR_FAIL;
1265   3          }   
1266   2      
1267   2          /* find input mode again and compare it is same or not */
1268   2          modeNew = FindInputModeCOMP();  
1269   2          if(mode==modeNew)
1270   2            break;
1271   2          //retry..
1272   2        }
1273   1        PrintCompVideoTimeTable(pTimeTable);
1274   1      
1275   1        Input_aRGBMode = mode;              //SW value
1276   1        InputSubMode = ConvertComponentMode2HW(mode); //HW value
1277   1      
1278   1        InitComponentReg(mode);
1279   1      
1280   1      
1281   1        aRGB_SetClampModeHSyncEdge(ON);
1282   1        aRGB_SetClampPosition(pTimeTable->ClampPos);
1283   1      
1284   1        MeasSetErrTolerance(4);             //tolerance set to 32
1285   1        MeasEnableChangedDetection(ON);         // set EN. Changed Detection
1286   1      
1287   1        hStart  = pTimeTable->hBPorch;
1288   1        hActive = pTimeTable->hActive;
1289   1        vStart  = pTimeTable->vBPorch + pTimeTable->vSync;
1290   1        vActive = pTimeTable->vActive;
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 22  

1291   1      
1292   1        /* read scale mode. 0:overscan(default), 1:full */
1293   1        fScale = EE_Read(EEP_INPUT_COMP);
1294   1        if(fScale==0) { /*ANALOG_OVERSCAN*/
1295   2          hStart  += pTimeTable->hOverScan;
1296   2          hActive -= pTimeTable->hOverScan*2;
1297   2          vStart  += pTimeTable->vOverScan;
1298   2          vActive -= pTimeTable->vOverScan;
1299   2        }
1300   1        /* set input crop */
1301   1        InputSetCrop(hStart, vStart, hActive+1, vActive+1); 
1302   1      
1303   1        //BKTODO140908..Field & Pclko polarity need more investigation.
1304   1        //              I am using table...
1305   1        if(mode==MEAS_COMP_MODE_480I 
1306   1        || mode==MEAS_COMP_MODE_576I 
1307   1        || mode==MEAS_COMP_MODE_720P60)
1308   1          InputSetFieldPolarity(0);
1309   1        else
1310   1          InputSetFieldPolarity(1);
1311   1        InputSetProgressiveField(pTimeTable->pol & INTERLACED ? 0 : 1);
1312   1       
1313   1        if(fScale==0) /*ANALOG_OVERSCAN*/
1314   1          vActive -= pTimeTable->vOverScan;
1315   1      
1316   1        /* set scaler */
1317   1        ScalerSetHScale(hActive);
1318   1        ScalerSetVScale(vActive);
1319   1        ScalerSet_vDE_value(vStart);
1320   1      
1321   1        //hDE
1322   1        bTemp = ScalerCalcHDE(); //ScalerReadLineBufferDelay() + 32;
1323   1        ScalerWriteHDEReg(bTemp);
1324   1      
1325   1      #if 0  //BK150717
                scaler_set_output(hActive,vActive,vStart,0/*pTimeTable->vOffset*/);
              #endif  
1328   1      
1329   1      
1330   1        PclkoSetPolarity(pTimeTable->pclko_pol);  
1331   1      
1332   1      #if defined(PANEL_AUO_B133EW01) || defined(PANEL_1024X600)
                //use a table or 
                AdjustSSPLL_with_HTotal();
              #else
1336   1        Sspll2SetFreqReg(SSPLL_72M_REG);  //72MHz/1/2=36MHz 
1337   1        PclkSetDividerReg(PCLK_DIV1);
1338   1        PclkoSetDiv_with_pol(PCLKO_DIV2);
1339   1      #endif
1340   1      
1341   1        /* search scaler table. If success, overwrite */
1342   1      #ifdef SUPPORT_SCALER_OVERWRITE_TABLE
1343   1        pScaler = FindScalerTable(InputMain, pTimeTable->hActive,pTimeTable->vActive,pTimeTable->vFreq, 0,0);
1344   1        if(pScaler != NULL)
1345   1          OverWriteScalerWithTable(pScaler,1,1);
1346   1      #endif
1347   1      
1348   1        YUV_PrepareInfoString(mode);
1349   1      
1350   1        return ERR_SUCCESS;
1351   1      }
1352          
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 23  

1353          
1354          //-----------------------------------------------------------------------------
1355          /**
1356          * Change to Component
1357          *
1358          * @return
1359          * - 0: success
1360          * - 1: No Update happen
1361          * - 2: No Signal or unknown video sidnal.
1362          */
1363          BYTE ChangeComponent( void )
1364          {
1365   1        BYTE ret;
1366   1      
1367   1        if ( InputMain == INPUT_COMP ) {
1368   2          dPrintf("\n\rSkip ChangeComponent");
1369   2          return(1);
1370   2        }
1371   1          
1372   1        InputMain = INPUT_COMP;
1373   1        InputSubMode = 7; //N/A. Note:7 is a correct value.
1374   1      
1375   1        if(GetInputMainEE() != InputMain)
1376   1          SaveInputMainEE( InputMain );
1377   1      
1378   1        //----------------
1379   1        // initialize video input
1380   1        InitInputAsDefault();
1381   1      
1382   1        //
1383   1        // Check and Set aRGB,mesaure,Scaler for Component input
1384   1        //
1385   1        ret = CheckAndSetComponent();
1386   1        if(ret==ERR_SUCCESS) {
1387   2          //success
1388   2          VInput_enableOutput(0);
1389   2          return 0;
1390   2        }
1391   1        //------------------
1392   1        // NO SIGNAL
1393   1      
1394   1        //start recover & force some test image.
1395   1        VInput_gotoFreerun(0);
1396   1      
1397   1        return(2);  //fail
1398   1      }
1399          #endif
1400          //=============================================================================
1401          // Change to PC
1402          //=============================================================================
1403          
1404          
1405          #ifdef SUPPORT_PC
1406          
1407          //-----------------------------------------------------------------------------
1408          /**
1409          * gain control
1410          *
1411          * register
1412          * R1D0[2]R1D1[7:0]  Y/G channel gain
1413          * R1D0[1]R1D2[7:0]  C/B channel gain
1414          * R1D0[0]R1D3[7:0]  V/R channel gain
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 24  

1415          */
1416          void aRGB_SetChannelGainReg(WORD GainG,WORD GainB,WORD GainR)
1417          {
1418   1        WriteTW88(REG1D1, GainG );
1419   1        WriteTW88(REG1D2, GainB );
1420   1        WriteTW88(REG1D3, GainR );
1421   1        WriteTW88(REG1D0, (GainR >> 8)+ ((GainB >> 7) & 2) + ((GainG >> 6) & 4 ));
1422   1      }
1423          WORD aRGB_ReadGChannelGainReg(void)
1424          {
1425   1        WORD wTemp;
1426   1        wTemp = ReadTW88(REG1D0) & 0x04;
1427   1        wTemp <<= 6;
1428   1        wTemp |= ReadTW88(REG1D1);
1429   1        return wTemp;
1430   1      }
1431          WORD aRGB_ReadBChannelGainReg(void)
1432          {
1433   1        WORD wTemp;
1434   1        wTemp = ReadTW88(REG1D0) & 0x02;
1435   1        wTemp <<= 7;
1436   1        wTemp |= ReadTW88(REG1D2);
1437   1        return wTemp;
1438   1      }
1439          WORD aRGB_ReadRChannelGainReg(void)
1440          {
1441   1        WORD wTemp;
1442   1        wTemp = ReadTW88(REG1D0) & 0x01;
1443   1        wTemp <<= 8;
1444   1        wTemp |= ReadTW88(REG1D3);
1445   1        return wTemp;
1446   1      }
1447          
1448          /**
1449          * get a vertical frequency and  a vertical total scan lines.
1450          *
1451          */
1452          static void get_vTotal_vFreq(WORD *p_vTotal, BYTE *p_vFreq)
1453          {
1454   1        WORD vTotal, wTemp;
1455   1        BYTE vFreq;
1456   1        BYTE i;
1457   1      
1458   1        vTotal = MeasGetVPeriod();
1459   1        for(i=0; i < 10; i++) {
1460   2          Meas_StartMeasure();
1461   2          Meas_IsMeasureDone(50);
1462   2          wTemp = MeasGetVPeriod(); //Vertical Period Registers 
1463   2          if(wTemp == vTotal)
1464   2            break;
1465   2          vTotal = wTemp;
1466   2        }
1467   1        *p_vTotal = vTotal;
1468   1        vFreq = MeasGetVFreq();
1469   1        *p_vFreq = MeasRoundDownVFreqValue(vFreq);
1470   1      }
1471          
1472          
1473          //-----------------------------------------------------------------------------
1474          /**
1475          * find PC input mode
1476          *
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 25  

1477          * @return
1478          * 0xFF: fail
1479          * else: success.
1480          *     index number of PC Mode Data Table.
1481          */
1482          static BYTE FindInputModePC(BYTE start, WORD *vt)
1483          {
1484   1        WORD  vtotal;
1485   1        //WORD  wTemp;
1486   1        BYTE  vFreq, i;
1487   1        struct DIGIT_VIDEO_TIME_TABLE_s *pTimeTable;
1488   1        start++;  //start from next mode.
1489   1      
1490   1        //
1491   1        // get a vertical frequency and  a vertical total scan lines.
1492   1        //
1493   1        //We donot have a PLL value yet that depend on the mode.
1494   1        //so, we are using 27MHz register.
1495   1      #if 0
                vtotal = MeasGetVPeriod();  //Vertical Period Registers
                //if video signal starts, HW needs a time.
                //normally ?? mS.  I saw, Compment needs 30mS.
                for(i=0; i < 10; i++) {
                  Meas_StartMeasure();
                  Meas_IsMeasureDone(50);
                  wTemp = MeasGetVPeriod(); //Vertical Period Registers 
                  if(wTemp == vtotal)
                    break;
                  vtotal = wTemp;
                  delay1ms(5);
                }
                *vt = vtotal;
              
                vFreq = MeasGetVFreq();
                vFreq = MeasRoundDownVFreqValue(vFreq);
              
              #else
1514   1        get_vTotal_vFreq(&vtotal, &vFreq);
1515   1        *vt = vtotal;
1516   1      #endif
1517   1        Printf("\nFindInputModePC search vFreq:%bd vTotal:%d",vFreq,vtotal);
1518   1        //
1519   1        //Search PC mode.
1520   1        //0 is unknown.
1521   1        for (i=start;  ; i++) {
1522   2          pTimeTable = &TW8836_VESA_TABLE[i];
1523   2          if( pTimeTable->hActive ==0 && pTimeTable->vActive ==0)
1524   2            break;
1525   2          if ( pTimeTable->vid == 0 ) //?support
1526   2            continue;
1527   2      
1528   2          if ( pTimeTable->vFreq == vFreq ) {     //check vfreq
1529   3            if(( pTimeTable->vTotal == vtotal )   //check vtotal 
1530   3            || ( pTimeTable->vTotal == (vtotal+1) ) 
1531   3            || ( pTimeTable->vTotal == (vtotal-1) )
1532   3            ){
1533   4              //dPrintf("\n\rFindInputModePC mode:%bd %dx%d@%bd vTotal:%d",
1534   4              //  i,pTimeTable->hActive, pTimeTable->vActive, pTimeTable->vFreq, vtotal);
1535   4              PrintVesaVideoTimeTable(pTimeTable);
1536   4              return (i);
1537   4            }
1538   3          }
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 26  

1539   2        }
1540   1      
1541   1        ePuts( "\n\rCurrent Input resolution IS Not Supported." );
1542   1        ePrintf(" V total: %d, V freq: %bd", vtotal, vFreq );
1543   1        return (0xFF);    // not support
1544   1      }
1545          
1546          
1547          static void PC_SetScaler(BYTE mode)
1548          {
1549   1        WORD hStart, vStart;
1550   1        WORD hActive, vActive;
1551   1        WORD Meas_hActive,Meas_vActive;
1552   1        WORD Meas_hStart,Meas_vStart;
1553   1        BYTE bTemp;
1554   1        WORD wTemp;
1555   1        struct DIGIT_VIDEO_TIME_TABLE_s *pTimeTable;
1556   1      
1557   1        pTimeTable = &TW8836_VESA_TABLE[mode];
1558   1      
1559   1      #if 1 //DEBUG_PC
1560   1        //read measured value. 
1561   1        Meas_vActive = MeasGetVActive( &Meas_vStart );
1562   1        Meas_hActive = MeasGetHActive( &Meas_hStart );
1563   1        PrintMeasValue("PC");
1564   1        PrintVesaVideoTimeTable(pTimeTable);
1565   1      
1566   1        //measure adj
1567   1        //  hStart+4  vStart-1.
1568   1        //  on DTV, it was hStart+4,vStart-1  
1569   1        bTemp = ReadTW88(REG1CC);
1570   1        if((bTemp & 0x0C) == 0x00) {
1571   2          //if use HSO, add +4.
1572   2          //if use HS Pin, it is a correct value
1573   2          Meas_hStart += 4;
1574   2        }
1575   1        Meas_vStart -= 1;   //minus meas delay.
1576   1        PrintMeasAdjValue("PC", Meas_hStart,Meas_vStart);
1577   1      #endif
1578   1      
1579   1        //h is unstable....I will use a table
1580   1        Meas_hStart = pTimeTable->hSync+pTimeTable->hBPorch;
1581   1        Meas_hActive = pTimeTable->hActive;
1582   1        Meas_vStart = pTimeTable->vSync + pTimeTable->vBPorch;
1583   1        Meas_vActive = pTimeTable->vActive;
1584   1        PrintMeasAdjValue("PC table", Meas_hStart,Meas_vStart);
1585   1      
1586   1        //read sync width.
1587   1        //If we use a HSO, HSyncWidth is not real value, it is comes from aRGB.
1588   1        //
1589   1        //meas uses active high sync, and use a rising edge.
1590   1        //if you give a active low sync to meas, we will have a wrong result.
1591   1        //I means, below two function will have a wrong value.
1592   1        //  Meas_HPulse = MeasGetHSyncRiseToFallWidth();
1593   1        //  Meas_VPulse = MeasGetVSyncRiseToFallWidth();
1594   1        //You have to adjust REG1CC[0] and REG1CC[1] to make a active high signal.
1595   1        //If you use a falling edge in inputcrop, you have to remove SyncWidth.
1596   1        //
1597   1      
1598   1        //read Scaler input polarity.
1599   1        //0:rising edge, 1:falling edge.
1600   1      #if 1 //DEBUG_PC
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 27  

1601   1        bTemp = ReadTW88(REG041);
1602   1        if(bTemp & 0xC0) 
1603   1          Printf("\nBUG..Use rising edge with ActiveHigh..");
1604   1      #endif
1605   1      
1606   1        //-------------------------------
1607   1        //scaler adjust
1608   1        //  hStart-2, vStart+1.
1609   1        //  on DTV, it was hStart-1,vStart-1.
1610   1      
1611   1        hStart = Meas_hStart;
1612   1        vStart = Meas_vStart;
1613   1        hActive = Meas_hActive;
1614   1        vActive= Meas_vActive;
1615   1      
1616   1        RGB_hStart = hStart-2;  //save for IE.
1617   1      
1618   1        //adjust EEPROM value. [0..100] base 50. reversed value.
1619   1        bTemp = GetHActiveEE(mode);
1620   1        if(bTemp != 0 && bTemp != 50) {
1621   2          hStart += 50;
1622   2          hStart -= bTemp;
1623   2          dPrintf("\n\r\tModified HS:%d->%d, VS:%d", RGB_hStart, hStart, vStart );
1624   2        }
1625   1        Printf("\n\rPC Crop %d+2 hCropStart:%d-2",hActive, hStart);
1626   1        Printf("\n\r        %d+2 vCropStart:%d+1",vActive, vStart);
1627   1      
1628   1        InputSetCrop(hStart-2, vStart+1, hActive+2, vActive+2);
1629   1        //PrintScalerInputCrop("PC",
1630   1      
1631   1        ScalerSetVScale(vActive);
1632   1        ScalerSetHScale(hActive);
1633   1      
1634   1        //=============VDE=====================
1635   1        wTemp = ScalerCalcVDE2(vStart, pTimeTable->vOffset);   
1636   1        dPrintf("\n\r\tV-DE start = %d", wTemp);
1637   1      
1638   1        RGB_vDE = wTemp;  //save for IE.  
1639   1        //adjust EEPROM value. [0..100] base 50.
1640   1        bTemp = GetVBackPorchEE(mode);
1641   1        if(bTemp != 0 && bTemp != 50) {
1642   2          wTemp += bTemp;
1643   2          wTemp -= 50;
1644   2          dPrintf("=> %d", wTemp);
1645   2        }
1646   1        ScalerWriteVDEReg(wTemp);
1647   1      
1648   1        //=============HDE=====================
1649   1        wTemp = ScalerCalcHDE();
1650   1        dPrintf("\n\r\tH-DE start = %d", wTemp);
1651   1        ScalerWriteHDEReg(wTemp);
1652   1      
1653   1      #if 0  //BK150717
                scaler_set_output(hActive,vActive,vStart,pTimeTable->vOffset);
              #endif  
1656   1      
1657   1      
1658   1        //FYI.
1659   1        //ScalerSetFreerun will be updated at VInput_enableOutput().
1660   1      
1661   1        PclkoSetPolarity(0 /*pTimeTable->pclko_pol*/); //let's do it on scaler table
1662   1      }
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 28  

1663          
1664          /**
1665          * prepare Info String for PC.
1666          * ex: "PC 1024x768 60Hz"
1667          */
1668          static void PC_PrepareInfoString(BYTE mode)
1669          {
1670   1        struct DIGIT_VIDEO_TIME_TABLE_s *pTimeTable;
1671   1        BYTE itoa_buff[5];          
1672   1      
1673   1        pTimeTable = &TW8836_VESA_TABLE[mode];
1674   1        //prepare info. 
1675   1        FOsdSetInputMainString2FOsdMsgBuff();                     
1676   1        TWstrcat(FOsdMsgBuff," ");
1677   1        TWitoa(pTimeTable->hActive, itoa_buff);
1678   1        TWstrcat(FOsdMsgBuff,itoa_buff);
1679   1        TWstrcat(FOsdMsgBuff,"x");
1680   1        TWitoa(pTimeTable->vActive, itoa_buff);
1681   1        TWstrcat(FOsdMsgBuff,itoa_buff);
1682   1        TWstrcat(FOsdMsgBuff," ");
1683   1        TWitoa(pTimeTable->vFreq, itoa_buff);
1684   1        TWstrcat(FOsdMsgBuff,itoa_buff);
1685   1        TWstrcat(FOsdMsgBuff,"Hz");
1686   1      }
1687          
1688          
1689          #undef CHECK_USEDTIME
1690          //-----------------------------------------------------------------------------
1691          /**
1692          * check and set the PC
1693          *
1694          * calls from ChangePC and Interrupt Handler
1695          * @return
1696          * 0:ERR_SUCCESS
1697          * 1:ERR_FAIL
1698          * @see ChangePC
1699          * @see CheckAndSetInput
1700          * @see NoSignalTask
1701          */
1702          #if 0
              BYTE CheckAndSetPC___OLD(void)
              {
                BYTE mode,old_mode;
                BYTE i;
                BYTE bTemp;
              
              #ifdef CHECK_USEDTIME
                DWORD UsedTime;
              #endif
                BYTE value;
                BYTE value1;
                WORD wTemp;
                BYTE ret;
                volatile BYTE InputStatus;
                struct DIGIT_VIDEO_TIME_TABLE_s *pTimeTable;
                struct SCALER_TIME_TABLE_s *pScaler;
              
                WORD hActive,vActive;
                WORD hCropStart,vCropStart;
                BYTE vFreq;
              
              #ifdef CHECK_USEDTIME
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 29  

                  SFRB_ET0=0;
                UsedTime = SystemClock;
                  SFRB_ET0=1;
              #endif
                Input_aRGBMode = 0;
                InputSubMode = Input_aRGBMode;
              
                //check signal. if fail, give up.
                for(i=0; i < 2; i++) {
                  Meas_StartMeasure();
                  ret=Meas_IsMeasureDone(50);
                  if(ret==ERR_SUCCESS)
                    break;
                  delay1ms(10);
                } 
                if(ret) {
                  argb_Printf("\n\rCheckAndSetPC fail 1");
                  return 1;
                }
              
                /*find PC mode.*/
                old_mode = 0;
                while(1) {
                  mode = FindInputModePC(old_mode, &wTemp/*&vTotal*/);
                  if(mode==0xFF) {
                    argb_Printf("\n\rCheckAndSetPC fail 2. No proper mode");
                    return 2;
                  }
              //    if(old_mode == mode)
              //      break;
                  old_mode = mode;
              
                  pTimeTable = &TW8836_VESA_TABLE[mode];
              
                  //
                  //set LLPLL & wait
                  //
                  aRGB_SetLLPLLControl(0xF2); // POST[7:6]= 3 -> div 1, VCO: 40~216, Charge Pump: 5uA
                  ret = aRGB_LLPLLUpdateDivider(pTimeTable->hTotal - 1, 1, 40 );
                  if(ret==ERR_FAIL) {
                    argb_Printf("\n\rCheckAndSetPC fail 3. No stable LLPLL");
                    return 3;
                  }
                  //LLPLL needs a time until it becomes a stable state.
                  //TW8836 needs 110ms delay to get the correct vPol.
                  delay1ms(120);
              
                  //wait a detection flag.
                  for(i=0; i < 50; i++) {
                    InputStatus = ReadTW88(REG1C1);
                    if((InputStatus & 0x30) == 0x30)
                      break;
                    delay1ms(10);
                  }
                  //note. The detected polarity can be incorrect.
                  aRGB_Set_vSyncOutPolarity(1 /*1 means PC */, InputStatus & 0x80); //VSync Polarity
                  aRGB_SetLLPLL_InputPolarity(1 /*1 means PC */, InputStatus & 0x40); //HSync Polarity
              
                  //update Phase.
                  value = GetPhaseEE(mode);
                  if(value == 0xFF) {
                    //No previous data. We need a AutoTunePhase.
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 30  

                    AutoTunePhase();
                    value=aRGB_GetPhase();
                    argb_dPrintf("\n\rAutoTune Phase 0x%bx",value);
                    SavePhaseEE(mode,value);
                  }
                  else {
                    argb_dPrintf("\n\ruse EE Phase 0x%bx",value);
                    //we read first, because update routine can make a shaking.
                    value1=aRGB_GetPhase();
                    if(value != value1) {
                      argb_dPrintf("  update from 0x%bx",value1);
                      aRGB_SetPhase(value, 0);  //BKTODO? Why it does not have a init ?
                    }
                  }
                  ret=WaitStableLLPLL();
                  if(ret) {
                    ePrintf("\n\rWARNING WaitStableLLPLL faile at %d",__LINE__);
                  }
              
                  //adjust polarity again
                  for(i=0; i < 50; i++) {
                    InputStatus = ReadTW88(REG1C1);
                    if((InputStatus & 0x30) == 0x30)
                      break;
                    delay1ms(10);
                  }
                  aRGB_Set_vSyncOutPolarity(1 /*1 means PC */, InputStatus & 0x80);   //VSync Polarity
                  aRGB_SetLLPLL_InputPolarity(1 /*1 means PC */, InputStatus & 0x40); //HSync Polarity
              
              
                  //reflash measure value
                  Meas_StartMeasure();
                  Meas_IsMeasureDone(50);
                }
              
                //check polarity.
                //REG1C1[7:6] and syncpol[7:6] use a same value. 
                InputStatus = ReadTW88(REG1C1);
                if((pTimeTable->pol & 0xC0) != (InputStatus & 0xC0)) {
                  //incorrect polarity.
                  Printf("\n\rmode:%bd hPol %s->%s vPol %s->%s",mode,
                    pTimeTable->pol & HPOL_P ? "P" : "N",
                    InputStatus & HPOL_P   ? "P" : "N",  
                    pTimeTable->pol & VPOL_P ? "P" : "N",
                    InputStatus & VPOL_P   ? "P" : "N");   
              
                }
              
                //final check.
              //#if 0
              //  old_mode = mode;
              //  mode = FindInputModePC(&new_VTotal);
              //  if(old_mode != mode) {
              //    Printf("\n\rWARNING mode curr:%bd new:%bd",old_mode, mode);
              //    mode = old_mode;
              //  }
              //#endif
              //wTemp = aRGB_LLPLLGetDivider();
              //Printf("\n PC%d LLPLL %d-1 read:%d",__LINE__, pTimeTable->hTotal, wTemp);
              
                PC_SetScaler(mode);
              
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 31  

              // wTemp = aRGB_LLPLLGetDivider();
              //Printf("\n PC%d LLPLL %d-1 read:%d",__LINE__, pTimeTable->hTotal, wTemp);
              
                Input_aRGBMode = mode;
                InputSubMode = Input_aRGBMode;
              
              
                //AdjustPixelClk_TEST(pTimeTable->hTotal);
                AdjustPixelClk(0, mode); //BK120117 need a divider value
              
              //wTemp = aRGB_LLPLLGetDivider();
              //Printf("\n PC%d LLPLL %d-1 read:%d",__LINE__, pTimeTable->hTotal, wTemp);
              
                //update EEPROM pixel clock.
                //Note: It is not a pixel clock. It is a LLPLL divider.
                //      
                bTemp = GetPixelClkEE(mode);  //value 0..100
              #if 1
                //if E3PROM does not have value, it will return 0.
                //if we receive 0, FW will subtract 50.
                //If you see the below message, you need to execute "EE default"
                if(bTemp == 0) {
                  Printf("\nMaybe, something wrong!!...Please update your eeprom.");
                  bTemp = 50;
                }
              #endif
              
                if(bTemp != 50) {
                  wTemp = pTimeTable->hTotal - 1;
                  //Printf("\n\r!!!EEPROM has a PixelClock value %bd",bTemp);
                  //Printf("\tchange LLPLL %d",wTemp);
                  wTemp += bTemp;
                  wTemp -= 50;
                  //Printf("->%d",wTemp);
                  aRGB_LLPLLUpdateDivider(wTemp, OFF, 0); //without init.
                }
              
              //wTemp = aRGB_LLPLLGetDivider();
              //Printf("\n PC%d LLPLL %d-1 read:%d",__LINE__, pTimeTable->hTotal, wTemp);
                MeasSetErrTolerance(4);           //tolerance set to 32
                MeasEnableChangedDetection(ON);       //set EN. Changed Detection
                
                Printf("\nVESA %dx%d@%bd", pTimeTable->hActive,pTimeTable->vActive,pTimeTable->vFreq);
              
              //wTemp = aRGB_LLPLLGetDivider();
              //Printf("\n PC%d LLPLL %d-1 read:%d",__LINE__, pTimeTable->hTotal, wTemp);
              
                hActive = MeasGetHActive( &hCropStart );
                vActive = MeasGetVActive( &vCropStart );
                vFreq = MeasGetVFreq();
                PrintMeasValue("PC");
              
                /* search scaler table. If success, overwrite */
              #ifdef SUPPORT_SCALER_OVERWRITE_TABLE
                pScaler = FindScalerTable(InputMain, hActive,vActive,vFreq, vCropStart,1);
                if(pScaler != NULL)
                  OverWriteScalerWithTable(pScaler,1,1);
              #endif
                /* FYI:
                if 1280x1024@75, increase YScale +10.
                if 1600x1200@60, increase YScale +16.
                but, it is moved to the table.
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 32  

                */
              
              
                PC_PrepareInfoString(mode);
              
              #ifdef CHECK_USEDTIME
                UsedTime = SystemClock - UsedTime;
                Printf("\n\rUsedTime:%ld.%ldsec", UsedTime/100, UsedTime%100 );
              #endif
                    
                return ERR_SUCCESS;
              }
              #endif
1924          
1925          #if 1
1926          BYTE CheckAndSetPC(void)
1927          {
1928   1        BYTE mode,old_mode;
1929   1        BYTE i;
1930   1        BYTE bTemp;
1931   1      
1932   1      #ifdef CHECK_USEDTIME
                DWORD UsedTime;
              #endif
1935   1        BYTE value;
1936   1        BYTE value1;
1937   1        WORD wTemp;
1938   1        BYTE ret;
1939   1        volatile BYTE InputStatus;
1940   1        struct DIGIT_VIDEO_TIME_TABLE_s *pTimeTable;
1941   1        struct SCALER_TIME_TABLE_s *pScaler;
1942   1      
1943   1        WORD hActive,vActive;
1944   1        WORD hCropStart,vCropStart;
1945   1        BYTE vFreq;
1946   1      
1947   1      
1948   1      #ifdef CHECK_USEDTIME
                SFRB_ET0 = 0;
                UsedTime = SystemClock;
                SFRB_ET0 = 1;
              #endif
1953   1      
1954   1        /*STEP1: check signal. if fail, give up. */
1955   1        for(i=0; i < 2; i++) {
1956   2          Meas_StartMeasure();
1957   2          ret=Meas_IsMeasureDone(50);
1958   2          if(ret==ERR_SUCCESS)
1959   2            break;
1960   2          delay1ms(10);
1961   2        } 
1962   1        if(ret) {
1963   2          argb_Printf("\n\rCheckAndSetPC fail 1");
1964   2          return 1;
1965   2        }
1966   1        /*
1967   1          FindInputModePC
1968   1        */
1969   1        old_mode = 0xFF;
1970   1        while(1) {
1971   2          /* STEP2: find PC mode.*/
1972   2          mode = FindInputModePC(old_mode, &wTemp/*&vTotal*/);
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 33  

1973   2          if(mode==0xFF) {
1974   3            argb_Printf("\n\rCheckAndSetPC fail 2. No proper mode");
1975   3            return 2;
1976   3          }
1977   2          if(old_mode == mode)
1978   2            break;
1979   2          old_mode = mode;
1980   2      
1981   2          pTimeTable = &TW8836_VESA_TABLE[mode];
1982   2          
1983   2          //
1984   2          //set LLPLL & wait
1985   2          //
1986   2          aRGB_SetLLPLLControl(0xF2); // POST[7:6]= 3 -> div 1, VCO: 40~216, Charge Pump: 5uA
1987   2          ret = aRGB_LLPLLUpdateDivider(pTimeTable->hTotal - 1, 1, 40 );
1988   2          if(ret==ERR_FAIL) {
1989   3            argb_Printf("\n\rCheckAndSetPC fail 3. No stable LLPLL");
1990   3            return 3;
1991   3          }
1992   2          //wait a detection flag.
1993   2          for(i=0; i < 50; i++) {
1994   3            InputStatus = ReadTW88(REG1C1);
1995   3            if((InputStatus & 0x30) == 0x30)
1996   3              break;
1997   3            delay1ms(10);
1998   3          }
1999   2          if(i==50) 
2000   2            Printf("\nERR Sync Fail");
2001   2          //Printf("\nH_%c V_%c ",InputStatus & 0x40 ? 'N' : 'P', InputStatus & 0x80 ? 'N' : 'P');    
2002   2          if((pTimeTable->pol & 0xC0) != (InputStatus & 0xC0)) {
2003   3            //incorrect polarity.
2004   3            Printf("\n\rmode:%bd invalid hPol %s->%s vPol %s->%s",mode,
2005   3              pTimeTable->pol & HPOL_P ? "P" : "N",
2006   3              InputStatus & HPOL_P   ? "P" : "N",  
2007   3              pTimeTable->pol & VPOL_P ? "P" : "N",
2008   3              InputStatus & VPOL_P   ? "P" : "N");   
2009   3        
2010   3          }
2011   2          aRGB_Set_vSyncOutPolarity(1 /*1 means PC */, InputStatus & 0x80); //VSync Polarity
2012   2          aRGB_SetLLPLL_InputPolarity(1 /*1 means PC */, InputStatus & 0x40); //HSync Polarity
2013   2      
2014   2          Meas_StartMeasure();
2015   2          Meas_IsMeasureDone(50);
2016   2          hActive = MeasGetHActive( &wTemp );
2017   2          if(pTimeTable->hActive >= hActive-2
2018   2          && pTimeTable->hActive <= hActive+2)
2019   2            break;
2020   2        }
2021   1        //print selected video
2022   1        Printf("\nUse mode:%bd", mode); 
2023   1        //PrintVesaVideoTimeTable(pTimeTable);
2024   1      
2025   1        //adjust Phase..
2026   1        value = GetPhaseEE(mode);
2027   1        if(value == 0xFF) {
2028   2          //No previous data. We need a AutoTunePhase.
2029   2          AutoTunePhase();
2030   2          value=aRGB_GetPhase();
2031   2          argb_dPrintf("\n\rAutoTune Phase 0x%bx",value);
2032   2          SavePhaseEE(mode,value);
2033   2        }
2034   1        else {
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 34  

2035   2          argb_dPrintf("\n\ruse EE Phase 0x%bx",value);
2036   2          //we read first, because update routine can make a shaking.
2037   2          value1=aRGB_GetPhase();
2038   2          if(value != value1) {
2039   3            argb_dPrintf("  update from 0x%bx",value1);
2040   3            aRGB_SetPhase(value, 0);  //BKTODO? Why it does not have a init ?
2041   3          }
2042   2        }
2043   1      
2044   1        PC_SetScaler(mode);
2045   1        Input_aRGBMode = mode;
2046   1        InputSubMode = Input_aRGBMode;
2047   1      
2048   1        AdjustPixelClk(0, mode); //BK120117 need a divider value
2049   1        bTemp = GetPixelClkEE(mode);  //value 0..100
2050   1      #if 1
2051   1        //if E3PROM does not have value, it will return 0.
2052   1        //if we receive 0, FW will subtract 50.
2053   1        //If you see the below message, you need to execute "EE default"
2054   1        if(bTemp == 0) {
2055   2          Printf("\nMaybe, something wrong!!...Please update your eeprom.");
2056   2          bTemp = 50;
2057   2        }
2058   1      #endif
2059   1        if(bTemp != 50) {
2060   2          wTemp = pTimeTable->hTotal - 1;
2061   2          //Printf("\n\r!!!EEPROM has a PixelClock value %bd",bTemp);
2062   2          //Printf("\tchange LLPLL %d",wTemp);
2063   2          wTemp += bTemp;
2064   2          wTemp -= 50;
2065   2          //Printf("->%d",wTemp);
2066   2          aRGB_LLPLLUpdateDivider(wTemp, OFF, 0); //without init.
2067   2        }
2068   1      
2069   1        MeasSetErrTolerance(4);           //tolerance set to 32
2070   1        MeasEnableChangedDetection(ON);       //set EN. Changed Detection
2071   1        
2072   1        //Printf("\nVESA %dx%d@%bd", pTimeTable->hActive,pTimeTable->vActive,pTimeTable->vFreq);
2073   1      
2074   1        hActive = MeasGetHActive( &hCropStart );
2075   1        vActive = MeasGetVActive( &vCropStart );
2076   1        vFreq = MeasGetVFreq();
2077   1        PrintMeasValue("PC");
2078   1      
2079   1        /* search scaler table. If success, overwrite */
2080   1      #ifdef SUPPORT_SCALER_OVERWRITE_TABLE
2081   1        pScaler = FindScalerTable(InputMain, hActive,vActive,vFreq, vCropStart,1);
2082   1        if(pScaler != NULL)
2083   1          OverWriteScalerWithTable(pScaler,1,1);
2084   1      #endif
2085   1        PC_PrepareInfoString(mode);
2086   1      
2087   1      
2088   1      #ifdef CHECK_USEDTIME
                SFRB_ET0 = 0;
                UsedTime = SystemClock - UsedTime;
                SFRB_ET0 = 1;
                Printf("\n\rUsedTime:%ld.%ldsec", UsedTime/100, UsedTime%100 );
              #endif
2094   1            
2095   1        return ERR_SUCCESS;
2096   1        
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 35  

2097   1      }
2098          #endif
2099          
2100          #undef CHECK_USEDTIME
2101          
2102          //-----------------------------------------------------------------------------
2103          /**
2104          * Change to PC
2105          *
2106          * @return
2107          * - 0: success
2108          * - 1: No Update happen
2109          * - 2: No Signal or unknown video sidnal.
2110          */
2111          BYTE ChangePC( void )
2112          {
2113   1        BYTE ret;
2114   1      
2115   1        if ( InputMain == INPUT_PC ) {
2116   2          dPrintf("\n\rSkip ChangePC");
2117   2          return(1);
2118   2        }
2119   1      
2120   1        InputMain = INPUT_PC;
2121   1        InputSubMode = 0;
2122   1      
2123   1        if(GetInputMainEE() != InputMain)
2124   1          SaveInputMainEE( InputMain );
2125   1      
2126   1        //----------------
2127   1        // initialize video input
2128   1        InitInputAsDefault();
2129   1      
2130   1        //
2131   1        // Check and Set aRGB,mesaure,Scaler for Analog PC input
2132   1        //
2133   1        ret = CheckAndSetPC();
2134   1        if(ret==ERR_SUCCESS) {
2135   2          //success
2136   2          VInput_enableOutput(0);
2137   2          return 0;
2138   2        }
2139   1      
2140   1        //------------------
2141   1        // NO SIGNAL
2142   1        // Prepare NoSignal Task...
2143   1      
2144   1        //free run    
2145   1        //start recover & force some test image.
2146   1        VInput_gotoFreerun(0);
2147   1      
2148   1        return 2; //fail..
2149   1      }
2150          #endif
2151          
2152          
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 36  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com010D (BEGIN)
0000         L?0270:
0000 F0                MOVX    @DPTR,A
0001 759300      E     MOV     DPX,#?C?XDATASEG
0004 E500        E     MOV     A,regTW88+01H
0006 24D0              ADD     A,#0D0H
0008 F582              MOV     DPL,A
000A E500        E     MOV     A,regTW88
000C 3401              ADDC    A,#01H
000E F583              MOV     DPH,A
0010 759300      E     MOV     DPX,#?C?XDATASEG
0013 E4                CLR     A
0014 F0                MOVX    @DPTR,A
0015 759300      E     MOV     DPX,#?C?XDATASEG
0018 E500        E     MOV     A,regTW88+01H
001A 24D1              ADD     A,#0D1H
001C F582              MOV     DPL,A
001E E500        E     MOV     A,regTW88
0020 3401              ADDC    A,#01H
0022 F583              MOV     DPH,A
0024 759300      E     MOV     DPX,#?C?XDATASEG
0027 74F0              MOV     A,#0F0H
0029 F0                MOVX    @DPTR,A
002A 759300      E     MOV     DPX,#?C?XDATASEG
002D E500        E     MOV     A,regTW88+01H
002F 24D2              ADD     A,#0D2H
0031 F582              MOV     DPL,A
0033 E500        E     MOV     A,regTW88
0035 3401              ADDC    A,#01H
0037 F583              MOV     DPH,A
0039 759300      E     MOV     DPX,#?C?XDATASEG
003C 74F0              MOV     A,#0F0H
003E F0                MOVX    @DPTR,A
003F 759300      E     MOV     DPX,#?C?XDATASEG
0042 E500        E     MOV     A,regTW88+01H
0044 24D3              ADD     A,#0D3H
0046 F582              MOV     DPL,A
0048 E500        E     MOV     A,regTW88
004A 3401              ADDC    A,#01H
004C F583              MOV     DPH,A
004E 759300      E     MOV     DPX,#?C?XDATASEG
0051 74F0              MOV     A,#0F0H
0053 F0                MOVX    @DPTR,A
0054 759300      E     MOV     DPX,#?C?XDATASEG
0057 E500        E     MOV     A,regTW88+01H
0059 24D4              ADD     A,#0D4H
005B F582              MOV     DPL,A
005D E500        E     MOV     A,regTW88
005F 3401              ADDC    A,#01H
0061 F583              MOV     DPH,A
0063 759300      E     MOV     DPX,#?C?XDATASEG
0066 7420              MOV     A,#020H
0068 F0                MOVX    @DPTR,A
0069 759300      E     MOV     DPX,#?C?XDATASEG
006C E500        E     MOV     A,regTW88+01H
006E 24D5              ADD     A,#0D5H
0070 F582              MOV     DPL,A
0072 E500        E     MOV     A,regTW88
0074 3401              ADDC    A,#01H
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 37  

0076 F583              MOV     DPH,A
0078 759300      E     MOV     DPX,#?C?XDATASEG
007B E4                CLR     A
007C F0                MOVX    @DPTR,A
007D 759300      E     MOV     DPX,#?C?XDATASEG
0080 E500        E     MOV     A,regTW88+01H
0082 24D6              ADD     A,#0D6H
0084 F582              MOV     DPL,A
0086 E500        E     MOV     A,regTW88
0088 3401              ADDC    A,#01H
008A F583              MOV     DPH,A
008C 759300      E     MOV     DPX,#?C?XDATASEG
008F 7410              MOV     A,#010H
0091 F0                MOVX    @DPTR,A
0092 759300      E     MOV     DPX,#?C?XDATASEG
0095 E500        E     MOV     A,regTW88+01H
0097 24D7              ADD     A,#0D7H
0099 F582              MOV     DPL,A
009B E500        E     MOV     A,regTW88
009D 3401              ADDC    A,#01H
009F F583              MOV     DPH,A
00A1 759300      E     MOV     DPX,#?C?XDATASEG
00A4 E4                CLR     A
00A5 F0                MOVX    @DPTR,A
00A6 759300      E     MOV     DPX,#?C?XDATASEG
00A9 E500        E     MOV     A,regTW88+01H
00AB 24D9              ADD     A,#0D9H
00AD F582              MOV     DPL,A
00AF E500        E     MOV     A,regTW88
00B1 3401              ADDC    A,#01H
00B3 F583              MOV     DPH,A
00B5 759300      E     MOV     DPX,#?C?XDATASEG
00B8 7402              MOV     A,#02H
00BA F0                MOVX    @DPTR,A
00BB 759300      E     MOV     DPX,#?C?XDATASEG
00BE E500        E     MOV     A,regTW88+01H
00C0 24DA              ADD     A,#0DAH
00C2         L?0271:
00C2 F582              MOV     DPL,A
00C4 E500        E     MOV     A,regTW88
00C6 3401              ADDC    A,#01H
00C8 F583              MOV     DPH,A
00CA 759300      E     MOV     DPX,#?C?XDATASEG
00CD 22                RET     
00CE         L?0272:
00CE F0                MOVX    @DPTR,A
00CF 90000000    R     MOV     DPTR,#PCLK1
00D3 E0                MOVX    A,@DPTR
00D4 FC                MOV     R4,A
00D5 A3                INC     DPTR
00D6 E0                MOVX    A,@DPTR
00D7 FD                MOV     R5,A
00D8 A3                INC     DPTR
00D9 E0                MOVX    A,@DPTR
00DA FE                MOV     R6,A
00DB A3                INC     DPTR
00DC E0                MOVX    A,@DPTR
00DD FF                MOV     R7,A
00DE 90000000    E     MOV     DPTR,#?_dPrintf?BYTE+04H
00E2 110000      E     ACALL   ?C?LSTXDATA
00E5         L?0273:
00E5 90000000    R     MOV     DPTR,#PCLK2
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 38  

00E9         L?0274:
00E9 E0                MOVX    A,@DPTR
00EA FC                MOV     R4,A
00EB A3                INC     DPTR
00EC E0                MOVX    A,@DPTR
00ED FD                MOV     R5,A
00EE A3                INC     DPTR
00EF E0                MOVX    A,@DPTR
00F0 FE                MOV     R6,A
00F1 A3                INC     DPTR
00F2 E0                MOVX    A,@DPTR
00F3 FF                MOV     R7,A
00F4 22                RET     
00F5         L?0275:
00F5         L?0276:
00F5 90000000    R     MOV     DPTR,#pTimeTable
00F9         L?0277:
00F9 E0                MOVX    A,@DPTR
00FA FB                MOV     R3,A
00FB A3                INC     DPTR
00FC E0                MOVX    A,@DPTR
00FD FA                MOV     R2,A
00FE A3                INC     DPTR
00FF E0                MOVX    A,@DPTR
0100 22                RET     
0101         L?0278:
0101 110000      E     ACALL   ?C?ULDIV
0104 90000000    R     MOV     DPTR,#PCLK1
0108 110000      E     ACALL   ?C?LSTXDATA
010B 90000000    R     MOV     DPTR,#VPN
010F E0                MOVX    A,@DPTR
0110 FE                MOV     R6,A
0111 A3                INC     DPTR
0112 E0                MOVX    A,@DPTR
0113 FF                MOV     R7,A
0114 E4                CLR     A
0115 FC                MOV     R4,A
0116 FD                MOV     R5,A
0117 FB                MOV     R3,A
0118 7A20              MOV     R2,#020H
011A F9                MOV     R1,A
011B F8                MOV     R0,A
011C 110000      E     ACALL   ?C?LMUL
011F         L?0279:
011F 90000000    R     MOV     DPTR,#VFreq
0123         L?0280:
0123 E0                MOVX    A,@DPTR
0124 F8                MOV     R0,A
0125 A3                INC     DPTR
0126 E0                MOVX    A,@DPTR
0127 F9                MOV     R1,A
0128         L?0281:
0128 A3                INC     DPTR
0129 E0                MOVX    A,@DPTR
012A FA                MOV     R2,A
012B A3                INC     DPTR
012C E0                MOVX    A,@DPTR
012D FB                MOV     R3,A
012E 22                RET     
012F         L?0283:
012F         L?0284:
012F 7410              MOV     A,#010H
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 39  

0131         L?0285:
0131 F0                MOVX    @DPTR,A
0132 759300      E     MOV     DPX,#?C?XDATASEG
0135 E500        E     MOV     A,regTW88+01H
0137 22                RET     
0138         L?0286:
0138 90000000    R     MOV     DPTR,#pTimeTable
013C         L?0287:
013C A3                INC     DPTR
013D E0                MOVX    A,@DPTR
013E FA                MOV     R2,A
013F A3                INC     DPTR
0140 E0                MOVX    A,@DPTR
0141         L?0288:
0141 2403              ADD     A,#03H
0143         L?0289:
0143 F9                MOV     R1,A
0144 E4                CLR     A
0145 3A                ADDC    A,R2
0146 FA                MOV     R2,A
0147 010000      E     AJMP    ?C?ILDPTR
014A         L?0290:
014A 75F019            MOV     B,#019H
014D A4                MUL     AB
014E 2400        E     ADD     A,#LOW TW8836_VESA_TABLE
0150 F9                MOV     R1,A
0151 7400        E     MOV     A,#HIGH TW8836_VESA_TABLE
0153 35F0              ADDC    A,B
0155 FA                MOV     R2,A
0156         L?0291:
0156 7400        E     MOV     A,#MBYTE TW8836_VESA_TABLE
0158         L?0292:
0158 F0                MOVX    @DPTR,A
0159 A3                INC     DPTR
015A EA                MOV     A,R2
015B F0                MOVX    @DPTR,A
015C A3                INC     DPTR
015D E9                MOV     A,R1
015E F0                MOVX    @DPTR,A
015F 22                RET     
0160         L?0293:
0160 110000      E     ACALL   ?C?ULDIV
0163 E4                CLR     A
0164 FB                MOV     R3,A
0165 7A04              MOV     R2,#04H
0167 F9                MOV     R1,A
0168 F8                MOV     R0,A
0169         L?0294:
0169 110000      E     ACALL   ?C?LMUL
016C 90000000    R     MOV     DPTR,#i
0170         L?0295:
0170 A804              MOV     R0,AR4
0172 A905              MOV     R1,AR5
0174 AA06              MOV     R2,AR6
0176 AB07              MOV     R3,AR7
0178 E0                MOVX    A,@DPTR
0179 22                RET     
017A         L?0296:
017A A3                INC     DPTR
017B E0                MOVX    A,@DPTR
017C FA                MOV     R2,A
017D A3                INC     DPTR
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 40  

017E E0                MOVX    A,@DPTR
017F         L?0297:
017F 2413              ADD     A,#013H
0181         L?0298:
0181 F9                MOV     R1,A
0182 E4                CLR     A
0183 3A                ADDC    A,R2
0184 FA                MOV     R2,A
0185 010000      E     AJMP    ?C?CLDPTR
0188         L?0299:
0188 110000      E     ACALL   ?C?ULDIV
018B A804              MOV     R0,AR4
018D A905              MOV     R1,AR5
018F AA06              MOV     R2,AR6
0191 AB07              MOV     R3,AR7
0193 90000000    R     MOV     DPTR,#HActive
0197 E0                MOVX    A,@DPTR
0198 FE                MOV     R6,A
0199 A3                INC     DPTR
019A E0                MOVX    A,@DPTR
019B FF                MOV     R7,A
019C 90000000    R     MOV     DPTR,#H_DE+01H
01A0 E0                MOVX    A,@DPTR
01A1 2F                ADD     A,R7
01A2 FF                MOV     R7,A
01A3 90000000    R     MOV     DPTR,#H_DE
01A7 E0                MOVX    A,@DPTR
01A8 3E                ADDC    A,R6
01A9 CF                XCH     A,R7
01AA 2401              ADD     A,#01H
01AC CF                XCH     A,R7
01AD 3400              ADDC    A,#00H
01AF FE                MOV     R6,A
01B0 E4                CLR     A
01B1 FC                MOV     R4,A
01B2 FD                MOV     R5,A
01B3 110000      E     ACALL   ?C?LMUL
01B6 90000000    R     MOV     DPTR,#PCLK2
01BA 110000      E     ACALL   ?C?LSTXDATA
01BD 7B00        R     MOV     R3,#MBYTE ?SC_150
01BF 7A00        R     MOV     R2,#HIGH ?SC_150
01C1 7900        R     MOV     R1,#LOW ?SC_150
01C3 22                RET     
01C4         L?0300:
01C4         L?0301:
01C4 90000000    E     MOV     DPTR,#?_TWstrcat?BYTE+03H
01C8 7400        R     MOV     A,#MBYTE ?SC_324
01CA F0                MOVX    @DPTR,A
01CB A3                INC     DPTR
01CC 7400        R     MOV     A,#HIGH ?SC_324
01CE F0                MOVX    @DPTR,A
01CF 7400        R     MOV     A,#LOW ?SC_324
01D1         L?0302:
01D1 A3                INC     DPTR
01D2         L?0303:
01D2 F0                MOVX    @DPTR,A
01D3 7B00        E     MOV     R3,#MBYTE FOsdMsgBuff
01D5 7A00        E     MOV     R2,#HIGH FOsdMsgBuff
01D7 7900        E     MOV     R1,#LOW FOsdMsgBuff
01D9 22                RET     
01DA         L?0304:
01DA 90000000    E     MOV     DPTR,#?_TWstrcat?BYTE+03H
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 41  

01DE F0                MOVX    @DPTR,A
01DF A3                INC     DPTR
01E0 22                RET     
01E1         L?0305:
01E1 E0                MOVX    A,@DPTR
01E2 34FF              ADDC    A,#0FFH
01E4 F0                MOVX    @DPTR,A
01E5 7B00        R     MOV     R3,#MBYTE ?SC_283
01E7 7A00        R     MOV     R2,#HIGH ?SC_283
01E9 7900        R     MOV     R1,#LOW ?SC_283
01EB E0                MOVX    A,@DPTR
01EC FF                MOV     R7,A
01ED A3                INC     DPTR
01EE E0                MOVX    A,@DPTR
01EF CF                XCH     A,R7
01F0         L?0306:
01F0 90000000    E     MOV     DPTR,#?_dPrintf?BYTE+03H
01F4 F0                MOVX    @DPTR,A
01F5 A3                INC     DPTR
01F6 EF                MOV     A,R7
01F7 F0                MOVX    @DPTR,A
01F8 22                RET     
01F9         L?0307:
01F9 90000000    E     MOV     DPTR,#?_TWstrcat?BYTE+03H
01FD F0                MOVX    @DPTR,A
01FE A3                INC     DPTR
01FF 22                RET     
0200         L?0308:
0200 FD                MOV     R5,A
0201 E4                CLR     A
0202 3C                ADDC    A,R4
0203 FC                MOV     R4,A
0204         L?0309:
0204 90000000    R     MOV     DPTR,#PCLK
0208 010000      E     AJMP    ?C?LSTXDATA
020B         L?0310:
020B         L?0311:
020B 90000000    R     MOV     DPTR,#Input_aRGBMode
020F E0                MOVX    A,@DPTR
0210 FF                MOV     R7,A
0211 22                RET     
0212         L?0312:
0212 90000000    E     MOV     DPTR,#?_TWstrcat?BYTE+03H
0216 F0                MOVX    @DPTR,A
0217 A3                INC     DPTR
0218 22                RET     
0219         L?0313:
0219 90000000    R     MOV     DPTR,#HDown
021D         L?0314:
021D E0                MOVX    A,@DPTR
021E FE                MOV     R6,A
021F A3                INC     DPTR
0220 E0                MOVX    A,@DPTR
0221 FB                MOV     R3,A
0222 AA06              MOV     R2,AR6
0224 E4                CLR     A
0225 F9                MOV     R1,A
0226 F8                MOV     R0,A
0227 22                RET     
0228         L?0315:
0228 90000000    E     MOV     DPTR,#?_TWstrcat?BYTE+03H
022C F0                MOVX    @DPTR,A
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 42  

022D A3                INC     DPTR
022E 22                RET     
022F         L?0316:
022F 90000000    R     MOV     DPTR,#Meas_hActive
0233 F0                MOVX    @DPTR,A
0234 A3                INC     DPTR
0235 EF                MOV     A,R7
0236 F0                MOVX    @DPTR,A
0237 22                RET     
0238         L?0317:
0238         L?0318:
0238 759300      E     MOV     DPX,#?C?XDATASEG
023B E500        E     MOV     A,regTW88+01H
023D 24C0              ADD     A,#0C0H
023F 22                RET     
0240         L?0319:
0240 FF                MOV     R7,A
0241 E5F0              MOV     A,B
0243 F0                MOVX    @DPTR,A
0244 A3                INC     DPTR
0245 EF                MOV     A,R7
0246 F0                MOVX    @DPTR,A
0247         L?0320:
0247 90000000    R     MOV     DPTR,#pTimeTable
024B A3                INC     DPTR
024C E0                MOVX    A,@DPTR
024D FA                MOV     R2,A
024E A3                INC     DPTR
024F E0                MOVX    A,@DPTR
0250 22                RET     
0251         L?0322:
0251 90000000    R     MOV     DPTR,#Divider+01H
0255 E0                MOVX    A,@DPTR
0256 2401              ADD     A,#01H
0258 FF                MOV     R7,A
0259 90000000    R     MOV     DPTR,#Divider
025D E0                MOVX    A,@DPTR
025E 3400              ADDC    A,#00H
0260 FE                MOV     R6,A
0261 E4                CLR     A
0262 FC                MOV     R4,A
0263 FD                MOV     R5,A
0264 22                RET     
0265         L?0323:
0265         L?0324:
0265 FF                MOV     R7,A
0266 E4                CLR     A
0267 FC                MOV     R4,A
0268 FD                MOV     R5,A
0269 FE                MOV     R6,A
026A 010000      E     AJMP    ?C?LMUL
026D         L?0325:
026D 90000000    R     MOV     DPTR,#i
0271 E0                MOVX    A,@DPTR
0272 C3                CLR     C
0273 9401              SUBB    A,#01H
0275 FF                MOV     R7,A
0276 E4                CLR     A
0277 9400              SUBB    A,#00H
0279 AB07              MOV     R3,AR7
027B FA                MOV     R2,A
027C E4                CLR     A
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 43  

027D F9                MOV     R1,A
027E F8                MOV     R0,A
027F 22                RET     
0280         L?0326:
0280 90000000    E     MOV     DPTR,#?_TWstrcat?BYTE+03H
0284 F0                MOVX    @DPTR,A
0285 A3                INC     DPTR
0286 22                RET     
0287         L?0327:
0287         L?0328:
0287 90000000    R     MOV     DPTR,#mode
028B E0                MOVX    A,@DPTR
028C FF                MOV     R7,A
028D 22                RET     
028E         L?0329:
028E AF06              MOV     R7,AR6
0290         L?0330:
0290 759300      E     MOV     DPX,#?C?XDATASEG
0293 E500        E     MOV     A,regTW88+01H
0295 24CC              ADD     A,#0CCH
0297 22                RET     
0298         L?0331:
0298 90000000    E     MOV     DPTR,#?_dPrintf?BYTE+03H
029C 110000      E     ACALL   ?C?LSTXDATA
029F 90000000    R     MOV     DPTR,#PCLKO
02A3 E0                MOVX    A,@DPTR
02A4 90000000    E     MOV     DPTR,#?_dPrintf?BYTE+07H
02A8 F0                MOVX    @DPTR,A
02A9 22                RET     
02AA         L?0335:
02AA         L?0336:
02AA E0                MOVX    A,@DPTR
02AB 04                INC     A
02AC F0                MOVX    @DPTR,A
02AD E0                MOVX    A,@DPTR
02AE C3                CLR     C
02AF 940A              SUBB    A,#0AH
02B1 22                RET     
02B2         L?0337:
02B2 90000000    R     MOV     DPTR,#vtotal
02B6 E0                MOVX    A,@DPTR
02B7 FC                MOV     R4,A
02B8 A3                INC     DPTR
02B9 E0                MOVX    A,@DPTR
02BA FD                MOV     R5,A
02BB C3                CLR     C
02BC 94C8              SUBB    A,#0C8H
02BE EC                MOV     A,R4
02BF 9400              SUBB    A,#00H
02C1 22                RET     
02C2         L?0338:
02C2         L?0339:
02C2 759300      E     MOV     DPX,#?C?XDATASEG
02C5 E500        E     MOV     A,regTW88+01H
02C7 24D0              ADD     A,#0D0H
02C9 22                RET     
02CA         L?0340:
02CA         L?0341:
02CA 90000000    R     MOV     DPTR,#pTimeTable
02CE A3                INC     DPTR
02CF E0                MOVX    A,@DPTR
02D0 FA                MOV     R2,A
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 44  

02D1 A3                INC     DPTR
02D2 E0                MOVX    A,@DPTR
02D3 22                RET     
02D4         L?0342:
02D4 90000000    R     MOV     DPTR,#PCLK
02D8 E0                MOVX    A,@DPTR
02D9 FC                MOV     R4,A
02DA A3                INC     DPTR
02DB E0                MOVX    A,@DPTR
02DC FD                MOV     R5,A
02DD A3                INC     DPTR
02DE E0                MOVX    A,@DPTR
02DF FE                MOV     R6,A
02E0 A3                INC     DPTR
02E1 E0                MOVX    A,@DPTR
02E2 22                RET     
02E3         L?0343:
02E3 AE07              MOV     R6,AR7
02E5         L?0344:
02E5 90000000    E     MOV     DPTR,#InputMain
02E9 E0                MOVX    A,@DPTR
02EA FF                MOV     R7,A
02EB 22                RET     
02EC         L?0345:
02EC E0                MOVX    A,@DPTR
02ED FF                MOV     R7,A
02EE A3                INC     DPTR
02EF E0                MOVX    A,@DPTR
02F0 90000000    E     MOV     DPTR,#?_dPrintf?BYTE+07H
02F4 CF                XCH     A,R7
02F5 F0                MOVX    @DPTR,A
02F6 A3                INC     DPTR
02F7 EF                MOV     A,R7
02F8 F0                MOVX    @DPTR,A
02F9 22                RET     
02FA         L?0346:
02FA         L?0347:
02FA 90000000    R     MOV     DPTR,#temp
02FE EF                MOV     A,R7
02FF F0                MOVX    @DPTR,A
0300 6432              XRL     A,#032H
0302 22                RET     
0303         L?0348:
0303 C3                CLR     C
0304 90000000    R     MOV     DPTR,#vActive+01H
0308 E0                MOVX    A,@DPTR
0309 9F                SUBB    A,R7
030A F0                MOVX    @DPTR,A
030B 90000000    R     MOV     DPTR,#vActive
030F E0                MOVX    A,@DPTR
0310 22                RET     
0311         L?0349:
0311 E0                MOVX    A,@DPTR
0312 FF                MOV     R7,A
0313 A3                INC     DPTR
0314 E0                MOVX    A,@DPTR
0315 90000000    E     MOV     DPTR,#?_Printf?BYTE+03H
0319 CF                XCH     A,R7
031A F0                MOVX    @DPTR,A
031B A3                INC     DPTR
031C EF                MOV     A,R7
031D F0                MOVX    @DPTR,A
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 45  

031E 22                RET     
031F         L?0350:
031F 90000000    R     MOV     DPTR,#mode
0323         L?0351:
0323 E0                MOVX    A,@DPTR
0324 90000000    E     MOV     DPTR,#?_Printf?BYTE+03H
0328 F0                MOVX    @DPTR,A
0329 22                RET     
032A         L?0352:
032A 90000000    E     MOV     DPTR,#?_TWstrcat?BYTE+03H
032E F0                MOVX    @DPTR,A
032F A3                INC     DPTR
0330 22                RET     
0331         L?0353:
0331         L?0354:
0331 90000000    R     MOV     DPTR,#mode
0335 E0                MOVX    A,@DPTR
0336 FF                MOV     R7,A
0337 22                RET     
0338         L?0355:
0338 90000000    R     MOV     DPTR,#vActive
033C E0                MOVX    A,@DPTR
033D FE                MOV     R6,A
033E A3                INC     DPTR
033F E0                MOVX    A,@DPTR
0340 22                RET     
0341         L?0356:
0341 A3                INC     DPTR
0342 A3                INC     DPTR
0343 E0                MOVX    A,@DPTR
0344 F9                MOV     R1,A
0345 90000000    E     MOV     DPTR,#?_OverWriteScalerWithTable?BYTE+04H
0349 7401              MOV     A,#01H
034B F0                MOVX    @DPTR,A
034C FD                MOV     R5,A
034D 22                RET     
034E         L?0357:
034E 75F019            MOV     B,#019H
0351 A4                MUL     AB
0352 2400        E     ADD     A,#LOW TW8836_VESA_TABLE
0354 F9                MOV     R1,A
0355 7400        E     MOV     A,#HIGH TW8836_VESA_TABLE
0357 35F0              ADDC    A,B
0359 FA                MOV     R2,A
035A 22                RET     
035B         L?0358:
035B 90000000    R     MOV     DPTR,#Meas_vActive
035F F0                MOVX    @DPTR,A
0360 A3                INC     DPTR
0361 EF                MOV     A,R7
0362 F0                MOVX    @DPTR,A
0363 22                RET     
0364         L?0359:
0364 E0                MOVX    A,@DPTR
0365 3400              ADDC    A,#00H
0367         L?0360:
0367 F0                MOVX    @DPTR,A
0368 A3                INC     DPTR
0369 E0                MOVX    A,@DPTR
036A 24CE              ADD     A,#0CEH
036C F0                MOVX    @DPTR,A
036D 22                RET     
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 46  

036E         L?0361:
036E         L?0362:
036E 7B00        R     MOV     R3,#MBYTE ?SC_883
0370 7A00        R     MOV     R2,#HIGH ?SC_883
0372 7900        R     MOV     R1,#LOW ?SC_883
0374 22                RET     
0375         L?0363:
0375         L?0364:
0375 7B00        R     MOV     R3,#MBYTE ?SC_885
0377 7A00        R     MOV     R2,#HIGH ?SC_885
0379 7900        R     MOV     R1,#LOW ?SC_885
037B 22                RET     
037C         L?0366:
037C EE                MOV     A,R6
037D F0                MOVX    @DPTR,A
037E A3                INC     DPTR
037F EF                MOV     A,R7
0380 F0                MOVX    @DPTR,A
0381 7B00        R     MOV     R3,#MBYTE ?SC_264
0383 7A00        R     MOV     R2,#HIGH ?SC_264
0385 7900        R     MOV     R1,#LOW ?SC_264
0387 22                RET     
0388         L?0367:
0388 C3                CLR     C
0389 ED                MOV     A,R5
038A 9414              SUBB    A,#014H
038C EC                MOV     A,R4
038D 9405              SUBB    A,#05H
038F 90000000    R     MOV     DPTR,#i
0393 22                RET     
0394         L?0368:
0394 FF                MOV     R7,A
0395 E4                CLR     A
0396 3E                ADDC    A,R6
0397 90000000    E     MOV     DPTR,#?_InputSetCrop?BYTE+06H
039B F0                MOVX    @DPTR,A
039C A3                INC     DPTR
039D EF                MOV     A,R7
039E F0                MOVX    @DPTR,A
039F 22                RET     
03A0         L?0370:
03A0 FE                MOV     R6,A
03A1 A3                INC     DPTR
03A2 E0                MOVX    A,@DPTR
03A3 FF                MOV     R7,A
03A4 E4                CLR     A
03A5 FC                MOV     R4,A
03A6 FD                MOV     R5,A
03A7 010000      E     AJMP    ?C?LMUL
03AA         L?0371:
03AA F0                MOVX    @DPTR,A
03AB         L?0372:
03AB 7B00        R     MOV     R3,#MBYTE ?SC_556
03AD 7A00        R     MOV     R2,#HIGH ?SC_556
03AF 7900        R     MOV     R1,#LOW ?SC_556
03B1 22                RET     
03B2         L?0374:
03B2         L?0375:
03B2 FF                MOV     R7,A
03B3 759300      E     MOV     DPX,#?C?XDATASEG
03B6 E500        E     MOV     A,regTW88+01H
03B8 22                RET     
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 47  

03B9         L?0376:
03B9 EF                MOV     A,R7
03BA F0                MOVX    @DPTR,A
03BB AF03              MOV     R7,AR3
03BD 759300      E     MOV     DPX,#?C?XDATASEG
03C0 E500        E     MOV     A,regTW88+01H
03C2 22                RET     
03C3         L?0377:
03C3         L?0378:
03C3 FF                MOV     R7,A
03C4 759300      E     MOV     DPX,#?C?XDATASEG
03C7 E500        E     MOV     A,regTW88+01H
03C9 22                RET     
03CA         L?0379:
03CA C3                CLR     C
03CB 9401              SUBB    A,#01H
03CD FF                MOV     R7,A
03CE E5F0              MOV     A,B
03D0 9400              SUBB    A,#00H
03D2 FE                MOV     R6,A
03D3 22                RET     
03D4         L?0380:
03D4 FF                MOV     R7,A
03D5 90000000    R     MOV     DPTR,#hStart
03D9 E0                MOVX    A,@DPTR
03DA 9400              SUBB    A,#00H
03DC FE                MOV     R6,A
03DD 22                RET     
03DE         L?0381:
03DE 90000000    R     MOV     DPTR,#wTemp
03E2 E0                MOVX    A,@DPTR
03E3 FE                MOV     R6,A
03E4 A3                INC     DPTR
03E5 E0                MOVX    A,@DPTR
03E6 FF                MOV     R7,A
03E7 22                RET     
             ; FUNCTION Com010D (END)

             ; FUNCTION dummy_argb_code (BEGIN)
                                           ; SOURCE LINE # 55
                                           ; SOURCE LINE # 56
                                           ; SOURCE LINE # 57
0000 7B00        R     MOV     R3,#MBYTE ?SC_0
0002 7A00        R     MOV     R2,#HIGH ?SC_0
0004 7900        R     MOV     R1,#LOW ?SC_0
0006 010000      E     AJMP    _Puts
             ; FUNCTION dummy_argb_code (END)

             ; FUNCTION _aRGB_setSignalPath (BEGIN)
                                           ; SOURCE LINE # 168
;---- Variable 'fInputPC' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 169
                                           ; SOURCE LINE # 172
0000 110000      R     ACALL   L?0317
0003 110000      R     ACALL   L?0271
0006 E0                MOVX    A,@DPTR
;---- Variable 'bTemp' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 173
0007 54E7              ANL     A,#0E7H
0009 FE                MOV     R6,A
                                           ; SOURCE LINE # 174
000A EF                MOV     A,R7
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 48  

000B 6006              JZ      ?C0002
000D EE                MOV     A,R6
000E 4408              ORL     A,#08H
0010 FE                MOV     R6,A
0011 8004              SJMP    ?C0003
0013         ?C0002:
                                           ; SOURCE LINE # 175
0013 EE                MOV     A,R6
0014 4410              ORL     A,#010H
0016 FE                MOV     R6,A
0017         ?C0003:
                                           ; SOURCE LINE # 176
0017 110000      R     ACALL   L?0317
001A 110000      R     ACALL   L?0271
001D EE                MOV     A,R6
                                           ; SOURCE LINE # 178
001E 110000      R     ACALL   L?0285
0021 24CC              ADD     A,#0CCH
0023 110000      R     ACALL   L?0271
0026 E0                MOVX    A,@DPTR
                                           ; SOURCE LINE # 179
0027 54E2              ANL     A,#0E2H
0029 FE                MOV     R6,A
                                           ; SOURCE LINE # 180
002A EF                MOV     A,R7
002B 6004              JZ      ?C0004
002D EE                MOV     A,R6
002E 4410              ORL     A,#010H
0030 FE                MOV     R6,A
0031         ?C0004:
                                           ; SOURCE LINE # 181
0031 110000      R     ACALL   L?0329
0034 110000      R     ACALL   L?0271
0037 EF                MOV     A,R7
0038 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 182
0039 22                RET     
             ; FUNCTION _aRGB_setSignalPath (END)

             ; FUNCTION _aRGB_SetLLPLL_InputPolarity (BEGIN)
                                           ; SOURCE LINE # 206
;---- Variable 'fActiveHighPol' assigned to Register 'R5' ----
;---- Variable 'fInputPC' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 207
                                           ; SOURCE LINE # 210
0000 110000      R     ACALL   L?0318
0003 110000      R     ACALL   L?0271
0006 E0                MOVX    A,@DPTR
0007 FE                MOV     R6,A
;---- Variable 'bTemp' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 211
0008 EF                MOV     A,R7
0009 6009              JZ      ?C0006
                                           ; SOURCE LINE # 212
000B ED                MOV     A,R5
000C 6006              JZ      ?C0244
000E EE                MOV     A,R6
000F 54FB              ANL     A,#0FBH
0011 FE                MOV     R6,A
0012 8004              SJMP    ?C0009
0014         ?C0006:
                                           ; SOURCE LINE # 215
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 49  

                                           ; SOURCE LINE # 216
0014         ?C0244:
0014 EE                MOV     A,R6
0015 4404              ORL     A,#04H
0017 FE                MOV     R6,A
                                           ; SOURCE LINE # 217
0018         ?C0009:
                                           ; SOURCE LINE # 218
0018 AF06              MOV     R7,AR6
001A 110000      R     ACALL   L?0318
001D 110000      R     ACALL   L?0271
0020 EF                MOV     A,R7
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 219
0022 22                RET     
             ; FUNCTION _aRGB_SetLLPLL_InputPolarity (END)

             ; FUNCTION _aRGB_Set_vSyncOutPolarity (BEGIN)
                                           ; SOURCE LINE # 232
;---- Variable 'fActiveHighPol' assigned to Register 'R5' ----
;---- Variable 'fInputPC' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 233
                                           ; SOURCE LINE # 236
0000 110000      R     ACALL   L?0330
0003 110000      R     ACALL   L?0271
0006 E0                MOVX    A,@DPTR
0007 FE                MOV     R6,A
;---- Variable 'bTemp' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 237
0008 EF                MOV     A,R7
0009 6009              JZ      ?C0011
                                           ; SOURCE LINE # 238
000B ED                MOV     A,R5
000C 6006              JZ      ?C0245
000E EE                MOV     A,R6
000F 54FD              ANL     A,#0FDH
0011 FE                MOV     R6,A
0012 8004              SJMP    ?C0014
0014         ?C0011:
                                           ; SOURCE LINE # 242
0014         ?C0245:
0014 EE                MOV     A,R6
0015 4402              ORL     A,#02H
0017 FE                MOV     R6,A
0018         ?C0014:
                                           ; SOURCE LINE # 243
0018 110000      R     ACALL   L?0329
001B 110000      R     ACALL   L?0271
001E EF                MOV     A,R7
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 244
0020 22                RET     
             ; FUNCTION _aRGB_Set_vSyncOutPolarity (END)

             ; FUNCTION aRGB_GetInputStatus (BEGIN)
                                           ; SOURCE LINE # 273
                                           ; SOURCE LINE # 274
                                           ; SOURCE LINE # 276
0000 759300      E     MOV     DPX,#?C?XDATASEG
0003 E500        E     MOV     A,regTW88+01H
0005 24C1              ADD     A,#0C1H
0007 110000      R     ACALL   L?0271
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 50  

000A E0                MOVX    A,@DPTR
000B FF                MOV     R7,A
;---- Variable 'value' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 277
                                           ; SOURCE LINE # 278
000C         ?C0016:
000C 22                RET     
             ; FUNCTION aRGB_GetInputStatus (END)

             ; FUNCTION _aRGB_SetLLPLLControl (BEGIN)
                                           ; SOURCE LINE # 299
;---- Variable 'value' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 300
                                           ; SOURCE LINE # 301
0000 759300      E     MOV     DPX,#?C?XDATASEG
0003 E500        E     MOV     A,regTW88+01H
0005 24C2              ADD     A,#0C2H
0007 110000      R     ACALL   L?0271
000A EF                MOV     A,R7
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 302
000C 22                RET     
             ; FUNCTION _aRGB_SetLLPLLControl (END)

             ; FUNCTION _aRGB_LLPLLSetDivider (BEGIN)
                                           ; SOURCE LINE # 320
;---- Variable 'value' assigned to Register 'R2/R3' ----
0000 AB07              MOV     R3,AR7
0002 AA06              MOV     R2,AR6
;---- Variable 'fInit' assigned to Register 'R1' ----
0004 A905              MOV     R1,AR5
                                           ; SOURCE LINE # 321
                                           ; SOURCE LINE # 324
0006 EA                MOV     A,R2
0007 110000      R     ACALL   L?0374
000A 24C3              ADD     A,#0C3H
000C 110000      R     ACALL   L?0271
000F 110000      R     ACALL   L?0376
0012 24C4              ADD     A,#0C4H
0014 110000      R     ACALL   L?0271
0017 EF                MOV     A,R7
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 325
0019 E9                MOV     A,R1
001A 601C              JZ      ?C0022
                                           ; SOURCE LINE # 326
001C 759300      E     MOV     DPX,#?C?XDATASEG
001F E500        E     MOV     A,regTW88+01H
0021 24CD              ADD     A,#0CDH
0023 110000      R     ACALL   L?0271
0026 E0                MOVX    A,@DPTR
0027 4401              ORL     A,#01H
0029 F0                MOVX    @DPTR,A
002A         ?C0021:
                                           ; SOURCE LINE # 328
                                           ; SOURCE LINE # 329
002A 9000C1CD          MOV     DPTR,#0C1CDH
002E E0                MOVX    A,@DPTR
002F 90000000    R     MOV     DPTR,#mode
0033 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 330
0034 E0                MOVX    A,@DPTR
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 51  

0035 20E0F2            JB      ACC.0,?C0021
                                           ; SOURCE LINE # 331
                                           ; SOURCE LINE # 332
0038         ?C0022:
0038 22                RET     
             ; FUNCTION _aRGB_LLPLLSetDivider (END)

             ; FUNCTION aRGB_LLPLLGetDivider (BEGIN)
                                           ; SOURCE LINE # 342
                                           ; SOURCE LINE # 343
                                           ; SOURCE LINE # 346
0000 759300      E     MOV     DPX,#?C?XDATASEG
0003 E500        E     MOV     A,regTW88+01H
0005 24C3              ADD     A,#0C3H
0007 110000      R     ACALL   L?0271
000A E0                MOVX    A,@DPTR
;---- Variable 'value' assigned to Register 'R6/R7' ----
000B FE                MOV     R6,A
000C 759300      E     MOV     DPX,#?C?XDATASEG
000F E500        E     MOV     A,regTW88+01H
0011 24C4              ADD     A,#0C4H
0013 110000      R     ACALL   L?0271
0016 E0                MOVX    A,@DPTR
0017 FD                MOV     R5,A
0018 ED                MOV     A,R5
0019 FF                MOV     R7,A
                                           ; SOURCE LINE # 347
001A EE                MOV     A,R6
001B 540F              ANL     A,#0FH
001D FE                MOV     R6,A
                                           ; SOURCE LINE # 348
001E         ?C0023:
001E 22                RET     
             ; FUNCTION aRGB_LLPLLGetDivider (END)

             ; FUNCTION _aRGB_SetPhase (BEGIN)
                                           ; SOURCE LINE # 364
;---- Variable 'fInit' assigned to Register 'R5' ----
;---- Variable 'value' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 365
                                           ; SOURCE LINE # 368
0000 EF                MOV     A,R7
0001 541F              ANL     A,#01FH
0003 110000      R     ACALL   L?0374
0006 24C5              ADD     A,#0C5H
0008 110000      R     ACALL   L?0271
000B EF                MOV     A,R7
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 369
000D ED                MOV     A,R5
000E 601C              JZ      ?C0028
                                           ; SOURCE LINE # 370
0010 759300      E     MOV     DPX,#?C?XDATASEG
0013 E500        E     MOV     A,regTW88+01H
0015 24CD              ADD     A,#0CDH
0017 110000      R     ACALL   L?0271
001A E0                MOVX    A,@DPTR
001B 4401              ORL     A,#01H
001D F0                MOVX    @DPTR,A
001E         ?C0027:
                                           ; SOURCE LINE # 372
                                           ; SOURCE LINE # 373
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 52  

001E 9000C1CD          MOV     DPTR,#0C1CDH
0022 E0                MOVX    A,@DPTR
0023 90000000    R     MOV     DPTR,#mode
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 374
0028 E0                MOVX    A,@DPTR
0029 20E0F2            JB      ACC.0,?C0027
                                           ; SOURCE LINE # 375
                                           ; SOURCE LINE # 376
002C         ?C0028:
002C 22                RET     
             ; FUNCTION _aRGB_SetPhase (END)

             ; FUNCTION aRGB_GetPhase (BEGIN)
                                           ; SOURCE LINE # 385
                                           ; SOURCE LINE # 386
                                           ; SOURCE LINE # 387
0000 759300      E     MOV     DPX,#?C?XDATASEG
0003 E500        E     MOV     A,regTW88+01H
0005 24C5              ADD     A,#0C5H
0007 110000      R     ACALL   L?0271
000A E0                MOVX    A,@DPTR
000B 541F              ANL     A,#01FH
000D FF                MOV     R7,A
                                           ; SOURCE LINE # 388
000E         ?C0029:
000E 22                RET     
             ; FUNCTION aRGB_GetPhase (END)

             ; FUNCTION _aRGB_SetFilterBandwidth (BEGIN)
                                           ; SOURCE LINE # 403
0000 90000000    R     MOV     DPTR,#value
0004 EF                MOV     A,R7
0005 F0                MOVX    @DPTR,A
;---- Variable 'delay' assigned to Register 'R4/R5' ----
                                           ; SOURCE LINE # 404
                                           ; SOURCE LINE # 405
0006 ED                MOV     A,R5
0007 4C                ORL     A,R4
0008 6007              JZ      ?C0030
                                           ; SOURCE LINE # 406
000A AE04              MOV     R6,AR4
000C AF05              MOV     R7,AR5
000E 110000      E     ACALL   _delay1ms
0011         ?C0030:
                                           ; SOURCE LINE # 408
0011 759300      E     MOV     DPX,#?C?XDATASEG
0014 E500        E     MOV     A,regTW88+01H
0016 24C6              ADD     A,#0C6H
0018 110000      R     ACALL   L?0271
001B E0                MOVX    A,@DPTR
001C 54F8              ANL     A,#0F8H
001E FF                MOV     R7,A
001F 90000000    R     MOV     DPTR,#value
0023 E0                MOVX    A,@DPTR
0024 4F                ORL     A,R7
0025 110000      R     ACALL   L?0377
0028 24C6              ADD     A,#0C6H
002A 110000      R     ACALL   L?0271
002D EF                MOV     A,R7
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 409
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 53  

002F 22                RET     
             ; FUNCTION _aRGB_SetFilterBandwidth (END)

             ; FUNCTION _aRGB_SetClampModeHSyncEdge (BEGIN)
                                           ; SOURCE LINE # 422
;---- Variable 'fOn' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 423
                                           ; SOURCE LINE # 425
0000 759300      E     MOV     DPX,#?C?XDATASEG
0003 E500        E     MOV     A,regTW88+01H
0005 24D4              ADD     A,#0D4H
0007 110000      R     ACALL   L?0271
000A E0                MOVX    A,@DPTR
000B FE                MOV     R6,A
;---- Variable 'bTemp' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 427
000C EF                MOV     A,R7
000D 6006              JZ      ?C0032
000F EE                MOV     A,R6
0010 4420              ORL     A,#020H
0012 FE                MOV     R6,A
0013 8004              SJMP    ?C0033
0015         ?C0032:
                                           ; SOURCE LINE # 428
0015 EE                MOV     A,R6
0016 54DF              ANL     A,#0DFH
0018 FE                MOV     R6,A
0019         ?C0033:
                                           ; SOURCE LINE # 430
0019 AF06              MOV     R7,AR6
001B 759300      E     MOV     DPX,#?C?XDATASEG
001E E500        E     MOV     A,regTW88+01H
0020 24D4              ADD     A,#0D4H
0022 110000      R     ACALL   L?0271
0025 EF                MOV     A,R7
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 431
0027 22                RET     
             ; FUNCTION _aRGB_SetClampModeHSyncEdge (END)

             ; FUNCTION _aRGB_SetClampPosition (BEGIN)
                                           ; SOURCE LINE # 442
;---- Variable 'value' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 443
                                           ; SOURCE LINE # 444
0000 759300      E     MOV     DPX,#?C?XDATASEG
0003 E500        E     MOV     A,regTW88+01H
0005 24D7              ADD     A,#0D7H
0007 110000      R     ACALL   L?0271
000A EF                MOV     A,R7
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 445
000C 22                RET     
             ; FUNCTION _aRGB_SetClampPosition (END)

             ; FUNCTION aRGB_SetDefaultFor (BEGIN)
                                           ; SOURCE LINE # 473
                                           ; SOURCE LINE # 474
                                           ; SOURCE LINE # 480
0000 90000000    E     MOV     DPTR,#InputMain
0004 E0                MOVX    A,@DPTR
0005 FC                MOV     R4,A
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 54  

0006 6402              XRL     A,#02H
0008 6003              JZ      $ + 5H
000A 010000      R     AJMP    ?C0036
                                           ; SOURCE LINE # 482
000D 110000      R     ACALL   L?0318
0010 110000      R     ACALL   L?0271
                                           ; SOURCE LINE # 483
0013 110000      R     ACALL   L?0283
0016 24C2              ADD     A,#0C2H
0018 110000      R     ACALL   L?0271
001B 74D2              MOV     A,#0D2H
                                           ; SOURCE LINE # 484
001D 110000      R     ACALL   L?0285
0020 24C6              ADD     A,#0C6H
0022 110000      R     ACALL   L?0271
0025 7420              MOV     A,#020H
                                           ; SOURCE LINE # 485
0027 110000      R     ACALL   L?0285
002A 24C9              ADD     A,#0C9H
002C 110000      R     ACALL   L?0271
002F E4                CLR     A
                                           ; SOURCE LINE # 486
0030 110000      R     ACALL   L?0285
0033 24CA              ADD     A,#0CAH
0035 110000      R     ACALL   L?0271
0038 E4                CLR     A
                                           ; SOURCE LINE # 487
0039 110000      R     ACALL   L?0285
003C 24CB              ADD     A,#0CBH
003E 110000      R     ACALL   L?0271
0041 74D6              MOV     A,#0D6H
                                           ; SOURCE LINE # 488
0043 110000      R     ACALL   L?0285
0046 24CC              ADD     A,#0CCH
0048 110000      R     ACALL   L?0271
004B E4                CLR     A
                                           ; SOURCE LINE # 490
                                           ; SOURCE LINE # 491
                                           ; SOURCE LINE # 492
                                           ; SOURCE LINE # 493
                                           ; SOURCE LINE # 495
                                           ; SOURCE LINE # 496
                                           ; SOURCE LINE # 497
                                           ; SOURCE LINE # 498
                                           ; SOURCE LINE # 499
                                           ; SOURCE LINE # 500
004C 110000      R     ACALL   L?0270
004F 7480              MOV     A,#080H
                                           ; SOURCE LINE # 501
0051 110000      R     ACALL   L?0285
0054 24DB              ADD     A,#0DBH
0056 110000      R     ACALL   L?0271
0059 7480              MOV     A,#080H
                                           ; SOURCE LINE # 502
005B 110000      R     ACALL   L?0285
005E 24DC              ADD     A,#0DCH
0060 110000      R     ACALL   L?0271
                                           ; SOURCE LINE # 504
0063 110000      R     ACALL   L?0283
0066 24E2              ADD     A,#0E2H
0068 110000      R     ACALL   L?0271
006B 7459              MOV     A,#059H
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 55  

                                           ; SOURCE LINE # 505
006D 110000      R     ACALL   L?0285
0070 24E3              ADD     A,#0E3H
0072 110000      R     ACALL   L?0271
0075 7417              MOV     A,#017H
                                           ; SOURCE LINE # 506
0077 110000      R     ACALL   L?0285
007A 24E4              ADD     A,#0E4H
007C 110000      R     ACALL   L?0271
007F 7434              MOV     A,#034H
                                           ; SOURCE LINE # 507
0081 110000      R     ACALL   L?0285
0084 24E5              ADD     A,#0E5H
0086 110000      R     ACALL   L?0271
0089 7433              MOV     A,#033H
                                           ; SOURCE LINE # 509
008B 110000      R     ACALL   L?0285
008E 24E6              ADD     A,#0E6H
0090 110000      R     ACALL   L?0271
0093 7420              MOV     A,#020H
0095 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 512
0096 7D01              MOV     R5,#01H
0098 7F5A              MOV     R7,#05AH
009A 7E03              MOV     R6,#03H
009C 110000      R     ACALL   _aRGB_LLPLLSetDivider
                                           ; SOURCE LINE # 515
009F E4                CLR     A
00A0 90000000    R     MOV     DPTR,#rvalue
00A4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 516
00A5 1D                DEC     R5
00A6 FF                MOV     R7,A
00A7 110000      R     ACALL   _aRGB_SetPhase
                                           ; SOURCE LINE # 518
00AA E4                CLR     A
00AB FF                MOV     R7,A
                                           ; SOURCE LINE # 521
00AC 010000      R     AJMP    ?C0246
00AF         ?C0036:
                                           ; SOURCE LINE # 522
00AF EC                MOV     A,R4
00B0 6403              XRL     A,#03H
00B2 6003              JZ      $ + 5H
00B4 010000      R     AJMP    ?C0038
                                           ; SOURCE LINE # 524
00B7 110000      R     ACALL   L?0318
00BA 110000      R     ACALL   L?0271
00BD 7408              MOV     A,#08H
                                           ; SOURCE LINE # 525
00BF 110000      R     ACALL   L?0285
00C2 24C2              ADD     A,#0C2H
00C4 110000      R     ACALL   L?0271
00C7 74D2              MOV     A,#0D2H
                                           ; SOURCE LINE # 526
00C9 110000      R     ACALL   L?0285
00CC 24C6              ADD     A,#0C6H
00CE 110000      R     ACALL   L?0271
00D1 7420              MOV     A,#020H
                                           ; SOURCE LINE # 527
00D3 110000      R     ACALL   L?0285
00D6 24C9              ADD     A,#0C9H
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 56  

00D8 110000      R     ACALL   L?0271
00DB E4                CLR     A
                                           ; SOURCE LINE # 528
00DC 110000      R     ACALL   L?0285
00DF 24CA              ADD     A,#0CAH
00E1 110000      R     ACALL   L?0271
00E4 E4                CLR     A
                                           ; SOURCE LINE # 529
00E5 110000      R     ACALL   L?0285
00E8 24CB              ADD     A,#0CBH
00EA 110000      R     ACALL   L?0271
00ED 7456              MOV     A,#056H
                                           ; SOURCE LINE # 530
00EF 110000      R     ACALL   L?0285
00F2 24CC              ADD     A,#0CCH
00F4 110000      R     ACALL   L?0271
00F7 7412              MOV     A,#012H
                                           ; SOURCE LINE # 532
                                           ; SOURCE LINE # 533
                                           ; SOURCE LINE # 534
                                           ; SOURCE LINE # 535
                                           ; SOURCE LINE # 537
                                           ; SOURCE LINE # 538
                                           ; SOURCE LINE # 539
                                           ; SOURCE LINE # 540
                                           ; SOURCE LINE # 541
                                           ; SOURCE LINE # 542
00F9 110000      R     ACALL   L?0270
00FC 7401              MOV     A,#01H
                                           ; SOURCE LINE # 543
00FE 110000      R     ACALL   L?0285
0101 24DB              ADD     A,#0DBH
0103 110000      R     ACALL   L?0271
0106 7401              MOV     A,#01H
                                           ; SOURCE LINE # 544
0108 110000      R     ACALL   L?0285
010B 24DC              ADD     A,#0DCH
010D 110000      R     ACALL   L?0271
                                           ; SOURCE LINE # 546
0110 110000      R     ACALL   L?0284
0113 24E2              ADD     A,#0E2H
0115 110000      R     ACALL   L?0271
0118 7459              MOV     A,#059H
                                           ; SOURCE LINE # 547
011A 110000      R     ACALL   L?0285
011D 24E3              ADD     A,#0E3H
011F 110000      R     ACALL   L?0271
0122 7417              MOV     A,#017H
                                           ; SOURCE LINE # 548
0124 110000      R     ACALL   L?0285
0127 24E4              ADD     A,#0E4H
0129 110000      R     ACALL   L?0271
012C 7434              MOV     A,#034H
                                           ; SOURCE LINE # 549
012E 110000      R     ACALL   L?0285
0131 24E5              ADD     A,#0E5H
0133 110000      R     ACALL   L?0271
0136 7433              MOV     A,#033H
                                           ; SOURCE LINE # 551
0138 110000      R     ACALL   L?0285
013B 24E6              ADD     A,#0E6H
013D 110000      R     ACALL   L?0271
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 57  

0140 7420              MOV     A,#020H
0142 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 554
0143 7D01              MOV     R5,#01H
0145 FF                MOV     R7,A
0146 7E04              MOV     R6,#04H
0148 110000      R     ACALL   _aRGB_LLPLLSetDivider
                                           ; SOURCE LINE # 555
014B 7F05              MOV     R7,#05H
014D 110000      E     ACALL   _GetPhaseEE
0150 90000000    R     MOV     DPTR,#rvalue
0154 EF                MOV     A,R7
0155 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 556
0156 BFFF02            CJNE    R7,#0FFH,?C0039
                                           ; SOURCE LINE # 557
0159 E4                CLR     A
015A F0                MOVX    @DPTR,A
015B         ?C0039:
                                           ; SOURCE LINE # 558
015B 90000000    R     MOV     DPTR,#rvalue
015F E0                MOVX    A,@DPTR
0160 FF                MOV     R7,A
0161 E4                CLR     A
0162 FD                MOV     R5,A
0163 110000      R     ACALL   _aRGB_SetPhase
                                           ; SOURCE LINE # 560
0166 7F01              MOV     R7,#01H
0168         ?C0246:
0168 010000      R     AJMP    _aRGB_setSignalPath
                                           ; SOURCE LINE # 562
016B         ?C0038:
                                           ; SOURCE LINE # 563
                                           ; SOURCE LINE # 566
016B 759300      E     MOV     DPX,#?C?XDATASEG
016E E500        E     MOV     A,regTW88+01H
0170 24CB              ADD     A,#0CBH
0172 110000      R     ACALL   L?0271
0175 E0                MOVX    A,@DPTR
0176 541F              ANL     A,#01FH
0178 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 567
0179 7F01              MOV     R7,#01H
017B 110000      E     ACALL   _aRGBSetClockSource
                                           ; SOURCE LINE # 568
                                           ; SOURCE LINE # 569
017E         ?C0041:
017E 22                RET     
             ; FUNCTION aRGB_SetDefaultFor (END)

             ; FUNCTION _aRGB_LLPLLUpdateDivider (BEGIN)
                                           ; SOURCE LINE # 591
0000 90000000    R     MOV     DPTR,#divider
0004 EE                MOV     A,R6
0005 F0                MOVX    @DPTR,A
0006 A3                INC     DPTR
0007 EF                MOV     A,R7
0008 F0                MOVX    @DPTR,A
0009 A3                INC     DPTR
000A ED                MOV     A,R5
000B F0                MOVX    @DPTR,A
000C A3                INC     DPTR
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 58  

000D EB                MOV     A,R3
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 592
                                           ; SOURCE LINE # 595
000F E4                CLR     A
0010 A3                INC     DPTR
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 597
0012 FD                MOV     R5,A
0013 FC                MOV     R4,A
0014 FF                MOV     R7,A
0015 110000      R     ACALL   _aRGB_SetFilterBandwidth
                                           ; SOURCE LINE # 599
0018 90000000    R     MOV     DPTR,#divider
001C E0                MOVX    A,@DPTR
001D FE                MOV     R6,A
001E A3                INC     DPTR
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 A3                INC     DPTR
0022 E0                MOVX    A,@DPTR
0023 FD                MOV     R5,A
0024 110000      R     ACALL   _aRGB_LLPLLSetDivider
                                           ; SOURCE LINE # 600
0027 90000000    R     MOV     DPTR,#fInit
002B E0                MOVX    A,@DPTR
002C 6015              JZ      ?C0042
                                           ; SOURCE LINE # 601
002E A3                INC     DPTR
002F E0                MOVX    A,@DPTR
0030 FF                MOV     R7,A
0031 7E00              MOV     R6,#00H
0033 110000      E     ACALL   _delay1ms
                                           ; SOURCE LINE # 602
0036 110000      R     ACALL   WaitStableLLPLL
0039 EF                MOV     A,R7
003A 6007              JZ      ?C0042
                                           ; SOURCE LINE # 603
003C 90000000    R     MOV     DPTR,#ret
0040 7401              MOV     A,#01H
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 604
0043         ?C0042:
                                           ; SOURCE LINE # 605
0043 E4                CLR     A
0044 FD                MOV     R5,A
0045 FC                MOV     R4,A
0046 7F07              MOV     R7,#07H
0048 110000      R     ACALL   _aRGB_SetFilterBandwidth
                                           ; SOURCE LINE # 607
004B 90000000    R     MOV     DPTR,#ret
004F E0                MOVX    A,@DPTR
0050 FF                MOV     R7,A
                                           ; SOURCE LINE # 608
0051         ?C0044:
0051 22                RET     
             ; FUNCTION _aRGB_LLPLLUpdateDivider (END)

             ; FUNCTION WaitStableLLPLL (BEGIN)
                                           ; SOURCE LINE # 621
                                           ; SOURCE LINE # 622
                                           ; SOURCE LINE # 631
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 59  

0000 7B00        R     MOV     R3,#MBYTE ?SC_16
0002 7A00        R     MOV     R2,#HIGH ?SC_16
0004 7900        R     MOV     R1,#LOW ?SC_16
0006 110000      E     ACALL   _dPrintf
                                           ; SOURCE LINE # 632
0009 E4                CLR     A
000A 90000000    R     MOV     DPTR,#i
000E F0                MOVX    @DPTR,A
000F         ?C0045:
                                           ; SOURCE LINE # 633
000F 110000      E     ACALL   Meas_StartMeasure
                                           ; SOURCE LINE # 634
0012 7F32              MOV     R7,#032H
0014 110000      E     ACALL   _Meas_IsMeasureDone
0017 EF                MOV     A,R7
0018 6009              JZ      ?C0048
                                           ; SOURCE LINE # 635
001A 7B00        R     MOV     R3,#MBYTE ?SC_34
001C 7A00        R     MOV     R2,#HIGH ?SC_34
001E 7900        R     MOV     R1,#LOW ?SC_34
                                           ; SOURCE LINE # 636
0020 010000      R     AJMP    ?C0247
                                           ; SOURCE LINE # 637
0023         ?C0048:
                                           ; SOURCE LINE # 638
0023 7B00        R     MOV     R3,#MBYTE HStart
0025 7A00        R     MOV     R2,#HIGH HStart
0027 7900        R     MOV     R1,#LOW HStart
0029 110000      E     ACALL   _MeasGetHActive
002C 90000000    R     MOV     DPTR,#HActive
0030 EE                MOV     A,R6
0031 F0                MOVX    @DPTR,A
0032 A3                INC     DPTR
0033 EF                MOV     A,R7
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 639
0035 110000      R     ACALL   aRGB_GetInputStatus
0038 90000000    R     MOV     DPTR,#status
003C EF                MOV     A,R7
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 640
003E 90000000    R     MOV     DPTR,#i
0042 E0                MOVX    A,@DPTR
0043 605E              JZ      ?C0051
                                           ; SOURCE LINE # 643
0045         ?C0050:
                                           ; SOURCE LINE # 644
0045 90000000    R     MOV     DPTR,#HActiveOld
0049 E0                MOVX    A,@DPTR
004A FE                MOV     R6,A
004B A3                INC     DPTR
004C E0                MOVX    A,@DPTR
004D FF                MOV     R7,A
004E 90000000    R     MOV     DPTR,#HActive
0052 E0                MOVX    A,@DPTR
0053 FC                MOV     R4,A
0054 A3                INC     DPTR
0055 E0                MOVX    A,@DPTR
0056 FD                MOV     R5,A
0057 6F                XRL     A,R7
0058 7002              JNZ     ?C0228
005A EC                MOV     A,R4
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 60  

005B 6E                XRL     A,R6
005C         ?C0228:
005C 7045              JNZ     ?C0051
005E 90000000    R     MOV     DPTR,#StatusOld
0062 E0                MOVX    A,@DPTR
0063 FF                MOV     R7,A
0064 90000000    R     MOV     DPTR,#status
0068 E0                MOVX    A,@DPTR
0069 B50737            CJNE    A,AR7,?C0051
                                           ; SOURCE LINE # 645
006C 7B00        R     MOV     R3,#MBYTE ?SC_48
006E 7A00        R     MOV     R2,#HIGH ?SC_48
0070 7900        R     MOV     R1,#LOW ?SC_48
0072 90000000    R     MOV     DPTR,#i
0076 E0                MOVX    A,@DPTR
0077 90000000    E     MOV     DPTR,#?_dPrintf?BYTE+03H
007B F0                MOVX    @DPTR,A
007C 90000000    R     MOV     DPTR,#HStart
0080 E0                MOVX    A,@DPTR
0081 FF                MOV     R7,A
0082 A3                INC     DPTR
0083 E0                MOVX    A,@DPTR
0084 90000000    E     MOV     DPTR,#?_dPrintf?BYTE+04H
0088 CF                XCH     A,R7
0089 F0                MOVX    @DPTR,A
008A A3                INC     DPTR
008B EF                MOV     A,R7
008C F0                MOVX    @DPTR,A
008D A3                INC     DPTR
008E EC                MOV     A,R4
008F F0                MOVX    @DPTR,A
0090 A3                INC     DPTR
0091 ED                MOV     A,R5
0092 F0                MOVX    @DPTR,A
0093 90000000    R     MOV     DPTR,#status
0097 E0                MOVX    A,@DPTR
0098 90000000    E     MOV     DPTR,#?_dPrintf?BYTE+08H
009C F0                MOVX    @DPTR,A
009D 110000      E     ACALL   _dPrintf
                                           ; SOURCE LINE # 646
00A0 7F00              MOV     R7,#00H
00A2 22                RET     
                                           ; SOURCE LINE # 647
00A3         ?C0051:
                                           ; SOURCE LINE # 648
00A3 90000000    R     MOV     DPTR,#HActive
00A7 E0                MOVX    A,@DPTR
00A8 FF                MOV     R7,A
00A9 A3                INC     DPTR
00AA E0                MOVX    A,@DPTR
00AB A3                INC     DPTR
00AC CF                XCH     A,R7
00AD F0                MOVX    @DPTR,A
00AE A3                INC     DPTR
00AF EF                MOV     A,R7
00B0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 649
00B1 90000000    R     MOV     DPTR,#status
00B5 E0                MOVX    A,@DPTR
00B6 A3                INC     DPTR
00B7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 650
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 61  

00B8 90000000    R     MOV     DPTR,#i
00BC E0                MOVX    A,@DPTR
00BD 04                INC     A
00BE F0                MOVX    @DPTR,A
00BF E0                MOVX    A,@DPTR
00C0 C3                CLR     C
00C1 9480              SUBB    A,#080H
00C3 5003              JNC     $ + 5H
00C5 010000      R     AJMP    ?C0045
00C8         ?C0046:
                                           ; SOURCE LINE # 651
00C8 7B00        R     MOV     R3,#MBYTE ?SC_100
00CA 7A00        R     MOV     R2,#HIGH ?SC_100
00CC 7900        R     MOV     R1,#LOW ?SC_100
00CE         ?C0247:
00CE 110000      E     ACALL   _dPrintf
                                           ; SOURCE LINE # 652
00D1 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 653
00D3         ?C0049:
00D3 22                RET     
             ; FUNCTION WaitStableLLPLL (END)

             ; FUNCTION _AdjustPixelClk (BEGIN)
                                           ; SOURCE LINE # 674
0000 90000000    R     MOV     DPTR,#digital_divider
0004 EE                MOV     A,R6
0005 F0                MOVX    @DPTR,A
0006 A3                INC     DPTR
0007 EF                MOV     A,R7
0008 F0                MOVX    @DPTR,A
0009 A3                INC     DPTR
000A ED                MOV     A,R5
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 675
                                           ; SOURCE LINE # 688
000C 110000      E     ACALL   Sspll2GetFreq
000F 110000      R     ACALL   L?0309
                                           ; SOURCE LINE # 700
0012 110000      E     ACALL   ScalerReadXDownReg
0015 90000000    R     MOV     DPTR,#HDown
0019 EE                MOV     A,R6
001A F0                MOVX    @DPTR,A
001B A3                INC     DPTR
001C EF                MOV     A,R7
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 704
001E 110000      E     ACALL   MeasGetVFreq
0021 E4                CLR     A
0022 FC                MOV     R4,A
0023 FD                MOV     R5,A
0024 FE                MOV     R6,A
0025 90000000    R     MOV     DPTR,#VFreq
0029 110000      E     ACALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 706
002C 90000000    E     MOV     DPTR,#InputMain
0030 E0                MOVX    A,@DPTR
0031 B4030F            CJNE    A,#03H,?C0053
                                           ; SOURCE LINE # 707
0034 110000      R     ACALL   aRGB_LLPLLGetDivider
0037 EF                MOV     A,R7
0038 2401              ADD     A,#01H
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 62  

003A FF                MOV     R7,A
003B E4                CLR     A
003C 3E                ADDC    A,R6
003D 90000000    R     MOV     DPTR,#Divider
                                           ; SOURCE LINE # 709
0041 800D              SJMP    ?C0248
0043         ?C0053:
                                           ; SOURCE LINE # 712
                                           ; SOURCE LINE # 721
                                           ; SOURCE LINE # 723
0043 90000000    R     MOV     DPTR,#digital_divider
0047 E0                MOVX    A,@DPTR
0048 FF                MOV     R7,A
0049 A3                INC     DPTR
004A E0                MOVX    A,@DPTR
004B 90000000    R     MOV     DPTR,#Divider
004F CF                XCH     A,R7
0050         ?C0248:
0050 F0                MOVX    @DPTR,A
0051 A3                INC     DPTR
0052 EF                MOV     A,R7
0053 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 724
                                           ; SOURCE LINE # 725
0054         ?C0054:
                                           ; SOURCE LINE # 727
0054 110000      E     ACALL   MeasGetVPeriod
0057 90000000    R     MOV     DPTR,#VPN
005B EE                MOV     A,R6
005C F0                MOVX    @DPTR,A
005D A3                INC     DPTR
005E EF                MOV     A,R7
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 728
0060 110000      E     ACALL   ScalerReadVScaleReg
0063 90000000    R     MOV     DPTR,#VScale
0067 EE                MOV     A,R6
0068 F0                MOVX    @DPTR,A
0069 A3                INC     DPTR
006A EF                MOV     A,R7
006B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 730
006C 110000      E     ACALL   ScalerReadHDEReg
006F 90000000    R     MOV     DPTR,#H_DE
0073 EE                MOV     A,R6
0074 F0                MOVX    @DPTR,A
0075 A3                INC     DPTR
0076 EF                MOV     A,R7
0077 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 731
0078 110000      E     ACALL   ScalerReadOutputWidth
007B 90000000    R     MOV     DPTR,#HActive
007F EE                MOV     A,R6
0080 F0                MOVX    @DPTR,A
0081 A3                INC     DPTR
0082 EF                MOV     A,R7
0083 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 742
0084 7B00        R     MOV     R3,#MBYTE ?SC_115
0086 7A00        R     MOV     R2,#HIGH ?SC_115
0088 7900        R     MOV     R1,#LOW ?SC_115
008A 90000000    R     MOV     DPTR,#PCLK
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 63  

008E 110000      R     ACALL   L?0274
0091 90000000    E     MOV     DPTR,#?_dPrintf?BYTE+03H
0095 110000      E     ACALL   ?C?LSTXDATA
0098 90000000    R     MOV     DPTR,#Divider
009C 110000      R     ACALL   L?0345
009F 90000000    R     MOV     DPTR,#HDown
00A3 E0                MOVX    A,@DPTR
00A4 FF                MOV     R7,A
00A5 A3                INC     DPTR
00A6 E0                MOVX    A,@DPTR
00A7 90000000    E     MOV     DPTR,#?_dPrintf?BYTE+09H
00AB CF                XCH     A,R7
00AC F0                MOVX    @DPTR,A
00AD A3                INC     DPTR
00AE EF                MOV     A,R7
00AF F0                MOVX    @DPTR,A
00B0 110000      E     ACALL   _dPrintf
                                           ; SOURCE LINE # 743
00B3 90000000    E     MOV     DPTR,#InputMain
00B7 E0                MOVX    A,@DPTR
00B8 6403              XRL     A,#03H
00BA 6003              JZ      $ + 5H
00BC 010000      R     AJMP    ?C0055
                                           ; SOURCE LINE # 744
00BF 90000000    R     MOV     DPTR,#i
00C3 7402              MOV     A,#02H
00C5 F0                MOVX    @DPTR,A
00C6         ?C0056:
                                           ; SOURCE LINE # 757
00C6 110000      R     ACALL   L?0322
00C9 110000      R     ACALL   L?0279
00CC 110000      E     ACALL   ?C?LMUL
00CF 90000000    R     MOV     DPTR,#VPN
00D3 110000      R     ACALL   L?0295
00D6 110000      R     ACALL   L?0370
00D9 C006              PUSH    AR6
00DB C007              PUSH    AR7
00DD 110000      R     ACALL   L?0313
00E0 D007              POP     AR7
00E2 D006              POP     AR6
00E4 110000      R     ACALL   L?0293
00E7 110000      R     ACALL   L?0323
00EA C006              PUSH    AR6
00EC C007              PUSH    AR7
00EE 110000      R     ACALL   L?0325
00F1 D007              POP     AR7
00F3 D006              POP     AR6
                                           ; SOURCE LINE # 758
00F5 110000      R     ACALL   L?0278
00F8 110000      R     ACALL   L?0294
00FB 110000      R     ACALL   L?0323
00FE C006              PUSH    AR6
0100 C007              PUSH    AR7
0102 90000000    R     MOV     DPTR,#VScale
0106 110000      R     ACALL   L?0314
0109 D007              POP     AR7
010B D006              POP     AR6
                                           ; SOURCE LINE # 766
010D 110000      R     ACALL   L?0299
0110 90000000    R     MOV     DPTR,#i
0114 E0                MOVX    A,@DPTR
0115 90000000    E     MOV     DPTR,#?_dPrintf?BYTE+03H
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 64  

0119 110000      R     ACALL   L?0272
011C 110000      R     ACALL   L?0373
                                           ; SOURCE LINE # 767
011F 90000000    R     MOV     DPTR,#i
0123 E0                MOVX    A,@DPTR
0124 B40226            CJNE    A,#02H,?C0059
                                           ; SOURCE LINE # 768
0127 A3                INC     DPTR
0128 7402              MOV     A,#02H
012A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 769
012B 110000      R     ACALL   L?0273
012E 90000000    R     MOV     DPTR,#PCLK1
0132 110000      R     ACALL   L?0280
0135 D3                SETB    C
0136 110000      E     ACALL   ?C?ULCMP
0139 4006              JC      ?C0060
                                           ; SOURCE LINE # 770
013B 90000000    R     MOV     DPTR,#PCLK1
                                           ; SOURCE LINE # 771
013F 8004              SJMP    ?C0249
0141         ?C0060:
                                           ; SOURCE LINE # 772
                                           ; SOURCE LINE # 773
0141 90000000    R     MOV     DPTR,#PCLK2
0145         ?C0249:
0145 110000      R     ACALL   L?0274
0148 110000      R     ACALL   L?0309
                                           ; SOURCE LINE # 774
                                           ; SOURCE LINE # 775
014B 804B              SJMP    ?C0058
014D         ?C0059:
                                           ; SOURCE LINE # 776
                                           ; SOURCE LINE # 777
014D 110000      R     ACALL   L?0273
0150 90000000    R     MOV     DPTR,#PCLK1
0154 110000      R     ACALL   L?0280
0157 D3                SETB    C
0158 110000      E     ACALL   ?C?ULCMP
015B 401A              JC      ?C0063
                                           ; SOURCE LINE # 778
015D 90000000    R     MOV     DPTR,#PCLK1
0161 110000      R     ACALL   L?0274
0164 90000000    R     MOV     DPTR,#PCLK
0168 110000      R     ACALL   L?0280
016B D3                SETB    C
016C 110000      E     ACALL   ?C?ULCMP
016F 4027              JC      ?C0058
                                           ; SOURCE LINE # 779
0171 90000000    R     MOV     DPTR,#PCLK1
                                           ; SOURCE LINE # 780
                                           ; SOURCE LINE # 781
                                           ; SOURCE LINE # 782
0175 8014              SJMP    ?C0251
0177         ?C0063:
                                           ; SOURCE LINE # 783
                                           ; SOURCE LINE # 784
0177 110000      R     ACALL   L?0273
017A 90000000    R     MOV     DPTR,#PCLK
017E 110000      R     ACALL   L?0280
0181 D3                SETB    C
0182 110000      E     ACALL   ?C?ULCMP
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 65  

0185 4011              JC      ?C0058
                                           ; SOURCE LINE # 785
0187 90000000    R     MOV     DPTR,#PCLK2
018B         ?C0251:
018B 110000      R     ACALL   L?0274
018E 110000      R     ACALL   L?0309
                                           ; SOURCE LINE # 786
0191 90000000    R     MOV     DPTR,#i
0195 E0                MOVX    A,@DPTR
0196 A3                INC     DPTR
0197 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 787
                                           ; SOURCE LINE # 788
                                           ; SOURCE LINE # 789
                                           ; SOURCE LINE # 790
0198         ?C0058:
0198 90000000    R     MOV     DPTR,#i
019C E0                MOVX    A,@DPTR
019D 04                INC     A
019E F0                MOVX    @DPTR,A
019F E0                MOVX    A,@DPTR
01A0 D3                SETB    C
01A1 9404              SUBB    A,#04H
01A3 5003              JNC     $ + 5H
01A5 010000      R     AJMP    ?C0056
01A8         ?C0057:
                                           ; SOURCE LINE # 791
01A8 90000000    R     MOV     DPTR,#PCLKO
01AC E0                MOVX    A,@DPTR
01AD C3                CLR     C
01AE 9401              SUBB    A,#01H
01B0 FF                MOV     R7,A
01B1 110000      E     ACALL   _PclkoSetDiv
                                           ; SOURCE LINE # 792
01B4 90000000    R     MOV     DPTR,#mode
01B8 E0                MOVX    A,@DPTR
01B9 FF                MOV     R7,A
01BA C3                CLR     C
01BB 9405              SUBB    A,#05H
01BD 400A              JC      ?C0067
01BF EF                MOV     A,R7
01C0 D3                SETB    C
01C1 9408              SUBB    A,#08H
01C3 5004              JNC     ?C0067
                                           ; SOURCE LINE # 793
01C5 E4                CLR     A
01C6 FF                MOV     R7,A
01C7 8002              SJMP    ?C0252
01C9         ?C0067:
                                           ; SOURCE LINE # 795
01C9 7F01              MOV     R7,#01H
01CB         ?C0252:
01CB 110000      E     ACALL   _PclkoSetPolarity
01CE         ?C0068:
                                           ; SOURCE LINE # 798
01CE 7B00        R     MOV     R3,#MBYTE ?SC_182
01D0 7A00        R     MOV     R2,#HIGH ?SC_182
01D2 7900        R     MOV     R1,#LOW ?SC_182
01D4 90000000    R     MOV     DPTR,#PCLK
01D8 110000      R     ACALL   L?0274
01DB 110000      R     ACALL   L?0331
01DE 110000      E     ACALL   _dPrintf
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 66  

                                           ; SOURCE LINE # 799
01E1 110000      R     ACALL   L?0342
01E4 2400              ADD     A,#00H
01E6 FF                MOV     R7,A
01E7 EE                MOV     A,R6
01E8 3409              ADDC    A,#09H
01EA FE                MOV     R6,A
01EB ED                MOV     A,R5
01EC 343D              ADDC    A,#03DH
01EE 110000      R     ACALL   L?0308
                                           ; SOURCE LINE # 800
01F1 7B00        R     MOV     R3,#MBYTE ?SC_216
01F3 7A00        R     MOV     R2,#HIGH ?SC_216
01F5 7900        R     MOV     R1,#LOW ?SC_216
01F7 90000000    R     MOV     DPTR,#PCLK
01FB 110000      R     ACALL   L?0274
01FE 90000000    E     MOV     DPTR,#?_dPrintf?BYTE+03H
0202 110000      E     ACALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 802
                                           ; SOURCE LINE # 803
0205 010000      R     AJMP    ?C0253
0208         ?C0055:
                                           ; SOURCE LINE # 804
                                           ; SOURCE LINE # 806
0208 90000000    R     MOV     DPTR,#i
020C 7403              MOV     A,#03H
020E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 807
                                           ; SOURCE LINE # 808
020F 110000      R     ACALL   L?0322
0212 110000      R     ACALL   L?0279
0215 110000      E     ACALL   ?C?LMUL
0218 A804              MOV     R0,AR4
021A A905              MOV     R1,AR5
021C AA06              MOV     R2,AR6
021E AB07              MOV     R3,AR7
0220 90000000    R     MOV     DPTR,#VPN
0224 E0                MOVX    A,@DPTR
0225 110000      R     ACALL   L?0370
0228 C006              PUSH    AR6
022A C007              PUSH    AR7
022C 110000      R     ACALL   L?0313
022F D007              POP     AR7
0231 D006              POP     AR6
0233 110000      R     ACALL   L?0293
0236 110000      R     ACALL   L?0324
0239 C006              PUSH    AR6
023B C007              PUSH    AR7
023D 110000      R     ACALL   L?0325
0240 D007              POP     AR7
0242 D006              POP     AR6
                                           ; SOURCE LINE # 809
0244 110000      R     ACALL   L?0278
0247 110000      R     ACALL   L?0294
024A 110000      R     ACALL   L?0324
024D C006              PUSH    AR6
024F C007              PUSH    AR7
0251 90000000    R     MOV     DPTR,#VScale
0255 110000      R     ACALL   L?0314
0258 D007              POP     AR7
025A D006              POP     AR6
                                           ; SOURCE LINE # 810
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 67  

025C 110000      R     ACALL   L?0299
025F 90000000    E     MOV     DPTR,#?_dPrintf?BYTE+03H
0263 7403              MOV     A,#03H
0265 110000      R     ACALL   L?0272
0268 110000      R     ACALL   L?0373
                                           ; SOURCE LINE # 811
026B 110000      R     ACALL   L?0273
026E 90000000    R     MOV     DPTR,#PCLK1
0272 110000      R     ACALL   L?0280
0275 D3                SETB    C
0276 110000      E     ACALL   ?C?ULCMP
0279 4006              JC      ?C0070
                                           ; SOURCE LINE # 812
027B 90000000    R     MOV     DPTR,#PCLK1
                                           ; SOURCE LINE # 813
027F 8004              SJMP    ?C0250
0281         ?C0070:
                                           ; SOURCE LINE # 814
                                           ; SOURCE LINE # 815
0281 90000000    R     MOV     DPTR,#PCLK2
0285         ?C0250:
0285 110000      R     ACALL   L?0274
0288 110000      R     ACALL   L?0309
                                           ; SOURCE LINE # 816
028B         ?C0071:
                                           ; SOURCE LINE # 817
028B 110000      R     ACALL   L?0342
028E 2440              ADD     A,#040H
0290 FF                MOV     R7,A
0291 EE                MOV     A,R6
0292 344B              ADDC    A,#04BH
0294 FE                MOV     R6,A
0295 ED                MOV     A,R5
0296 344C              ADDC    A,#04CH
0298 110000      R     ACALL   L?0308
                                           ; SOURCE LINE # 818
029B 7F00              MOV     R7,#00H
029D 7EF3              MOV     R6,#0F3H
029F 7D6F              MOV     R5,#06FH
02A1 7C06              MOV     R4,#06H
02A3 90000000    R     MOV     DPTR,#PCLK
02A7 110000      R     ACALL   L?0280
02AA C3                CLR     C
02AB 110000      E     ACALL   ?C?ULCMP
02AE 500A              JNC     ?C0072
                                           ; SOURCE LINE # 819
02B0 7F00              MOV     R7,#00H
02B2 7EF3              MOV     R6,#0F3H
02B4 7D6F              MOV     R5,#06FH
02B6 7C06              MOV     R4,#06H
02B8 801D              SJMP    ?C0254
02BA         ?C0072:
                                           ; SOURCE LINE # 820
02BA 7F00              MOV     R7,#00H
02BC 7E0E              MOV     R6,#0EH
02BE 7D27              MOV     R5,#027H
02C0 7C07              MOV     R4,#07H
02C2 90000000    R     MOV     DPTR,#PCLK
02C6 110000      R     ACALL   L?0280
02C9 D3                SETB    C
02CA 110000      E     ACALL   ?C?ULCMP
02CD 400B              JC      ?C0073
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 68  

                                           ; SOURCE LINE # 821
02CF 7F00              MOV     R7,#00H
02D1 7E0E              MOV     R6,#0EH
02D3 7D27              MOV     R5,#027H
02D5 7C07              MOV     R4,#07H
02D7         ?C0254:
02D7 110000      R     ACALL   L?0309
02DA         ?C0073:
                                           ; SOURCE LINE # 822
                                           ; SOURCE LINE # 823
02DA 7B00        R     MOV     R3,#MBYTE ?SC_243
02DC 7A00        R     MOV     R2,#HIGH ?SC_243
02DE 7900        R     MOV     R1,#LOW ?SC_243
02E0 90000000    R     MOV     DPTR,#PCLK
02E4 110000      R     ACALL   L?0274
02E7 110000      R     ACALL   L?0331
02EA         ?C0253:
02EA 110000      E     ACALL   _dPrintf
                                           ; SOURCE LINE # 824
02ED 90000000    R     MOV     DPTR,#PCLK
02F1 110000      R     ACALL   L?0274
02F4 E4                CLR     A
02F5 90000000    E     MOV     DPTR,#?_Sspll2SetFreq?BYTE+04H
02F9 F0                MOVX    @DPTR,A
02FA 110000      E     ACALL   _Sspll2SetFreq
                                           ; SOURCE LINE # 825
                                           ; SOURCE LINE # 827
02FD         ?C0075:
02FD 22                RET     
02FE         L?0373:
02FE 90000000    E     MOV     DPTR,#?_dPrintf?BYTE+08H
0302 110000      E     ACALL   ?C?LSTXDATA
0305 110000      E     ACALL   _dPrintf
0308 22                RET     
             ; FUNCTION _AdjustPixelClk (END)

             ; FUNCTION PCRestoreH (BEGIN)
                                           ; SOURCE LINE # 929
                                           ; SOURCE LINE # 930
                                           ; SOURCE LINE # 932
0000 90000000    E     MOV     DPTR,#RGB_hStart
0004 E0                MOVX    A,@DPTR
0005 FF                MOV     R7,A
0006 A3                INC     DPTR
0007 E0                MOVX    A,@DPTR
0008 90000000    R     MOV     DPTR,#hstart
000C CF                XCH     A,R7
000D F0                MOVX    @DPTR,A
000E A3                INC     DPTR
000F EF                MOV     A,R7
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 934
0011 110000      R     ACALL   L?0310
0014 602E              JZ      ?C0077
                                           ; SOURCE LINE # 937
0016         ?C0076:
                                           ; SOURCE LINE # 939
0016 90000000    R     MOV     DPTR,#hstart+01H
001A E0                MOVX    A,@DPTR
001B 2432              ADD     A,#032H
001D F0                MOVX    @DPTR,A
001E 90000000    R     MOV     DPTR,#hstart
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 69  

0022 E0                MOVX    A,@DPTR
0023 3400              ADDC    A,#00H
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 940
0026 110000      E     ACALL   _GetHActiveEE
0029 EF                MOV     A,R7
002A 33                RLC     A
002B 95E0              SUBB    A,ACC
002D FE                MOV     R6,A
002E C3                CLR     C
002F 90000000    R     MOV     DPTR,#hstart+01H
0033 E0                MOVX    A,@DPTR
0034 9F                SUBB    A,R7
0035 FF                MOV     R7,A
0036 90000000    R     MOV     DPTR,#hstart
003A E0                MOVX    A,@DPTR
003B 9E                SUBB    A,R6
003C FE                MOV     R6,A
003D F0                MOVX    @DPTR,A
003E A3                INC     DPTR
003F EF                MOV     A,R7
0040 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 941
0041 110000      E     ACALL   _InputSetHStart
                                           ; SOURCE LINE # 942
0044         ?C0077:
0044 22                RET     
             ; FUNCTION PCRestoreH (END)

             ; FUNCTION PCRestoreV (BEGIN)
                                           ; SOURCE LINE # 949
                                           ; SOURCE LINE # 950
                                           ; SOURCE LINE # 952
0000 90000000    E     MOV     DPTR,#RGB_vDE
0004 E0                MOVX    A,@DPTR
0005 FF                MOV     R7,A
0006 7E00              MOV     R6,#00H
0008 90000000    R     MOV     DPTR,#temp16
                                           ; SOURCE LINE # 953
000C 110000      R     ACALL   L?0366
000F EE                MOV     A,R6
0010 110000      R     ACALL   L?0306
0013 110000      E     ACALL   _dPrintf
                                           ; SOURCE LINE # 955
0016 110000      R     ACALL   L?0310
0019 602E              JZ      ?C0079
                                           ; SOURCE LINE # 958
001B         ?C0078:
                                           ; SOURCE LINE # 960
001B 110000      E     ACALL   _GetVBackPorchEE
001E EF                MOV     A,R7
001F 33                RLC     A
0020 95E0              SUBB    A,ACC
0022 FE                MOV     R6,A
0023 90000000    R     MOV     DPTR,#temp16+01H
0027 E0                MOVX    A,@DPTR
0028 2F                ADD     A,R7
0029 F0                MOVX    @DPTR,A
002A 90000000    R     MOV     DPTR,#temp16
002E E0                MOVX    A,@DPTR
002F 3E                ADDC    A,R6
                                           ; SOURCE LINE # 961
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 70  

0030 110000      R     ACALL   L?0360
0033 90000000    R     MOV     DPTR,#temp16
                                           ; SOURCE LINE # 962
0037 110000      R     ACALL   L?0305
003A 110000      E     ACALL   _dPrintf
                                           ; SOURCE LINE # 963
003D 90000000    R     MOV     DPTR,#temp16
0041 A3                INC     DPTR
0042 E0                MOVX    A,@DPTR
0043 FF                MOV     R7,A
0044 7E00              MOV     R6,#00H
0046 110000      E     ACALL   _ScalerWriteVDEReg
                                           ; SOURCE LINE # 965
0049         ?C0079:
0049 22                RET     
             ; FUNCTION PCRestoreV (END)

             ; FUNCTION PCResetCurrEEPROMMode (BEGIN)
                                           ; SOURCE LINE # 972
                                           ; SOURCE LINE # 973
                                           ; SOURCE LINE # 975
0000 110000      R     ACALL   L?0311
0003 110000      E     ACALL   _GetPixelClkEE
                                           ; SOURCE LINE # 976
0006 110000      R     ACALL   L?0346
0009 6008              JZ      ?C0080
                                           ; SOURCE LINE # 977
000B 110000      R     ACALL   L?0311
000E 7D32              MOV     R5,#032H
0010 110000      E     ACALL   _SavePixelClkEE
0013         ?C0080:
                                           ; SOURCE LINE # 979
0013 110000      R     ACALL   L?0311
0016 110000      E     ACALL   _GetPhaseEE
0019 90000000    R     MOV     DPTR,#temp
001D EF                MOV     A,R7
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 980
001F F4                CPL     A
0020 6008              JZ      ?C0081
                                           ; SOURCE LINE # 981
0022 110000      R     ACALL   L?0311
0025 7DFF              MOV     R5,#0FFH
0027 110000      E     ACALL   _SavePhaseEE
002A         ?C0081:
                                           ; SOURCE LINE # 983
002A 110000      R     ACALL   L?0311
002D 110000      E     ACALL   _GetHActiveEE
                                           ; SOURCE LINE # 984
0030 110000      R     ACALL   L?0346
0033 6008              JZ      ?C0082
                                           ; SOURCE LINE # 985
0035 110000      R     ACALL   L?0311
0038 7D32              MOV     R5,#032H
003A 110000      E     ACALL   _SaveHActiveEE
003D         ?C0082:
                                           ; SOURCE LINE # 987
003D 110000      R     ACALL   L?0311
0040 110000      E     ACALL   _GetVBackPorchEE
                                           ; SOURCE LINE # 988
0043 110000      R     ACALL   L?0347
0046 6008              JZ      ?C0084
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 71  

                                           ; SOURCE LINE # 989
0048 110000      R     ACALL   L?0311
004B 7D32              MOV     R5,#032H
004D 110000      E     ACALL   _SaveVBackPorchEE
                                           ; SOURCE LINE # 994
0050         ?C0084:
0050 22                RET     
             ; FUNCTION PCResetCurrEEPROMMode (END)

             ; FUNCTION FindInputModeCOMP (BEGIN)
                                           ; SOURCE LINE # 1027
                                           ; SOURCE LINE # 1028
                                           ; SOURCE LINE # 1039
0000 110000      E     ACALL   MeasGetVPeriod
0003 90000000    R     MOV     DPTR,#vtotal
0007 EE                MOV     A,R6
0008 F0                MOVX    @DPTR,A
0009 A3                INC     DPTR
000A EF                MOV     A,R7
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1043
000C E4                CLR     A
000D A3                INC     DPTR
000E F0                MOVX    @DPTR,A
000F         ?C0085:
                                           ; SOURCE LINE # 1044
000F 110000      E     ACALL   Meas_StartMeasure
                                           ; SOURCE LINE # 1045
0012 7F32              MOV     R7,#032H
0014 110000      E     ACALL   _Meas_IsMeasureDone
                                           ; SOURCE LINE # 1046
0017 110000      E     ACALL   MeasGetVPeriod
001A 90000000    R     MOV     DPTR,#wTemp
001E EE                MOV     A,R6
001F F0                MOVX    @DPTR,A
0020 A3                INC     DPTR
0021 EF                MOV     A,R7
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1047
0023 90000000    R     MOV     DPTR,#vtotal
0027 E0                MOVX    A,@DPTR
0028 6E                XRL     A,R6
0029 7003              JNZ     ?C0229
002B A3                INC     DPTR
002C E0                MOVX    A,@DPTR
002D 6F                XRL     A,R7
002E         ?C0229:
002E 6021              JZ      ?C0086
                                           ; SOURCE LINE # 1048
0030         ?C0088:
                                           ; SOURCE LINE # 1049
0030 90000000    R     MOV     DPTR,#wTemp
0034 E0                MOVX    A,@DPTR
0035 FF                MOV     R7,A
0036 A3                INC     DPTR
0037 E0                MOVX    A,@DPTR
0038 90000000    R     MOV     DPTR,#vtotal
003C CF                XCH     A,R7
003D F0                MOVX    @DPTR,A
003E A3                INC     DPTR
003F EF                MOV     A,R7
0040 F0                MOVX    @DPTR,A
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 72  

                                           ; SOURCE LINE # 1050
0041 7F05              MOV     R7,#05H
0043 7E00              MOV     R6,#00H
0045 110000      E     ACALL   _delay1ms
                                           ; SOURCE LINE # 1051
0048 90000000    R     MOV     DPTR,#i
004C 110000      R     ACALL   L?0335
004F 40BE              JC      ?C0085
0051         ?C0086:
                                           ; SOURCE LINE # 1052
0051 110000      E     ACALL   MeasGetVFreq
;---- Variable 'vfreq' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1053
0054 EF                MOV     A,R7
0055 C3                CLR     C
0056 9437              SUBB    A,#037H
0058 7F3C              MOV     R7,#03CH
005A 5002              JNC     ?C0089
005C 7F32              MOV     R7,#032H
005E         ?C0089:
                                           ; SOURCE LINE # 1054
005E         ?C0090:
                                           ; SOURCE LINE # 1056
005E EF                MOV     A,R7
005F 6432              XRL     A,#032H
0061 705B              JNZ     ?C0091
                                           ; SOURCE LINE # 1057
0063 110000      R     ACALL   L?0337
0066 5002              JNC     ?C0092
0068 8059              SJMP    ?C0255
006A         ?C0092:
                                           ; SOURCE LINE # 1058
006A C3                CLR     C
006B ED                MOV     A,R5
006C 9440              SUBB    A,#040H
006E EC                MOV     A,R4
006F 9401              SUBB    A,#01H
0071 500A              JNC     ?C0094
0073 90000000    R     MOV     DPTR,#i
0077 7401              MOV     A,#01H
0079 F0                MOVX    @DPTR,A
007A 010000      R     AJMP    ?C0104
007D         ?C0094:
                                           ; SOURCE LINE # 1059
007D C3                CLR     C
007E ED                MOV     A,R5
007F 944E              SUBB    A,#04EH
0081 EC                MOV     A,R4
0082 9402              SUBB    A,#02H
0084 500A              JNC     ?C0096
0086 90000000    R     MOV     DPTR,#i
008A 7404              MOV     A,#04H
008C F0                MOVX    @DPTR,A
008D 010000      R     AJMP    ?C0104
0090         ?C0096:
                                           ; SOURCE LINE # 1060
0090 C3                CLR     C
0091 ED                MOV     A,R5
0092 9476              SUBB    A,#076H
0094 EC                MOV     A,R4
0095 9402              SUBB    A,#02H
0097 5009              JNC     ?C0098
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 73  

0099 90000000    R     MOV     DPTR,#i
009D 7403              MOV     A,#03H
009F F0                MOVX    @DPTR,A
00A0 8078              SJMP    ?C0104
00A2         ?C0098:
                                           ; SOURCE LINE # 1063
00A2 C3                CLR     C
00A3 ED                MOV     A,R5
00A4 9420              SUBB    A,#020H
00A6 EC                MOV     A,R4
00A7 9403              SUBB    A,#03H
00A9 5009              JNC     ?C0100
00AB 90000000    R     MOV     DPTR,#i
00AF 7406              MOV     A,#06H
00B1 F0                MOVX    @DPTR,A
00B2 8066              SJMP    ?C0104
00B4         ?C0100:
                                           ; SOURCE LINE # 1064
00B4 110000      R     ACALL   L?0367
00B7 505E              JNC     ?C0256
00B9 7408              MOV     A,#08H
00BB F0                MOVX    @DPTR,A
00BC 805C              SJMP    ?C0104
00BE         ?C0091:
                                           ; SOURCE LINE # 1067
                                           ; SOURCE LINE # 1068
00BE 110000      R     ACALL   L?0337
00C1 5003              JNC     ?C0105
00C3         ?C0255:
00C3 A3                INC     DPTR
00C4 8051              SJMP    ?C0257
00C6         ?C0105:
                                           ; SOURCE LINE # 1069
00C6 C3                CLR     C
00C7 ED                MOV     A,R5
00C8 942C              SUBB    A,#02CH
00CA EC                MOV     A,R4
00CB 9401              SUBB    A,#01H
00CD 5008              JNC     ?C0107
00CF E4                CLR     A
00D0 90000000    R     MOV     DPTR,#i
00D4 F0                MOVX    @DPTR,A
00D5 8043              SJMP    ?C0104
00D7         ?C0107:
                                           ; SOURCE LINE # 1070
00D7 C3                CLR     C
00D8 ED                MOV     A,R5
00D9 941C              SUBB    A,#01CH
00DB EC                MOV     A,R4
00DC 9402              SUBB    A,#02H
00DE 5009              JNC     ?C0109
00E0 90000000    R     MOV     DPTR,#i
00E4 7402              MOV     A,#02H
00E6 F0                MOVX    @DPTR,A
00E7 8031              SJMP    ?C0104
00E9         ?C0109:
                                           ; SOURCE LINE # 1071
00E9 C3                CLR     C
00EA ED                MOV     A,R5
00EB 9458              SUBB    A,#058H
00ED EC                MOV     A,R4
00EE 9402              SUBB    A,#02H
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 74  

00F0 5009              JNC     ?C0111
00F2 90000000    R     MOV     DPTR,#i
00F6 7405              MOV     A,#05H
00F8 F0                MOVX    @DPTR,A
00F9 801F              SJMP    ?C0104
00FB         ?C0111:
                                           ; SOURCE LINE # 1072
00FB C3                CLR     C
00FC ED                MOV     A,R5
00FD 9420              SUBB    A,#020H
00FF EC                MOV     A,R4
0100 9403              SUBB    A,#03H
0102 5009              JNC     ?C0113
0104 90000000    R     MOV     DPTR,#i
0108 7407              MOV     A,#07H
010A F0                MOVX    @DPTR,A
010B 800D              SJMP    ?C0104
010D         ?C0113:
                                           ; SOURCE LINE # 1073
010D 110000      R     ACALL   L?0367
0110 5005              JNC     ?C0115
0112 7409              MOV     A,#09H
0114 F0                MOVX    @DPTR,A
0115 8003              SJMP    ?C0104
0117         ?C0115:
                                           ; SOURCE LINE # 1074
0117         ?C0256:
0117         ?C0257:
0117 74FF              MOV     A,#0FFH
0119 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1075
011A         ?C0104:
                                           ; SOURCE LINE # 1077
011A 7B00        R     MOV     R3,#MBYTE ?SC_289
011C 7A00        R     MOV     R2,#HIGH ?SC_289
011E 7900        R     MOV     R1,#LOW ?SC_289
0120 90000000    R     MOV     DPTR,#i
0124 E0                MOVX    A,@DPTR
0125 110000      R     ACALL   L?0306
0128 90000000    R     MOV     DPTR,#vtotal
012C E0                MOVX    A,@DPTR
012D FF                MOV     R7,A
012E A3                INC     DPTR
012F E0                MOVX    A,@DPTR
0130 90000000    E     MOV     DPTR,#?_dPrintf?BYTE+05H
0134 CF                XCH     A,R7
0135 F0                MOVX    @DPTR,A
0136 A3                INC     DPTR
0137 EF                MOV     A,R7
0138 F0                MOVX    @DPTR,A
0139 110000      E     ACALL   _dPrintf
                                           ; SOURCE LINE # 1078
013C 90000000    R     MOV     DPTR,#i
0140 E0                MOVX    A,@DPTR
0141 FF                MOV     R7,A
                                           ; SOURCE LINE # 1079
0142         ?C0117:
0142 22                RET     
             ; FUNCTION FindInputModeCOMP (END)

             ; FUNCTION _ConvertComponentMode2HW (BEGIN)
                                           ; SOURCE LINE # 1090
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 75  

;---- Variable 'new_mode' assigned to Register 'R6' ----
;---- Variable 'mode' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1091
                                           ; SOURCE LINE # 1093
0000 EF                MOV     A,R7
0001 B40A00            CJNE    A,#0AH,?C0230
0004         ?C0230:
0004 504A              JNC     ?C0129
0006 90000000    R     MOV     DPTR,#?C0231
000A F8                MOV     R0,A
000B 28                ADD     A,R0
000C 28                ADD     A,R0
000D 73                JMP     @A+DPTR
000E         ?C0231:
000E 010000      R     AJMP    ?C0119
0011 010000      R     AJMP    ?C0120
0014 010000      R     AJMP    ?C0121
0017 010000      R     AJMP    ?C0122
001A 010000      R     AJMP    ?C0123
001D 010000      R     AJMP    ?C0124
0020 010000      R     AJMP    ?C0125
0023 010000      R     AJMP    ?C0126
0026 010000      R     AJMP    ?C0127
0029 010000      R     AJMP    ?C0127
                                           ; SOURCE LINE # 1094
002C         ?C0119:
002C AE07              MOV     R6,AR7
002E 8022              SJMP    ?C0118
                                           ; SOURCE LINE # 1095
0030         ?C0120:
0030 AE07              MOV     R6,AR7
0032 801E              SJMP    ?C0118
                                           ; SOURCE LINE # 1096
0034         ?C0121:
0034 AE07              MOV     R6,AR7
0036 801A              SJMP    ?C0118
                                           ; SOURCE LINE # 1097
0038         ?C0122:
0038 AE07              MOV     R6,AR7
003A 8016              SJMP    ?C0118
                                           ; SOURCE LINE # 1098
003C         ?C0123:
003C 7E04              MOV     R6,#04H
003E 8012              SJMP    ?C0118
                                           ; SOURCE LINE # 1099
0040         ?C0124:
0040 7E04              MOV     R6,#04H
0042 800E              SJMP    ?C0118
                                           ; SOURCE LINE # 1100
0044         ?C0125:
0044 7E05              MOV     R6,#05H
0046 800A              SJMP    ?C0118
                                           ; SOURCE LINE # 1101
0048         ?C0126:
0048 7E05              MOV     R6,#05H
004A 8006              SJMP    ?C0118
                                           ; SOURCE LINE # 1102
004C         ?C0127:
004C 7E06              MOV     R6,#06H
004E 8002              SJMP    ?C0118
                                           ; SOURCE LINE # 1103
                                           ; SOURCE LINE # 1104
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 76  

0050         ?C0129:
0050 7E07              MOV     R6,#07H
                                           ; SOURCE LINE # 1105
0052         ?C0118:
                                           ; SOURCE LINE # 1106
0052 AF06              MOV     R7,AR6
                                           ; SOURCE LINE # 1107
0054         ?C0130:
0054 22                RET     
             ; FUNCTION _ConvertComponentMode2HW (END)

             ; FUNCTION _YUV_PrepareInfoString (BEGIN)
                                           ; SOURCE LINE # 1200
0000 90000000    R     MOV     DPTR,#mode
0004 EF                MOV     A,R7
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1201
                                           ; SOURCE LINE # 1202
0006 110000      E     ACALL   FOsdSetInputMainString2FOsdMsgBuff
                                           ; SOURCE LINE # 1203
0009 110000      R     ACALL   L?0300
000C 110000      E     ACALL   _TWstrcat
                                           ; SOURCE LINE # 1204
000F 90000000    R     MOV     DPTR,#mode
0013 E0                MOVX    A,@DPTR
0014 B40A00            CJNE    A,#0AH,?C0232
0017         ?C0232:
0017 4003              JC      $ + 5H
0019 010000      R     AJMP    ?C0142
001C 90000000    R     MOV     DPTR,#?C0233
0020 F8                MOV     R0,A
0021 28                ADD     A,R0
0022 28                ADD     A,R0
0023 73                JMP     @A+DPTR
0024         ?C0233:
0024 010000      R     AJMP    ?C0132
0027 010000      R     AJMP    ?C0133
002A 010000      R     AJMP    ?C0134
002D 010000      R     AJMP    ?C0135
0030 010000      R     AJMP    ?C0136
0033 010000      R     AJMP    ?C0137
0036 010000      R     AJMP    ?C0138
0039 010000      R     AJMP    ?C0139
003C 010000      R     AJMP    ?C0140
003F 010000      R     AJMP    ?C0141
                                           ; SOURCE LINE # 1205
0042         ?C0132:
0042 7400        R     MOV     A,#MBYTE ?SC_326
0044 110000      R     ACALL   L?0304
0047 7400        R     MOV     A,#HIGH ?SC_326
0049 F0                MOVX    @DPTR,A
004A A3                INC     DPTR
004B 7400        R     MOV     A,#LOW ?SC_326
004D 010000      R     AJMP    ?C0267
                                           ; SOURCE LINE # 1206
0050         ?C0133:
0050 7400        R     MOV     A,#MBYTE ?SC_331
0052 110000      R     ACALL   L?0304
0055 7400        R     MOV     A,#HIGH ?SC_331
0057 F0                MOVX    @DPTR,A
0058 A3                INC     DPTR
0059 7400        R     MOV     A,#LOW ?SC_331
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 77  

005B         ?C0258:
005B 8073              SJMP    ?C0267
                                           ; SOURCE LINE # 1207
005D         ?C0134:
005D 7400        R     MOV     A,#MBYTE ?SC_336
005F 110000      R     ACALL   L?0307
0062 7400        R     MOV     A,#HIGH ?SC_336
0064 F0                MOVX    @DPTR,A
0065 A3                INC     DPTR
0066 7400        R     MOV     A,#LOW ?SC_336
0068         ?C0259:
0068 8066              SJMP    ?C0267
                                           ; SOURCE LINE # 1208
006A         ?C0135:
006A 7400        R     MOV     A,#MBYTE ?SC_341
006C 110000      R     ACALL   L?0307
006F 7400        R     MOV     A,#HIGH ?SC_341
0071 F0                MOVX    @DPTR,A
0072 A3                INC     DPTR
0073 7400        R     MOV     A,#LOW ?SC_341
0075         ?C0260:
0075 8059              SJMP    ?C0267
                                           ; SOURCE LINE # 1209
0077         ?C0136:
0077 7400        R     MOV     A,#MBYTE ?SC_346
0079 110000      R     ACALL   L?0312
007C 7400        R     MOV     A,#HIGH ?SC_346
007E F0                MOVX    @DPTR,A
007F A3                INC     DPTR
0080 7400        R     MOV     A,#LOW ?SC_346
0082         ?C0261:
0082 804C              SJMP    ?C0267
                                           ; SOURCE LINE # 1210
0084         ?C0137:
0084 7400        R     MOV     A,#MBYTE ?SC_357
0086 110000      R     ACALL   L?0312
0089 7400        R     MOV     A,#HIGH ?SC_357
008B F0                MOVX    @DPTR,A
008C A3                INC     DPTR
008D 7400        R     MOV     A,#LOW ?SC_357
008F         ?C0262:
008F 803F              SJMP    ?C0267
                                           ; SOURCE LINE # 1211
0091         ?C0138:
0091 7400        R     MOV     A,#MBYTE ?SC_368
0093 110000      R     ACALL   L?0315
0096 7400        R     MOV     A,#HIGH ?SC_368
0098 F0                MOVX    @DPTR,A
0099 A3                INC     DPTR
009A 7400        R     MOV     A,#LOW ?SC_368
009C         ?C0263:
009C 8032              SJMP    ?C0267
                                           ; SOURCE LINE # 1212
009E         ?C0139:
009E 7400        R     MOV     A,#MBYTE ?SC_378
00A0 110000      R     ACALL   L?0315
00A3 7400        R     MOV     A,#HIGH ?SC_378
00A5 F0                MOVX    @DPTR,A
00A6 A3                INC     DPTR
00A7 7400        R     MOV     A,#LOW ?SC_378
00A9         ?C0264:
00A9 8025              SJMP    ?C0267
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 78  

                                           ; SOURCE LINE # 1213
00AB         ?C0140:
00AB 7400        R     MOV     A,#MBYTE ?SC_388
00AD 110000      R     ACALL   L?0326
00B0 7400        R     MOV     A,#HIGH ?SC_388
00B2 F0                MOVX    @DPTR,A
00B3 A3                INC     DPTR
00B4 7400        R     MOV     A,#LOW ?SC_388
00B6         ?C0265:
00B6 8018              SJMP    ?C0267
                                           ; SOURCE LINE # 1214
00B8         ?C0141:
00B8 7400        R     MOV     A,#MBYTE ?SC_399
00BA 110000      R     ACALL   L?0326
00BD 7400        R     MOV     A,#HIGH ?SC_399
00BF F0                MOVX    @DPTR,A
00C0 A3                INC     DPTR
00C1 7400        R     MOV     A,#LOW ?SC_399
00C3         ?C0266:
00C3 800B              SJMP    ?C0267
                                           ; SOURCE LINE # 1215
00C5         ?C0142:
00C5 7400        R     MOV     A,#MBYTE ?SC_410
00C7 110000      R     ACALL   L?0352
00CA 7400        R     MOV     A,#HIGH ?SC_410
00CC F0                MOVX    @DPTR,A
00CD A3                INC     DPTR
00CE 7400        R     MOV     A,#LOW ?SC_410
00D0         ?C0267:
00D0 110000      R     ACALL   L?0303
00D3 110000      E     ACALL   _TWstrcat
                                           ; SOURCE LINE # 1216
                                           ; SOURCE LINE # 1217
00D6         ?C0143:
00D6 22                RET     
             ; FUNCTION _YUV_PrepareInfoString (END)

             ; FUNCTION CheckAndSetComponent (BEGIN)
                                           ; SOURCE LINE # 1228
                                           ; SOURCE LINE # 1229
                                           ; SOURCE LINE # 1243
0000 E4                CLR     A
0001 90000000    R     MOV     DPTR,#Input_aRGBMode
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1244
0006 90000000    R     MOV     DPTR,#i
000A F0                MOVX    @DPTR,A
000B         ?C0144:
                                           ; SOURCE LINE # 1245
000B E4                CLR     A
000C 90000000    R     MOV     DPTR,#j
0010 F0                MOVX    @DPTR,A
0011         ?C0147:
                                           ; SOURCE LINE # 1246
0011 110000      E     ACALL   Meas_StartMeasure
                                           ; SOURCE LINE # 1247
0014 7F32              MOV     R7,#032H
0016 110000      E     ACALL   _Meas_IsMeasureDone
0019 EF                MOV     A,R7
001A 6003              JZ      ?C0150
                                           ; SOURCE LINE # 1248
001C 7F01              MOV     R7,#01H
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 79  

001E 22                RET     
                                           ; SOURCE LINE # 1249
001F         ?C0150:
                                           ; SOURCE LINE # 1251
001F 110000      R     ACALL   FindInputModeCOMP
0022 90000000    R     MOV     DPTR,#mode
0026 EF                MOV     A,R7
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1252
0028 BFFF09            CJNE    R7,#0FFH,?C0148
                                           ; SOURCE LINE # 1253
002B         ?C0152:
                                           ; SOURCE LINE # 1254
002B         ?C0149:
002B 90000000    R     MOV     DPTR,#j
002F 110000      R     ACALL   L?0335
0032 40DD              JC      ?C0147
0034         ?C0148:
                                           ; SOURCE LINE # 1255
0034 90000000    R     MOV     DPTR,#mode
0038 E0                MOVX    A,@DPTR
0039 FE                MOV     R6,A
003A B4FF03            CJNE    A,#0FFH,?C0153
                                           ; SOURCE LINE # 1256
003D 7F01              MOV     R7,#01H
003F 22                RET     
                                           ; SOURCE LINE # 1257
0040         ?C0153:
                                           ; SOURCE LINE # 1259
0040 EE                MOV     A,R6
0041 75F015            MOV     B,#015H
0044 A4                MUL     AB
0045 2400        E     ADD     A,#LOW TW8836_COMP_TABLE
0047 F9                MOV     R1,A
0048 7400        E     MOV     A,#HIGH TW8836_COMP_TABLE
004A 35F0              ADDC    A,B
004C FA                MOV     R2,A
004D 90000000    R     MOV     DPTR,#pTimeTable
0051 7400        E     MOV     A,#MBYTE TW8836_COMP_TABLE
0053 110000      R     ACALL   L?0292
                                           ; SOURCE LINE # 1261
0056 7FF2              MOV     R7,#0F2H
0058 110000      R     ACALL   _aRGB_SetLLPLLControl
                                           ; SOURCE LINE # 1262
005B 110000      R     ACALL   L?0275
005E 2407              ADD     A,#07H
0060 110000      R     ACALL   L?0289
0063 110000      R     ACALL   L?0379
0066 E4                CLR     A
0067 FB                MOV     R3,A
0068 7D01              MOV     R5,#01H
006A 110000      R     ACALL   _aRGB_LLPLLUpdateDivider
;---- Variable 'ret' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1263
006D EF                MOV     A,R7
006E B40103            CJNE    A,#01H,?C0154
                                           ; SOURCE LINE # 1264
0071 7F01              MOV     R7,#01H
0073 22                RET     
                                           ; SOURCE LINE # 1265
0074         ?C0154:
                                           ; SOURCE LINE # 1268
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 80  

0074 110000      R     ACALL   FindInputModeCOMP
;---- Variable 'modeNew' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1269
0077 90000000    R     MOV     DPTR,#mode
007B E0                MOVX    A,@DPTR
007C 6F                XRL     A,R7
007D 6009              JZ      ?C0145
                                           ; SOURCE LINE # 1270
007F         ?C0155:
                                           ; SOURCE LINE # 1272
007F         ?C0146:
007F 90000000    R     MOV     DPTR,#i
0083 110000      R     ACALL   L?0336
0086 4083              JC      ?C0144
0088         ?C0145:
                                           ; SOURCE LINE # 1273
0088 110000      R     ACALL   L?0276
008B F9                MOV     R1,A
008C 110000      E     ACALL   _PrintCompVideoTimeTable
                                           ; SOURCE LINE # 1275
008F 110000      R     ACALL   L?0353
0092 90000000    R     MOV     DPTR,#Input_aRGBMode
0096 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1276
0097 110000      R     ACALL   _ConvertComponentMode2HW
009A 90000000    E     MOV     DPTR,#InputSubMode
009E EF                MOV     A,R7
009F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1278
00A0 110000      R     ACALL   L?0353
00A3 110000      E     ACALL   _InitComponentReg
                                           ; SOURCE LINE # 1281
00A6 7F01              MOV     R7,#01H
00A8 110000      R     ACALL   _aRGB_SetClampModeHSyncEdge
                                           ; SOURCE LINE # 1282
00AB 110000      R     ACALL   L?0276
00AE 2411              ADD     A,#011H
00B0 110000      R     ACALL   L?0298
00B3 FF                MOV     R7,A
00B4 110000      R     ACALL   _aRGB_SetClampPosition
                                           ; SOURCE LINE # 1284
00B7 7F04              MOV     R7,#04H
00B9 110000      E     ACALL   _MeasSetErrTolerance
                                           ; SOURCE LINE # 1285
00BC 7F01              MOV     R7,#01H
00BE 110000      E     ACALL   _MeasEnableChangedDetection
                                           ; SOURCE LINE # 1287
00C1 110000      R     ACALL   L?0276
00C4 240B              ADD     A,#0BH
00C6 110000      R     ACALL   L?0289
00C9 90000000    R     MOV     DPTR,#hStart
                                           ; SOURCE LINE # 1288
00CD 110000      R     ACALL   L?0319
00D0 2401              ADD     A,#01H
00D2 110000      R     ACALL   L?0289
00D5 90000000    R     MOV     DPTR,#hActive
                                           ; SOURCE LINE # 1289
00D9 110000      R     ACALL   L?0319
00DC 240F              ADD     A,#0FH
00DE 110000      R     ACALL   L?0298
00E1 FF                MOV     R7,A
00E2 110000      R     ACALL   L?0320
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 81  

00E5 2410              ADD     A,#010H
00E7 110000      R     ACALL   L?0298
00EA 2F                ADD     A,R7
00EB FE                MOV     R6,A
00EC E4                CLR     A
00ED 33                RLC     A
00EE 90000000    R     MOV     DPTR,#vStart
00F2 F0                MOVX    @DPTR,A
00F3 A3                INC     DPTR
00F4 CE                XCH     A,R6
00F5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1290
00F6 110000      R     ACALL   L?0286
00F9 FF                MOV     R7,A
00FA 90000000    R     MOV     DPTR,#vActive
00FE E5F0              MOV     A,B
0100 F0                MOVX    @DPTR,A
0101 A3                INC     DPTR
0102 EF                MOV     A,R7
0103 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1293
0104 7F12              MOV     R7,#012H
0106 7E00              MOV     R6,#00H
0108 110000      E     ACALL   _E3P_Read
010B 90000000    R     MOV     DPTR,#fScale
010F EF                MOV     A,R7
0110 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1294
0111 704E              JNZ     ?C0156
                                           ; SOURCE LINE # 1295
0113 A3                INC     DPTR
0114 110000      R     ACALL   L?0277
0117 2412              ADD     A,#012H
0119 110000      R     ACALL   L?0298
011C FF                MOV     R7,A
011D FD                MOV     R5,A
011E 90000000    R     MOV     DPTR,#hStart+01H
0122 E0                MOVX    A,@DPTR
0123 2D                ADD     A,R5
0124 F0                MOVX    @DPTR,A
0125 90000000    R     MOV     DPTR,#hStart
0129 E0                MOVX    A,@DPTR
012A 3400              ADDC    A,#00H
012C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1296
012D EF                MOV     A,R7
012E 75F002            MOV     B,#02H
0131 A4                MUL     AB
0132 FF                MOV     R7,A
0133 AEF0              MOV     R6,B
0135 C3                CLR     C
0136 90000000    R     MOV     DPTR,#hActive+01H
013A E0                MOVX    A,@DPTR
013B 9F                SUBB    A,R7
013C F0                MOVX    @DPTR,A
013D 90000000    R     MOV     DPTR,#hActive
0141 E0                MOVX    A,@DPTR
0142 9E                SUBB    A,R6
0143 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1297
0144 90000000    R     MOV     DPTR,#pTimeTable
0148 110000      R     ACALL   L?0296
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 82  

014B FF                MOV     R7,A
014C 7E00              MOV     R6,#00H
014E 90000000    R     MOV     DPTR,#vStart+01H
0152 E0                MOVX    A,@DPTR
0153 2F                ADD     A,R7
0154 F0                MOVX    @DPTR,A
0155 90000000    R     MOV     DPTR,#vStart
0159 E0                MOVX    A,@DPTR
015A 3E                ADDC    A,R6
015B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1298
015C 110000      R     ACALL   L?0348
015F 9E                SUBB    A,R6
0160 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1299
0161         ?C0156:
                                           ; SOURCE LINE # 1301
0161 90000000    R     MOV     DPTR,#vStart
0165 E0                MOVX    A,@DPTR
0166 FC                MOV     R4,A
0167 A3                INC     DPTR
0168 E0                MOVX    A,@DPTR
0169 FD                MOV     R5,A
016A 90000000    R     MOV     DPTR,#hActive+01H
016E E0                MOVX    A,@DPTR
016F 2401              ADD     A,#01H
0171 FB                MOV     R3,A
0172 90000000    R     MOV     DPTR,#hActive
0176 E0                MOVX    A,@DPTR
0177 3400              ADDC    A,#00H
0179 FA                MOV     R2,A
017A 110000      R     ACALL   L?0355
017D 2401              ADD     A,#01H
017F 110000      R     ACALL   L?0368
0182 90000000    R     MOV     DPTR,#hStart
0186 E0                MOVX    A,@DPTR
0187 FE                MOV     R6,A
0188 A3                INC     DPTR
0189 E0                MOVX    A,@DPTR
018A FF                MOV     R7,A
018B 110000      E     ACALL   _InputSetCrop
                                           ; SOURCE LINE # 1305
018E 110000      R     ACALL   L?0354
0191 6008              JZ      ?C0158
0193 6401              XRL     A,#01H
0195 6004              JZ      ?C0158
0197 EF                MOV     A,R7
0198 B40704            CJNE    A,#07H,?C0157
019B         ?C0158:
                                           ; SOURCE LINE # 1308
019B E4                CLR     A
019C FF                MOV     R7,A
019D 8002              SJMP    ?C0268
019F         ?C0157:
                                           ; SOURCE LINE # 1310
019F 7F01              MOV     R7,#01H
01A1         ?C0268:
01A1 110000      E     ACALL   _InputSetFieldPolarity
01A4         ?C0159:
                                           ; SOURCE LINE # 1311
01A4 110000      R     ACALL   L?0276
01A7 2406              ADD     A,#06H
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 83  

01A9 110000      R     ACALL   L?0298
01AC 7F01              MOV     R7,#01H
01AE 30E002            JNB     ACC.0,?C0160
01B1 7F00              MOV     R7,#00H
01B3         ?C0160:
01B3         ?C0161:
01B3 110000      E     ACALL   _InputSetProgressiveField
                                           ; SOURCE LINE # 1313
01B6 90000000    R     MOV     DPTR,#fScale
01BA E0                MOVX    A,@DPTR
01BB 700E              JNZ     ?C0162
                                           ; SOURCE LINE # 1314
01BD A3                INC     DPTR
01BE 110000      R     ACALL   L?0277
01C1 110000      R     ACALL   L?0297
01C4 FF                MOV     R7,A
01C5 110000      R     ACALL   L?0348
01C8 9400              SUBB    A,#00H
01CA F0                MOVX    @DPTR,A
01CB         ?C0162:
                                           ; SOURCE LINE # 1317
01CB 90000000    R     MOV     DPTR,#hActive
01CF E0                MOVX    A,@DPTR
01D0 FE                MOV     R6,A
01D1 A3                INC     DPTR
01D2 E0                MOVX    A,@DPTR
01D3 FF                MOV     R7,A
01D4 110000      E     ACALL   _ScalerSetHScale
                                           ; SOURCE LINE # 1318
01D7 110000      R     ACALL   L?0355
01DA FF                MOV     R7,A
01DB 110000      E     ACALL   _ScalerSetVScale
                                           ; SOURCE LINE # 1319
01DE 90000000    R     MOV     DPTR,#vStart
01E2 A3                INC     DPTR
01E3 E0                MOVX    A,@DPTR
01E4 FF                MOV     R7,A
01E5 110000      E     ACALL   _ScalerSet_vDE_value
                                           ; SOURCE LINE # 1322
01E8 110000      E     ACALL   ScalerCalcHDE
;---- Variable 'bTemp' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1323
01EB 7E00              MOV     R6,#00H
01ED 110000      E     ACALL   _ScalerWriteHDEReg
                                           ; SOURCE LINE # 1330
01F0 110000      R     ACALL   L?0276
01F3 2414              ADD     A,#014H
01F5 110000      R     ACALL   L?0298
01F8 FF                MOV     R7,A
01F9 110000      E     ACALL   _PclkoSetPolarity
                                           ; SOURCE LINE # 1336
01FC 7F55              MOV     R7,#055H
01FE 7E55              MOV     R6,#055H
0200 7D01              MOV     R5,#01H
0202 7C00              MOV     R4,#00H
0204 110000      E     ACALL   _Sspll2SetFreqReg
                                           ; SOURCE LINE # 1337
0207 E4                CLR     A
0208 FF                MOV     R7,A
0209 110000      E     ACALL   _PclkSetDividerReg
                                           ; SOURCE LINE # 1338
020C 7F01              MOV     R7,#01H
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 84  

020E 110000      E     ACALL   _PclkoSetDiv_with_pol
                                           ; SOURCE LINE # 1343
0211 110000      R     ACALL   L?0344
0214 110000      R     ACALL   L?0275
0217 2401              ADD     A,#01H
0219 110000      R     ACALL   L?0289
021C FD                MOV     R5,A
021D ACF0              MOV     R4,B
021F 110000      R     ACALL   L?0286
0222 FB                MOV     R3,A
0223 AAF0              MOV     R2,B
0225 C002              PUSH    AR2
0227 C003              PUSH    AR3
0229 110000      R     ACALL   L?0276
022C 2405              ADD     A,#05H
022E 110000      R     ACALL   L?0298
0231 90000000    E     MOV     DPTR,#?_FindScalerTable?BYTE+05H
0235 F0                MOVX    @DPTR,A
0236 E4                CLR     A
0237 A3                INC     DPTR
0238 F0                MOVX    @DPTR,A
0239 A3                INC     DPTR
023A F0                MOVX    @DPTR,A
023B D003              POP     AR3
023D D002              POP     AR2
023F 110000      E     ACALL   _FindScalerTable
0242 90000000    R     MOV     DPTR,#pScaler
0246 EB                MOV     A,R3
0247 110000      R     ACALL   L?0292
                                           ; SOURCE LINE # 1344
024A 90000000    R     MOV     DPTR,#pScaler
024E 110000      R     ACALL   L?0277
0251 4A                ORL     A,R2
0252 4B                ORL     A,R3
0253 600A              JZ      ?C0163
                                           ; SOURCE LINE # 1345
0255 90000000    R     MOV     DPTR,#pScaler
0259 110000      R     ACALL   L?0356
025C 110000      E     ACALL   _OverWriteScalerWithTable
025F         ?C0163:
                                           ; SOURCE LINE # 1348
025F 110000      R     ACALL   L?0354
0262 110000      R     ACALL   _YUV_PrepareInfoString
                                           ; SOURCE LINE # 1350
0265 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 1351
0267         ?C0151:
0267 22                RET     
             ; FUNCTION CheckAndSetComponent (END)

             ; FUNCTION ChangeComponent (BEGIN)
                                           ; SOURCE LINE # 1363
                                           ; SOURCE LINE # 1364
                                           ; SOURCE LINE # 1367
0000 90000000    E     MOV     DPTR,#InputMain
0004 E0                MOVX    A,@DPTR
0005 B4020C            CJNE    A,#02H,?C0164
                                           ; SOURCE LINE # 1368
0008 7B00        R     MOV     R3,#MBYTE ?SC_418
000A 7A00        R     MOV     R2,#HIGH ?SC_418
000C 7900        R     MOV     R1,#LOW ?SC_418
000E 110000      E     ACALL   _dPrintf
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 85  

                                           ; SOURCE LINE # 1369
0011 7F01              MOV     R7,#01H
0013 22                RET     
                                           ; SOURCE LINE # 1370
0014         ?C0164:
                                           ; SOURCE LINE # 1372
0014 90000000    E     MOV     DPTR,#InputMain
0018 7402              MOV     A,#02H
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1373
001B 90000000    E     MOV     DPTR,#InputSubMode
001F 7407              MOV     A,#07H
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1375
0022 110000      E     ACALL   GetInputMainEE
0025 110000      R     ACALL   L?0343
0028 6E                XRL     A,R6
0029 6003              JZ      ?C0166
                                           ; SOURCE LINE # 1376
002B 110000      E     ACALL   _SaveInputMainEE
002E         ?C0166:
                                           ; SOURCE LINE # 1380
002E 110000      E     ACALL   InitInputAsDefault
                                           ; SOURCE LINE # 1385
0031 110000      R     ACALL   CheckAndSetComponent
;---- Variable 'ret' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1386
0034 EF                MOV     A,R7
0035 7007              JNZ     ?C0167
                                           ; SOURCE LINE # 1388
0037 FF                MOV     R7,A
0038 110000      E     ACALL   _VInput_enableOutput
                                           ; SOURCE LINE # 1389
003B 7F00              MOV     R7,#00H
003D 22                RET     
                                           ; SOURCE LINE # 1390
003E         ?C0167:
                                           ; SOURCE LINE # 1395
003E E4                CLR     A
003F FF                MOV     R7,A
0040 110000      E     ACALL   _VInput_gotoFreerun
                                           ; SOURCE LINE # 1397
0043 7F02              MOV     R7,#02H
                                           ; SOURCE LINE # 1398
0045         ?C0165:
0045 22                RET     
             ; FUNCTION ChangeComponent (END)

             ; FUNCTION _aRGB_SetChannelGainReg (BEGIN)
                                           ; SOURCE LINE # 1416
0000 90000000    R     MOV     DPTR,#GainB
0004 EC                MOV     A,R4
0005 F0                MOVX    @DPTR,A
0006 A3                INC     DPTR
0007 ED                MOV     A,R5
0008 F0                MOVX    @DPTR,A
0009 90000000    R     MOV     DPTR,#GainG
000D EE                MOV     A,R6
000E F0                MOVX    @DPTR,A
000F A3                INC     DPTR
0010 EF                MOV     A,R7
0011 F0                MOVX    @DPTR,A
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 86  

;---- Variable 'GainR' assigned to Register 'R2/R3' ----
                                           ; SOURCE LINE # 1417
                                           ; SOURCE LINE # 1418
0012 759300      E     MOV     DPX,#?C?XDATASEG
0015 E500        E     MOV     A,regTW88+01H
0017 24D1              ADD     A,#0D1H
0019 110000      R     ACALL   L?0271
001C EF                MOV     A,R7
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1419
001E 90000000    R     MOV     DPTR,#GainB
0022 A3                INC     DPTR
0023 E0                MOVX    A,@DPTR
0024 110000      R     ACALL   L?0375
0027 24D2              ADD     A,#0D2H
0029 110000      R     ACALL   L?0271
                                           ; SOURCE LINE # 1420
002C 110000      R     ACALL   L?0376
002F 24D3              ADD     A,#0D3H
0031 110000      R     ACALL   L?0271
0034 EF                MOV     A,R7
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1421
0036 90000000    R     MOV     DPTR,#GainB
003A E0                MOVX    A,@DPTR
003B FE                MOV     R6,A
003C A3                INC     DPTR
003D E0                MOVX    A,@DPTR
003E 7807              MOV     R0,#07H
0040         ?C0235:
0040 CE                XCH     A,R6
0041 C3                CLR     C
0042 13                RRC     A
0043 CE                XCH     A,R6
0044 13                RRC     A
0045 D8F9              DJNZ    R0,?C0235
0047 5402              ANL     A,#02H
0049 FD                MOV     R5,A
004A EA                MOV     A,R2
004B 2D                ADD     A,R5
004C FD                MOV     R5,A
004D 90000000    R     MOV     DPTR,#GainG
0051 E0                MOVX    A,@DPTR
0052 FE                MOV     R6,A
0053 A3                INC     DPTR
0054 E0                MOVX    A,@DPTR
0055 7806              MOV     R0,#06H
0057         ?C0236:
0057 CE                XCH     A,R6
0058 C3                CLR     C
0059 13                RRC     A
005A CE                XCH     A,R6
005B 13                RRC     A
005C D8F9              DJNZ    R0,?C0236
005E 5404              ANL     A,#04H
0060 2D                ADD     A,R5
0061 FF                MOV     R7,A
0062 110000      R     ACALL   L?0338
0065 110000      R     ACALL   L?0271
0068 EF                MOV     A,R7
0069 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1422
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 87  

006A 22                RET     
             ; FUNCTION _aRGB_SetChannelGainReg (END)

             ; FUNCTION aRGB_ReadGChannelGainReg (BEGIN)
                                           ; SOURCE LINE # 1423
                                           ; SOURCE LINE # 1424
                                           ; SOURCE LINE # 1426
0000 110000      R     ACALL   L?0338
0003 110000      R     ACALL   L?0271
0006 E0                MOVX    A,@DPTR
0007 5404              ANL     A,#04H
0009 FF                MOV     R7,A
000A 7E00              MOV     R6,#00H
;---- Variable 'wTemp' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 1427
000C 7806              MOV     R0,#06H
000E         ?C0237:
000E C3                CLR     C
000F 33                RLC     A
0010 CE                XCH     A,R6
0011 33                RLC     A
0012 CE                XCH     A,R6
0013 D8F9              DJNZ    R0,?C0237
                                           ; SOURCE LINE # 1428
0015 110000      R     ACALL   L?0377
0018 24D1              ADD     A,#0D1H
001A 110000      R     ACALL   L?0271
001D E0                MOVX    A,@DPTR
001E FD                MOV     R5,A
001F EF                MOV     A,R7
0020 4D                ORL     A,R5
0021 FF                MOV     R7,A
                                           ; SOURCE LINE # 1429
                                           ; SOURCE LINE # 1430
0022         ?C0169:
0022 22                RET     
             ; FUNCTION aRGB_ReadGChannelGainReg (END)

             ; FUNCTION aRGB_ReadBChannelGainReg (BEGIN)
                                           ; SOURCE LINE # 1431
                                           ; SOURCE LINE # 1432
                                           ; SOURCE LINE # 1434
0000 110000      R     ACALL   L?0339
0003 110000      R     ACALL   L?0271
0006 E0                MOVX    A,@DPTR
0007 5402              ANL     A,#02H
0009 FF                MOV     R7,A
000A 7E00              MOV     R6,#00H
;---- Variable 'wTemp' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 1435
000C 7807              MOV     R0,#07H
000E         ?C0238:
000E C3                CLR     C
000F 33                RLC     A
0010 CE                XCH     A,R6
0011 33                RLC     A
0012 CE                XCH     A,R6
0013 D8F9              DJNZ    R0,?C0238
                                           ; SOURCE LINE # 1436
0015 110000      R     ACALL   L?0378
0018 24D2              ADD     A,#0D2H
001A 110000      R     ACALL   L?0271
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 88  

001D E0                MOVX    A,@DPTR
001E FD                MOV     R5,A
001F EF                MOV     A,R7
0020 4D                ORL     A,R5
0021 FF                MOV     R7,A
                                           ; SOURCE LINE # 1437
                                           ; SOURCE LINE # 1438
0022         ?C0170:
0022 22                RET     
             ; FUNCTION aRGB_ReadBChannelGainReg (END)

             ; FUNCTION aRGB_ReadRChannelGainReg (BEGIN)
                                           ; SOURCE LINE # 1439
                                           ; SOURCE LINE # 1440
                                           ; SOURCE LINE # 1442
0000 110000      R     ACALL   L?0339
0003 110000      R     ACALL   L?0271
0006 E0                MOVX    A,@DPTR
0007 5401              ANL     A,#01H
;---- Variable 'wTemp' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 1443
0009 FE                MOV     R6,A
                                           ; SOURCE LINE # 1444
000A 759300      E     MOV     DPX,#?C?XDATASEG
000D E500        E     MOV     A,regTW88+01H
000F 24D3              ADD     A,#0D3H
0011 110000      R     ACALL   L?0271
0014 E0                MOVX    A,@DPTR
0015 FD                MOV     R5,A
0016 ED                MOV     A,R5
0017 FF                MOV     R7,A
                                           ; SOURCE LINE # 1445
                                           ; SOURCE LINE # 1446
0018         ?C0171:
0018 22                RET     
             ; FUNCTION aRGB_ReadRChannelGainReg (END)

             ; FUNCTION _get_vTotal_vFreq (BEGIN)
                                           ; SOURCE LINE # 1452
0000 90000000    R     MOV     DPTR,#p_vTotal
0004 EB                MOV     A,R3
0005 110000      R     ACALL   L?0292
                                           ; SOURCE LINE # 1453
                                           ; SOURCE LINE # 1458
0008 110000      E     ACALL   MeasGetVPeriod
000B 90000000    R     MOV     DPTR,#vTotal
000F EE                MOV     A,R6
0010 F0                MOVX    @DPTR,A
0011 A3                INC     DPTR
0012 EF                MOV     A,R7
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1459
0014 E4                CLR     A
0015 90000000    R     MOV     DPTR,#i
0019 F0                MOVX    @DPTR,A
001A         ?C0172:
                                           ; SOURCE LINE # 1460
001A 110000      E     ACALL   Meas_StartMeasure
                                           ; SOURCE LINE # 1461
001D 7F32              MOV     R7,#032H
001F 110000      E     ACALL   _Meas_IsMeasureDone
                                           ; SOURCE LINE # 1462
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 89  

0022 110000      E     ACALL   MeasGetVPeriod
0025 90000000    R     MOV     DPTR,#wTemp
0029 EE                MOV     A,R6
002A F0                MOVX    @DPTR,A
002B A3                INC     DPTR
002C EF                MOV     A,R7
002D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1463
002E 90000000    R     MOV     DPTR,#vTotal
0032 E0                MOVX    A,@DPTR
0033 6E                XRL     A,R6
0034 7003              JNZ     ?C0239
0036 A3                INC     DPTR
0037 E0                MOVX    A,@DPTR
0038 6F                XRL     A,R7
0039         ?C0239:
0039 601A              JZ      ?C0173
                                           ; SOURCE LINE # 1464
003B         ?C0175:
                                           ; SOURCE LINE # 1465
003B 90000000    R     MOV     DPTR,#wTemp
003F E0                MOVX    A,@DPTR
0040 FF                MOV     R7,A
0041 A3                INC     DPTR
0042 E0                MOVX    A,@DPTR
0043 90000000    R     MOV     DPTR,#vTotal
0047 CF                XCH     A,R7
0048 F0                MOVX    @DPTR,A
0049 A3                INC     DPTR
004A EF                MOV     A,R7
004B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1466
004C 90000000    R     MOV     DPTR,#i
0050 110000      R     ACALL   L?0336
0053 40C5              JC      ?C0172
0055         ?C0173:
                                           ; SOURCE LINE # 1467
0055 90000000    R     MOV     DPTR,#vTotal
0059 E0                MOVX    A,@DPTR
005A F9                MOV     R1,A
005B A3                INC     DPTR
005C E0                MOVX    A,@DPTR
005D FF                MOV     R7,A
005E 90000000    R     MOV     DPTR,#p_vTotal
0062 110000      R     ACALL   L?0277
0065 C9                XCH     A,R1
0066 8FF0              MOV     B,R7
0068 110000      E     ACALL   ?C?ISTPTR
                                           ; SOURCE LINE # 1468
006B 110000      E     ACALL   MeasGetVFreq
;---- Variable 'vFreq' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1469
006E 110000      E     ACALL   _MeasRoundDownVFreqValue
0071 90000000    R     MOV     DPTR,#p_vFreq
0075 110000      R     ACALL   L?0277
0078 F9                MOV     R1,A
0079 EF                MOV     A,R7
007A 010000      E     AJMP    ?C?CSTPTR
             ; FUNCTION _get_vTotal_vFreq (END)

             ; FUNCTION _FindInputModePC (BEGIN)
                                           ; SOURCE LINE # 1482
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 90  

0000 90000000    R     MOV     DPTR,#start
0004 EF                MOV     A,R7
0005 F0                MOVX    @DPTR,A
0006 A3                INC     DPTR
0007 EB                MOV     A,R3
0008 110000      R     ACALL   L?0292
                                           ; SOURCE LINE # 1483
                                           ; SOURCE LINE # 1488
000B 90000000    R     MOV     DPTR,#start
000F E0                MOVX    A,@DPTR
0010 04                INC     A
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1514
0012 90000000    R     MOV     DPTR,#?_get_vTotal_vFreq?BYTE+03H
0016 7400        R     MOV     A,#MBYTE vFreq
0018 F0                MOVX    @DPTR,A
0019 A3                INC     DPTR
001A 7400        R     MOV     A,#HIGH vFreq
001C F0                MOVX    @DPTR,A
001D A3                INC     DPTR
001E 7400        R     MOV     A,#LOW vFreq
0020 F0                MOVX    @DPTR,A
0021 7B00        R     MOV     R3,#MBYTE vtotal
0023 7A00        R     MOV     R2,#HIGH vtotal
0025 7900        R     MOV     R1,#LOW vtotal
0027 110000      R     ACALL   _get_vTotal_vFreq
                                           ; SOURCE LINE # 1515
002A 90000000    R     MOV     DPTR,#vtotal
002E E0                MOVX    A,@DPTR
002F F9                MOV     R1,A
0030 A3                INC     DPTR
0031 E0                MOVX    A,@DPTR
0032 FF                MOV     R7,A
0033 90000000    R     MOV     DPTR,#vt
0037 110000      R     ACALL   L?0277
003A C9                XCH     A,R1
003B 8FF0              MOV     B,R7
003D 110000      E     ACALL   ?C?ISTPTR
                                           ; SOURCE LINE # 1517
0040 7B00        R     MOV     R3,#MBYTE ?SC_441
0042 7A00        R     MOV     R2,#HIGH ?SC_441
0044 7900        R     MOV     R1,#LOW ?SC_441
0046 90000000    R     MOV     DPTR,#vFreq
004A 110000      R     ACALL   L?0351
004D 90000000    R     MOV     DPTR,#vtotal
0051 E0                MOVX    A,@DPTR
0052 FF                MOV     R7,A
0053 A3                INC     DPTR
0054 E0                MOVX    A,@DPTR
0055 90000000    E     MOV     DPTR,#?_Printf?BYTE+04H
0059 CF                XCH     A,R7
005A F0                MOVX    @DPTR,A
005B A3                INC     DPTR
005C EF                MOV     A,R7
005D F0                MOVX    @DPTR,A
005E 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 1521
0061 90000000    R     MOV     DPTR,#start
0065 E0                MOVX    A,@DPTR
0066 90000000    R     MOV     DPTR,#i
006A F0                MOVX    @DPTR,A
006B         ?C0177:
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 91  

                                           ; SOURCE LINE # 1522
006B 90000000    R     MOV     DPTR,#i
006F E0                MOVX    A,@DPTR
0070 110000      R     ACALL   L?0357
0073 7B00        E     MOV     R3,#MBYTE TW8836_VESA_TABLE
0075 A3                INC     DPTR
0076 EB                MOV     A,R3
0077 110000      R     ACALL   L?0292
                                           ; SOURCE LINE # 1523
007A 2401              ADD     A,#01H
007C 110000      R     ACALL   L?0289
007F 45F0              ORL     A,B
0081 700E              JNZ     ?C0180
0083 90000000    R     MOV     DPTR,#pTimeTable
0087 110000      R     ACALL   L?0277
008A 110000      R     ACALL   L?0288
008D 45F0              ORL     A,B
008F 607B              JZ      ?C0178
                                           ; SOURCE LINE # 1524
0091         ?C0180:
                                           ; SOURCE LINE # 1525
0091 90000000    R     MOV     DPTR,#pTimeTable
0095 110000      R     ACALL   L?0277
0098 F9                MOV     R1,A
0099 110000      E     ACALL   ?C?CLDPTR
009C 6064              JZ      ?C0179
                                           ; SOURCE LINE # 1526
009E         ?C0181:
                                           ; SOURCE LINE # 1528
009E E9                MOV     A,R1
009F 2405              ADD     A,#05H
00A1 110000      R     ACALL   L?0298
00A4 FF                MOV     R7,A
00A5 90000000    R     MOV     DPTR,#vFreq
00A9 E0                MOVX    A,@DPTR
00AA 6F                XRL     A,R7
00AB 7055              JNZ     ?C0179
                                           ; SOURCE LINE # 1529
00AD 90000000    R     MOV     DPTR,#pTimeTable
00B1 110000      R     ACALL   L?0277
00B4 240F              ADD     A,#0FH
00B6 110000      R     ACALL   L?0289
00B9 FF                MOV     R7,A
00BA AEF0              MOV     R6,B
00BC 90000000    R     MOV     DPTR,#vtotal
00C0 E0                MOVX    A,@DPTR
00C1 FC                MOV     R4,A
00C2 A3                INC     DPTR
00C3 E0                MOVX    A,@DPTR
00C4 FD                MOV     R5,A
00C5 6F                XRL     A,R7
00C6 7002              JNZ     ?C0240
00C8 EC                MOV     A,R4
00C9 6E                XRL     A,R6
00CA         ?C0240:
00CA 6024              JZ      ?C0184
00CC ED                MOV     A,R5
00CD 2401              ADD     A,#01H
00CF FD                MOV     R5,A
00D0 E4                CLR     A
00D1 3C                ADDC    A,R4
00D2 FC                MOV     R4,A
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 92  

00D3 ED                MOV     A,R5
00D4 6F                XRL     A,R7
00D5 7002              JNZ     ?C0241
00D7 EC                MOV     A,R4
00D8 6E                XRL     A,R6
00D9         ?C0241:
00D9 6015              JZ      ?C0184
00DB C3                CLR     C
00DC E0                MOVX    A,@DPTR
00DD 9401              SUBB    A,#01H
00DF FD                MOV     R5,A
00E0 90000000    R     MOV     DPTR,#vtotal
00E4 E0                MOVX    A,@DPTR
00E5 9400              SUBB    A,#00H
00E7 FC                MOV     R4,A
00E8 ED                MOV     A,R5
00E9 B50716            CJNE    A,AR7,?C0179
00EC EC                MOV     A,R4
00ED B50612            CJNE    A,AR6,?C0179
00F0         ?C0184:
                                           ; SOURCE LINE # 1532
                                           ; SOURCE LINE # 1535
00F0 90000000    R     MOV     DPTR,#pTimeTable
00F4 110000      R     ACALL   L?0277
00F7 F9                MOV     R1,A
00F8 110000      E     ACALL   _PrintVesaVideoTimeTable
                                           ; SOURCE LINE # 1536
00FB 90000000    R     MOV     DPTR,#i
00FF E0                MOVX    A,@DPTR
0100 FF                MOV     R7,A
0101 22                RET     
                                           ; SOURCE LINE # 1537
                                           ; SOURCE LINE # 1538
                                           ; SOURCE LINE # 1539
0102         ?C0179:
0102 90000000    R     MOV     DPTR,#i
0106 E0                MOVX    A,@DPTR
0107 04                INC     A
0108 F0                MOVX    @DPTR,A
0109 010000      R     AJMP    ?C0177
010C         ?C0178:
                                           ; SOURCE LINE # 1541
010C 7B00        R     MOV     R3,#MBYTE ?SC_485
010E 7A00        R     MOV     R2,#HIGH ?SC_485
0110 7900        R     MOV     R1,#LOW ?SC_485
0112 110000      E     ACALL   _ePuts
                                           ; SOURCE LINE # 1542
0115 7B00        R     MOV     R3,#MBYTE ?SC_530
0117 7A00        R     MOV     R2,#HIGH ?SC_530
0119 7900        R     MOV     R1,#LOW ?SC_530
011B 90000000    R     MOV     DPTR,#vtotal
011F E0                MOVX    A,@DPTR
0120 FF                MOV     R7,A
0121 A3                INC     DPTR
0122 E0                MOVX    A,@DPTR
0123 90000000    E     MOV     DPTR,#?_ePrintf?BYTE+03H
0127 CF                XCH     A,R7
0128 F0                MOVX    @DPTR,A
0129 A3                INC     DPTR
012A EF                MOV     A,R7
012B F0                MOVX    @DPTR,A
012C 90000000    R     MOV     DPTR,#vFreq
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 93  

0130 E0                MOVX    A,@DPTR
0131 90000000    E     MOV     DPTR,#?_ePrintf?BYTE+05H
0135 F0                MOVX    @DPTR,A
0136 110000      E     ACALL   _ePrintf
                                           ; SOURCE LINE # 1543
0139 7FFF              MOV     R7,#0FFH
                                           ; SOURCE LINE # 1544
013B         ?C0185:
013B 22                RET     
             ; FUNCTION _FindInputModePC (END)

             ; FUNCTION _PC_SetScaler (BEGIN)
                                           ; SOURCE LINE # 1547
0000 90000000    R     MOV     DPTR,#mode
0004 EF                MOV     A,R7
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1548
                                           ; SOURCE LINE # 1557
0006 E0                MOVX    A,@DPTR
0007 90000000    R     MOV     DPTR,#pTimeTable
000B 110000      R     ACALL   L?0290
                                           ; SOURCE LINE # 1561
000E 7B00        R     MOV     R3,#MBYTE Meas_vStart
0010 7A00        R     MOV     R2,#HIGH Meas_vStart
0012 7900        R     MOV     R1,#LOW Meas_vStart
0014 110000      E     ACALL   _MeasGetVActive
0017 EE                MOV     A,R6
0018 110000      R     ACALL   L?0358
                                           ; SOURCE LINE # 1562
001B 7B00        R     MOV     R3,#MBYTE Meas_hStart
001D 7A00        R     MOV     R2,#HIGH Meas_hStart
001F 7900        R     MOV     R1,#LOW Meas_hStart
0021 110000      E     ACALL   _MeasGetHActive
0024 EE                MOV     A,R6
0025 110000      R     ACALL   L?0316
                                           ; SOURCE LINE # 1563
0028 110000      R     ACALL   L?0372
002B 110000      E     ACALL   _PrintMeasValue
                                           ; SOURCE LINE # 1564
002E 90000000    R     MOV     DPTR,#pTimeTable
0032 110000      R     ACALL   L?0277
0035 F9                MOV     R1,A
0036 110000      E     ACALL   _PrintVesaVideoTimeTable
                                           ; SOURCE LINE # 1569
0039 110000      R     ACALL   L?0330
003C 110000      R     ACALL   L?0271
003F E0                MOVX    A,@DPTR
0040 90000000    R     MOV     DPTR,#bTemp
0044 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1570
0045 E0                MOVX    A,@DPTR
0046 540C              ANL     A,#0CH
0048 7010              JNZ     ?C0186
                                           ; SOURCE LINE # 1573
004A 90000000    R     MOV     DPTR,#Meas_hStart+01H
004E E0                MOVX    A,@DPTR
004F 2404              ADD     A,#04H
0051 F0                MOVX    @DPTR,A
0052 90000000    R     MOV     DPTR,#Meas_hStart
0056 E0                MOVX    A,@DPTR
0057 3400              ADDC    A,#00H
0059 F0                MOVX    @DPTR,A
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 94  

                                           ; SOURCE LINE # 1574
005A         ?C0186:
                                           ; SOURCE LINE # 1575
005A 90000000    R     MOV     DPTR,#Meas_vStart+01H
005E E0                MOVX    A,@DPTR
005F 24FF              ADD     A,#0FFH
0061 F0                MOVX    @DPTR,A
0062 90000000    R     MOV     DPTR,#Meas_vStart
0066 E0                MOVX    A,@DPTR
0067 34FF              ADDC    A,#0FFH
                                           ; SOURCE LINE # 1576
0069 110000      R     ACALL   L?0371
006C 90000000    R     MOV     DPTR,#Meas_hStart
0070 110000      R     ACALL   L?0321
                                           ; SOURCE LINE # 1580
0073 90000000    R     MOV     DPTR,#pTimeTable
0077 110000      R     ACALL   L?0277
007A 240D              ADD     A,#0DH
007C 110000      R     ACALL   L?0289
007F FF                MOV     R7,A
0080 AEF0              MOV     R6,B
0082 110000      R     ACALL   L?0340
0085 240B              ADD     A,#0BH
0087 110000      R     ACALL   L?0289
008A 2F                ADD     A,R7
008B FF                MOV     R7,A
008C E5F0              MOV     A,B
008E 3E                ADDC    A,R6
008F 90000000    R     MOV     DPTR,#Meas_hStart
0093 F0                MOVX    @DPTR,A
0094 A3                INC     DPTR
0095 EF                MOV     A,R7
0096 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1581
0097 110000      R     ACALL   L?0340
009A 2401              ADD     A,#01H
009C 110000      R     ACALL   L?0289
009F FF                MOV     R7,A
00A0 E5F0              MOV     A,B
00A2 110000      R     ACALL   L?0316
                                           ; SOURCE LINE # 1582
00A5 90000000    R     MOV     DPTR,#pTimeTable
00A9 110000      R     ACALL   L?0296
00AC FF                MOV     R7,A
00AD 110000      R     ACALL   L?0341
00B0 2412              ADD     A,#012H
00B2 110000      R     ACALL   L?0298
00B5 2F                ADD     A,R7
00B6 FE                MOV     R6,A
00B7 E4                CLR     A
00B8 33                RLC     A
00B9 90000000    R     MOV     DPTR,#Meas_vStart
00BD F0                MOVX    @DPTR,A
00BE A3                INC     DPTR
00BF CE                XCH     A,R6
00C0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1583
00C1 90000000    R     MOV     DPTR,#pTimeTable
00C5 110000      R     ACALL   L?0287
00C8 FF                MOV     R7,A
00C9 E5F0              MOV     A,B
00CB 110000      R     ACALL   L?0358
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 95  

                                           ; SOURCE LINE # 1584
00CE 7B00        R     MOV     R3,#MBYTE ?SC_559
00D0 7A00        R     MOV     R2,#HIGH ?SC_559
00D2 7900        R     MOV     R1,#LOW ?SC_559
00D4 A3                INC     DPTR
00D5 110000      R     ACALL   L?0321
                                           ; SOURCE LINE # 1601
00D8 759300      E     MOV     DPX,#?C?XDATASEG
00DB E500        E     MOV     A,regTW88+01H
00DD 2441              ADD     A,#041H
00DF F582              MOV     DPL,A
00E1 E4                CLR     A
00E2 3500        E     ADDC    A,regTW88
00E4 F583              MOV     DPH,A
00E6 759300      E     MOV     DPX,#?C?XDATASEG
00E9 E0                MOVX    A,@DPTR
00EA 90000000    R     MOV     DPTR,#bTemp
00EE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1602
00EF E0                MOVX    A,@DPTR
00F0 54C0              ANL     A,#0C0H
00F2 6009              JZ      ?C0187
                                           ; SOURCE LINE # 1603
00F4 7B00        R     MOV     R3,#MBYTE ?SC_568
00F6 7A00        R     MOV     R2,#HIGH ?SC_568
00F8 7900        R     MOV     R1,#LOW ?SC_568
00FA 110000      E     ACALL   _Printf
00FD         ?C0187:
                                           ; SOURCE LINE # 1611
00FD 90000000    R     MOV     DPTR,#Meas_hStart
0101 E0                MOVX    A,@DPTR
0102 FE                MOV     R6,A
0103 A3                INC     DPTR
0104 E0                MOVX    A,@DPTR
0105 FF                MOV     R7,A
0106 90000000    R     MOV     DPTR,#hStart
010A EE                MOV     A,R6
010B F0                MOVX    @DPTR,A
010C A3                INC     DPTR
010D EF                MOV     A,R7
010E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1612
010F 90000000    R     MOV     DPTR,#Meas_vStart
0113 E0                MOVX    A,@DPTR
0114 FD                MOV     R5,A
0115 A3                INC     DPTR
0116 E0                MOVX    A,@DPTR
0117 90000000    R     MOV     DPTR,#vStart
011B CD                XCH     A,R5
011C F0                MOVX    @DPTR,A
011D A3                INC     DPTR
011E ED                MOV     A,R5
011F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1613
0120 90000000    R     MOV     DPTR,#Meas_hActive
0124 E0                MOVX    A,@DPTR
0125 FD                MOV     R5,A
0126 A3                INC     DPTR
0127 E0                MOVX    A,@DPTR
0128 90000000    R     MOV     DPTR,#hActive
012C CD                XCH     A,R5
012D F0                MOVX    @DPTR,A
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 96  

012E A3                INC     DPTR
012F ED                MOV     A,R5
0130 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1614
0131 90000000    R     MOV     DPTR,#Meas_vActive
0135 E0                MOVX    A,@DPTR
0136 FD                MOV     R5,A
0137 A3                INC     DPTR
0138 E0                MOVX    A,@DPTR
0139 90000000    R     MOV     DPTR,#vActive
013D CD                XCH     A,R5
013E F0                MOVX    @DPTR,A
013F A3                INC     DPTR
0140 ED                MOV     A,R5
0141 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1616
0142 C3                CLR     C
0143 EF                MOV     A,R7
0144 9402              SUBB    A,#02H
0146 FF                MOV     R7,A
0147 EE                MOV     A,R6
0148 9400              SUBB    A,#00H
014A 90000000    E     MOV     DPTR,#RGB_hStart
014E F0                MOVX    @DPTR,A
014F A3                INC     DPTR
0150 EF                MOV     A,R7
0151 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1619
0152 90000000    R     MOV     DPTR,#mode
0156 E0                MOVX    A,@DPTR
0157 FF                MOV     R7,A
0158 110000      E     ACALL   _GetHActiveEE
015B 90000000    R     MOV     DPTR,#bTemp
015F EF                MOV     A,R7
0160 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1620
0161 6048              JZ      ?C0188
0163 E0                MOVX    A,@DPTR
0164 FF                MOV     R7,A
0165 6432              XRL     A,#032H
0167 6042              JZ      ?C0188
                                           ; SOURCE LINE # 1621
0169 90000000    R     MOV     DPTR,#hStart+01H
016D E0                MOVX    A,@DPTR
016E 2432              ADD     A,#032H
0170 F0                MOVX    @DPTR,A
0171 90000000    R     MOV     DPTR,#hStart
0175 E0                MOVX    A,@DPTR
0176 3400              ADDC    A,#00H
0178 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1622
0179 C3                CLR     C
017A A3                INC     DPTR
017B E0                MOVX    A,@DPTR
017C 9F                SUBB    A,R7
017D 110000      R     ACALL   L?0380
0180 F0                MOVX    @DPTR,A
0181 A3                INC     DPTR
0182 EF                MOV     A,R7
0183 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1623
0184 7B00        R     MOV     R3,#MBYTE ?SC_608
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 97  

0186 7A00        R     MOV     R2,#HIGH ?SC_608
0188 7900        R     MOV     R1,#LOW ?SC_608
018A 90000000    E     MOV     DPTR,#RGB_hStart
018E E0                MOVX    A,@DPTR
018F FD                MOV     R5,A
0190 A3                INC     DPTR
0191 E0                MOVX    A,@DPTR
0192 90000000    E     MOV     DPTR,#?_dPrintf?BYTE+03H
0196 CD                XCH     A,R5
0197 F0                MOVX    @DPTR,A
0198 A3                INC     DPTR
0199 ED                MOV     A,R5
019A F0                MOVX    @DPTR,A
019B A3                INC     DPTR
019C EE                MOV     A,R6
019D F0                MOVX    @DPTR,A
019E A3                INC     DPTR
019F EF                MOV     A,R7
01A0 F0                MOVX    @DPTR,A
01A1 90000000    R     MOV     DPTR,#vStart
01A5 110000      R     ACALL   L?0345
01A8 110000      E     ACALL   _dPrintf
                                           ; SOURCE LINE # 1624
01AB         ?C0188:
                                           ; SOURCE LINE # 1625
01AB 7B00        R     MOV     R3,#MBYTE ?SC_637
01AD 7A00        R     MOV     R2,#HIGH ?SC_637
01AF 7900        R     MOV     R1,#LOW ?SC_637
01B1 90000000    R     MOV     DPTR,#hActive
01B5 110000      R     ACALL   L?0349
01B8 90000000    R     MOV     DPTR,#hStart
01BC 110000      R     ACALL   L?0332
                                           ; SOURCE LINE # 1626
01BF 7B00        R     MOV     R3,#MBYTE ?SC_668
01C1 7A00        R     MOV     R2,#HIGH ?SC_668
01C3 7900        R     MOV     R1,#LOW ?SC_668
01C5 90000000    R     MOV     DPTR,#vActive
01C9 110000      R     ACALL   L?0349
01CC 90000000    R     MOV     DPTR,#vStart
01D0 110000      R     ACALL   L?0332
                                           ; SOURCE LINE # 1628
01D3 C3                CLR     C
01D4 90000000    R     MOV     DPTR,#hStart+01H
01D8 E0                MOVX    A,@DPTR
01D9 9402              SUBB    A,#02H
01DB 110000      R     ACALL   L?0380
01DE C006              PUSH    AR6
01E0 C007              PUSH    AR7
01E2 90000000    R     MOV     DPTR,#vStart+01H
01E6 E0                MOVX    A,@DPTR
01E7 2401              ADD     A,#01H
01E9 FD                MOV     R5,A
01EA 90000000    R     MOV     DPTR,#vStart
01EE E0                MOVX    A,@DPTR
01EF 3400              ADDC    A,#00H
01F1 FC                MOV     R4,A
01F2 90000000    R     MOV     DPTR,#hActive+01H
01F6 E0                MOVX    A,@DPTR
01F7 2402              ADD     A,#02H
01F9 FB                MOV     R3,A
01FA 90000000    R     MOV     DPTR,#hActive
01FE E0                MOVX    A,@DPTR
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 98  

01FF 3400              ADDC    A,#00H
0201 FA                MOV     R2,A
0202 90000000    R     MOV     DPTR,#vActive
0206 E0                MOVX    A,@DPTR
0207 FE                MOV     R6,A
0208 A3                INC     DPTR
0209 E0                MOVX    A,@DPTR
020A 2402              ADD     A,#02H
020C 110000      R     ACALL   L?0368
020F D007              POP     AR7
0211 D006              POP     AR6
0213 110000      E     ACALL   _InputSetCrop
                                           ; SOURCE LINE # 1631
0216 90000000    R     MOV     DPTR,#vActive
021A E0                MOVX    A,@DPTR
021B FE                MOV     R6,A
021C A3                INC     DPTR
021D E0                MOVX    A,@DPTR
021E FF                MOV     R7,A
021F 110000      E     ACALL   _ScalerSetVScale
                                           ; SOURCE LINE # 1632
0222 90000000    R     MOV     DPTR,#hActive
0226 E0                MOVX    A,@DPTR
0227 FE                MOV     R6,A
0228 A3                INC     DPTR
0229 E0                MOVX    A,@DPTR
022A FF                MOV     R7,A
022B 110000      E     ACALL   _ScalerSetHScale
                                           ; SOURCE LINE # 1635
022E 90000000    R     MOV     DPTR,#vStart
0232 E0                MOVX    A,@DPTR
0233 FE                MOV     R6,A
0234 A3                INC     DPTR
0235 E0                MOVX    A,@DPTR
0236 FF                MOV     R7,A
0237 90000000    R     MOV     DPTR,#pTimeTable
023B 110000      R     ACALL   L?0277
023E 2414              ADD     A,#014H
0240 110000      R     ACALL   L?0298
0243 FD                MOV     R5,A
0244 110000      E     ACALL   _ScalerCalcVDE2
0247 90000000    R     MOV     DPTR,#wTemp
                                           ; SOURCE LINE # 1636
024B 110000      R     ACALL   L?0366
024E 110000      R     ACALL   L?0333
                                           ; SOURCE LINE # 1638
0251 90000000    R     MOV     DPTR,#wTemp
0255 A3                INC     DPTR
0256 E0                MOVX    A,@DPTR
0257 90000000    E     MOV     DPTR,#RGB_vDE
025B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1640
025C 90000000    R     MOV     DPTR,#mode
0260 E0                MOVX    A,@DPTR
0261 FF                MOV     R7,A
0262 110000      E     ACALL   _GetVBackPorchEE
0265 90000000    R     MOV     DPTR,#bTemp
0269 EF                MOV     A,R7
026A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1641
026B 601E              JZ      ?C0189
026D E0                MOVX    A,@DPTR
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 99  

026E FF                MOV     R7,A
026F 6432              XRL     A,#032H
0271 6018              JZ      ?C0189
                                           ; SOURCE LINE # 1642
0273 90000000    R     MOV     DPTR,#wTemp+01H
0277 E0                MOVX    A,@DPTR
0278 2F                ADD     A,R7
0279 F0                MOVX    @DPTR,A
027A 90000000    R     MOV     DPTR,#wTemp
                                           ; SOURCE LINE # 1643
027E 110000      R     ACALL   L?0359
0281 90000000    R     MOV     DPTR,#wTemp
                                           ; SOURCE LINE # 1644
0285 110000      R     ACALL   L?0305
0288 110000      E     ACALL   _dPrintf
                                           ; SOURCE LINE # 1645
028B         ?C0189:
                                           ; SOURCE LINE # 1646
028B 110000      R     ACALL   L?0381
028E 110000      E     ACALL   _ScalerWriteVDEReg
                                           ; SOURCE LINE # 1649
0291 110000      E     ACALL   ScalerCalcHDE
0294 90000000    R     MOV     DPTR,#wTemp
0298 EE                MOV     A,R6
0299 F0                MOVX    @DPTR,A
029A A3                INC     DPTR
029B EF                MOV     A,R7
029C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1650
029D 7B00        R     MOV     R3,#MBYTE ?SC_699
029F 7A00        R     MOV     R2,#HIGH ?SC_699
02A1 7900        R     MOV     R1,#LOW ?SC_699
02A3 110000      R     ACALL   L?0333
                                           ; SOURCE LINE # 1651
02A6 110000      R     ACALL   L?0381
02A9 110000      E     ACALL   _ScalerWriteHDEReg
                                           ; SOURCE LINE # 1661
02AC E4                CLR     A
02AD FF                MOV     R7,A
02AE 010000      E     AJMP    _PclkoSetPolarity
                                           ; SOURCE LINE # 1662
02B1         L?0321:
02B1 E0                MOVX    A,@DPTR
02B2 FC                MOV     R4,A
02B3 A3                INC     DPTR
02B4 E0                MOVX    A,@DPTR
02B5 FD                MOV     R5,A
02B6 A3                INC     DPTR
02B7 E0                MOVX    A,@DPTR
02B8 FF                MOV     R7,A
02B9 A3                INC     DPTR
02BA E0                MOVX    A,@DPTR
02BB 90000000    E     MOV     DPTR,#?_PrintMeasAdjValue?BYTE+05H
02BF CF                XCH     A,R7
02C0 F0                MOVX    @DPTR,A
02C1 A3                INC     DPTR
02C2 EF                MOV     A,R7
02C3 F0                MOVX    @DPTR,A
02C4 110000      E     ACALL   _PrintMeasAdjValue
02C7 22                RET     
02C8         L?0332:
02C8 E0                MOVX    A,@DPTR
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 100 

02C9 FF                MOV     R7,A
02CA A3                INC     DPTR
02CB E0                MOVX    A,@DPTR
02CC 90000000    E     MOV     DPTR,#?_Printf?BYTE+05H
02D0 CF                XCH     A,R7
02D1 F0                MOVX    @DPTR,A
02D2 A3                INC     DPTR
02D3 EF                MOV     A,R7
02D4 F0                MOVX    @DPTR,A
02D5 110000      E     ACALL   _Printf
02D8 22                RET     
02D9         L?0333:
02D9 90000000    E     MOV     DPTR,#?_dPrintf?BYTE+03H
02DD EE                MOV     A,R6
02DE F0                MOVX    @DPTR,A
02DF A3                INC     DPTR
02E0 EF                MOV     A,R7
02E1 F0                MOVX    @DPTR,A
02E2 110000      E     ACALL   _dPrintf
02E5 22                RET     
             ; FUNCTION _PC_SetScaler (END)

             ; FUNCTION _PC_PrepareInfoString (BEGIN)
                                           ; SOURCE LINE # 1668
;---- Variable 'mode' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1669
                                           ; SOURCE LINE # 1673
0000 EF                MOV     A,R7
0001 90000000    R     MOV     DPTR,#pTimeTable
0005 110000      R     ACALL   L?0290
                                           ; SOURCE LINE # 1675
0008 110000      E     ACALL   FOsdSetInputMainString2FOsdMsgBuff
                                           ; SOURCE LINE # 1676
000B 110000      R     ACALL   L?0300
                                           ; SOURCE LINE # 1677
000E 110000      R     ACALL   L?0369
0011 110000      R     ACALL   L?0277
0014 2401              ADD     A,#01H
                                           ; SOURCE LINE # 1678
0016 110000      R     ACALL   L?0282
                                           ; SOURCE LINE # 1679
0019 7400        R     MOV     A,#MBYTE ?SC_718
001B 110000      R     ACALL   L?0352
001E 7400        R     MOV     A,#HIGH ?SC_718
0020 F0                MOVX    @DPTR,A
0021 7400        R     MOV     A,#LOW ?SC_718
0023 110000      R     ACALL   L?0302
                                           ; SOURCE LINE # 1680
0026 110000      R     ACALL   L?0369
0029 110000      R     ACALL   L?0277
002C 2403              ADD     A,#03H
                                           ; SOURCE LINE # 1681
002E 110000      R     ACALL   L?0282
                                           ; SOURCE LINE # 1682
0031 110000      R     ACALL   L?0301
0034 110000      E     ACALL   _TWstrcat
                                           ; SOURCE LINE # 1683
0037 90000000    R     MOV     DPTR,#pTimeTable
003B 110000      R     ACALL   L?0277
003E 2405              ADD     A,#05H
0040 110000      R     ACALL   L?0298
0043 FF                MOV     R7,A
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 101 

0044 7E00              MOV     R6,#00H
0046 7B00        R     MOV     R3,#MBYTE itoa_buff
0048 7A00        R     MOV     R2,#HIGH itoa_buff
004A 7900        R     MOV     R1,#LOW itoa_buff
004C 110000      E     ACALL   _TWitoa
                                           ; SOURCE LINE # 1684
004F 90000000    E     MOV     DPTR,#?_TWstrcat?BYTE+03H
0053 7400        R     MOV     A,#MBYTE itoa_buff
0055 F0                MOVX    @DPTR,A
0056 A3                INC     DPTR
0057 7400        R     MOV     A,#HIGH itoa_buff
0059 F0                MOVX    @DPTR,A
005A A3                INC     DPTR
005B 7400        R     MOV     A,#LOW itoa_buff
005D 110000      R     ACALL   L?0303
0060 110000      E     ACALL   _TWstrcat
                                           ; SOURCE LINE # 1685
0063 90000000    E     MOV     DPTR,#?_TWstrcat?BYTE+03H
0067 7400        R     MOV     A,#MBYTE ?SC_720
0069 F0                MOVX    @DPTR,A
006A A3                INC     DPTR
006B 7400        R     MOV     A,#HIGH ?SC_720
006D F0                MOVX    @DPTR,A
006E A3                INC     DPTR
006F 7400        R     MOV     A,#LOW ?SC_720
0071 110000      R     ACALL   L?0303
0074 010000      E     AJMP    _TWstrcat
                                           ; SOURCE LINE # 1686
0077         L?0282:
0077 F9                MOV     R1,A
0078 E4                CLR     A
0079 3A                ADDC    A,R2
007A FA                MOV     R2,A
007B 110000      E     ACALL   ?C?ILDPTR
007E FF                MOV     R7,A
007F AEF0              MOV     R6,B
0081 7B00        R     MOV     R3,#MBYTE itoa_buff
0083 7A00        R     MOV     R2,#HIGH itoa_buff
0085 7900        R     MOV     R1,#LOW itoa_buff
0087 110000      E     ACALL   _TWitoa
008A 90000000    E     MOV     DPTR,#?_TWstrcat?BYTE+03H
008E 7400        R     MOV     A,#MBYTE itoa_buff
0090 F0                MOVX    @DPTR,A
0091 A3                INC     DPTR
0092 7400        R     MOV     A,#HIGH itoa_buff
0094 F0                MOVX    @DPTR,A
0095 A3                INC     DPTR
0096 7400        R     MOV     A,#LOW itoa_buff
0098 F0                MOVX    @DPTR,A
0099 7B00        E     MOV     R3,#MBYTE FOsdMsgBuff
009B 7A00        E     MOV     R2,#HIGH FOsdMsgBuff
009D 7900        E     MOV     R1,#LOW FOsdMsgBuff
009F 110000      E     ACALL   _TWstrcat
00A2 22                RET     
00A3         L?0369:
00A3 110000      E     ACALL   _TWstrcat
00A6 90000000    R     MOV     DPTR,#pTimeTable
00AA 22                RET     
             ; FUNCTION _PC_PrepareInfoString (END)

             ; FUNCTION CheckAndSetPC (BEGIN)
                                           ; SOURCE LINE # 1926
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 102 

                                           ; SOURCE LINE # 1927
                                           ; SOURCE LINE # 1955
0000 E4                CLR     A
0001 90000000    R     MOV     DPTR,#i
0005 F0                MOVX    @DPTR,A
0006         ?C0192:
                                           ; SOURCE LINE # 1956
0006 110000      E     ACALL   Meas_StartMeasure
                                           ; SOURCE LINE # 1957
0009 7F32              MOV     R7,#032H
000B 110000      E     ACALL   _Meas_IsMeasureDone
000E 90000000    R     MOV     DPTR,#ret
0012 EF                MOV     A,R7
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1958
0014 6007              JZ      ?C0193
                                           ; SOURCE LINE # 1959
0016         ?C0195:
                                           ; SOURCE LINE # 1960
                                           ; SOURCE LINE # 1961
0016 110000      R     ACALL   L?0334
0019 9402              SUBB    A,#02H
001B 40E9              JC      ?C0192
001D         ?C0193:
                                           ; SOURCE LINE # 1962
001D 90000000    R     MOV     DPTR,#ret
0021 E0                MOVX    A,@DPTR
0022 600C              JZ      ?C0196
                                           ; SOURCE LINE # 1963
0024 7B00        R     MOV     R3,#MBYTE ?SC_723
0026 7A00        R     MOV     R2,#HIGH ?SC_723
0028 7900        R     MOV     R1,#LOW ?SC_723
002A 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 1964
002D 7F01              MOV     R7,#01H
002F 22                RET     
                                           ; SOURCE LINE # 1965
0030         ?C0196:
                                           ; SOURCE LINE # 1969
0030 90000000    R     MOV     DPTR,#old_mode
0034 74FF              MOV     A,#0FFH
0036 F0                MOVX    @DPTR,A
0037         ?C0198:
                                           ; SOURCE LINE # 1970
                                           ; SOURCE LINE # 1972
0037 90000000    R     MOV     DPTR,#old_mode
003B E0                MOVX    A,@DPTR
003C FF                MOV     R7,A
003D 7B00        R     MOV     R3,#MBYTE wTemp
003F 7A00        R     MOV     R2,#HIGH wTemp
0041 7900        R     MOV     R1,#LOW wTemp
0043 110000      R     ACALL   _FindInputModePC
0046 90000000    R     MOV     DPTR,#mode
004A EF                MOV     A,R7
004B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1973
004C BFFF0C            CJNE    R7,#0FFH,?C0200
                                           ; SOURCE LINE # 1974
004F 7B00        R     MOV     R3,#MBYTE ?SC_746
0051 7A00        R     MOV     R2,#HIGH ?SC_746
0053 7900        R     MOV     R1,#LOW ?SC_746
0055 110000      E     ACALL   _Printf
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 103 

                                           ; SOURCE LINE # 1975
0058 7F02              MOV     R7,#02H
005A 22                RET     
                                           ; SOURCE LINE # 1976
005B         ?C0200:
                                           ; SOURCE LINE # 1977
005B 110000      R     ACALL   L?0327
005E A3                INC     DPTR
005F E0                MOVX    A,@DPTR
0060 6F                XRL     A,R7
0061 7003              JNZ     $ + 5H
0063 010000      R     AJMP    ?C0199
                                           ; SOURCE LINE # 1978
0066         ?C0201:
                                           ; SOURCE LINE # 1979
0066 90000000    R     MOV     DPTR,#mode
006A E0                MOVX    A,@DPTR
006B A3                INC     DPTR
006C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1981
006D 110000      R     ACALL   L?0357
0070 90000000    R     MOV     DPTR,#pTimeTable
0074 110000      R     ACALL   L?0291
                                           ; SOURCE LINE # 1986
0077 7FF2              MOV     R7,#0F2H
0079 110000      R     ACALL   _aRGB_SetLLPLLControl
                                           ; SOURCE LINE # 1987
007C 90000000    R     MOV     DPTR,#pTimeTable
0080 110000      R     ACALL   L?0277
0083 2407              ADD     A,#07H
0085 110000      R     ACALL   L?0289
0088 110000      R     ACALL   L?0379
008B 7B28              MOV     R3,#028H
008D 7D01              MOV     R5,#01H
008F 110000      R     ACALL   _aRGB_LLPLLUpdateDivider
0092 90000000    R     MOV     DPTR,#ret
0096 EF                MOV     A,R7
0097 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1988
0098 BF010C            CJNE    R7,#01H,?C0202
                                           ; SOURCE LINE # 1989
009B 7B00        R     MOV     R3,#MBYTE ?SC_785
009D 7A00        R     MOV     R2,#HIGH ?SC_785
009F 7900        R     MOV     R1,#LOW ?SC_785
00A1 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 1990
00A4 7F03              MOV     R7,#03H
00A6 22                RET     
                                           ; SOURCE LINE # 1991
00A7         ?C0202:
                                           ; SOURCE LINE # 1993
00A7 E4                CLR     A
00A8 90000000    R     MOV     DPTR,#i
00AC F0                MOVX    @DPTR,A
00AD         ?C0203:
                                           ; SOURCE LINE # 1994
00AD 759300      E     MOV     DPX,#?C?XDATASEG
00B0 E500        E     MOV     A,regTW88+01H
00B2 24C1              ADD     A,#0C1H
00B4 110000      R     ACALL   L?0271
00B7 E0                MOVX    A,@DPTR
00B8 90000000    R     MOV     DPTR,#InputStatus
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 104 

00BC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1995
00BD E0                MOVX    A,@DPTR
00BE 5430              ANL     A,#030H
00C0 6430              XRL     A,#030H
00C2 6007              JZ      ?C0204
                                           ; SOURCE LINE # 1996
00C4         ?C0206:
                                           ; SOURCE LINE # 1997
                                           ; SOURCE LINE # 1998
00C4 110000      R     ACALL   L?0334
00C7 9432              SUBB    A,#032H
00C9 40E2              JC      ?C0203
00CB         ?C0204:
                                           ; SOURCE LINE # 1999
00CB 90000000    R     MOV     DPTR,#i
00CF E0                MOVX    A,@DPTR
00D0 B43209            CJNE    A,#032H,?C0207
                                           ; SOURCE LINE # 2000
00D3 7B00        R     MOV     R3,#MBYTE ?SC_825
00D5 7A00        R     MOV     R2,#HIGH ?SC_825
00D7 7900        R     MOV     R1,#LOW ?SC_825
00D9 110000      E     ACALL   _Printf
00DC         ?C0207:
                                           ; SOURCE LINE # 2002
00DC 90000000    R     MOV     DPTR,#pTimeTable
00E0 110000      R     ACALL   L?0277
00E3 2406              ADD     A,#06H
00E5 110000      R     ACALL   L?0298
00E8 FF                MOV     R7,A
00E9 54C0              ANL     A,#0C0H
00EB FE                MOV     R6,A
00EC 90000000    R     MOV     DPTR,#InputStatus
00F0 E0                MOVX    A,@DPTR
00F1 54C0              ANL     A,#0C0H
00F3 6E                XRL     A,R6
00F4 606F              JZ      ?C0208
                                           ; SOURCE LINE # 2004
00F6 110000      R     ACALL   L?0350
00F9 EF                MOV     A,R7
00FA 30E605            JNB     ACC.6,?C0209
00FD 110000      R     ACALL   L?0361
0100 8003              SJMP    ?C0210
0102         ?C0209:
0102 110000      R     ACALL   L?0363
0105         ?C0210:
0105 90000000    E     MOV     DPTR,#?_Printf?BYTE+04H
0109 EB                MOV     A,R3
010A 110000      R     ACALL   L?0292
010D 90000000    R     MOV     DPTR,#InputStatus
0111 E0                MOVX    A,@DPTR
0112 30E605            JNB     ACC.6,?C0211
0115 110000      R     ACALL   L?0361
0118 8003              SJMP    ?C0212
011A         ?C0211:
011A 110000      R     ACALL   L?0363
011D         ?C0212:
011D 90000000    E     MOV     DPTR,#?_Printf?BYTE+07H
0121 EB                MOV     A,R3
0122 110000      R     ACALL   L?0292
0125 90000000    R     MOV     DPTR,#pTimeTable
0129 110000      R     ACALL   L?0277
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 105 

012C 2406              ADD     A,#06H
012E 110000      R     ACALL   L?0298
0131 30E705            JNB     ACC.7,?C0213
0134 110000      R     ACALL   L?0362
0137 8003              SJMP    ?C0214
0139         ?C0213:
0139 110000      R     ACALL   L?0364
013C         ?C0214:
013C 90000000    E     MOV     DPTR,#?_Printf?BYTE+0AH
0140 EB                MOV     A,R3
0141 110000      R     ACALL   L?0292
0144 90000000    R     MOV     DPTR,#InputStatus
0148 E0                MOVX    A,@DPTR
0149 30E705            JNB     ACC.7,?C0215
014C 110000      R     ACALL   L?0362
014F 8003              SJMP    ?C0216
0151         ?C0215:
0151 110000      R     ACALL   L?0364
0154         ?C0216:
0154 90000000    E     MOV     DPTR,#?_Printf?BYTE+0DH
0158 EB                MOV     A,R3
0159 110000      R     ACALL   L?0292
015C 7B00        R     MOV     R3,#MBYTE ?SC_840
015E 7A00        R     MOV     R2,#HIGH ?SC_840
0160 7900        R     MOV     R1,#LOW ?SC_840
0162 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 2010
0165         ?C0208:
                                           ; SOURCE LINE # 2011
0165 90000000    R     MOV     DPTR,#InputStatus
0169 E0                MOVX    A,@DPTR
016A 5480              ANL     A,#080H
016C FD                MOV     R5,A
016D 7F01              MOV     R7,#01H
016F 110000      R     ACALL   _aRGB_Set_vSyncOutPolarity
                                           ; SOURCE LINE # 2012
0172 90000000    R     MOV     DPTR,#InputStatus
0176 E0                MOVX    A,@DPTR
0177 5440              ANL     A,#040H
0179 FD                MOV     R5,A
017A 7F01              MOV     R7,#01H
017C 110000      R     ACALL   _aRGB_SetLLPLL_InputPolarity
                                           ; SOURCE LINE # 2014
017F 110000      E     ACALL   Meas_StartMeasure
                                           ; SOURCE LINE # 2015
0182 7F32              MOV     R7,#032H
0184 110000      E     ACALL   _Meas_IsMeasureDone
                                           ; SOURCE LINE # 2016
0187 7B00        R     MOV     R3,#MBYTE wTemp
0189 7A00        R     MOV     R2,#HIGH wTemp
018B 7900        R     MOV     R1,#LOW wTemp
018D 110000      R     ACALL   L?0365
                                           ; SOURCE LINE # 2017
0190 90000000    R     MOV     DPTR,#pTimeTable
0194 110000      R     ACALL   L?0277
0197 2401              ADD     A,#01H
0199 110000      R     ACALL   L?0289
019C FD                MOV     R5,A
019D ACF0              MOV     R4,B
019F C3                CLR     C
01A0 EF                MOV     A,R7
01A1 9402              SUBB    A,#02H
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 106 

01A3 FF                MOV     R7,A
01A4 EE                MOV     A,R6
01A5 9400              SUBB    A,#00H
01A7 FE                MOV     R6,A
01A8 C3                CLR     C
01A9 ED                MOV     A,R5
01AA 9F                SUBB    A,R7
01AB EC                MOV     A,R4
01AC 9E                SUBB    A,R6
01AD 5003              JNC     $ + 5H
01AF 010000      R     AJMP    ?C0198
01B2 90000000    R     MOV     DPTR,#hActive+01H
01B6 E0                MOVX    A,@DPTR
01B7 2402              ADD     A,#02H
01B9 FF                MOV     R7,A
01BA 90000000    R     MOV     DPTR,#hActive
01BE E0                MOVX    A,@DPTR
01BF 3400              ADDC    A,#00H
01C1 FE                MOV     R6,A
01C2 D3                SETB    C
01C3 ED                MOV     A,R5
01C4 9F                SUBB    A,R7
01C5 EC                MOV     A,R4
01C6 9E                SUBB    A,R6
01C7 4003              JC      $ + 5H
01C9 010000      R     AJMP    ?C0198
                                           ; SOURCE LINE # 2019
01CC         ?C0199:
                                           ; SOURCE LINE # 2022
01CC 7B00        R     MOV     R3,#MBYTE ?SC_887
01CE 7A00        R     MOV     R2,#HIGH ?SC_887
01D0 7900        R     MOV     R1,#LOW ?SC_887
01D2 110000      R     ACALL   L?0350
01D5 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 2026
01D8 110000      R     ACALL   L?0327
01DB 110000      E     ACALL   _GetPhaseEE
01DE 90000000    R     MOV     DPTR,#value
01E2 EF                MOV     A,R7
01E3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2027
01E4 BFFF28            CJNE    R7,#0FFH,?C0218
                                           ; SOURCE LINE # 2029
01E7 110000      E     ACALL   AutoTunePhase
                                           ; SOURCE LINE # 2030
01EA 110000      R     ACALL   aRGB_GetPhase
01ED 90000000    R     MOV     DPTR,#value
01F1 EF                MOV     A,R7
01F2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2031
01F3 7B00        R     MOV     R3,#MBYTE ?SC_901
01F5 7A00        R     MOV     R2,#HIGH ?SC_901
01F7 7900        R     MOV     R1,#LOW ?SC_901
01F9 90000000    E     MOV     DPTR,#?_dPrintf?BYTE+03H
01FD F0                MOVX    @DPTR,A
01FE 110000      E     ACALL   _dPrintf
                                           ; SOURCE LINE # 2032
0201 110000      R     ACALL   L?0328
0204 90000000    R     MOV     DPTR,#value
0208 E0                MOVX    A,@DPTR
0209 FD                MOV     R5,A
020A 110000      E     ACALL   _SavePhaseEE
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 107 

                                           ; SOURCE LINE # 2033
020D 8038              SJMP    ?C0219
020F         ?C0218:
                                           ; SOURCE LINE # 2034
                                           ; SOURCE LINE # 2035
020F 7B00        R     MOV     R3,#MBYTE ?SC_924
0211 7A00        R     MOV     R2,#HIGH ?SC_924
0213 7900        R     MOV     R1,#LOW ?SC_924
0215 90000000    R     MOV     DPTR,#value
0219 E0                MOVX    A,@DPTR
021A 90000000    E     MOV     DPTR,#?_dPrintf?BYTE+03H
021E F0                MOVX    @DPTR,A
021F 110000      E     ACALL   _dPrintf
                                           ; SOURCE LINE # 2037
0222 110000      R     ACALL   aRGB_GetPhase
;---- Variable 'value1' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 2038
0225 90000000    R     MOV     DPTR,#value
0229 E0                MOVX    A,@DPTR
022A 6F                XRL     A,R7
022B 601A              JZ      ?C0219
                                           ; SOURCE LINE # 2039
022D 7B00        R     MOV     R3,#MBYTE ?SC_945
022F 7A00        R     MOV     R2,#HIGH ?SC_945
0231 7900        R     MOV     R1,#LOW ?SC_945
0233 90000000    E     MOV     DPTR,#?_dPrintf?BYTE+03H
0237 EF                MOV     A,R7
0238 F0                MOVX    @DPTR,A
0239 110000      E     ACALL   _dPrintf
                                           ; SOURCE LINE # 2040
023C 90000000    R     MOV     DPTR,#value
0240 E0                MOVX    A,@DPTR
0241 FF                MOV     R7,A
0242 E4                CLR     A
0243 FD                MOV     R5,A
0244 110000      R     ACALL   _aRGB_SetPhase
                                           ; SOURCE LINE # 2041
                                           ; SOURCE LINE # 2042
0247         ?C0219:
                                           ; SOURCE LINE # 2044
0247 110000      R     ACALL   L?0328
024A 110000      R     ACALL   _PC_SetScaler
                                           ; SOURCE LINE # 2045
024D 90000000    R     MOV     DPTR,#mode
0251 E0                MOVX    A,@DPTR
0252 FD                MOV     R5,A
0253 90000000    R     MOV     DPTR,#Input_aRGBMode
0257 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2046
0258 90000000    E     MOV     DPTR,#InputSubMode
025C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2048
025D E4                CLR     A
025E FF                MOV     R7,A
025F FE                MOV     R6,A
0260 110000      R     ACALL   _AdjustPixelClk
                                           ; SOURCE LINE # 2049
0263 110000      R     ACALL   L?0328
0266 110000      E     ACALL   _GetPixelClkEE
;---- Variable 'bTemp' assigned to Register 'R5' ----
0269 AD07              MOV     R5,AR7
                                           ; SOURCE LINE # 2054
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 108 

026B ED                MOV     A,R5
026C 700B              JNZ     ?C0221
                                           ; SOURCE LINE # 2055
026E 7B00        R     MOV     R3,#MBYTE ?SC_965
0270 7A00        R     MOV     R2,#HIGH ?SC_965
0272 7900        R     MOV     R1,#LOW ?SC_965
0274 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 2056
0277 7D32              MOV     R5,#032H
                                           ; SOURCE LINE # 2057
0279         ?C0221:
                                           ; SOURCE LINE # 2059
0279 ED                MOV     A,R5
027A 6432              XRL     A,#032H
027C 6039              JZ      ?C0222
                                           ; SOURCE LINE # 2060
027E 90000000    R     MOV     DPTR,#pTimeTable
0282 110000      R     ACALL   L?0277
0285 2407              ADD     A,#07H
0287 110000      R     ACALL   L?0289
028A C3                CLR     C
028B 9401              SUBB    A,#01H
028D FE                MOV     R6,A
028E E5F0              MOV     A,B
0290 9400              SUBB    A,#00H
0292 90000000    R     MOV     DPTR,#wTemp
0296 F0                MOVX    @DPTR,A
0297 A3                INC     DPTR
0298 CE                XCH     A,R6
0299 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2063
029A E0                MOVX    A,@DPTR
029B 2D                ADD     A,R5
029C F0                MOVX    @DPTR,A
029D 90000000    R     MOV     DPTR,#wTemp
                                           ; SOURCE LINE # 2064
02A1 110000      R     ACALL   L?0359
02A4 90000000    R     MOV     DPTR,#wTemp
02A8 E0                MOVX    A,@DPTR
02A9 34FF              ADDC    A,#0FFH
02AB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2066
02AC E0                MOVX    A,@DPTR
02AD FE                MOV     R6,A
02AE A3                INC     DPTR
02AF E0                MOVX    A,@DPTR
02B0 FF                MOV     R7,A
02B1 E4                CLR     A
02B2 FB                MOV     R3,A
02B3 FD                MOV     R5,A
02B4 110000      R     ACALL   _aRGB_LLPLLUpdateDivider
                                           ; SOURCE LINE # 2067
02B7         ?C0222:
                                           ; SOURCE LINE # 2069
02B7 7F04              MOV     R7,#04H
02B9 110000      E     ACALL   _MeasSetErrTolerance
                                           ; SOURCE LINE # 2070
02BC 7F01              MOV     R7,#01H
02BE 110000      E     ACALL   _MeasEnableChangedDetection
                                           ; SOURCE LINE # 2074
02C1 7B00        R     MOV     R3,#MBYTE hCropStart
02C3 7A00        R     MOV     R2,#HIGH hCropStart
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 109 

02C5 7900        R     MOV     R1,#LOW hCropStart
02C7 110000      R     ACALL   L?0365
                                           ; SOURCE LINE # 2075
02CA 7B00        R     MOV     R3,#MBYTE vCropStart
02CC 7A00        R     MOV     R2,#HIGH vCropStart
02CE 7900        R     MOV     R1,#LOW vCropStart
02D0 110000      E     ACALL   _MeasGetVActive
02D3 90000000    R     MOV     DPTR,#vActive
02D7 EE                MOV     A,R6
02D8 F0                MOVX    @DPTR,A
02D9 A3                INC     DPTR
02DA EF                MOV     A,R7
02DB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2076
02DC 110000      E     ACALL   MeasGetVFreq
02DF 90000000    R     MOV     DPTR,#vFreq
02E3 EF                MOV     A,R7
                                           ; SOURCE LINE # 2077
02E4 110000      R     ACALL   L?0371
02E7 110000      E     ACALL   _PrintMeasValue
                                           ; SOURCE LINE # 2081
02EA 110000      R     ACALL   L?0344
02ED 90000000    R     MOV     DPTR,#hActive
02F1 E0                MOVX    A,@DPTR
02F2 FC                MOV     R4,A
02F3 A3                INC     DPTR
02F4 E0                MOVX    A,@DPTR
02F5 FD                MOV     R5,A
02F6 110000      R     ACALL   L?0281
02F9 90000000    R     MOV     DPTR,#vFreq
02FD E0                MOVX    A,@DPTR
02FE 90000000    E     MOV     DPTR,#?_FindScalerTable?BYTE+05H
0302 F0                MOVX    @DPTR,A
0303 90000000    R     MOV     DPTR,#vCropStart
0307 E0                MOVX    A,@DPTR
0308 F8                MOV     R0,A
0309 A3                INC     DPTR
030A E0                MOVX    A,@DPTR
030B 90000000    E     MOV     DPTR,#?_FindScalerTable?BYTE+06H
030F F0                MOVX    @DPTR,A
0310 A3                INC     DPTR
0311 7401              MOV     A,#01H
0313 F0                MOVX    @DPTR,A
0314 110000      E     ACALL   _FindScalerTable
0317 90000000    R     MOV     DPTR,#pScaler
031B EB                MOV     A,R3
031C 110000      R     ACALL   L?0292
                                           ; SOURCE LINE # 2082
031F 90000000    R     MOV     DPTR,#pScaler
0323 110000      R     ACALL   L?0277
0326 4A                ORL     A,R2
0327 4B                ORL     A,R3
0328 600A              JZ      ?C0223
                                           ; SOURCE LINE # 2083
032A 90000000    R     MOV     DPTR,#pScaler
032E 110000      R     ACALL   L?0356
0331 110000      E     ACALL   _OverWriteScalerWithTable
0334         ?C0223:
                                           ; SOURCE LINE # 2085
0334 110000      R     ACALL   L?0328
0337 110000      R     ACALL   _PC_PrepareInfoString
                                           ; SOURCE LINE # 2095
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 110 

033A 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 2097
033C         ?C0197:
033C 22                RET     
033D         L?0334:
033D 7F0A              MOV     R7,#0AH
033F 7E00              MOV     R6,#00H
0341 110000      E     ACALL   _delay1ms
0344 90000000    R     MOV     DPTR,#i
0348 E0                MOVX    A,@DPTR
0349 04                INC     A
034A F0                MOVX    @DPTR,A
034B E0                MOVX    A,@DPTR
034C C3                CLR     C
034D 22                RET     
034E         L?0365:
034E 110000      E     ACALL   _MeasGetHActive
0351 90000000    R     MOV     DPTR,#hActive
0355 EE                MOV     A,R6
0356 F0                MOVX    @DPTR,A
0357 A3                INC     DPTR
0358 EF                MOV     A,R7
0359 F0                MOVX    @DPTR,A
035A 22                RET     
             ; FUNCTION CheckAndSetPC (END)

             ; FUNCTION ChangePC (BEGIN)
                                           ; SOURCE LINE # 2111
                                           ; SOURCE LINE # 2112
                                           ; SOURCE LINE # 2115
0000 90000000    E     MOV     DPTR,#InputMain
0004 E0                MOVX    A,@DPTR
0005 B4030C            CJNE    A,#03H,?C0224
                                           ; SOURCE LINE # 2116
0008 7B00        R     MOV     R3,#MBYTE ?SC_1020
000A 7A00        R     MOV     R2,#HIGH ?SC_1020
000C 7900        R     MOV     R1,#LOW ?SC_1020
000E 110000      E     ACALL   _dPrintf
                                           ; SOURCE LINE # 2117
0011 7F01              MOV     R7,#01H
0013 22                RET     
                                           ; SOURCE LINE # 2118
0014         ?C0224:
                                           ; SOURCE LINE # 2120
0014 90000000    E     MOV     DPTR,#InputMain
0018 7403              MOV     A,#03H
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2121
001B E4                CLR     A
001C 90000000    E     MOV     DPTR,#InputSubMode
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2123
0021 110000      E     ACALL   GetInputMainEE
0024 110000      R     ACALL   L?0343
0027 6E                XRL     A,R6
0028 6003              JZ      ?C0226
                                           ; SOURCE LINE # 2124
002A 110000      E     ACALL   _SaveInputMainEE
002D         ?C0226:
                                           ; SOURCE LINE # 2128
002D 110000      E     ACALL   InitInputAsDefault
                                           ; SOURCE LINE # 2133
C51 COMPILER V9.56.0.0   ARGB                                                              07/18/2018 10:44:38 PAGE 111 

0030 110000      R     ACALL   CheckAndSetPC
;---- Variable 'ret' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 2134
0033 EF                MOV     A,R7
0034 7007              JNZ     ?C0227
                                           ; SOURCE LINE # 2136
0036 FF                MOV     R7,A
0037 110000      E     ACALL   _VInput_enableOutput
                                           ; SOURCE LINE # 2137
003A 7F00              MOV     R7,#00H
003C 22                RET     
                                           ; SOURCE LINE # 2138
003D         ?C0227:
                                           ; SOURCE LINE # 2146
003D E4                CLR     A
003E FF                MOV     R7,A
003F 110000      E     ACALL   _VInput_gotoFreerun
                                           ; SOURCE LINE # 2148
0042 7F02              MOV     R7,#02H
                                           ; SOURCE LINE # 2149
0044         ?C0225:
0044 22                RET     
             ; FUNCTION ChangePC (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   6881    ----
   CONSTANT SIZE    =   1036    ----
   XDATA SIZE       =      1     160
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
