C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE BT656
OBJECT MODULE PLACED IN .\Output\BT656.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Source36\BT656.c LARGE OMF2 ROM(D512K) OPTIMIZE(9,SPEED) REGFILE(.\Outpu
                    -t\TW8836B_EVB11.ORC) BROWSE INCDIR(SiI-SW;SiI-SW\HAL;SiI-SW\DEBUG;SiI-SW\CEC;.\Source36\LIB) DEFINE(EVB_11,nullFn=//) DE
                    -BUG CODE PRINT(.\List\BT656.lst) TABS(2) OBJECT(.\Output\BT656.obj)

line level    source

   1          /**
   2           * @file
   3           * BT656.c 
   4           * @author Brian Kang
   5           * @version 1.0
   6           * @section LICENSE
   7           *  Copyright (C) 2012-2013 Intersil Corporation
   8           * @section DESCRIPTION
   9           *  BT656
  10          */
  11          /*
  12          Disclaimer: THIS INFORMATION IS PROVIDED 'AS-IS' FOR EVALUATION PURPOSES ONLY.  
  13          INTERSIL CORPORATION AND ITS SUBSIDIARIES ('INTERSIL') DISCLAIM ALL WARRANTIES, 
  14          INCLUDING WITHOUT LIMITATION FITNESS FOR A PARTICULAR PURPOSE AND MERCHANTABILITY.  
  15          Intersil provides evaluation platforms to help our customers to develop products. 
  16          However, factors beyond Intersil's control could significantly affect Intersil 
  17          product performance. 
  18          It remains the customers' responsibility to verify the actual system performance.
  19          */
  20          #include "Config.h"
  21          #include "reg.h"
  22          #include "typedefs.h"
  23          #include "TW8836.h"
  24          #include "Global.h"
  25          
  26          #include "CPU.h"
  27          #include "Printf.h"
  28          #include "Monitor.h"
  29          
  30          #include "I2C.h"
  31          
  32          #include "main.h"
  33          #include "Scaler.h"
  34          #include "InputCtrl.h"
  35          #include "eeprom.h"
  36          #include "decoder.h"
  37          #include "aRGB.h"
  38          #include "dtv.h"
  39          #include "measure.h"
  40          #include "PC_modes.h"
  41          
  42          #include "DebugMsg.h"
  43          #include "BT656.h"
  44          #include "Settings.h"
  45          
  46          
  47          struct BT656SCALE_OPTION_s {
  48            WORD hActive,vActive;
  49            BYTE vFreq;
  50            BYTE option0, option1, option2;
  51          };
  52          BYTE FindBT656ScalerTable(struct BT656SCALE_OPTION_s *table,WORD hActive, WORD vActive, BYTE vFreq, BYTE f
             -Scale)
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 2   

  53          {
  54   1        BYTE idx;
  55   1      
  56   1        struct BT656SCALE_OPTION_s * p = table;
  57   1      
  58   1        if(vFreq==59)
  59   1          vFreq=60;
  60   1      
  61   1        while(p->hActive) {
  62   2          if(hActive == p->hActive
  63   2          && vActive == p->vActive
  64   2          && vFreq   == p->vFreq) {
  65   3            switch(fScale) {
  66   4            case 2:  idx = p->option2; break;
  67   4            case 1:  idx = p->option1; break;
  68   4            default: idx = p->option0; break;
  69   4            }
  70   3            if(idx == 0xFF)
  71   3              idx = p->option0;
  72   3            return idx;
  73   3          }
  74   2          p++;
  75   2        }
  76   1      #ifdef DEBUG_BT656
                Printf("\nFindBT656ScalerTable %dx%d%bd fScale:%bx Fail",hActive,vActive,vFreq,fScale); 
              #endif
  79   1        return 0xFF; //fail
  80   1      }
  81          
  82          WORD BT656Enc_Calc_hActive(WORD hActive, WORD hScale)
  83          {
  84   1        DWORD dTemp;
  85   1      
  86   1        dTemp = hActive;
  87   1        dTemp *= 0x400;
  88   1        dTemp /= hScale;
  89   1        return (WORD)dTemp;
  90   1      }
  91          WORD BT656Enc_Calc_vActive(WORD vActive, BYTE vScale)
  92          {
  93   1        DWORD dTemp;
  94   1      
  95   1        dTemp = vActive;
  96   1        switch(vScale) {
  97   2        case 2: dTemp <<= 1; break;
  98   2        case 6: dTemp <<= 1; dTemp /= 3; break;
  99   2        case 8: dTemp >>= 1; break;
 100   2        case 9: dTemp <<= 2; dTemp /= 9; break;
 101   2        default: break;
 102   2        }
 103   1        return (WORD)dTemp;
 104   1      }
 105           
 106          
 107          /**
 108          * Enable BT656 Encoder Module
 109          *
 110          * REG007[3]
 111          * @param fOn 1:On 0:Off.
 112          * @return : 1:changed
 113          */
 114          BYTE BT656Enc_Enable(BYTE fOn)
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 3   

 115          {
 116   1        BYTE temp;
 117   1        BYTE ret=1;
 118   1      
 119   1        temp = ReadTW88(REG007);
 120   1        if(fOn) {
 121   2          if(temp & 0x08) ret = 0;
 122   2          temp |= 0x08;
 123   2        }
 124   1        else {
 125   2          if((temp & 0x08) == 0) ret = 0;
 126   2           temp &= ~0x08;
 127   2        }
 128   1        WriteTW88(REG007,temp);
 129   1        return ret;
 130   1      }
 131          
 132          /**
 133          * Control BT656(BT601) Clock Output polarity.
 134          *
 135          * @param fActiveHigh 
 136          *   0:Low Active
 137          * 1:High Active 
 138          *
 139          * REG040[5] VDCLK_POL 0:Low Active
 140          */
 141          void BT656Enc_SetOutputClkPol(BYTE fActiveHigh)
 142          {
 143   1        BYTE temp;
 144   1        temp = ReadTW88(REG040) & ~0x20;
 145   1        if(fActiveHigh) temp |= 0x20;
 146   1        WriteTW88(REG040, temp);
 147   1      }
 148          
 149          
 150          #if 0
              /**
              * Control BT656(BT601) Synch output.
              *
              * fOn : enable HSync & VSync pin Output
              * h  Horizontal Polarity 0:Normal, 1:Inverse.
              * v  Vertical   Polarity 0:Normal, 1:Inverse.
              *
              * REG048[6] Enable BT656 H/VSYNC output through aRGB H/V.
              * REG066[1] Output VSYNC polarity
              * REG066[0] Putput HSYNC polarity
              * REG06E[7:0]     vSync Width
              * REG06F[7:0]     hSync Width
              */
              //void BT656_SyncPolarity(BYTE fOn, BYTE hPol, BYTE hSync, BYTE vPol, BYTE vSync)
              //{
              //  BYTE bTemp;
              //  if(fOn) {
              //    WriteTW88(REG048, ReadTW88(REG048) | 0x40);
              //    bTemp = ReadTW88(REG066) & 0xFC;
              //    bTemp |= (vPol << 1);
              //    bTemp |= hPol;
              //    WriteTW88(REG066, bTemp);
              //    WriteTW88(REG06E,vSync);
              //    WriteTW88(REG06F,hSync);
              //  }
              //  else {
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 4   

              //    WriteTW88(REG048, ReadTW88(REG048) & ~0x40);
              //  }
              //}
              #endif
 181          
 182          /**
 183          * Set 2D-DI Odd/Even Offset
 184          * REG066[7:6] : Odd Offset
 185          * REG066[5:4] : Even Offset
 186          */
 187          void BT656Enc_2DDI_FieldOffset(BYTE Odd, BYTE Even)
 188          {
 189   1        BYTE temp;
 190   1        temp = ReadTW88(REG066) & 0x0F;
 191   1        temp |= (Odd << 6);
 192   1        temp |= (Even << 4);
 193   1        WriteTW88(REG066, temp);
 194   1      }
 195          
 196          
 197          /**
 198          * Select RGB or YUV.
 199          * only for DTV,LVDSRX, Panel.
 200          * REG067[6]
 201          */
 202          void BT656Enc_D_SetRGB(BYTE fOn)
 203          {
 204   1        BYTE bTemp;
 205   1        bTemp = ReadTW88(REG067) & ~0x40;
 206   1        if(fOn) bTemp |= 0x40;
 207   1        WriteTW88(REG067,bTemp);
 208   1      }
 209          
 210          //REG067[5]
 211          //REG067[4]
 212          //REG067[3]
 213          
 214          /**
 215          * Select BT656Enc source
 216          * If it is dec or aRGB, it uses an analog block.
 217          * If it is dtv, lvds, panel, it uses a digital block.
 218          *
 219          * @param fMode 0:dec,1:aRGB,2:DTV,3:LVDS,4:Panel
 220          * REG067[2:0]
 221          */
 222          void BT656Enc_SelectSource(BYTE fMode)
 223          {
 224   1        BYTE bTemp;
 225   1      
 226   1        bTemp = ReadTW88(REG067) & 0xF8;
 227   1        bTemp |= fMode;
 228   1        WriteTW88(REG067,bTemp);
 229   1      }
 230          
 231          //REG068
 232          
 233          /**
 234          * set input crop for BT656Enc digital block.
 235          * FYI. the analog block uses a decoder input crop registers.
 236          *
 237          * Horizontal Start Active Video
 238          * Vertical Start Active Video
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 5   

 239          * REG068[]
 240          * REG069[]
 241          * REG06A[]
 242          * REG06B[]
 243          * REG06C[]
 244          * REG06D[]
 245          */
 246          void BT656Enc_Crop(WORD h_SAV, WORD v_SAV, WORD HLen, WORD VLen)
 247          {
 248   1        BYTE bTemp;
 249   1        
 250   1      #ifdef DEBUG_BT656
                //Printf("\n\rBT656Enc Crop %d hCropStart:%d",HLen, h_SAV);
                //Printf("\n\r              %d vCropStart:%d",VLen, v_SAV);
                Printf("\n\rBT656Enc BTCrop hStart:%d hLen:%d  vStart:%d vLen:%d", h_SAV,HLen, v_SAV,VLen);
              #endif
 255   1      
 256   1        bTemp = ReadTW88(REG068) & 0xFC;
 257   1        bTemp |= (h_SAV >> 8);
 258   1        WriteTW88(REG068, bTemp);
 259   1        bTemp = ReadTW88(REG069) & 0x80;
 260   1        bTemp |= ((BYTE)(VLen >> 4) & 0x70);
 261   1        bTemp |= (BYTE)(HLen >> 8);
 262   1        WriteTW88(REG069, bTemp);
 263   1        WriteTW88(REG06A, (BYTE)v_SAV);
 264   1        WriteTW88(REG06B, (BYTE)VLen);
 265   1        WriteTW88(REG06C, (BYTE)h_SAV);
 266   1        WriteTW88(REG06D, (BYTE)HLen);
 267   1      }
 268          
 269          #if 0
              /**
              * ??for BT601 ?. passthru aRGB H & V.
              * REG06E
              * REG06F
              */
              void BT656_SyncWidth(BYTE h, BYTE v)
              {
                WriteTW88(REG06F,h);
                WriteTW88(REG06E,v);
              }
              #endif
 281          
 282          /**
 283          *
 284          * REG077[4] Enable double data rate output mode for VD656 bus.   
 285          *     (Not valid on interlaced decoder BT656 output)
 286          */
 287          #if 0
              void BT656Enc_EnableDDR(BYTE fOn)
              {
                BYTE temp;
                temp = ReadTW88(REG077);
                if(fOn) temp |=  0x10;
                else    temp &= ~0x10;
                WriteTW88(REG077,temp);
              }
              #endif
 297          /**
 298          *
 299          * REG077[5] Enable double code width when double data rate output mode is enabled.
 300          *     (Not valid on interlaced decoder BT656 output)
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 6   

 301          *     1: Code word is repeated FF-FF-00-00-00-00-XX-XX
 302          *     0: Normal code word FF-00-00-XX
 303          *
 304          * REG061[4] Enable VD656 bus output clock phase delay 90 degree 
 305          *     when the output is configured as double data rate. 
 306          *     (Not valid on interlaced decoder BT656 output)
 307          */
 308          #if 0
              void BT656Enc_SetDDR_Options(BYTE fRepeat, BYTE fClock90)
              {
                BYTE temp;
                temp = ReadTW88(REG077);
                if(fRepeat) temp |=  0x20;
                else      temp &= ~0x20;
                WriteTW88(REG077,temp);
              
                temp = ReadTW88(REG061);
                if(fClock90) temp |=  0x10;
                else       temp &= ~0x10;
                WriteTW88(REG061,temp);
              }
              #endif
 323          
 324          
 325          //
 326          //BT656I BT656 interlaced
 327          //BT656P BT656 DeInterlaced. Progressive
 328          //ADC
 329          //
 330          
 331          /**
 332          * description
 333          * select analog BT656 output.
 334          * @param mode video data outputmode
 335          *   0: interlaced BT656
 336          *   1: Progressive BT656
 337          *   2: BT656 ADC
 338          * @param hPol
 339          *   1: invert hSync ouput pin
 340          * @param vPol
 341          *   1: invert vSync output pin
 342          * @param hv_sel hSync Output, vSync Output control
 343          *   00b : use aRGB module hSync(HSY_SEL), vSync(VSY_SEL). See REG1CC[4] and REG1CC[3:2].
 344          *   01b : use decoder generated hSync and vSync
 345          *   10b : use de-interlaced hSync and vSync.
 346          * REG105
 347          */
 348          void BT656_A_SelectOutput(BYTE mode,BYTE hPol,BYTE vPol, BYTE hv_sel)
 349          {
 350   1        BYTE bTemp;
 351   1      
 352   1      #ifdef DEBUG_BT656
                Printf("\n\rBT656_A_Output(%bd,,)",mode);
              #endif
 355   1        
 356   1        bTemp = mode << 4;
 357   1        if(hPol==0) bTemp |= 0x08;
 358   1        if(vPol==0) bTemp |= 0x04;
 359   1        bTemp |= hv_sel;
 360   1        WriteTW88(REG105,bTemp);
 361   1      }
 362          
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 7   

 363          #define BT656_A_OUT_DEC_I   0
 364          #define BT656_A_OUT_DEC_DI    1
 365          #define BT656_A_OUT_DEC_ADC   2
 366          /**
 367          * set BT656Enc Analog output control
 368          *
 369          * REG105[3] 0:HSO pin output inversion
 370          *     1:HSO pin output no inversion
 371          * REG105[2] 0:VSO pin output inversion
 372          *     1:VSO pin output no inversion
 373          */
 374          void BT656_A_Output(BYTE mode, BYTE hPol, BYTE vPol)
 375          {
 376   1        BYTE bTemp;
 377   1      
 378   1      #ifdef DEBUG_BT656
                Printf("\n\rBT656_A_Output(%bd,%bd,%bd)",mode,hPol,vPol);
              #endif
 381   1      
 382   1        bTemp = 0;
 383   1        switch(mode) {
 384   2        case BT656_A_OUT_DEC_I:   bTemp |= 0x01;  break;
 385   2        case BT656_A_OUT_DEC_DI:  bTemp |= 0x12;  break;
 386   2        case BT656_A_OUT_DEC_ADC: bTemp |= 0x20;  break;
 387   2        default:          bTemp |= 0x10;  break;
 388   2        }
 389   1        if(hPol)          bTemp |= 0x08;
 390   1        if(vPol)          bTemp |= 0x04;
 391   1        WriteTW88(REG105 , bTemp);  
 392   1      
 393   1        bTemp = ReadTW88(REG1E9) & 0x3F;
 394   1        switch(mode) {
 395   2        case BT656_A_OUT_DEC_I:   bTemp |= 0x00;  break;
 396   2        case BT656_A_OUT_DEC_DI:  bTemp |= 0x40;  break;
 397   2        case BT656_A_OUT_DEC_ADC: bTemp |= 0x80;  break; //??
 398   2        default:          bTemp |= 0x00;  break;
 399   2        }
 400   1        WriteTW88(REG1E9 , bTemp);  
 401   1      }
 402          
 403          
 404          #if 0
              /**
              * moved to REG066
              * REG136[3:2]
              * REG136[1:0]
              */
              //void BT656_A_SetDeInterlaceFieldOffset(BYTE Odd, BYTE Even)
              //{
              //  BYTE bTemp;
              //  bTemp = ReadTW88(REG136) & 0xF0;
              //  bTemp |= (Odd < 2);
              //  bTemp |= (Even);
              //  WriteTW88(REG136,bTemp);
              //}
              #endif
 419          
 420          /**
 421          removed 
 422          * REG137[7:0]
 423          * REG138[7:0]
 424          */
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 8   

 425          #if 0
              //void BT656_A_DeInterlace_Set(BYTE hdelay, BYTE hstart)
              //{
              //  WriteTW88(REG137,hdelay);
              //  WriteTW88(REG138,hstart);
              //}
              #endif
 432          
 433          //REG1E8[]. move from TW8835 REG105.
 434          
 435          
 436          //----------------------------
 437          // BT656 Analog Control.
 438          // for ADC and aRGB only
 439          //----------------------------
 440          void BT656_A_SetLLCLK_Pol(BYTE pol)
 441          {
 442   1        BYTE bTemp;
 443   1        bTemp = ReadTW88(REG1E9) & 0xFD; //~0x02
 444   1        bTemp |= pol << 1;
 445   1        WriteTW88(REG1E9,bTemp);
 446   1      }
 447          void BT656_A_SelectCLKO(BYTE mode, BYTE PolClko)
 448          {
 449   1        BYTE bTemp;
 450   1        bTemp = ReadTW88(REG1E9) & 0x1F;
 451   1        bTemp = mode << 6;
 452   1        bTemp |= PolClko << 5;
 453   1        WriteTW88(REG1E9,bTemp);
 454   1      }
 455          void BT656Enc_En2DDI(BYTE fOn)
 456          {
 457   1        BYTE bTemp;
 458   1        bTemp = ReadTW88(REG1E9) & 0xFE;
 459   1        if(fOn) bTemp |= 0x01;
 460   1        WriteTW88(REG1E9,bTemp);
 461   1      }
 462          
 463          
 464          #if 0
              void BT656Enc_GenLockPowerDown(BYTE fOn)
              {
                BYTE bTemp;
                bTemp = ReadTW88(REG1E1) & ~0x20;
                if(fOn) bTemp |= 0x20; //powerdown
                WriteTW88(REG1E9,bTemp);
              }
              #endif
 473          
 474          /**
 475          *
 476          * param
 477          * PreDiv: REG077[3:0]
 478          * x8:     REG1E1[6]
 479          */
 480          #define GENLOCK_X4  0
 481          #define GENLOCK_X8  1
 482          void BT656Enc_GenLock(BYTE PreDiv, BYTE x8)
 483          {
 484   1        BYTE temp;
 485   1      
 486   1        WriteTW88(REG077, (ReadTW88(REG077) & 0xF0) | PreDiv);
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 9   

 487   1      
 488   1        temp = ReadTW88(REG1E1);
 489   1        if(x8) temp |=  0x40;
 490   1        else   temp &= ~0x40;
 491   1        WriteTW88(REG1E1,temp); 
 492   1      }
 493          
 494          
 495          /**
 496          * REG1EA[1] 0: RGBCLK div2, 1:RGBCLK
 497          * REG1EA[0] 0: ADCCLK div2, 1:ADCCLK
 498          */
 499          #if 0
              void BT656_AdcRgbNoClkDivider2(BYTE fAdcOn, BYTE fRgbOn)
              {
                BYTE bTemp;
                bTemp = ReadTW88(REG1EA) & ~0x03;
                if(fRgbOn) bTemp |= 0x02;
                if(fAdcOn) bTemp |= 0x01;
                WriteTW88(REG1EA, bTemp);
              }
              #endif
 509          
 510          //=============================================================================
 511          //
 512          //=============================================================================
 513          
 514          /**
 515          *
 516          */
 517          BYTE BT656_CheckLoopbackCombination(BYTE mode)
 518          {
 519   1        BYTE fError;
 520   1        BYTE bt656_src_mode;
 521   1      
 522   1        if(mode==BT656ENC_SRC_DEC 
 523   1        || mode==BT656ENC_SRC_ARGB 
 524   1        || mode==BT656ENC_SRC_DTV 
 525   1        || mode==BT656ENC_SRC_LVDS) {
 526   2          //check input combination
 527   2          fError = 0;
 528   2          switch(InputMain) {
 529   3          case INPUT_CVBS:
 530   3          case INPUT_SVIDEO:
 531   3            if(mode != BT656ENC_SRC_DEC) 
 532   3              fError = 1;
 533   3            break;
 534   3          case INPUT_COMP:
 535   3          case INPUT_PC:
 536   3            if(mode != BT656ENC_SRC_ARGB)
 537   3              fError = 1;
 538   3            break;
 539   3          case INPUT_DVI:
 540   3          case INPUT_HDMIPC:
 541   3          case INPUT_HDMITV:
 542   3            if(mode != BT656ENC_SRC_DTV)
 543   3              fError = 1;
 544   3            break;
 545   3          case INPUT_LVDS:
 546   3            if(mode != BT656ENC_SRC_LVDS)
 547   3              fError = 1;
 548   3            break;
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 10  

 549   3          case INPUT_BT656:
 550   3            //it is a loopback. input and output have to different.
 551   3            if(mode == BT656ENC_SRC_DTV)
 552   3              fError = 1;     
 553   3            break;
 554   3          }
 555   2          if(fError) {
 556   3            Puts("\n\r FAIL");  
 557   3            PrintfInput(InputMain,0);
 558   3            Puts(" ");  
 559   3      #if defined(DEBUG_BT656)
                    PrintfBT656Input(mode, 0);
              #endif
 562   3            return 0xFF;
 563   3          }
 564   2          bt656_src_mode = mode;
 565   2        }
 566   1        else if(mode==BT656ENC_SRC_AUTO) {
 567   2          //select BT656ENC_SRC_MODE
 568   2          switch(InputMain) {
 569   3          case INPUT_CVBS:
 570   3          case INPUT_SVIDEO:
 571   3            bt656_src_mode = BT656ENC_SRC_DEC;
 572   3            break;
 573   3          case INPUT_COMP:
 574   3          case INPUT_PC:
 575   3            bt656_src_mode = BT656ENC_SRC_ARGB;
 576   3            break;
 577   3          case INPUT_DVI:
 578   3          case INPUT_HDMIPC:
 579   3          case INPUT_HDMITV:
 580   3            bt656_src_mode = BT656ENC_SRC_DTV;
 581   3            break;
 582   3          case INPUT_LVDS:
 583   3            bt656_src_mode = BT656ENC_SRC_LVDS;
 584   3            break;
 585   3          case INPUT_BT656: //loopback
 586   3            bt656_src_mode = BT656ENC_SRC_DEC;
 587   3            break;
 588   3          default:
 589   3            //bt656_src_mode = mode;
 590   3            Printf("\n\rUnknown InputMain:%bd",InputMain);
 591   3            return 0xFF;  
 592   3          }
 593   2        }
 594   1        else {
 595   2          //panel
 596   2          bt656_src_mode = mode;
 597   2        }
 598   1      
 599   1        return bt656_src_mode;
 600   1      }
 601          
 602          
 603          /**
 604          * Change BT656 input.
 605          * Do not change InputMain.
 606          * If InputMain has a conflict, stop and print only a debug message. 
 607          *
 608          * extern
 609          * InputMain
 610          * InputBT656
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 11  

 611          *
 612          * @param mode
 613          * BT656ENC_SRC_DEC  
 614          * BT656ENC_SRC_ARGB 
 615          * BT656ENC_SRC_DTV  
 616          * BT656ENC_SRC_LVDS 
 617          * BT656ENC_SRC_PANEL  
 618          * BT656ENC_SRC_OFF
 619          * @return
 620          * 0: success
 621          * 1:invalid combination
 622          * 2:out of range. only for 480i,576i,480p and 576p. 
 623          */
 624          
 625          
 626          
 627          //==================================================================================
 628          // NEW
 629          //==================================================================================
 630          
 631          
 632          /**
 633          * Set BT656 Encoder Scaler
 634          *
 635          * h:12bit. b:4bit
 636          * @param h
 637          * horizontal scale value. base 0x400. 12bit.
 638          * 1920 to 720 = 1920 * 1024 / 720 = 2730 = 0xAAA.
 639          * 1280 to 720 = 1280 * 1024 / 720 = 1820 = 0x71C.
 640          * @param v
 641          * vertical scale options
 642          * 0:No Scale
 643          * 2:DI(2x up)
 644          * 4:Cropping only
 645          * 6:DownScale 1.5
 646          * 8:DownScale 2.0
 647          * 9:DownScale 2.25
 648          */
 649          void BT656Enc_SetScaler(WORD h, BYTE v)
 650          {
 651   1        WriteTW88(REG064, (v << 4) | (BYTE)(h >> 8));
 652   1        WriteTW88(REG065, (BYTE)h);
 653   1          
 654   1      }
 655          //void BT656Enc_SetPreDivider(BYTE div)
 656          //{
 657          //  WriteTW88(REG077, (ReadTW88(REG077) & 0xF0) | div);
 658          //}
 659          /**
 660          *
 661          * @see BT656Enc_Calc2_hStart_hActive()
 662          */
 663          void BT656Enc_SetOutputActiveLen(WORD hStart,WORD hLen)
 664          {
 665   1        WriteTW88(REG07A, (ReadTW88(REG07A) & 0xF0) | (BYTE)(hStart >> 8));
 666   1        WriteTW88(REG07B,(BYTE)hStart);
 667   1        WriteTW88(REG07C, (ReadTW88(REG07C) & 0xF0) | (BYTE)(hLen >> 8));
 668   1        WriteTW88(REG07D,(BYTE)hLen);
 669   1      }
 670          /**
 671          * If input vSync is too small, BT656Enc scaler need to add some delay.
 672          * REG07A[7:4]
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 12  

 673          */
 674          void BT656Enc_SetVSyncDelay(BYTE delay)
 675          {
 676   1        WriteTW88(REG07A, (ReadTW88(REG07A) & 0x0F) | (delay <<4));
 677   1      }
 678          
 679          
 680          
 681          void BT656Enc_Setup_Init(BYTE source)
 682          {
 683   1        WriteTW88(REG062,0x00);
 684   1        WriteTW88(REG063,0x00);
 685   1        WriteTW88(REG064,0x04);
 686   1        WriteTW88(REG065,0x00);
 687   1        WriteTW88(REG066,0x30);
 688   1        WriteTW88(REG067,0x00);
 689   1        WriteTW88(REG068,0x00);
 690   1        WriteTW88(REG069,0x02);
 691   1        WriteTW88(REG06A,0x20);
 692   1        WriteTW88(REG06B,0xF0);
 693   1        WriteTW88(REG06C,0x20);
 694   1        WriteTW88(REG06D,0xD0);
 695   1        WriteTW88(REG06E,0x10);
 696   1        WriteTW88(REG06F,0x10);
 697   1        WriteTW88(REG077,0x04);
 698   1        WriteTW88(REG078,0x00);
 699   1        WriteTW88(REG079,0x04);
 700   1        WriteTW88(REG07A,0x40);
 701   1        WriteTW88(REG07B,0x28);
 702   1        WriteTW88(REG07C,0x03);
 703   1        WriteTW88(REG07D,0x00);
 704   1        WriteTW88(REG07E,0x00);
 705   1        WriteTW88(REG07F,0x80);
 706   1      
 707   1        BT656Enc_Enable(ON);
 708   1        BT656Enc_SelectSource(source);
 709   1      }
 710          
 711          void BT656Enc_Update_BT656ExternalEncoder(WORD hActive, WORD vActive)
 712          {
 713   1        BYTE ext_ic_mode;
 714   1      
 715   1        ext_ic_mode = 0xFF;
 716   1        if(hActive==720) {
 717   2          if(vActive==240)
 718   2            ext_ic_mode = BT656_8BIT_525I_YCBCR_TO_CVBS;  
 719   2          if(vActive==288)
 720   2            ext_ic_mode = BT656_8BIT_625I_YCBCR_TO_CVBS; 
 721   2        }
 722   1        if(ext_ic_mode != 0xFF)
 723   1          BT656_InitExtEncoder(ext_ic_mode);  
 724   1      }
 725          
 726          
 727          
 728          /**
 729           * Decoder option
 730           * BYPASS or 2DDI
 731           * Use EEPROM[0x21]
 732           */
 733          struct BT656SCALE_OPTION_s BT656SCALE_DEC_OPTION_table[] = {
 734          
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 13  

 735            {720,240,60,  BT656SCALER_IDX_CVBS_NTSC,      BT656SCALER_IDX_CVBS_NTSC_2D, 0xFF},
 736            {720,288,50,  BT656SCALER_IDX_CVBS_PAL,     BT656SCALER_IDX_CVBS_PAL_2D, 0xFF},
 737            {0,}
 738          };
 739          /**
 740           * Setup Decoder
 741           *
 742           * Input
 743           *  VideoInputSub
 744           * Output
 745           *  G_pBt656Scaler
 746           */
 747          #if defined(SUPPORT_BT656)
 748          struct DIGIT_VIDEO_TIME_TABLE_s * BT656Enc_Setup_Dec(void)
 749          {
 750   1        BYTE fScale;
 751   1        struct DEC_VIDEO_TIME_TABLE_s *pVideoTable;
 752   1        WORD hDelay,hActive, vDelay, vActive;
 753   1        BYTE VideoInputMain= InputMain;
 754   1        BYTE VideoInputSub = InputSubMode;
 755   1        BYTE vFreq;
 756   1        struct DIGIT_VIDEO_TIME_TABLE_s *p = NULL;
 757   1        struct BT656ENC_TIME_TABLE_s *pBt656Scaler;
 758   1        BYTE idx_dec;
 759   1      
 760   1        Printf("\nBT656Enc_Setup_Dec VideoInputMain:%bd VideoInputSub:%bd",VideoInputMain,VideoInputSub);
 761   1      
 762   1        //BT656Enc Input Crop for Decoder Input.
 763   1        //Decoder input uses an overscan value, but, BT656Enc needs a normal crop value.
 764   1        pVideoTable = &TW8836_DEC_TABLE[VideoInputSub];
 765   1        PrintCbvsVideoTimeTable(pVideoTable);
 766   1      
 767   1        hDelay =  pVideoTable->hDelay + pVideoTable->hOverScan;
 768   1        hActive = pVideoTable->hActive;
 769   1        vDelay  = pVideoTable->vDelay; 
 770   1        vActive = pVideoTable->vActive;
 771   1        vFreq   = pVideoTable->vFreq;
 772   1      
 773   1        DecoderSetOutputCrop(hDelay, hActive, vDelay, vActive);
 774   1      #ifdef DEBUG_BT656
                PrintDecoderOutputCrop("BT656Enc", hDelay, hActive, vDelay, vActive);
              #endif
 777   1        p = Find_CEA861_VideoTable(hActive*2,vActive,vFreq);
 778   1        if(p == NULL) {
 779   2          Printf("\nFail Find_CEA861_VideoTable %dx%d@%bd",hActive*2,vActive,vFreq);
 780   2          return NULL;
 781   2        }
 782   1        //Read Scale option. Bit0 is for 2DDI option.
 783   1        fScale = EE_Read(EEP_BT656ENC_DEC);
 784   1        idx_dec=FindBT656ScalerTable(BT656SCALE_DEC_OPTION_table,hActive,vActive,vFreq,fScale);
 785   1        if(idx_dec==0xFF) {
 786   2          Puts("\nFail FindBT656ScalerTable");
 787   2          return NULL;
 788   2        } 
 789   1        pBt656Scaler = &BT656SCALER_time[idx_dec];
 790   1        G_pBt656Scaler = pBt656Scaler;
 791   1        if(fScale & 0x01) {
 792   2          //2D-DI
 793   2          BT656Enc_En2DDI(ON);  //en 2d-di
 794   2          BT656Enc_2DDI_FieldOffset(0,1); //even offset needs "1".
 795   2          BT656_A_Output(BT656_A_OUT_DEC_DI,0,0);
 796   2        }
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 14  

 797   1        else {
 798   2          BT656_A_Output(BT656_A_OUT_DEC_I,0,0);
 799   2        }
 800   1        OverWriteBt656ScalerTable(pBt656Scaler, 0); //step0.
 801   1      
 802   1        //
 803   1        //Your output can be scaled down.
 804   1        //Find VideoTable again
 805   1        //
 806   1        vActive = BT656Enc_Calc_vActive(vActive, pBt656Scaler->i_vScale);
 807   1        p = Find_CEA861_VideoTable(hActive*2,vActive,vFreq);
 808   1        if(p)
 809   1          PrintCEAVideoTimeTable(p);
 810   1      
 811   1        //update BT656 External Encoder
 812   1        BT656Enc_Update_BT656ExternalEncoder(hActive,vActive);
 813   1      
 814   1        return p; 
 815   1      }
 816          
 817          #endif
 818          
 819          /**
 820           * Component option
 821           * Use EEPROM[0x22]
 822           */
 823          
 824          #define BT656SCALER_IDX_COMP_1080I50 0xFF
 825          #define BT656SCALER_IDX_COMP_1080I60 0xFF
 826          #define BT656SCALER_IDX_COMP_720P50_480P 0xFF
 827          #define BT656SCALER_IDX_COMP_720P60_480P 0xFF
 828          
 829          #if defined(SUPPORT_ARGB)
 830          struct BT656SCALE_OPTION_s BT656SCALE_COMP_OPTION_table[] = {
 831            {720,240,60,  BT656SCALER_IDX_COMP_480I,      BT656SCALER_IDX_COMP_480P, 0xFF},
 832            {720,288,50,  BT656SCALER_IDX_COMP_576I,      BT656SCALER_IDX_COMP_576P, 0xFF},
 833            {720,480,60,  BT656SCALER_IDX_COMP_480P,      0xFF,0xFF},
 834            {720,576,50,  BT656SCALER_IDX_COMP_576P,      0xFF,0xFF},
 835            {1080,540,50, BT656SCALER_IDX_COMP_1080I50_QHD, BT656SCALER_IDX_COMP_1080I50, 0xFF},
 836            {1080,540,60, BT656SCALER_IDX_COMP_1080I60_QHD, BT656SCALER_IDX_COMP_1080I60, 0xFF},
 837            {1280,720,50, BT656SCALER_IDX_COMP_720P50,    BT656SCALER_IDX_COMP_720P50_480P, 0xFF},
 838            {1280,720,60, BT656SCALER_IDX_COMP_720P60,    BT656SCALER_IDX_COMP_720P60_480P, 0xFF},
 839            {1920,1080,50,  BT656SCALER_IDX_COMP_1080P50_QHD, 0xFF, 0xFF},
 840            {1920,1080,60,  BT656SCALER_IDX_COMP_1080P60_QHD, 0xFF, 0xFF},
 841            {0,}
 842          };
 843          #endif
 844          /**
 845           * Setup Component Input
 846           *  
 847           * Input
 848           *  VideoInputSub
 849           * Output
 850           *  G_pBt656Scaler
 851           */
 852          
 853          #if defined(SUPPORT_BT656)
 854          #if defined(SUPPORT_ARGB)
 855          struct DIGIT_VIDEO_TIME_TABLE_s * BT656Enc_Setup_aRGB_COMP(void)
 856          {
 857   1        BYTE fScale;
 858   1        BYTE VideoInputSub = InputSubMode;
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 15  

 859   1        struct DIGIT_VIDEO_TIME_TABLE_s *p = NULL;
 860   1        struct COMP_VIDEO_TIME_TABLE_s *pVideoTable;
 861   1        struct BT656ENC_TIME_TABLE_s *pBt656Scaler;
 862   1        WORD hDelay,hActive, vDelay, vActive;
 863   1        BYTE vFreq;
 864   1        BYTE idx_comp;
 865   1      
 866   1        fScale = EE_Read(EEP_BT656ENC_ARGB_COMP);
 867   1      
 868   1        //BUG. InputSubMode is a HW value. I need a SW value; nput_aRGBMode 
 869   1        VideoInputSub = Input_aRGBMode;
 870   1      
 871   1        //adjust
 872   1        pVideoTable = &TW8836_COMP_TABLE[VideoInputSub];
 873   1        PrintCompVideoTimeTable(pVideoTable);
 874   1        hActive = pVideoTable->hActive;
 875   1        vActive = pVideoTable->vActive;
 876   1        vFreq   = pVideoTable->vFreq;
 877   1      
 878   1        hDelay  = pVideoTable->hBPorch + pVideoTable->hSync;
 879   1        vDelay  = pVideoTable->vBPorch-1;  // + pVideoTable->vSync;
 880   1        PrintMeasAdjValue("BT656Enc", hDelay,vDelay);
 881   1      
 882   1        p = Find_CEA861_VideoTable(hActive,vActive,vFreq);
 883   1        if(p==NULL) {
 884   2          Printf("\nFail Find_CEA861_VideoTable %dx%d@%bd",hActive,vActive,vFreq);
 885   2          return NULL;
 886   2        }
 887   1        idx_comp = FindBT656ScalerTable(BT656SCALE_COMP_OPTION_table,hActive,vActive,vFreq,fScale);
 888   1        if(idx_comp==0xFF) {
 889   2          Puts("\nFail FindBT656ScalerTable");
 890   2          return NULL;
 891   2        }
 892   1        pBt656Scaler = &BT656SCALER_time[idx_comp];
 893   1        G_pBt656Scaler = pBt656Scaler;
 894   1        BT656_A_Output(BT656_A_OUT_DEC_ADC, 0,0);
 895   1        OverWriteBt656ScalerTable(pBt656Scaler, 0); //step0.
 896   1      
 897   1        //
 898   1        //Your output can be scaled down.
 899   1        //Find VideoTable again
 900   1        //
 901   1        hActive = BT656Enc_Calc_hActive(hActive, pBt656Scaler->i_hScale);
 902   1        vActive = BT656Enc_Calc_vActive(vActive, pBt656Scaler->i_vScale);
 903   1         
 904   1        p = Find_CEA861_VideoTable(hActive,vActive,vFreq);
 905   1        if(p)
 906   1          PrintCEAVideoTimeTable(p);
 907   1      
 908   1        //update BT656 External Encoder
 909   1        BT656Enc_Update_BT656ExternalEncoder(hActive,vActive);
 910   1      
 911   1        return p;
 912   1      }
 913          #endif
 914          #endif
 915          
 916          #if defined(SUPPORT_ARGB)
 917          struct BT656SCALE_OPTION_s BT656SCALE_PC_OPTION_table[] = {
 918          
 919            {640,480,60,  BT656SCALER_IDX_PC_0660,      0xFF, 0xFF},
 920            {800,600,60,  BT656SCALER_IDX_PC_0860,      0xFF, 0xFF},
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 16  

 921            {1024,768,60, BT656SCALER_IDX_PC_1060,      0xFF,0xFF},
 922            {1280,960,50, BT656SCALER_IDX_PC_126A_1024X640, 0xFF,0xFF},
 923            {0,}
 924          };
 925          #endif
 926          
 927          #if defined(SUPPORT_BT656)
 928          #if defined(SUPPORT_ARGB)
 929          struct DIGIT_VIDEO_TIME_TABLE_s *  BT656Enc_Setup_aRGB_PC(void)
 930          {
 931   1        WORD hDelay,hActive, vDelay, vActive;
 932   1        BYTE VideoInputSub = InputSubMode;
 933   1        BYTE vFreq;
 934   1        struct DIGIT_VIDEO_TIME_TABLE_s *p = NULL;
 935   1        BYTE fScale;
 936   1        BYTE idx_pc;
 937   1      
 938   1        struct DIGIT_VIDEO_TIME_TABLE_s *pVideoTable;
 939   1        struct BT656ENC_TIME_TABLE_s *pBt656Scaler;
 940   1      
 941   1      
 942   1        fScale = EE_Read(EEP_BT656ENC_ARGB_PC);
 943   1      
 944   1        pVideoTable = &TW8836_VESA_TABLE[VideoInputSub];
 945   1        PrintVesaVideoTimeTable(pVideoTable);
 946   1      
 947   1        hActive = pVideoTable->hActive;
 948   1        vActive = pVideoTable->vActive;
 949   1        vFreq   = pVideoTable->vFreq;
 950   1      
 951   1        hDelay  = pVideoTable->hBPorch + pVideoTable->hSync;
 952   1        vDelay  = pVideoTable->vBPorch+1+ pVideoTable->vSync;
 953   1        PrintMeasAdjValue("BT656Enc", hDelay,vDelay);
 954   1      
 955   1        p = Find_CEA861_VideoTable(hActive,vActive,vFreq);
 956   1        if(p==NULL) {
 957   2          Printf("\nFail Find_CEA861_VideoTable %dx%d@%bd",hActive,vActive,vFreq);
 958   2          return NULL;
 959   2        }
 960   1        idx_pc = FindBT656ScalerTable(BT656SCALE_PC_OPTION_table,hActive,vActive,vFreq,fScale);
 961   1        if(idx_pc==0xFF) {
 962   2          Puts("\nFail FindBT656ScalerTable");
 963   2          return NULL;
 964   2        }
 965   1        pBt656Scaler = &BT656SCALER_time[idx_pc];
 966   1        G_pBt656Scaler = pBt656Scaler;
 967   1        BT656Enc_D_SetRGB(ON);
 968   1        BT656_A_Output(BT656_A_OUT_DEC_ADC, 0,0);
 969   1        OverWriteBt656ScalerTable(pBt656Scaler,0); //step0.
 970   1      
 971   1        return p;
 972   1      }
 973          #endif
 974          #endif
 975          
 976          
 977          #if defined(SUPPORT_BT656)
 978          
 979          #define BT656SCALER_IDX_DTV_1080I50 0xFF
 980          #define BT656SCALER_IDX_DTV_1080I60 0xFF
 981          #define BT656SCALER_IDX_DTV_720P50_480P 0xFF
 982          
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 17  

 983          struct BT656SCALE_OPTION_s BT656SCALE_DTV_OPTION_table[] = {
 984          
 985            {720,240,60,  BT656SCALER_IDX_DTV_480I,     BT656SCALER_IDX_DTV_480P, 0xFF},
 986            {720,288,50,  BT656SCALER_IDX_DTV_576I,     BT656SCALER_IDX_DTV_576P, 0xFF},
 987            {640,480,60,  BT656SCALER_IDX_DTV_0660,     0xFF,0xFF},
 988            {720,480,60,  BT656SCALER_IDX_DTV_480P,     BT656SCALER_IDX_DTV_480P,0xFF},
 989            {720,576,50,  BT656SCALER_IDX_DTV_576P,     BT656SCALER_IDX_DTV_576P,0xFF},
 990            {1920,540,50, BT656SCALER_IDX_DTV_1080I50_QHD,  BT656SCALER_IDX_DTV_1080I50, 0xFF},
 991            {1920,540,60, BT656SCALER_IDX_DTV_1080I60_QHD,  BT656SCALER_IDX_DTV_1080I60, 0xFF},
 992            {800,600,60,  BT656SCALER_IDX_DTV_0860,     0xFF, 0xFF},
 993            {1280,720,50, BT656SCALER_IDX_DTV_720P50,     BT656SCALER_IDX_DTV_720P50_480P, 0xFF},
 994            {1280,720,60, BT656SCALER_IDX_DTV_720P60,     BT656SCALER_IDX_DTV_720P60_480P, 0xFF},
 995            {1024,768,60, BT656SCALER_IDX_DTV_1060,     0xFF, 0xFF},
 996            {1280,960,60, BT656SCALER_IDX_DTV_126A_1024X640,  0xFF, 0xFF},
 997            {1920,1080,50,  BT656SCALER_IDX_DTV_1080P50_QHD,  0xFF, 0xFF},
 998            {1920,1080,60,  BT656SCALER_IDX_DTV_1080P60_QHD,  0xFF, 0xFF},
 999            {0,}
1000          };
1001          #endif
1002          
1003          
1004          #if defined(SUPPORT_BT656)
1005          struct DIGIT_VIDEO_TIME_TABLE_s *  BT656Enc_Setup_DTV(void)
1006          {
1007   1        WORD hDelay,hActive, vDelay, vActive;
1008   1        BYTE vFreq;
1009   1        struct DIGIT_VIDEO_TIME_TABLE_s *p = NULL;
1010   1        BYTE fScale;
1011   1        BYTE idx_dtv;
1012   1        struct BT656ENC_TIME_TABLE_s *pBt656Scaler;
1013   1      
1014   1        fScale = EE_Read(EEP_BT656ENC_DTV_TV);
1015   1      
1016   1        //digital
1017   1      
1018   1        //
1019   1        //Measure input signal
1020   1        //
1021   1        Meas_StartMeasure();
1022   1        Meas_IsMeasureDone(50);
1023   1        hActive = MeasGetHActive( &hDelay );
1024   1        vActive = MeasGetVActive( &vDelay );
1025   1        vFreq = MeasGetVFreq();
1026   1        Printf("\n\rBT656Enc Meas %d hCropStart:%d+4",hActive, hDelay);
1027   1        Printf("\n\r              %d vCropStart:%d-1",vActive, vDelay);
1028   1      
1029   1        //
1030   1        //Find video timing table
1031   1        //& use the table value. 
1032   1        p = Find_CEA861_VideoTable(hActive,vActive,vFreq);
1033   1        if(p==NULL) {
1034   2          Printf("\nFail Find_CEA861_VideoTable %dx%d@%bd",hActive,vActive,vFreq);
1035   2          //..
1036   2          //..please giveup....
1037   2          return NULL;
1038   2        }
1039   1        PrintCEAVideoTimeTable(p);
1040   1        //
1041   1        //update value
1042   1        hActive = p->hActive;
1043   1        vActive = p->vActive;
1044   1        hDelay = p->hSync + p->hBPorch;
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 18  

1045   1        vDelay = p->vSync + p->vBPorch;
1046   1        idx_dtv=FindBT656ScalerTable(BT656SCALE_DTV_OPTION_table,hActive,vActive,vFreq,fScale);
1047   1        if(idx_dtv==0xFF) {
1048   2          Puts("\nFail FindBT656ScalerTable");
1049   2          //now, we are failed,  just setup some default...
1050   2          //..
1051   2          //..please giveup....
1052   2          return NULL;
1053   2        } 
1054   1        pBt656Scaler = &BT656SCALER_time[idx_dtv];
1055   1        G_pBt656Scaler = pBt656Scaler;
1056   1        BT656Enc_D_SetRGB(ON);
1057   1        BT656_A_Output(BT656_A_OUT_DEC_ADC, 0,0);
1058   1        OverWriteBt656ScalerTable(pBt656Scaler, 0); //step0.
1059   1      
1060   1        //
1061   1        //Your output can be scaled down.
1062   1        //Find VideoTable again
1063   1        //
1064   1        hActive = BT656Enc_Calc_hActive(hActive, pBt656Scaler->i_hScale);
1065   1        vActive = BT656Enc_Calc_vActive(vActive, pBt656Scaler->i_vScale);
1066   1      
1067   1        p = Find_CEA861_VideoTable(hActive,vActive,vFreq);
1068   1        if(p)
1069   1          PrintCEAVideoTimeTable(p);
1070   1      
1071   1        //update BT656 External Encoder
1072   1        BT656Enc_Update_BT656ExternalEncoder(hActive,vActive);
1073   1      
1074   1        return p;
1075   1      }
1076          #endif
1077          
1078          struct DIGIT_VIDEO_TIME_TABLE_s * BT656Enc_Setup_PANEL(void)
1079          {
1080   1        struct DIGIT_VIDEO_TIME_TABLE_s *p = NULL;
1081   1      
1082   1        BT656Enc_D_SetRGB(ON);
1083   1        BT656Enc_Crop(54, 24, PANEL_H, PANEL_V);
1084   1      
1085   1        if(PANEL_H==1280 && PANEL_V==800) {
1086   2          BT656Enc_SetScaler(0x0AAA,2);
1087   2          BT656Enc_SetOutputActiveLen(40,1678); //??
1088   2          BT656Enc_GenLock(8, GENLOCK_X4); //PreDiv:8,x4
1089   2      
1090   2          p = Find_CEA861_VideoTable(800,400,60);
1091   2        }
1092   1        else if(PANEL_H==1024 && PANEL_V==600) {
1093   2          BT656Enc_SetScaler(0x0AAA,9);
1094   2          BT656Enc_SetOutputActiveLen(40,1678); //??
1095   2          BT656Enc_GenLock(8, GENLOCK_X4); //PreDiv:8,x4
1096   2          p = Find_CEA861_VideoTable(800,400,60);
1097   2        }
1098   1        else { /* assume 800x480 */
1099   2          BT656Enc_SetScaler(0x0AAA,9);
1100   2          BT656Enc_SetOutputActiveLen(40,1678); //??
1101   2          BT656Enc_GenLock(8, GENLOCK_X4); //PreDiv:8,x4
1102   2          p = Find_CEA861_VideoTable(800,480,60);
1103   2        }
1104   1      
1105   1        return p;
1106   1      }
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 19  

1107          
1108          
1109          
1110          /**
1111          * set BT656Encoder
1112          * extern InputMain, InputSubMode
1113          */
1114          #if defined(SUPPORT_BT656)
1115          
1116          struct DIGIT_VIDEO_TIME_TABLE_s *BT656Enc_Setup(BYTE BT656EncSource)
1117          {
1118   1        BYTE VideoInputMain= InputMain;
1119   1        BYTE VideoInputSub = InputSubMode;
1120   1        struct DIGIT_VIDEO_TIME_TABLE_s *p = NULL;
1121   1      
1122   1        if(BT656EncSource > BT656ENC_SRC_PANEL) {
1123   2          BT656Enc_Enable(OFF);
1124   2          return NULL;
1125   2        }
1126   1        G_pBt656Scaler = NULL;
1127   1      
1128   1        //set default....temp
1129   1        BT656Enc_Setup_Init(BT656EncSource);
1130   1      
1131   1        p = NULL;
1132   1        if(BT656EncSource==BT656ENC_SRC_DEC)  
1133   1          p = BT656Enc_Setup_Dec();
1134   1      #if defined(SUPPORT_ARGB)
1135   1        else if(BT656EncSource==BT656ENC_SRC_ARGB) {
1136   2          if(VideoInputMain==INPUT_COMP)  
1137   2            p = BT656Enc_Setup_aRGB_COMP();
1138   2          else              
1139   2            p = BT656Enc_Setup_aRGB_PC();
1140   2        }
1141   1      #endif
1142   1        else if(BT656EncSource==BT656ENC_SRC_DTV)
1143   1          BT656Enc_Setup_DTV(); //Note:Do not update p.
1144   1        else if(BT656EncSource==BT656ENC_SRC_LVDS)
1145   1          p = BT656Enc_Setup_DTV();
1146   1        else
1147   1          BT656Enc_Setup_PANEL(); //Note:Do not update p.
1148   1      
1149   1      
1150   1        //P is for loopback...
1151   1        return p;
1152   1      }
1153          #endif
1154          
1155          
1156          /**
1157          * set BT656Decoder for loopback
1158          */
1159          
1160          #if 0
                //now valid inputs are BT656ENC_SRC_DEC,BT656ENC_SRC_ARGB,BT656ENC_SRC_LVDS
              void MeasureAndSetBt656Dec(BYTE BT656EncSource)
              {
              //  BYTE dtv_route, dtv_format;
                WORD hCropStart,vCropStart;
                WORD hActive,vActive;
              //  WORD hDelay,vDelay;
                BYTE vFreq;
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 20  

              
              
                WORD wTemp;
              //  BYTE input_format;
                BYTE VideoInputMain= InputMain;
                BYTE VideoInputSub = InputSubMode;
                struct DIGIT_VIDEO_TIME_TABLE_s *p;
              //  BYTE fScale;
                //struct BT656ENC_TIME_TABLE_s *pBT;
                struct BT656ENC_TIME_TABLE_s *pBt656Scaler=G_pBt656Scaler;
                
              
                //read measure with DE.
                MeasEnableDeMeasure(ON);
                Meas_StartMeasure();
                if(Meas_IsMeasureDone(50)) {
                  Printf("\n\rMeasure Failed....");
                  return;
                }
                delay1ms(500);
                Meas_StartMeasure();
                Meas_IsMeasureDone(50);
              
                hActive = MeasGetHActive( &hCropStart );
                vActive = MeasGetVActive( &vCropStart );
                vFreq = MeasGetVFreq();
                Printf("\n\rBT656Dec Meas %d hCropStart:%d+4",hActive, hCropStart);
                Printf("\n\r              %d vCropStart:%d-1",vActive, vCropStart);
                p = Find_CEA861_VideoTable(hActive,vActive,vFreq);
                if(p==NULL) {
                  Printf("\nNo CEA861 Video Table");
                }
                //now, i assume we have a valid p.
              
                //setup scaler
                if(BT656EncSource==BT656ENC_SRC_DEC) {
                  //----------------------------
                  //decoder uses measured value.
                  //----------------------------
                  if(vActive==288) {
                    //unstable ???. Read assgined value.
                    vCropStart = ReadTW88(REG108);
                    Printf("=>%d+1",vCropStart);  
                  }
                  //Printf("\n\rBT656Dec Crop %d hCropStart:%d",hActive, hCropStart+4);
                  //Printf("\n\r              %d vCropStart:%d",vActive+1, vCropStart-1+2);
              
                  InputSetCrop(hCropStart+4, vCropStart-1+2, hActive, vActive+1);
              #ifdef DEBUG_BT656
                  PrintScalerInputCrop("BT656Dec",hCropStart+4, vCropStart-1+2, hActive, vActive+1);
              #endif
                  ScalerSetHScale(hActive / 2);
                  ScalerSetVScale(vActive);
                  ScalerSetLineBufferSize(hActive / 2);
                  wTemp = ScalerCalcVDE2(vCropStart-1+2,-1);
                  ScalerWriteVDEReg((BYTE)wTemp);
                  //BK131011
                  //or use 
                  //ScalerSet_vDE_value(vCropStart-1+2);
                }
                else
                if(BT656EncSource==BT656ENC_SRC_ARGB && VideoInputMain==INPUT_COMP) {
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 21  

                  //----------------------------
                  //component uses measured value.
                  //----------------------------
              
                  //hCropStart += 4;
                  //vCropStart += 1; //(-1+2)
              
                  //Printf("\n\rBT656Dec ICrop %d*2+1 hCropStart:%d+4",p->hActive, hCropStart);
                  //Printf("\n\r               %d+1 vCropStart:%d+1",p->vActive, vCropStart);
              
                  InputSetCrop(
                    hCropStart + 4, //hSync+hBPorch
                    vCropStart + 1, //vSync+vBPorch +2
                    p->hActive *2 +1,
                    p->vActive +1);
              #ifdef DEBUG_BT656
                  PrintScalerInputCrop("BT656Dec",hCropStart + 4, vCropStart + 1, p->hActive *2 +1,p->vActive +1); 
              #endif
                  ScalerSetHScale(p->hActive); 
                  ScalerSetVScale(p->vActive); 
                  ScalerSetLineBufferSize(p->hActive); 
                  ScalerSet_vDE_value(vCropStart);
                }
                else
                if(BT656EncSource==BT656ENC_SRC_ARGB && VideoInputMain==INPUT_PC) {
                  //----------------------------
                  //PC uses measured value.
                  //----------------------------
                  struct DIGIT_VIDEO_TIME_TABLE_s *pVideoTable;
                  pVideoTable = &TW8836_VESA_TABLE[VideoInputSub];
                  vCropStart = pVideoTable->vSync+pVideoTable->vBPorch  + 1;
              
                  //Printf("\n\rBT656Dec Crop %d hCropStart:%d",hActive, hCropStart+4);
                  //Printf("\n\r              %d vCropStart:%d",vActive+1, vCropStart-1+2);
              
                  //Input_aRGBMode 
                  InputSetCrop(
                    hCropStart + 4*2+10,      //aRGB_delay(4)*2 + BT656_delay(10) 
                    vCropStart - 14,
                    pVideoTable->hActive*2+1, 
                    pVideoTable->vActive+2);
              #ifdef DEBUG_BT656
                  PrintScalerInputCrop("BT656Dec",hCropStart + 4*2+10,vCropStart - 14,pVideoTable->hActive*2+1,pVideoTable
             -->vActive+2);
              #endif
              
                  ScalerSetHScale(pVideoTable->hActive);
                  ScalerSetVScale(pVideoTable->vActive);
                  ScalerSetLineBufferSize(pVideoTable->hActive+6);
              #if 0 //BK131011
                  wTemp = (vCropStart-14) * PANEL_V / pVideoTable->vActive + 2;
                  ScalerWriteVDEReg(wTemp);
              #else
                  ScalerSet_vDE_value(vCropStart -14);
              #endif
                }
                else //assume (BT656EncSource==BT656ENC_SRC_LVDS) 
                {   
                  //Printf("\n\rBT656Dec Crop %d hCropStart:%d",p->hActive * 2, hCropStart+4);
                  //Printf("\n\r              %d vCropStart:%d",p->vActive, vCropStart-1+2);
                  //----------------------------
                  //LVDS(digital) can use a video table.
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 22  

                  //----------------------------
                  InputSetCrop(
                    hCropStart + 4, 
                    vCropStart + 1,
                    p->hActive * 2,
                    p->vActive);
              #ifdef DEBUG_BT656
                  PrintScalerInputCrop("BT656Dec", hCropStart + 4,vCropStart + 1, p->hActive * 2, p->vActive);
              #endif
                  ScalerSetHScale(p->hActive); 
                  ScalerSetVScale(p->vActive); 
                  ScalerSetLineBufferSize(p->hActive); 
                  ScalerSet_vDE_value(vCropStart);
                }
              }
              #endif
1308          
1309          #if defined(SUPPORT_BT656)
1310          BYTE BT656Dec_LoopBack(BYTE BT656EncSource, struct DIGIT_VIDEO_TIME_TABLE_s *_p)
1311          {
1312   1        BYTE dtv_route, dtv_format;
1313   1        BYTE input_format;
1314   1        BYTE VideoInputMain= InputMain;
1315   1        BYTE VideoInputSub = InputSubMode;
1316   1        struct DIGIT_VIDEO_TIME_TABLE_s *p=_p;
1317   1        struct BT656ENC_TIME_TABLE_s *pBt656Scaler=G_pBt656Scaler;
1318   1      
1319   1      //-------------
1320   1      // add
1321   1      //      bTemp = DtvFindFieldWindow(pCEA861->hTotal / 2);
1322   1      //      DtvSetFieldDetectionRegion(ON, bTemp);
1323   1      //-------------
1324   1      
1325   1        //if PANEL or DTV, we can not make a loop.
1326   1        if(BT656EncSource >= BT656ENC_SRC_PANEL)
1327   1          return 1;
1328   1        if(BT656EncSource == BT656ENC_SRC_DTV)
1329   1          return 1;
1330   1      
1331   1        if(pBt656Scaler->pol & POL_INTERLACED)
1332   1          dtv_format = DTV_FORMAT_INTERLACED_ITU656;
1333   1        else     
1334   1          dtv_format = DTV_FORMAT_PROGRESSIVE_ITU656;
1335   1        input_format = INPUT_FORMAT_YCBCR;
1336   1        dtv_route = DTV_ROUTE_PbYPr;
1337   1        DtvSetRouteFormat(dtv_route, dtv_format);
1338   1        DtvSetReverseBusOrder(ON);
1339   1      
1340   1        Bt656DecSetClkPol(pBt656Scaler->pol & POL_DTVCLK);
1341   1      
1342   1      
1343   1        //turn off Video Signal Interrupt.
1344   1        //I will trun on later.
1345   1        Interrupt_enableVideoDetect(OFF);
1346   1      
1347   1        //change input to DTV for BT656Dec.
1348   1        //and use DTVCLK2.
1349   1        InputSetSource(INPUT_PATH_DTV,input_format);
1350   1        WriteTW88(REG040,ReadTW88(REG040) | 0x04);
1351   1      
1352   1        OverWriteBt656ScalerTable(pBt656Scaler, 2); //step2.
1353   1      #if 0 
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 23  

                //measure & setup scaler
                MeasureAndSetBt656Dec(BT656EncSource);
              #endif
1357   1        //turn on Video Signal Interrupt
1358   1        Interrupt_enableVideoDetect(ON);      
1359   1        //skip Interrupt_enableSyncDetect(ON);
1360   1      
1361   1        return 0;
1362   1      }
1363          #endif
1364          
1365          /*
1366          * Change InputMain & BT656 Mux.
1367          * usage: iBT656 {LOOP|PANEL|DEC|ARGB|DTV|LVDS|OFF}
1368          * It will call SetBT656Output() at the end of this procedure.
1369          *
1370          * @param mode
1371          * BT656ENC_SRC_PANEL  
1372          * BT656ENC_SRC_DEC  
1373          * BT656ENC_SRC_ARGB 
1374          * BT656ENC_SRC_DTV  
1375          * BT656ENC_SRC_LVDS 
1376          * BT656ENC_SRC_OFF  
1377          * BT656ENC_SRC_AUTO 
1378          */
1379          void ChangeBT656__MAIN(BYTE mode)
1380          {
1381   1        BYTE bt656_src_mode;
1382   1        BYTE ret;
1383   1        struct DIGIT_VIDEO_TIME_TABLE_s *p;
1384   1      
1385   1        Printf("\n\rChangeBT656__MAIN(%bd)",mode);
1386   1        bt656_src_mode = BT656_CheckLoopbackCombination(mode);
1387   1        if(bt656_src_mode == 0xFF) {
1388   2          //maybe OFF, or something wrong.
1389   2          return;
1390   2        }
1391   1        //setup BT656Enc
1392   1      #if defined(SUPPORT_BT656)
1393   1        p = BT656Enc_Setup(bt656_src_mode);
1394   1        if(p == NULL)
1395   1          return;
1396   1      #endif
1397   1        //setup BT656Dec to support LOOPBACK mode.
1398   1      #if defined(SUPPORT_BT656)
1399   1        ret = BT656Dec_LoopBack(bt656_src_mode,p);
1400   1      #endif
1401   1      }
1402          
1403          BYTE BT656Enc_Info(void)
1404          {
1405   1        BYTE bTemp;
1406   1      
1407   1        bTemp = ReadTW88(REG007);
1408   1        Printf("\n\rBT656 %s", bTemp & 0x08 ? "On" : "Off");
1409   1        if(bTemp & 0x08 ==0)
1410   1          return 1;
1411   1      
1412   1        bTemp = ReadTW88(REG067) & 0x07;
1413   1        switch(bTemp) {
1414   2        case 0:
1415   2          Printf("\n\rDecoder");
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 24  

1416   2          break;
1417   2        case 1:
1418   2          Printf("\n\raRGB");
1419   2          break;
1420   2        case 2:
1421   2          Printf("\n\rDTV");
1422   2          break;
1423   2        case 3:
1424   2          Printf("\n\rLVDS-Rx");
1425   2          break;
1426   2        case 4:
1427   2          Printf("\n\rPanel");
1428   2          break;
1429   2        default:
1430   2          Printf("\n\runknown:%bx",bTemp);
1431   2          //add some dummy code.
1432   2          ScalerReadHDEReg();
1433   2          ScalerReadLineBufferDelay();
1434   2          BT656_A_SelectCLKO(1,OFF);
1435   2          BT656_A_SetLLCLK_Pol(OFF);
1436   2          BT656Enc_En2DDI(ON);
1437   2      //    BT656_A_DeInterlace_Set(29, 97);
1438   2          BT656_A_SelectOutput(1, 0/*HPol*/, 0/*VPol*/, 0);
1439   2          InputGetHLen();
1440   2          InputGetVLen();
1441   2      
1442   2          return 2;
1443   2        }
1444   1        return 0;   
1445   1      }
1446          
*** WARNING C294 IN LINE 1086 OF Source36\BT656.c: unreachable code
*** WARNING C294 IN LINE 1093 OF Source36\BT656.c: unreachable code
*** WARNING C294 IN LINE 1410 OF Source36\BT656.c: unreachable code
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 25  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com00B3 (BEGIN)
0000         L?0180:
0000         L?0181:
0000 759300      E     MOV     DPX,#?C?XDATASEG
0003 E500        E     MOV     A,regTW88+01H
0005 2467              ADD     A,#067H
0007         L?0182:
0007 F582              MOV     DPL,A
0009 E4                CLR     A
000A 3500        E     ADDC    A,regTW88
000C F583              MOV     DPH,A
000E 759300      E     MOV     DPX,#?C?XDATASEG
0011 22                RET     
0012         L?0183:
0012 75F023            MOV     B,#023H
0015 A4                MUL     AB
0016 2400        E     ADD     A,#LOW BT656SCALER_time
0018 F9                MOV     R1,A
0019 7400        E     MOV     A,#HIGH BT656SCALER_time
001B 35F0              ADDC    A,B
001D FA                MOV     R2,A
001E 7B00        E     MOV     R3,#MBYTE BT656SCALER_time
0020         L?0184:
0020 EB                MOV     A,R3
0021 F0                MOVX    @DPTR,A
0022 A3                INC     DPTR
0023 EA                MOV     A,R2
0024 F0                MOVX    @DPTR,A
0025 A3                INC     DPTR
0026 E9                MOV     A,R1
0027 F0                MOVX    @DPTR,A
0028 90000000    E     MOV     DPTR,#G_pBt656Scaler
002C         L?0185:
002C EB                MOV     A,R3
002D         L?0186:
002D F0                MOVX    @DPTR,A
002E A3                INC     DPTR
002F EA                MOV     A,R2
0030 F0                MOVX    @DPTR,A
0031 A3                INC     DPTR
0032 E9                MOV     A,R1
0033 F0                MOVX    @DPTR,A
0034 22                RET     
0035         L?0187:
0035 E0                MOVX    A,@DPTR
0036 FE                MOV     R6,A
0037 A3                INC     DPTR
0038 E0                MOVX    A,@DPTR
0039 FF                MOV     R7,A
003A         L?0188:
003A 90000000    R     MOV     DPTR,#pBt656Scaler
003E         L?0189:
003E E0                MOVX    A,@DPTR
003F FB                MOV     R3,A
0040 A3                INC     DPTR
0041 E0                MOVX    A,@DPTR
0042 FA                MOV     R2,A
0043 A3                INC     DPTR
0044 E0                MOVX    A,@DPTR
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 26  

0045 22                RET     
0046         L?0190:
0046 4E                ORL     A,R6
0047 FF                MOV     R7,A
0048         L?0191:
0048 759300      E     MOV     DPX,#?C?XDATASEG
004B E500        E     MOV     A,regTW88+01H
004D 24E9              ADD     A,#0E9H
004F         L?0192:
004F F582              MOV     DPL,A
0051 E500        E     MOV     A,regTW88
0053 3401              ADDC    A,#01H
0055 F583              MOV     DPH,A
0057 759300      E     MOV     DPX,#?C?XDATASEG
005A 22                RET     
005B         L?0193:
005B 90000000    R     MOV     DPTR,#dTemp
005F E0                MOVX    A,@DPTR
0060 FC                MOV     R4,A
0061 A3                INC     DPTR
0062 E0                MOVX    A,@DPTR
0063 FD                MOV     R5,A
0064 A3                INC     DPTR
0065 E0                MOVX    A,@DPTR
0066 FE                MOV     R6,A
0067 A3                INC     DPTR
0068 E0                MOVX    A,@DPTR
0069 FF                MOV     R7,A
006A 110000      E     ACALL   ?C?LSHL
006D 90000000    R     MOV     DPTR,#dTemp
0071 110000      E     ACALL   ?C?LSTXDATA
0074         L?0194:
0074 90000000    R     MOV     DPTR,#dTemp
0078         L?0195:
0078 E0                MOVX    A,@DPTR
0079 FC                MOV     R4,A
007A A3                INC     DPTR
007B E0                MOVX    A,@DPTR
007C FD                MOV     R5,A
007D         L?0196:
007D A3                INC     DPTR
007E E0                MOVX    A,@DPTR
007F FE                MOV     R6,A
0080 A3                INC     DPTR
0081 E0                MOVX    A,@DPTR
0082 FF                MOV     R7,A
0083 22                RET     
0084         L?0197:
0084         L?0198:
0084 A3                INC     DPTR
0085 E0                MOVX    A,@DPTR
0086 FA                MOV     R2,A
0087 A3                INC     DPTR
0088 E0                MOVX    A,@DPTR
0089         L?0199:
0089 2405              ADD     A,#05H
008B         L?0200:
008B F9                MOV     R1,A
008C E4                CLR     A
008D 3A                ADDC    A,R2
008E FA                MOV     R2,A
008F 010000      E     AJMP    ?C?CLDPTR
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 27  

0092         L?0201:
0092 FF                MOV     R7,A
0093 AEF0              MOV     R6,B
0095         L?0202:
0095 A3                INC     DPTR
0096 E0                MOVX    A,@DPTR
0097 FA                MOV     R2,A
0098 A3                INC     DPTR
0099 E0                MOVX    A,@DPTR
009A 240B              ADD     A,#0BH
009C         L?0203:
009C F9                MOV     R1,A
009D E4                CLR     A
009E 3A                ADDC    A,R2
009F FA                MOV     R2,A
00A0 010000      E     AJMP    ?C?ILDPTR
00A3         L?0204:
00A3         L?0205:
00A3 E4                CLR     A
00A4         L?0206:
00A4 F0                MOVX    @DPTR,A
00A5 759300      E     MOV     DPX,#?C?XDATASEG
00A8 E500        E     MOV     A,regTW88+01H
00AA 22                RET     
00AB         L?0207:
00AB 7B00        R     MOV     R3,#MBYTE ?SC_91
00AD 7A00        R     MOV     R2,#HIGH ?SC_91
00AF 7900        R     MOV     R1,#LOW ?SC_91
00B1         L?0208:
00B1 E0                MOVX    A,@DPTR
00B2 FF                MOV     R7,A
00B3 A3                INC     DPTR
00B4 E0                MOVX    A,@DPTR
00B5 90000000    E     MOV     DPTR,#?_Printf?BYTE+03H
00B9 CF                XCH     A,R7
00BA F0                MOVX    @DPTR,A
00BB A3                INC     DPTR
00BC EF                MOV     A,R7
00BD F0                MOVX    @DPTR,A
00BE 22                RET     
00BF         L?0209:
00BF         L?0210:
00BF E0                MOVX    A,@DPTR
00C0 FF                MOV     R7,A
00C1 A3                INC     DPTR
00C2 E0                MOVX    A,@DPTR
00C3 90000000    E     MOV     DPTR,#?_Printf?BYTE+05H
00C7 CF                XCH     A,R7
00C8 F0                MOVX    @DPTR,A
00C9 A3                INC     DPTR
00CA EF                MOV     A,R7
00CB F0                MOVX    @DPTR,A
00CC 22                RET     
00CD         L?0211:
00CD         L?0212:
00CD A3                INC     DPTR
00CE         L?0213:
00CE E0                MOVX    A,@DPTR
00CF         L?0214:
00CF FF                MOV     R7,A
00D0 759300      E     MOV     DPX,#?C?XDATASEG
00D3 E500        E     MOV     A,regTW88+01H
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 28  

00D5 22                RET     
00D6         L?0215:
00D6 E0                MOVX    A,@DPTR
00D7 FC                MOV     R4,A
00D8 A3                INC     DPTR
00D9 E0                MOVX    A,@DPTR
00DA A3                INC     DPTR
00DB         L?0216:
00DB FD                MOV     R5,A
00DC         L?0217:
00DC E0                MOVX    A,@DPTR
00DD FF                MOV     R7,A
00DE A3                INC     DPTR
00DF E0                MOVX    A,@DPTR
00E0 90000000    R     MOV     DPTR,#?_FindBT656ScalerTable?BYTE+05H
00E4 CF                XCH     A,R7
00E5 F0                MOVX    @DPTR,A
00E6 A3                INC     DPTR
00E7 EF                MOV     A,R7
00E8 F0                MOVX    @DPTR,A
00E9 22                RET     
00EA         L?0218:
00EA 90000000    R     MOV     DPTR,#hActive
00EE F0                MOVX    @DPTR,A
00EF A3                INC     DPTR
00F0 EF                MOV     A,R7
00F1 F0                MOVX    @DPTR,A
00F2 22                RET     
00F3         L?0219:
00F3 90000000    R     MOV     DPTR,#hActive
00F7         L?0220:
00F7 E0                MOVX    A,@DPTR
00F8 FE                MOV     R6,A
00F9 A3                INC     DPTR
00FA E0                MOVX    A,@DPTR
00FB A3                INC     DPTR
00FC         L?0221:
00FC FF                MOV     R7,A
00FD E0                MOVX    A,@DPTR
00FE FC                MOV     R4,A
00FF A3                INC     DPTR
0100 E0                MOVX    A,@DPTR
0101 FD                MOV     R5,A
0102 22                RET     
0103         L?0222:
0103 FF                MOV     R7,A
0104 E4                CLR     A
0105 33                RLC     A
0106 FE                MOV     R6,A
0107 A3                INC     DPTR
0108 E0                MOVX    A,@DPTR
0109 FA                MOV     R2,A
010A A3                INC     DPTR
010B E0                MOVX    A,@DPTR
010C 22                RET     
010D         L?0223:
010D F0                MOVX    @DPTR,A
010E A3                INC     DPTR
010F EF                MOV     A,R7
0110 F0                MOVX    @DPTR,A
0111         L?0224:
0111 90000000    R     MOV     DPTR,#p
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 29  

0115 A3                INC     DPTR
0116 E0                MOVX    A,@DPTR
0117 FA                MOV     R2,A
0118 A3                INC     DPTR
0119 E0                MOVX    A,@DPTR
011A 22                RET     
011B         L?0225:
011B         L?0226:
011B E4                CLR     A
011C F0                MOVX    @DPTR,A
011D A3                INC     DPTR
011E F0                MOVX    @DPTR,A
011F A3                INC     DPTR
0120 F0                MOVX    @DPTR,A
0121 22                RET     
0122         L?0227:
0122         L?0228:
0122 90000000    R     MOV     DPTR,#hActive
0126 E0                MOVX    A,@DPTR
0127 FE                MOV     R6,A
0128 A3                INC     DPTR
0129 E0                MOVX    A,@DPTR
012A FF                MOV     R7,A
012B 22                RET     
012C         L?0229:
012C         L?0230:
012C E0                MOVX    A,@DPTR
012D 54F0              ANL     A,#0F0H
012F 4F                ORL     A,R7
0130         L?0231:
0130 FF                MOV     R7,A
0131 759300      E     MOV     DPX,#?C?XDATASEG
0134 E500        E     MOV     A,regTW88+01H
0136 22                RET     
0137         L?0232:
0137 90000000    R     MOV     DPTR,#hActive
013B F0                MOVX    @DPTR,A
013C A3                INC     DPTR
013D EF                MOV     A,R7
013E F0                MOVX    @DPTR,A
013F 22                RET     
0140         L?0233:
0140 F0                MOVX    @DPTR,A
0141 A3                INC     DPTR
0142 EF                MOV     A,R7
0143 F0                MOVX    @DPTR,A
0144         L?0234:
0144 90000000    R     MOV     DPTR,#pVideoTable
0148 A3                INC     DPTR
0149 E0                MOVX    A,@DPTR
014A FA                MOV     R2,A
014B A3                INC     DPTR
014C E0                MOVX    A,@DPTR
014D 22                RET     
014E         L?0237:
014E 90000000    R     MOV     DPTR,#hActive+01H
0152 E0                MOVX    A,@DPTR
0153 25E0              ADD     A,ACC
0155 FF                MOV     R7,A
0156         L?0238:
0156 90000000    R     MOV     DPTR,#hActive
015A E0                MOVX    A,@DPTR
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 30  

015B 33                RLC     A
015C 22                RET     
015D         L?0239:
015D 90000000    R     MOV     DPTR,#dTemp
0161         L?0240:
0161 110000      E     ACALL   ?C?LSTXDATA
0164 90000000    R     MOV     DPTR,#dTemp
0168 22                RET     
0169         L?0241:
0169         L?0242:
0169 7B00              MOV     R3,#00H
016B 7A00              MOV     R2,#00H
016D 7900              MOV     R1,#00H
016F 22                RET     
0170         L?0243:
0170         L?0244:
0170 90000000    R     MOV     DPTR,#pVideoTable
0174 A3                INC     DPTR
0175 E0                MOVX    A,@DPTR
0176 FA                MOV     R2,A
0177 A3                INC     DPTR
0178 E0                MOVX    A,@DPTR
0179 22                RET     
017A         L?0245:
017A E0                MOVX    A,@DPTR
017B 75F023            MOV     B,#023H
017E A4                MUL     AB
017F 2400        E     ADD     A,#LOW BT656SCALER_time
0181 F9                MOV     R1,A
0182 7400        E     MOV     A,#HIGH BT656SCALER_time
0184 35F0              ADDC    A,B
0186 FA                MOV     R2,A
0187 7B00        E     MOV     R3,#MBYTE BT656SCALER_time
0189 22                RET     
018A         L?0246:
018A F0                MOVX    @DPTR,A
018B A3                INC     DPTR
018C ED                MOV     A,R5
018D F0                MOVX    @DPTR,A
018E 90000000    R     MOV     DPTR,#pVideoTable
0192 A3                INC     DPTR
0193 E0                MOVX    A,@DPTR
0194 FA                MOV     R2,A
0195 A3                INC     DPTR
0196 E0                MOVX    A,@DPTR
0197 22                RET     
0198         L?0248:
0198         L?0249:
0198 E0                MOVX    A,@DPTR
0199 90000000    E     MOV     DPTR,#?_Printf?BYTE+07H
019D F0                MOVX    @DPTR,A
019E 22                RET     
019F         L?0250:
019F         L?0251:
019F E0                MOVX    A,@DPTR
01A0 90000000    R     MOV     DPTR,#?_FindBT656ScalerTable?BYTE+07H
01A4 F0                MOVX    @DPTR,A
01A5 22                RET     
01A6         L?0252:
01A6         L?0253:
01A6 E0                MOVX    A,@DPTR
01A7 90000000    R     MOV     DPTR,#?_FindBT656ScalerTable?BYTE+08H
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 31  

01AB F0                MOVX    @DPTR,A
01AC 22                RET     
01AD         L?0254:
01AD         L?0255:
01AD 7B00        R     MOV     R3,#MBYTE ?SC_130
01AF 7A00        R     MOV     R2,#HIGH ?SC_130
01B1 7900        R     MOV     R1,#LOW ?SC_130
01B3 22                RET     
01B4         L?0256:
01B4         L?0257:
01B4 759300      E     MOV     DPX,#?C?XDATASEG
01B7 E500        E     MOV     A,regTW88+01H
01B9 2407              ADD     A,#07H
01BB 22                RET     
01BC         L?0258:
01BC         L?0259:
01BC 759300      E     MOV     DPX,#?C?XDATASEG
01BF E500        E     MOV     A,regTW88+01H
01C1 2440              ADD     A,#040H
01C3 22                RET     
01C4         L?0260:
01C4         L?0261:
01C4 EE                MOV     A,R6
01C5 F0                MOVX    @DPTR,A
01C6 FC                MOV     R4,A
01C7 A3                INC     DPTR
01C8 EF                MOV     A,R7
01C9 F0                MOVX    @DPTR,A
01CA FD                MOV     R5,A
01CB 22                RET     
01CC         L?0262:
01CC         L?0263:
01CC 90000000    E     MOV     DPTR,#InputMain
01D0 E0                MOVX    A,@DPTR
01D1 FF                MOV     R7,A
01D2 22                RET     
01D3         L?0264:
01D3 90000000    R     MOV     DPTR,#vActive
01D7 E0                MOVX    A,@DPTR
01D8 FC                MOV     R4,A
01D9 A3                INC     DPTR
01DA E0                MOVX    A,@DPTR
01DB FD                MOV     R5,A
01DC 22                RET     
             ; FUNCTION Com00B3 (END)

             ; FUNCTION _FindBT656ScalerTable (BEGIN)
                                           ; SOURCE LINE # 52
0000 90000000    R     MOV     DPTR,#hActive
0004 EC                MOV     A,R4
0005 F0                MOVX    @DPTR,A
0006 A3                INC     DPTR
0007 ED                MOV     A,R5
0008 F0                MOVX    @DPTR,A
;---- Variable 'table' assigned to Register 'R1/R2/R3' ----
                                           ; SOURCE LINE # 53
                                           ; SOURCE LINE # 56
0009 90000000    R     MOV     DPTR,#p
000D 110000      R     ACALL   L?0185
                                           ; SOURCE LINE # 58
0010 90000000    R     MOV     DPTR,#vFreq
0014 E0                MOVX    A,@DPTR
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 32  

0015 B43B03            CJNE    A,#03BH,?C0002
                                           ; SOURCE LINE # 59
0018 743C              MOV     A,#03CH
001A F0                MOVX    @DPTR,A
001B         ?C0002:
                                           ; SOURCE LINE # 61
001B 90000000    R     MOV     DPTR,#p
001F 110000      R     ACALL   L?0189
0022 F9                MOV     R1,A
0023 110000      E     ACALL   ?C?ILDPTR
0026 FF                MOV     R7,A
0027 AEF0              MOV     R6,B
0029 4E                ORL     A,R6
002A 7003              JNZ     $ + 5H
002C 010000      R     AJMP    ?C0003
                                           ; SOURCE LINE # 62
002F 90000000    R     MOV     DPTR,#hActive
0033 E0                MOVX    A,@DPTR
0034 6E                XRL     A,R6
0035 7003              JNZ     ?C0149
0037 A3                INC     DPTR
0038 E0                MOVX    A,@DPTR
0039 6F                XRL     A,R7
003A         ?C0149:
003A 7074              JNZ     ?C0004
003C E9                MOV     A,R1
003D 2402              ADD     A,#02H
003F 110000      R     ACALL   L?0203
0042 FF                MOV     R7,A
0043 90000000    R     MOV     DPTR,#vActive
0047 E0                MOVX    A,@DPTR
0048 65F0              XRL     A,B
004A 7003              JNZ     ?C0150
004C A3                INC     DPTR
004D E0                MOVX    A,@DPTR
004E 6F                XRL     A,R7
004F         ?C0150:
004F 705F              JNZ     ?C0004
0051 90000000    R     MOV     DPTR,#p
0055 110000      R     ACALL   L?0189
0058 2404              ADD     A,#04H
005A 110000      R     ACALL   L?0200
005D FF                MOV     R7,A
005E 90000000    R     MOV     DPTR,#vFreq
0062 E0                MOVX    A,@DPTR
0063 6F                XRL     A,R7
0064 704A              JNZ     ?C0004
                                           ; SOURCE LINE # 64
                                           ; SOURCE LINE # 65
0066 A3                INC     DPTR
0067 E0                MOVX    A,@DPTR
0068 14                DEC     A
0069 600E              JZ      ?C0007
006B 14                DEC     A
006C 7016              JNZ     ?C0008
                                           ; SOURCE LINE # 66
006E         ?C0006:
006E 90000000    R     MOV     DPTR,#p
0072 110000      R     ACALL   L?0189
0075 2407              ADD     A,#07H
0077 8014              SJMP    ?C0161
                                           ; SOURCE LINE # 67
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 33  

0079         ?C0007:
0079 90000000    R     MOV     DPTR,#p
007D 110000      R     ACALL   L?0189
0080 2406              ADD     A,#06H
0082         ?C0160:
0082 8009              SJMP    ?C0161
                                           ; SOURCE LINE # 68
0084         ?C0008:
0084 90000000    R     MOV     DPTR,#p
0088 110000      R     ACALL   L?0189
008B 2405              ADD     A,#05H
008D         ?C0161:
008D 110000      R     ACALL   L?0200
0090 90000000    R     MOV     DPTR,#idx
0094 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 69
0095         ?C0005:
                                           ; SOURCE LINE # 70
0095 90000000    R     MOV     DPTR,#idx
0099 E0                MOVX    A,@DPTR
009A B4FF0C            CJNE    A,#0FFH,?C0009
                                           ; SOURCE LINE # 71
009D A3                INC     DPTR
009E 110000      R     ACALL   L?0189
00A1 110000      R     ACALL   L?0199
00A4 90000000    R     MOV     DPTR,#idx
00A8 F0                MOVX    @DPTR,A
00A9         ?C0009:
                                           ; SOURCE LINE # 72
00A9 90000000    R     MOV     DPTR,#idx
00AD E0                MOVX    A,@DPTR
00AE FF                MOV     R7,A
00AF 22                RET     
                                           ; SOURCE LINE # 73
00B0         ?C0004:
                                           ; SOURCE LINE # 74
00B0 90000000    R     MOV     DPTR,#p+01H
00B4 E4                CLR     A
00B5 75F008            MOV     B,#08H
00B8 110000      E     ACALL   ?C?IILDX
                                           ; SOURCE LINE # 75
00BB 010000      R     AJMP    ?C0002
00BE         ?C0003:
                                           ; SOURCE LINE # 79
00BE 7FFF              MOV     R7,#0FFH
                                           ; SOURCE LINE # 80
00C0         ?C0010:
00C0 22                RET     
             ; FUNCTION _FindBT656ScalerTable (END)

             ; FUNCTION _BT656Enc_Calc_hActive (BEGIN)
                                           ; SOURCE LINE # 82
0000 90000000    R     MOV     DPTR,#hScale
0004 EC                MOV     A,R4
0005 F0                MOVX    @DPTR,A
0006 A3                INC     DPTR
0007 ED                MOV     A,R5
0008 F0                MOVX    @DPTR,A
;---- Variable 'hActive' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 83
                                           ; SOURCE LINE # 86
0009 E4                CLR     A
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 34  

000A FC                MOV     R4,A
000B FD                MOV     R5,A
000C A3                INC     DPTR
                                           ; SOURCE LINE # 87
000D 110000      R     ACALL   L?0240
0010 110000      R     ACALL   L?0195
0013 E4                CLR     A
0014 FB                MOV     R3,A
0015 7A04              MOV     R2,#04H
0017 F9                MOV     R1,A
0018 F8                MOV     R0,A
0019 110000      E     ACALL   ?C?LMUL
                                           ; SOURCE LINE # 88
001C 110000      R     ACALL   L?0239
001F 110000      R     ACALL   L?0195
0022 C006              PUSH    AR6
0024 C007              PUSH    AR7
0026 90000000    R     MOV     DPTR,#hScale
002A E0                MOVX    A,@DPTR
002B FE                MOV     R6,A
002C A3                INC     DPTR
002D E0                MOVX    A,@DPTR
002E FB                MOV     R3,A
002F AA06              MOV     R2,AR6
0031 E4                CLR     A
0032 F9                MOV     R1,A
0033 F8                MOV     R0,A
0034 D007              POP     AR7
0036 D006              POP     AR6
0038 110000      E     ACALL   ?C?ULDIV
                                           ; SOURCE LINE # 89
003B 110000      R     ACALL   L?0239
003E A3                INC     DPTR
003F 110000      R     ACALL   L?0196
                                           ; SOURCE LINE # 90
0042         ?C0011:
0042 22                RET     
             ; FUNCTION _BT656Enc_Calc_hActive (END)

             ; FUNCTION _BT656Enc_Calc_vActive (BEGIN)
                                           ; SOURCE LINE # 91
;---- Variable 'vScale' assigned to Register 'R3' ----
0000 AB05              MOV     R3,AR5
;---- Variable 'vActive' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 92
                                           ; SOURCE LINE # 95
0002 E4                CLR     A
0003 FC                MOV     R4,A
0004 FD                MOV     R5,A
0005 90000000    R     MOV     DPTR,#dTemp
0009 110000      E     ACALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 96
000C EB                MOV     A,R3
000D 24FA              ADD     A,#0FAH
000F 6015              JZ      ?C0014
0011 24FE              ADD     A,#0FEH
0013 6021              JZ      ?C0015
0015 14                DEC     A
0016 6028              JZ      ?C0016
0018 2407              ADD     A,#07H
001A 7039              JNZ     ?C0012
                                           ; SOURCE LINE # 97
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 35  

001C         ?C0013:
001C 110000      R     ACALL   L?0194
001F 7801              MOV     R0,#01H
0021 110000      E     ACALL   ?C?LSHL
0024 8028              SJMP    ?C0164
                                           ; SOURCE LINE # 98
0026         ?C0014:
0026 7801              MOV     R0,#01H
0028 110000      R     ACALL   L?0193
002B E4                CLR     A
002C 7B03              MOV     R3,#03H
002E FA                MOV     R2,A
002F F9                MOV     R1,A
0030 F8                MOV     R0,A
0031 110000      E     ACALL   ?C?ULDIV
0034         ?C0162:
0034 8018              SJMP    ?C0164
                                           ; SOURCE LINE # 99
0036         ?C0015:
0036 110000      R     ACALL   L?0194
0039 7801              MOV     R0,#01H
003B 110000      E     ACALL   ?C?ULSHR
003E         ?C0163:
003E 800E              SJMP    ?C0164
                                           ; SOURCE LINE # 100
0040         ?C0016:
0040 7802              MOV     R0,#02H
0042 110000      R     ACALL   L?0193
0045 E4                CLR     A
0046 7B09              MOV     R3,#09H
0048 FA                MOV     R2,A
0049 F9                MOV     R1,A
004A F8                MOV     R0,A
004B 110000      E     ACALL   ?C?ULDIV
004E         ?C0164:
004E 90000000    R     MOV     DPTR,#dTemp
0052 110000      E     ACALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 101
                                           ; SOURCE LINE # 102
0055         ?C0012:
                                           ; SOURCE LINE # 103
0055 90000000    R     MOV     DPTR,#dTemp
0059 A3                INC     DPTR
005A 110000      R     ACALL   L?0196
                                           ; SOURCE LINE # 104
005D         ?C0018:
005D 22                RET     
             ; FUNCTION _BT656Enc_Calc_vActive (END)

             ; FUNCTION _BT656Enc_Enable (BEGIN)
                                           ; SOURCE LINE # 114
;---- Variable 'fOn' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 115
                                           ; SOURCE LINE # 117
;---- Variable 'ret' assigned to Register 'R6' ----
0000 7E01              MOV     R6,#01H
                                           ; SOURCE LINE # 119
0002 110000      R     ACALL   L?0256
0005 110000      R     ACALL   L?0182
0008 E0                MOVX    A,@DPTR
0009 FD                MOV     R5,A
;---- Variable 'temp' assigned to Register 'R5' ----
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 36  

                                           ; SOURCE LINE # 120
000A EF                MOV     A,R7
000B 600B              JZ      ?C0019
                                           ; SOURCE LINE # 121
000D ED                MOV     A,R5
000E 30E301            JNB     ACC.3,?C0020
0011 1E                DEC     R6
0012         ?C0020:
                                           ; SOURCE LINE # 122
0012 ED                MOV     A,R5
0013 4408              ORL     A,#08H
0015 FD                MOV     R5,A
                                           ; SOURCE LINE # 123
0016 800A              SJMP    ?C0021
0018         ?C0019:
                                           ; SOURCE LINE # 124
                                           ; SOURCE LINE # 125
0018 ED                MOV     A,R5
0019 20E302            JB      ACC.3,?C0022
001C E4                CLR     A
001D FE                MOV     R6,A
001E         ?C0022:
                                           ; SOURCE LINE # 126
001E ED                MOV     A,R5
001F 54F7              ANL     A,#0F7H
0021 FD                MOV     R5,A
                                           ; SOURCE LINE # 127
0022         ?C0021:
                                           ; SOURCE LINE # 128
0022 AF05              MOV     R7,AR5
0024 110000      R     ACALL   L?0256
0027 110000      R     ACALL   L?0182
002A EF                MOV     A,R7
002B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 129
002C AF06              MOV     R7,AR6
                                           ; SOURCE LINE # 130
002E         ?C0023:
002E 22                RET     
             ; FUNCTION _BT656Enc_Enable (END)

             ; FUNCTION _BT656Enc_SetOutputClkPol (BEGIN)
                                           ; SOURCE LINE # 141
;---- Variable 'fActiveHigh' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 142
                                           ; SOURCE LINE # 144
0000 110000      R     ACALL   L?0258
0003 110000      R     ACALL   L?0182
0006 E0                MOVX    A,@DPTR
0007 54DF              ANL     A,#0DFH
0009 FE                MOV     R6,A
;---- Variable 'temp' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 145
000A EF                MOV     A,R7
000B 6004              JZ      ?C0024
000D EE                MOV     A,R6
000E 4420              ORL     A,#020H
0010 FE                MOV     R6,A
0011         ?C0024:
                                           ; SOURCE LINE # 146
0011 AF06              MOV     R7,AR6
0013 110000      R     ACALL   L?0258
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 37  

0016 110000      R     ACALL   L?0182
0019 EF                MOV     A,R7
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 147
001B 22                RET     
             ; FUNCTION _BT656Enc_SetOutputClkPol (END)

             ; FUNCTION _BT656Enc_2DDI_FieldOffset (BEGIN)
                                           ; SOURCE LINE # 187
;---- Variable 'Even' assigned to Register 'R5' ----
;---- Variable 'Odd' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 188
                                           ; SOURCE LINE # 190
0000 759300      E     MOV     DPX,#?C?XDATASEG
0003 E500        E     MOV     A,regTW88+01H
0005 2466              ADD     A,#066H
0007 110000      R     ACALL   L?0182
000A E0                MOVX    A,@DPTR
000B 540F              ANL     A,#0FH
000D FE                MOV     R6,A
;---- Variable 'temp' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 191
000E EF                MOV     A,R7
000F C4                SWAP    A
0010 33                RLC     A
0011 33                RLC     A
0012 54C0              ANL     A,#0C0H
0014 4E                ORL     A,R6
0015 FE                MOV     R6,A
                                           ; SOURCE LINE # 192
0016 AF05              MOV     R7,AR5
0018 EF                MOV     A,R7
0019 C4                SWAP    A
001A 54F0              ANL     A,#0F0H
001C 4E                ORL     A,R6
                                           ; SOURCE LINE # 193
001D 110000      R     ACALL   L?0214
0020 2466              ADD     A,#066H
0022 110000      R     ACALL   L?0182
0025 EF                MOV     A,R7
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 194
0027 22                RET     
             ; FUNCTION _BT656Enc_2DDI_FieldOffset (END)

             ; FUNCTION _BT656Enc_D_SetRGB (BEGIN)
                                           ; SOURCE LINE # 202
;---- Variable 'fOn' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 203
                                           ; SOURCE LINE # 205
0000 110000      R     ACALL   L?0180
0003 E0                MOVX    A,@DPTR
0004 54BF              ANL     A,#0BFH
0006 FE                MOV     R6,A
;---- Variable 'bTemp' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 206
0007 EF                MOV     A,R7
0008 6004              JZ      ?C0027
000A EE                MOV     A,R6
000B 4440              ORL     A,#040H
000D FE                MOV     R6,A
000E         ?C0027:
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 38  

                                           ; SOURCE LINE # 207
000E AF06              MOV     R7,AR6
0010 110000      R     ACALL   L?0180
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 208
0015 22                RET     
             ; FUNCTION _BT656Enc_D_SetRGB (END)

             ; FUNCTION _BT656Enc_SelectSource (BEGIN)
                                           ; SOURCE LINE # 222
;---- Variable 'fMode' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 223
                                           ; SOURCE LINE # 226
0000 110000      R     ACALL   L?0181
0003 E0                MOVX    A,@DPTR
0004 54F8              ANL     A,#0F8H
;---- Variable 'bTemp' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 227
0006 4F                ORL     A,R7
                                           ; SOURCE LINE # 228
0007 FF                MOV     R7,A
0008 110000      R     ACALL   L?0181
000B EF                MOV     A,R7
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 229
000D 22                RET     
             ; FUNCTION _BT656Enc_SelectSource (END)

             ; FUNCTION _BT656Enc_Crop (BEGIN)
                                           ; SOURCE LINE # 246
0000 90000000    R     MOV     DPTR,#h_SAV
0004 EE                MOV     A,R6
0005 F0                MOVX    @DPTR,A
0006 A3                INC     DPTR
0007 EF                MOV     A,R7
0008 F0                MOVX    @DPTR,A
0009 A3                INC     DPTR
000A EC                MOV     A,R4
000B F0                MOVX    @DPTR,A
000C A3                INC     DPTR
000D ED                MOV     A,R5
000E F0                MOVX    @DPTR,A
000F A3                INC     DPTR
0010 EA                MOV     A,R2
0011 F0                MOVX    @DPTR,A
0012 A3                INC     DPTR
0013 EB                MOV     A,R3
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 247
                                           ; SOURCE LINE # 256
0015 759300      E     MOV     DPX,#?C?XDATASEG
0018 E500        E     MOV     A,regTW88+01H
001A 2468              ADD     A,#068H
001C 110000      R     ACALL   L?0182
001F E0                MOVX    A,@DPTR
0020 54FC              ANL     A,#0FCH
;---- Variable 'bTemp' assigned to Register 'R5' ----
0022 FD                MOV     R5,A
                                           ; SOURCE LINE # 257
0023 90000000    R     MOV     DPTR,#h_SAV
0027 E0                MOVX    A,@DPTR
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 39  

0028 4D                ORL     A,R5
0029 FD                MOV     R5,A
                                           ; SOURCE LINE # 258
002A 759300      E     MOV     DPX,#?C?XDATASEG
002D E500        E     MOV     A,regTW88+01H
002F 2468              ADD     A,#068H
0031 110000      R     ACALL   L?0182
0034 ED                MOV     A,R5
                                           ; SOURCE LINE # 259
0035 110000      R     ACALL   L?0206
0038 2469              ADD     A,#069H
003A 110000      R     ACALL   L?0182
003D E0                MOVX    A,@DPTR
003E 5480              ANL     A,#080H
0040 FD                MOV     R5,A
                                           ; SOURCE LINE # 260
0041 90000000    R     MOV     DPTR,#VLen
0045 E0                MOVX    A,@DPTR
0046 C4                SWAP    A
0047 F8                MOV     R0,A
0048 54F0              ANL     A,#0F0H
004A C8                XCH     A,R0
004B A3                INC     DPTR
004C E0                MOVX    A,@DPTR
004D C4                SWAP    A
004E 540F              ANL     A,#0FH
0050 48                ORL     A,R0
0051 5470              ANL     A,#070H
0053 4D                ORL     A,R5
0054 FD                MOV     R5,A
                                           ; SOURCE LINE # 261
0055 90000000    R     MOV     DPTR,#HLen
0059 E0                MOVX    A,@DPTR
005A 4D                ORL     A,R5
                                           ; SOURCE LINE # 262
005B 110000      R     ACALL   L?0214
005E 2469              ADD     A,#069H
0060 110000      R     ACALL   L?0182
0063 EF                MOV     A,R7
0064 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 263
0065 90000000    R     MOV     DPTR,#v_SAV
0069 110000      R     ACALL   L?0211
006C 246A              ADD     A,#06AH
006E 110000      R     ACALL   L?0182
0071 EF                MOV     A,R7
0072 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 264
0073 90000000    R     MOV     DPTR,#VLen
0077 110000      R     ACALL   L?0211
007A 246B              ADD     A,#06BH
007C 110000      R     ACALL   L?0182
007F EF                MOV     A,R7
0080 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 265
0081 90000000    R     MOV     DPTR,#h_SAV
0085 110000      R     ACALL   L?0212
0088 246C              ADD     A,#06CH
008A 110000      R     ACALL   L?0182
008D EF                MOV     A,R7
008E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 266
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 40  

008F 90000000    R     MOV     DPTR,#HLen
0093 110000      R     ACALL   L?0212
0096 246D              ADD     A,#06DH
0098 110000      R     ACALL   L?0182
009B EF                MOV     A,R7
009C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 267
009D 22                RET     
             ; FUNCTION _BT656Enc_Crop (END)

             ; FUNCTION _BT656_A_SelectOutput (BEGIN)
                                           ; SOURCE LINE # 348
;---- Variable 'mode' assigned to Register 'R7' ----
;---- Variable 'vPol' assigned to Register 'R3' ----
;---- Variable 'hPol' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 349
                                           ; SOURCE LINE # 356
0000 EF                MOV     A,R7
0001 C4                SWAP    A
0002 54F0              ANL     A,#0F0H
0004 FF                MOV     R7,A
;---- Variable 'bTemp' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 357
0005 ED                MOV     A,R5
0006 7004              JNZ     ?C0031
0008 EF                MOV     A,R7
0009 4408              ORL     A,#08H
000B FF                MOV     R7,A
000C         ?C0031:
                                           ; SOURCE LINE # 358
000C EB                MOV     A,R3
000D 7004              JNZ     ?C0032
000F EF                MOV     A,R7
0010 4404              ORL     A,#04H
0012 FF                MOV     R7,A
0013         ?C0032:
                                           ; SOURCE LINE # 359
0013 90000000    R     MOV     DPTR,#hv_sel
0017 E0                MOVX    A,@DPTR
0018 4F                ORL     A,R7
                                           ; SOURCE LINE # 360
0019 110000      R     ACALL   L?0214
001C 2405              ADD     A,#05H
001E 110000      R     ACALL   L?0192
0021 EF                MOV     A,R7
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 361
0023 22                RET     
             ; FUNCTION _BT656_A_SelectOutput (END)

             ; FUNCTION L?0235 (BEGIN)
0000 7F01              MOV     R7,#01H
0002 110000      R     ACALL   _BT656Enc_D_SetRGB
0005         L?0236:
0005 E4                CLR     A
0006 FB                MOV     R3,A
0007 FD                MOV     R5,A
0008 7F02              MOV     R7,#02H
             ; FUNCTION _BT656_A_Output (BEGIN)
                                           ; SOURCE LINE # 374
;---- Variable 'mode' assigned to Register 'R7' ----
;---- Variable 'hPol' assigned to Register 'R5' ----
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 41  

;---- Variable 'vPol' assigned to Register 'R3' ----
                                           ; SOURCE LINE # 375
                                           ; SOURCE LINE # 382
;---- Variable 'bTemp' assigned to Register 'R6' ----
000A E4                CLR     A
000B FE                MOV     R6,A
                                           ; SOURCE LINE # 383
000C EF                MOV     A,R7
000D 14                DEC     A
000E 600D              JZ      ?C0036
0010 14                DEC     A
0011 6010              JZ      ?C0037
0013 2402              ADD     A,#02H
0015 7012              JNZ     ?C0038
                                           ; SOURCE LINE # 384
0017         ?C0035:
0017 EE                MOV     A,R6
0018 4401              ORL     A,#01H
001A FE                MOV     R6,A
001B 8010              SJMP    ?C0034
                                           ; SOURCE LINE # 385
001D         ?C0036:
001D EE                MOV     A,R6
001E 4412              ORL     A,#012H
0020 FE                MOV     R6,A
0021 800A              SJMP    ?C0034
                                           ; SOURCE LINE # 386
0023         ?C0037:
0023 EE                MOV     A,R6
0024 4420              ORL     A,#020H
0026 FE                MOV     R6,A
0027 8004              SJMP    ?C0034
                                           ; SOURCE LINE # 387
0029         ?C0038:
0029 EE                MOV     A,R6
002A 4410              ORL     A,#010H
002C FE                MOV     R6,A
                                           ; SOURCE LINE # 388
002D         ?C0034:
                                           ; SOURCE LINE # 389
002D ED                MOV     A,R5
002E 6004              JZ      ?C0039
0030 EE                MOV     A,R6
0031 4408              ORL     A,#08H
0033 FE                MOV     R6,A
0034         ?C0039:
                                           ; SOURCE LINE # 390
0034 EB                MOV     A,R3
0035 6004              JZ      ?C0040
0037 EE                MOV     A,R6
0038 4404              ORL     A,#04H
003A FE                MOV     R6,A
003B         ?C0040:
                                           ; SOURCE LINE # 391
003B 759300      E     MOV     DPX,#?C?XDATASEG
003E E500        E     MOV     A,regTW88+01H
0040 2405              ADD     A,#05H
0042 110000      R     ACALL   L?0192
0045 EE                MOV     A,R6
0046 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 393
0047 110000      R     ACALL   L?0191
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 42  

004A E0                MOVX    A,@DPTR
004B 543F              ANL     A,#03FH
004D FE                MOV     R6,A
                                           ; SOURCE LINE # 394
004E EF                MOV     A,R7
004F 14                DEC     A
0050 6009              JZ      ?C0043
0052 14                DEC     A
0053 600C              JZ      ?C0044
0055 2402              ADD     A,#02H
0057 700E              JNZ     ?C0045
                                           ; SOURCE LINE # 395
0059         ?C0042:
0059 800C              SJMP    ?C0041
                                           ; SOURCE LINE # 396
005B         ?C0043:
005B EE                MOV     A,R6
005C 4440              ORL     A,#040H
005E FE                MOV     R6,A
005F 8006              SJMP    ?C0041
                                           ; SOURCE LINE # 397
0061         ?C0044:
0061 EE                MOV     A,R6
0062 4480              ORL     A,#080H
0064 FE                MOV     R6,A
0065 8000              SJMP    ?C0041
                                           ; SOURCE LINE # 398
0067         ?C0045:
                                           ; SOURCE LINE # 399
0067         ?C0041:
                                           ; SOURCE LINE # 400
0067 AF06              MOV     R7,AR6
0069 110000      R     ACALL   L?0191
006C EF                MOV     A,R7
006D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 401
006E 22                RET     
             ; FUNCTION _BT656_A_Output (END)

             ; FUNCTION _BT656_A_SetLLCLK_Pol (BEGIN)
                                           ; SOURCE LINE # 440
;---- Variable 'pol' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 441
                                           ; SOURCE LINE # 443
0000 110000      R     ACALL   L?0191
0003 E0                MOVX    A,@DPTR
0004 54FD              ANL     A,#0FDH
0006 FE                MOV     R6,A
;---- Variable 'bTemp' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 444
0007 EF                MOV     A,R7
0008 25E0              ADD     A,ACC
                                           ; SOURCE LINE # 445
000A 110000      R     ACALL   L?0190
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 446
000F 22                RET     
             ; FUNCTION _BT656_A_SetLLCLK_Pol (END)

             ; FUNCTION _BT656_A_SelectCLKO (BEGIN)
                                           ; SOURCE LINE # 447
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 43  

;---- Variable 'PolClko' assigned to Register 'R5' ----
;---- Variable 'mode' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 448
                                           ; SOURCE LINE # 450
0000 110000      R     ACALL   L?0191
0003 E0                MOVX    A,@DPTR
;---- Variable 'bTemp' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 451
0004 EF                MOV     A,R7
0005 C4                SWAP    A
0006 33                RLC     A
0007 33                RLC     A
0008 54C0              ANL     A,#0C0H
000A FE                MOV     R6,A
                                           ; SOURCE LINE # 452
000B AF05              MOV     R7,AR5
000D EF                MOV     A,R7
000E C4                SWAP    A
000F 33                RLC     A
0010 54E0              ANL     A,#0E0H
                                           ; SOURCE LINE # 453
0012 110000      R     ACALL   L?0190
0015 EF                MOV     A,R7
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 454
0017 22                RET     
             ; FUNCTION _BT656_A_SelectCLKO (END)

             ; FUNCTION _BT656Enc_En2DDI (BEGIN)
                                           ; SOURCE LINE # 455
;---- Variable 'fOn' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 456
                                           ; SOURCE LINE # 458
0000 110000      R     ACALL   L?0191
0003 E0                MOVX    A,@DPTR
0004 54FE              ANL     A,#0FEH
0006 FE                MOV     R6,A
;---- Variable 'bTemp' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 459
0007 EF                MOV     A,R7
0008 6004              JZ      ?C0049
000A EE                MOV     A,R6
000B 4401              ORL     A,#01H
000D FE                MOV     R6,A
000E         ?C0049:
                                           ; SOURCE LINE # 460
000E AF06              MOV     R7,AR6
0010 110000      R     ACALL   L?0191
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 461
0015 22                RET     
             ; FUNCTION _BT656Enc_En2DDI (END)

             ; FUNCTION _BT656Enc_GenLock (BEGIN)
                                           ; SOURCE LINE # 482
;---- Variable 'x8' assigned to Register 'R5' ----
;---- Variable 'PreDiv' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 483
                                           ; SOURCE LINE # 486
0000 759300      E     MOV     DPX,#?C?XDATASEG
0003 E500        E     MOV     A,regTW88+01H
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 44  

0005 2477              ADD     A,#077H
0007 110000      R     ACALL   L?0182
000A 110000      R     ACALL   L?0229
000D 2477              ADD     A,#077H
000F 110000      R     ACALL   L?0182
0012 EF                MOV     A,R7
                                           ; SOURCE LINE # 488
0013 110000      R     ACALL   L?0206
0016 24E1              ADD     A,#0E1H
0018 110000      R     ACALL   L?0192
001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
;---- Variable 'temp' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 489
001D ED                MOV     A,R5
001E 6006              JZ      ?C0051
0020 EF                MOV     A,R7
0021 4440              ORL     A,#040H
0023 FF                MOV     R7,A
0024 8004              SJMP    ?C0052
0026         ?C0051:
                                           ; SOURCE LINE # 490
0026 EF                MOV     A,R7
0027 54BF              ANL     A,#0BFH
0029 FF                MOV     R7,A
002A         ?C0052:
                                           ; SOURCE LINE # 491
002A 759300      E     MOV     DPX,#?C?XDATASEG
002D E500        E     MOV     A,regTW88+01H
002F 24E1              ADD     A,#0E1H
0031 110000      R     ACALL   L?0192
0034 EF                MOV     A,R7
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 492
0036 22                RET     
             ; FUNCTION _BT656Enc_GenLock (END)

             ; FUNCTION _BT656_CheckLoopbackCombination (BEGIN)
                                           ; SOURCE LINE # 517
0000 90000000    R     MOV     DPTR,#mode
0004 EF                MOV     A,R7
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 518
                                           ; SOURCE LINE # 522
0006 6013              JZ      ?C0055
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 6401              XRL     A,#01H
000C 600D              JZ      ?C0055
000E EF                MOV     A,R7
000F 6402              XRL     A,#02H
0011 6008              JZ      ?C0055
0013 EF                MOV     A,R7
0014 6403              XRL     A,#03H
0016 6003              JZ      $ + 5H
0018 010000      R     AJMP    ?C0054
001B         ?C0055:
                                           ; SOURCE LINE # 525
                                           ; SOURCE LINE # 527
;---- Variable 'fError' assigned to Register 'R7' ----
001B E4                CLR     A
001C FF                MOV     R7,A
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 45  

                                           ; SOURCE LINE # 528
001D 90000000    E     MOV     DPTR,#InputMain
0021 E0                MOVX    A,@DPTR
0022 B40900            CJNE    A,#09H,?C0151
0025         ?C0151:
0025 505F              JNC     ?C0056
0027 90000000    R     MOV     DPTR,#?C0152
002B F8                MOV     R0,A
002C 28                ADD     A,R0
002D 28                ADD     A,R0
002E 73                JMP     @A+DPTR
002F         ?C0152:
002F 010000      R     AJMP    ?C0058
0032 010000      R     AJMP    ?C0058
0035 010000      R     AJMP    ?C0061
0038 010000      R     AJMP    ?C0061
003B 010000      R     AJMP    ?C0065
003E 010000      R     AJMP    ?C0065
0041 010000      R     AJMP    ?C0065
0044 010000      R     AJMP    ?C0069
0047 010000      R     AJMP    ?C0067
                                           ; SOURCE LINE # 529
                                           ; SOURCE LINE # 530
004A         ?C0058:
                                           ; SOURCE LINE # 531
004A 90000000    R     MOV     DPTR,#mode
004E E0                MOVX    A,@DPTR
004F 6035              JZ      ?C0056
                                           ; SOURCE LINE # 532
0051 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 533
0053 8031              SJMP    ?C0056
                                           ; SOURCE LINE # 534
                                           ; SOURCE LINE # 535
0055         ?C0061:
                                           ; SOURCE LINE # 536
0055 90000000    R     MOV     DPTR,#mode
0059 E0                MOVX    A,@DPTR
005A 6401              XRL     A,#01H
005C 6028              JZ      ?C0056
                                           ; SOURCE LINE # 537
005E 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 538
0060 8024              SJMP    ?C0056
                                           ; SOURCE LINE # 539
                                           ; SOURCE LINE # 540
                                           ; SOURCE LINE # 541
0062         ?C0065:
                                           ; SOURCE LINE # 542
0062 90000000    R     MOV     DPTR,#mode
0066 E0                MOVX    A,@DPTR
0067 6402              XRL     A,#02H
0069 601B              JZ      ?C0056
                                           ; SOURCE LINE # 543
006B 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 544
006D 8017              SJMP    ?C0056
                                           ; SOURCE LINE # 545
006F         ?C0067:
                                           ; SOURCE LINE # 546
006F 90000000    R     MOV     DPTR,#mode
0073 E0                MOVX    A,@DPTR
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 46  

0074 6403              XRL     A,#03H
0076 600E              JZ      ?C0056
                                           ; SOURCE LINE # 547
0078 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 548
007A 800A              SJMP    ?C0056
                                           ; SOURCE LINE # 549
007C         ?C0069:
                                           ; SOURCE LINE # 551
007C 90000000    R     MOV     DPTR,#mode
0080 E0                MOVX    A,@DPTR
0081 B40202            CJNE    A,#02H,?C0056
                                           ; SOURCE LINE # 552
0084 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 553
                                           ; SOURCE LINE # 554
0086         ?C0056:
                                           ; SOURCE LINE # 555
0086 EF                MOV     A,R7
0087 7003              JNZ     $ + 5H
0089 010000      R     AJMP    ?C0165
                                           ; SOURCE LINE # 556
008C 7B00        R     MOV     R3,#MBYTE ?SC_0
008E 7A00        R     MOV     R2,#HIGH ?SC_0
0090 7900        R     MOV     R1,#LOW ?SC_0
0092 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 557
0095 110000      R     ACALL   L?0262
0098 E4                CLR     A
0099 FD                MOV     R5,A
009A 110000      E     ACALL   _PrintfInput
                                           ; SOURCE LINE # 558
009D 7B00        R     MOV     R3,#MBYTE ?SC_8
009F 7A00        R     MOV     R2,#HIGH ?SC_8
00A1 7900        R     MOV     R1,#LOW ?SC_8
00A3 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 562
00A6 7FFF              MOV     R7,#0FFH
00A8 22                RET     
                                           ; SOURCE LINE # 563
00A9         ?C0054:
                                           ; SOURCE LINE # 566
00A9 90000000    R     MOV     DPTR,#mode
00AD E0                MOVX    A,@DPTR
00AE 6406              XRL     A,#06H
00B0 7062              JNZ     ?C0074
                                           ; SOURCE LINE # 568
00B2 110000      R     ACALL   L?0262
00B5 B40900            CJNE    A,#09H,?C0153
00B8         ?C0153:
00B8 5048              JNC     ?C0085
00BA 90000000    R     MOV     DPTR,#?C0154
00BE F8                MOV     R0,A
00BF 28                ADD     A,R0
00C0 28                ADD     A,R0
00C1 73                JMP     @A+DPTR
00C2         ?C0154:
00C2 010000      R     AJMP    ?C0077
00C5 010000      R     AJMP    ?C0077
00C8 010000      R     AJMP    ?C0079
00CB 010000      R     AJMP    ?C0079
00CE 010000      R     AJMP    ?C0082
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 47  

00D1 010000      R     AJMP    ?C0082
00D4 010000      R     AJMP    ?C0082
00D7 010000      R     AJMP    ?C0084
00DA 010000      R     AJMP    ?C0083
                                           ; SOURCE LINE # 569
                                           ; SOURCE LINE # 570
00DD         ?C0077:
                                           ; SOURCE LINE # 571
                                           ; SOURCE LINE # 572
00DD 801B              SJMP    ?C0166
                                           ; SOURCE LINE # 573
                                           ; SOURCE LINE # 574
00DF         ?C0079:
                                           ; SOURCE LINE # 575
00DF 90000000    R     MOV     DPTR,#bt656_src_mode
00E3 7401              MOV     A,#01H
00E5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 576
00E6 8033              SJMP    ?C0073
                                           ; SOURCE LINE # 577
                                           ; SOURCE LINE # 578
                                           ; SOURCE LINE # 579
00E8         ?C0082:
                                           ; SOURCE LINE # 580
00E8 90000000    R     MOV     DPTR,#bt656_src_mode
00EC 7402              MOV     A,#02H
00EE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 581
00EF 802A              SJMP    ?C0073
                                           ; SOURCE LINE # 582
00F1         ?C0083:
                                           ; SOURCE LINE # 583
00F1 90000000    R     MOV     DPTR,#bt656_src_mode
00F5 7403              MOV     A,#03H
00F7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 584
00F8 8021              SJMP    ?C0073
                                           ; SOURCE LINE # 585
00FA         ?C0084:
                                           ; SOURCE LINE # 586
00FA         ?C0166:
00FA E4                CLR     A
00FB 90000000    R     MOV     DPTR,#bt656_src_mode
00FF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 587
0100 8019              SJMP    ?C0073
                                           ; SOURCE LINE # 588
0102         ?C0085:
                                           ; SOURCE LINE # 590
0102 7B00        R     MOV     R3,#MBYTE ?SC_10
0104 7A00        R     MOV     R2,#HIGH ?SC_10
0106 7900        R     MOV     R1,#LOW ?SC_10
0108 90000000    E     MOV     DPTR,#?_Printf?BYTE+03H
010C EF                MOV     A,R7
010D F0                MOVX    @DPTR,A
010E 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 591
0111 7FFF              MOV     R7,#0FFH
0113 22                RET     
                                           ; SOURCE LINE # 592
                                           ; SOURCE LINE # 593
0114         ?C0074:
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 48  

                                           ; SOURCE LINE # 594
                                           ; SOURCE LINE # 596
0114         ?C0165:
0114 90000000    R     MOV     DPTR,#mode
0118 E0                MOVX    A,@DPTR
0119 A3                INC     DPTR
011A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 597
011B         ?C0073:
                                           ; SOURCE LINE # 599
011B 90000000    R     MOV     DPTR,#bt656_src_mode
011F E0                MOVX    A,@DPTR
0120 FF                MOV     R7,A
                                           ; SOURCE LINE # 600
0121         ?C0072:
0121 22                RET     
             ; FUNCTION _BT656_CheckLoopbackCombination (END)

             ; FUNCTION _BT656Enc_SetScaler (BEGIN)
                                           ; SOURCE LINE # 649
;---- Variable 'h' assigned to Register 'R2/R3' ----
0000 AB07              MOV     R3,AR7
0002 AA06              MOV     R2,AR6
;---- Variable 'v' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 650
                                           ; SOURCE LINE # 651
0004 EA                MOV     A,R2
0005 FF                MOV     R7,A
0006 AE05              MOV     R6,AR5
0008 EE                MOV     A,R6
0009 C4                SWAP    A
000A 54F0              ANL     A,#0F0H
000C 4F                ORL     A,R7
000D 110000      R     ACALL   L?0214
0010 2464              ADD     A,#064H
0012 110000      R     ACALL   L?0182
0015 EF                MOV     A,R7
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 652
0017 AF03              MOV     R7,AR3
0019 759300      E     MOV     DPX,#?C?XDATASEG
001C E500        E     MOV     A,regTW88+01H
001E 2465              ADD     A,#065H
0020 110000      R     ACALL   L?0182
0023 EF                MOV     A,R7
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 654
0025 22                RET     
             ; FUNCTION _BT656Enc_SetScaler (END)

             ; FUNCTION _BT656Enc_SetOutputActiveLen (BEGIN)
                                           ; SOURCE LINE # 663
0000 90000000    R     MOV     DPTR,#hStart
0004 EE                MOV     A,R6
0005 F0                MOVX    @DPTR,A
0006 A3                INC     DPTR
0007 EF                MOV     A,R7
0008 F0                MOVX    @DPTR,A
;---- Variable 'hLen' assigned to Register 'R4/R5' ----
                                           ; SOURCE LINE # 664
                                           ; SOURCE LINE # 665
0009 90000000    R     MOV     DPTR,#hStart
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 49  

000D 110000      R     ACALL   L?0213
0010 247A              ADD     A,#07AH
0012 110000      R     ACALL   L?0182
0015 110000      R     ACALL   L?0229
0018 247A              ADD     A,#07AH
001A 110000      R     ACALL   L?0182
001D EF                MOV     A,R7
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 666
001F 90000000    R     MOV     DPTR,#hStart
0023 110000      R     ACALL   L?0212
0026 247B              ADD     A,#07BH
0028 110000      R     ACALL   L?0182
002B EF                MOV     A,R7
002C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 667
002D EC                MOV     A,R4
002E 110000      R     ACALL   L?0214
0031 247C              ADD     A,#07CH
0033 110000      R     ACALL   L?0182
0036 110000      R     ACALL   L?0230
0039 247C              ADD     A,#07CH
003B 110000      R     ACALL   L?0182
003E EF                MOV     A,R7
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 668
0040 AF05              MOV     R7,AR5
0042 759300      E     MOV     DPX,#?C?XDATASEG
0045 E500        E     MOV     A,regTW88+01H
0047 247D              ADD     A,#07DH
0049 110000      R     ACALL   L?0182
004C EF                MOV     A,R7
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 669
004E 22                RET     
             ; FUNCTION _BT656Enc_SetOutputActiveLen (END)

             ; FUNCTION _BT656Enc_SetVSyncDelay (BEGIN)
                                           ; SOURCE LINE # 674
;---- Variable 'delay' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 675
                                           ; SOURCE LINE # 676
0000 759300      E     MOV     DPX,#?C?XDATASEG
0003 E500        E     MOV     A,regTW88+01H
0005 247A              ADD     A,#07AH
0007 110000      R     ACALL   L?0182
000A E0                MOVX    A,@DPTR
000B 540F              ANL     A,#0FH
000D FE                MOV     R6,A
000E EF                MOV     A,R7
000F C4                SWAP    A
0010 54F0              ANL     A,#0F0H
0012 4E                ORL     A,R6
0013 110000      R     ACALL   L?0231
0016 247A              ADD     A,#07AH
0018 110000      R     ACALL   L?0182
001B EF                MOV     A,R7
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 677
001D 22                RET     
             ; FUNCTION _BT656Enc_SetVSyncDelay (END)

C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 50  

             ; FUNCTION _BT656Enc_Setup_Init (BEGIN)
                                           ; SOURCE LINE # 681
;---- Variable 'source' assigned to Register 'R4' ----
0000 AC07              MOV     R4,AR7
                                           ; SOURCE LINE # 682
                                           ; SOURCE LINE # 683
0002 759300      E     MOV     DPX,#?C?XDATASEG
0005 E500        E     MOV     A,regTW88+01H
0007 2462              ADD     A,#062H
0009 110000      R     ACALL   L?0182
                                           ; SOURCE LINE # 684
000C 110000      R     ACALL   L?0204
000F 2463              ADD     A,#063H
0011 110000      R     ACALL   L?0182
                                           ; SOURCE LINE # 685
0014 110000      R     ACALL   L?0204
0017 2464              ADD     A,#064H
0019 110000      R     ACALL   L?0182
001C 7404              MOV     A,#04H
                                           ; SOURCE LINE # 686
001E 110000      R     ACALL   L?0206
0021 2465              ADD     A,#065H
0023 110000      R     ACALL   L?0182
                                           ; SOURCE LINE # 687
0026 110000      R     ACALL   L?0205
0029 2466              ADD     A,#066H
002B 110000      R     ACALL   L?0182
002E 7430              MOV     A,#030H
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 688
0031 110000      R     ACALL   L?0181
                                           ; SOURCE LINE # 689
0034 110000      R     ACALL   L?0205
0037 2468              ADD     A,#068H
0039 110000      R     ACALL   L?0182
                                           ; SOURCE LINE # 690
003C 110000      R     ACALL   L?0205
003F 2469              ADD     A,#069H
0041 110000      R     ACALL   L?0182
0044 7402              MOV     A,#02H
                                           ; SOURCE LINE # 691
0046 110000      R     ACALL   L?0206
0049 246A              ADD     A,#06AH
004B 110000      R     ACALL   L?0182
004E 7420              MOV     A,#020H
                                           ; SOURCE LINE # 692
0050 110000      R     ACALL   L?0206
0053 246B              ADD     A,#06BH
0055 110000      R     ACALL   L?0182
0058 74F0              MOV     A,#0F0H
                                           ; SOURCE LINE # 693
005A 110000      R     ACALL   L?0206
005D 246C              ADD     A,#06CH
005F 110000      R     ACALL   L?0182
0062 7420              MOV     A,#020H
                                           ; SOURCE LINE # 694
0064 110000      R     ACALL   L?0206
0067 246D              ADD     A,#06DH
0069 110000      R     ACALL   L?0182
006C 74D0              MOV     A,#0D0H
                                           ; SOURCE LINE # 695
006E 110000      R     ACALL   L?0206
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 51  

0071 246E              ADD     A,#06EH
0073 110000      R     ACALL   L?0182
0076 7410              MOV     A,#010H
                                           ; SOURCE LINE # 696
0078 110000      R     ACALL   L?0206
007B 246F              ADD     A,#06FH
007D 110000      R     ACALL   L?0182
0080 7410              MOV     A,#010H
                                           ; SOURCE LINE # 697
0082 110000      R     ACALL   L?0206
0085 2477              ADD     A,#077H
0087 110000      R     ACALL   L?0182
008A 7404              MOV     A,#04H
                                           ; SOURCE LINE # 698
008C 110000      R     ACALL   L?0206
008F 2478              ADD     A,#078H
0091 110000      R     ACALL   L?0182
                                           ; SOURCE LINE # 699
0094 110000      R     ACALL   L?0205
0097 2479              ADD     A,#079H
0099 110000      R     ACALL   L?0182
009C 7404              MOV     A,#04H
                                           ; SOURCE LINE # 700
009E 110000      R     ACALL   L?0206
00A1 247A              ADD     A,#07AH
00A3 110000      R     ACALL   L?0182
00A6 7440              MOV     A,#040H
                                           ; SOURCE LINE # 701
00A8 110000      R     ACALL   L?0206
00AB 247B              ADD     A,#07BH
00AD 110000      R     ACALL   L?0182
00B0 7428              MOV     A,#028H
                                           ; SOURCE LINE # 702
00B2 110000      R     ACALL   L?0206
00B5 247C              ADD     A,#07CH
00B7 110000      R     ACALL   L?0182
00BA 7403              MOV     A,#03H
                                           ; SOURCE LINE # 703
00BC 110000      R     ACALL   L?0206
00BF 247D              ADD     A,#07DH
00C1 110000      R     ACALL   L?0182
                                           ; SOURCE LINE # 704
00C4 110000      R     ACALL   L?0205
00C7 247E              ADD     A,#07EH
00C9 110000      R     ACALL   L?0182
                                           ; SOURCE LINE # 705
00CC 110000      R     ACALL   L?0205
00CF 247F              ADD     A,#07FH
00D1 110000      R     ACALL   L?0182
00D4 7480              MOV     A,#080H
00D6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 707
00D7 7F01              MOV     R7,#01H
00D9 110000      R     ACALL   _BT656Enc_Enable
                                           ; SOURCE LINE # 708
00DC AF04              MOV     R7,AR4
00DE 010000      R     AJMP    _BT656Enc_SelectSource
             ; FUNCTION _BT656Enc_Setup_Init (END)

             ; FUNCTION _BT656Enc_Update_BT656ExternalEncoder (BEGIN)
                                           ; SOURCE LINE # 711
;---- Variable 'vActive' assigned to Register 'R4/R5' ----
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 52  

;---- Variable 'hActive' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 712
                                           ; SOURCE LINE # 715
;---- Variable 'ext_ic_mode' assigned to Register 'R3' ----
0000 7BFF              MOV     R3,#0FFH
                                           ; SOURCE LINE # 716
0002 BE0216            CJNE    R6,#02H,?C0091
0005 BFD013            CJNE    R7,#0D0H,?C0091
                                           ; SOURCE LINE # 717
0008 ED                MOV     A,R5
0009 64F0              XRL     A,#0F0H
000B 4C                ORL     A,R4
000C 7001              JNZ     ?C0092
                                           ; SOURCE LINE # 718
000E FB                MOV     R3,A
000F         ?C0092:
                                           ; SOURCE LINE # 719
000F AE04              MOV     R6,AR4
0011 AF05              MOV     R7,AR5
0013 BE0105            CJNE    R6,#01H,?C0091
0016 BF2002            CJNE    R7,#020H,?C0091
                                           ; SOURCE LINE # 720
0019 7B01              MOV     R3,#01H
                                           ; SOURCE LINE # 721
001B         ?C0091:
                                           ; SOURCE LINE # 722
001B EB                MOV     A,R3
001C F4                CPL     A
001D 6005              JZ      ?C0095
                                           ; SOURCE LINE # 723
001F AF03              MOV     R7,AR3
0021 110000      E     ACALL   _BT656_InitExtEncoder
                                           ; SOURCE LINE # 724
0024         ?C0095:
0024 22                RET     
             ; FUNCTION _BT656Enc_Update_BT656ExternalEncoder (END)

             ; FUNCTION BT656Enc_Setup_Dec (BEGIN)
                                           ; SOURCE LINE # 748
                                           ; SOURCE LINE # 749
                                           ; SOURCE LINE # 753
0000 110000      R     ACALL   L?0263
;---- Variable 'VideoInputMain' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 754
0003 90000000    E     MOV     DPTR,#InputSubMode
0007 E0                MOVX    A,@DPTR
0008 90000000    R     MOV     DPTR,#VideoInputSub
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 756
000D 90000000    R     MOV     DPTR,#p
0011 110000      R     ACALL   L?0225
                                           ; SOURCE LINE # 760
0014 7B00        R     MOV     R3,#MBYTE ?SC_34
0016 7A00        R     MOV     R2,#HIGH ?SC_34
0018 7900        R     MOV     R1,#LOW ?SC_34
001A 90000000    E     MOV     DPTR,#?_Printf?BYTE+03H
001E EF                MOV     A,R7
001F F0                MOVX    @DPTR,A
0020 90000000    R     MOV     DPTR,#VideoInputSub
0024 E0                MOVX    A,@DPTR
0025 90000000    E     MOV     DPTR,#?_Printf?BYTE+04H
0029 F0                MOVX    @DPTR,A
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 53  

002A 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 764
002D 90000000    R     MOV     DPTR,#VideoInputSub
0031 E0                MOVX    A,@DPTR
0032 75F00B            MOV     B,#0BH
0035 A4                MUL     AB
0036 2400        E     ADD     A,#LOW TW8836_DEC_TABLE
0038 F9                MOV     R1,A
0039 7400        E     MOV     A,#HIGH TW8836_DEC_TABLE
003B 35F0              ADDC    A,B
003D FA                MOV     R2,A
003E 90000000    R     MOV     DPTR,#pVideoTable
0042 7400        E     MOV     A,#MBYTE TW8836_DEC_TABLE
0044 110000      R     ACALL   L?0186
                                           ; SOURCE LINE # 765
0047 90000000    R     MOV     DPTR,#pVideoTable
004B 110000      R     ACALL   L?0189
004E F9                MOV     R1,A
004F 110000      E     ACALL   _PrintCbvsVideoTimeTable
                                           ; SOURCE LINE # 767
0052 90000000    R     MOV     DPTR,#pVideoTable
0056 110000      R     ACALL   L?0189
0059 2408              ADD     A,#08H
005B 110000      R     ACALL   L?0200
005E FF                MOV     R7,A
005F 90000000    R     MOV     DPTR,#pVideoTable
0063 110000      R     ACALL   L?0197
0066 2F                ADD     A,R7
;---- Variable 'hDelay' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 768
0067 90000000    R     MOV     DPTR,#pVideoTable
006B 110000      R     ACALL   L?0222
006E F9                MOV     R1,A
006F 110000      E     ACALL   ?C?ILDPTR
0072 FD                MOV     R5,A
0073 90000000    R     MOV     DPTR,#hActive
0077 E5F0              MOV     A,B
0079 F0                MOVX    @DPTR,A
007A A3                INC     DPTR
007B ED                MOV     A,R5
007C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 769
007D E9                MOV     A,R1
007E 2406              ADD     A,#06H
0080 110000      R     ACALL   L?0200
0083 FD                MOV     R5,A
0084 90000000    R     MOV     DPTR,#vDelay
0088 E4                CLR     A
                                           ; SOURCE LINE # 770
0089 110000      R     ACALL   L?0246
008C 2402              ADD     A,#02H
008E 110000      R     ACALL   L?0203
0091 FD                MOV     R5,A
0092 90000000    R     MOV     DPTR,#vActive
0096 E5F0              MOV     A,B
                                           ; SOURCE LINE # 771
0098 110000      R     ACALL   L?0246
009B 2404              ADD     A,#04H
009D 110000      R     ACALL   L?0200
00A0 90000000    R     MOV     DPTR,#vFreq
00A4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 773
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 54  

00A5 C007              PUSH    AR7
00A7 90000000    R     MOV     DPTR,#hActive
00AB E0                MOVX    A,@DPTR
00AC FC                MOV     R4,A
00AD A3                INC     DPTR
00AE E0                MOVX    A,@DPTR
00AF FD                MOV     R5,A
00B0 A3                INC     DPTR
00B1 E0                MOVX    A,@DPTR
00B2 FA                MOV     R2,A
00B3 A3                INC     DPTR
00B4 E0                MOVX    A,@DPTR
00B5 FB                MOV     R3,A
00B6 A3                INC     DPTR
00B7 E0                MOVX    A,@DPTR
00B8 FF                MOV     R7,A
00B9 A3                INC     DPTR
00BA E0                MOVX    A,@DPTR
00BB 90000000    E     MOV     DPTR,#?_DecoderSetOutputCrop?BYTE+06H
00BF CF                XCH     A,R7
00C0 F0                MOVX    @DPTR,A
00C1 A3                INC     DPTR
00C2 EF                MOV     A,R7
00C3 F0                MOVX    @DPTR,A
00C4 D007              POP     AR7
00C6 110000      E     ACALL   _DecoderSetOutputCrop
                                           ; SOURCE LINE # 777
00C9 110000      R     ACALL   L?0237
00CC FE                MOV     R6,A
00CD 90000000    R     MOV     DPTR,#vActive
00D1 E0                MOVX    A,@DPTR
00D2 FC                MOV     R4,A
00D3 A3                INC     DPTR
00D4 E0                MOVX    A,@DPTR
00D5 FD                MOV     R5,A
00D6 110000      R     ACALL   L?0247
00D9 110000      R     ACALL   L?0185
                                           ; SOURCE LINE # 778
00DC 90000000    R     MOV     DPTR,#p
00E0 110000      R     ACALL   L?0189
00E3 4A                ORL     A,R2
00E4 4B                ORL     A,R3
00E5 702C              JNZ     ?C0096
                                           ; SOURCE LINE # 779
00E7 7B00        R     MOV     R3,#MBYTE ?SC_91
00E9 7A00        R     MOV     R2,#HIGH ?SC_91
00EB 7900        R     MOV     R1,#LOW ?SC_91
00ED 90000000    R     MOV     DPTR,#hActive+01H
00F1 E0                MOVX    A,@DPTR
00F2 25E0              ADD     A,ACC
00F4 FE                MOV     R6,A
00F5 110000      R     ACALL   L?0238
00F8 90000000    E     MOV     DPTR,#?_Printf?BYTE+03H
00FC F0                MOVX    @DPTR,A
00FD A3                INC     DPTR
00FE CE                XCH     A,R6
00FF F0                MOVX    @DPTR,A
0100 90000000    R     MOV     DPTR,#vActive
0104 110000      R     ACALL   L?0209
0107 90000000    R     MOV     DPTR,#vFreq
010B 110000      R     ACALL   L?0248
010E 110000      E     ACALL   _Printf
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 55  

                                           ; SOURCE LINE # 780
0111 8042              SJMP    ?C0167
                                           ; SOURCE LINE # 781
0113         ?C0096:
                                           ; SOURCE LINE # 783
0113 7F21              MOV     R7,#021H
0115 7E00              MOV     R6,#00H
0117 110000      E     ACALL   _E3P_Read
011A 90000000    R     MOV     DPTR,#fScale
011E EF                MOV     A,R7
011F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 784
0120 7B00        R     MOV     R3,#MBYTE BT656SCALE_DEC_OPTION_table
0122 7A00        R     MOV     R2,#HIGH BT656SCALE_DEC_OPTION_table
0124 7900        R     MOV     R1,#LOW BT656SCALE_DEC_OPTION_table
0126 90000000    R     MOV     DPTR,#hActive
012A E0                MOVX    A,@DPTR
012B FC                MOV     R4,A
012C A3                INC     DPTR
012D E0                MOVX    A,@DPTR
012E 90000000    R     MOV     DPTR,#vActive
0132 110000      R     ACALL   L?0216
0135 90000000    R     MOV     DPTR,#vFreq
0139 110000      R     ACALL   L?0250
013C 90000000    R     MOV     DPTR,#fScale
0140 110000      R     ACALL   L?0252
0143 110000      R     ACALL   _FindBT656ScalerTable
0146 90000000    R     MOV     DPTR,#idx_dec
014A EF                MOV     A,R7
014B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 785
014C BFFF0A            CJNE    R7,#0FFH,?C0098
                                           ; SOURCE LINE # 786
014F 110000      R     ACALL   L?0254
0152 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 787
0155         ?C0167:
0155 110000      R     ACALL   L?0241
0158 22                RET     
                                           ; SOURCE LINE # 788
0159         ?C0098:
                                           ; SOURCE LINE # 789
0159 90000000    R     MOV     DPTR,#idx_dec
015D E0                MOVX    A,@DPTR
015E 90000000    R     MOV     DPTR,#pBt656Scaler
                                           ; SOURCE LINE # 790
0162 110000      R     ACALL   L?0183
                                           ; SOURCE LINE # 791
0165 90000000    R     MOV     DPTR,#fScale
0169 E0                MOVX    A,@DPTR
016A 30E013            JNB     ACC.0,?C0099
                                           ; SOURCE LINE # 793
016D 7F01              MOV     R7,#01H
016F 110000      R     ACALL   _BT656Enc_En2DDI
                                           ; SOURCE LINE # 794
0172 7D01              MOV     R5,#01H
0174 E4                CLR     A
0175 FF                MOV     R7,A
0176 110000      R     ACALL   _BT656Enc_2DDI_FieldOffset
                                           ; SOURCE LINE # 795
0179 E4                CLR     A
017A FB                MOV     R3,A
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 56  

017B 1D                DEC     R5
017C 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 796
017E 8004              SJMP    ?C0168
0180         ?C0099:
                                           ; SOURCE LINE # 797
                                           ; SOURCE LINE # 798
0180 E4                CLR     A
0181 FB                MOV     R3,A
0182 FD                MOV     R5,A
0183 FF                MOV     R7,A
0184         ?C0168:
0184 110000      R     ACALL   _BT656_A_Output
                                           ; SOURCE LINE # 799
0187         ?C0100:
                                           ; SOURCE LINE # 800
0187 90000000    R     MOV     DPTR,#pBt656Scaler
018B 110000      R     ACALL   L?0189
018E F9                MOV     R1,A
018F E4                CLR     A
0190 FD                MOV     R5,A
0191 110000      E     ACALL   _OverWriteBt656ScalerTable
                                           ; SOURCE LINE # 806
0194 90000000    R     MOV     DPTR,#vActive
0198 E0                MOVX    A,@DPTR
0199 FE                MOV     R6,A
019A A3                INC     DPTR
019B E0                MOVX    A,@DPTR
019C FF                MOV     R7,A
019D 90000000    R     MOV     DPTR,#pBt656Scaler
01A1 110000      R     ACALL   L?0189
01A4 240A              ADD     A,#0AH
01A6 110000      R     ACALL   L?0200
01A9 FD                MOV     R5,A
01AA 110000      R     ACALL   _BT656Enc_Calc_vActive
01AD 90000000    R     MOV     DPTR,#vActive
01B1 110000      R     ACALL   L?0260
                                           ; SOURCE LINE # 807
01B4 110000      R     ACALL   L?0237
01B7 FE                MOV     R6,A
01B8 110000      R     ACALL   L?0247
01BB 110000      R     ACALL   L?0185
                                           ; SOURCE LINE # 808
01BE 4A                ORL     A,R2
01BF 4B                ORL     A,R3
01C0 600B              JZ      ?C0101
                                           ; SOURCE LINE # 809
01C2 90000000    R     MOV     DPTR,#p
01C6 110000      R     ACALL   L?0189
01C9 F9                MOV     R1,A
01CA 110000      E     ACALL   _PrintCEAVideoTimeTable
01CD         ?C0101:
                                           ; SOURCE LINE # 812
01CD 90000000    R     MOV     DPTR,#hActive
01D1 E0                MOVX    A,@DPTR
01D2 FE                MOV     R6,A
01D3 A3                INC     DPTR
01D4 E0                MOVX    A,@DPTR
01D5 90000000    R     MOV     DPTR,#vActive
01D9 110000      R     ACALL   L?0221
01DC 110000      R     ACALL   _BT656Enc_Update_BT656ExternalEncoder
                                           ; SOURCE LINE # 814
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 57  

01DF 90000000    R     MOV     DPTR,#p
01E3 110000      R     ACALL   L?0189
01E6 F9                MOV     R1,A
                                           ; SOURCE LINE # 815
01E7         ?C0097:
01E7 22                RET     
01E8         L?0247:
01E8 90000000    R     MOV     DPTR,#vFreq
01EC E0                MOVX    A,@DPTR
01ED FB                MOV     R3,A
01EE 110000      E     ACALL   _Find_CEA861_VideoTable
01F1 90000000    R     MOV     DPTR,#p
01F5 22                RET     
             ; FUNCTION BT656Enc_Setup_Dec (END)

             ; FUNCTION BT656Enc_Setup_aRGB_COMP (BEGIN)
                                           ; SOURCE LINE # 855
                                           ; SOURCE LINE # 856
                                           ; SOURCE LINE # 858
;---- Variable 'VideoInputSub' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 859
0000 90000000    R     MOV     DPTR,#p
0004 110000      R     ACALL   L?0225
                                           ; SOURCE LINE # 866
0007 7F22              MOV     R7,#022H
0009 FE                MOV     R6,A
000A 110000      E     ACALL   _E3P_Read
000D 90000000    R     MOV     DPTR,#fScale
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 869
0013 90000000    E     MOV     DPTR,#Input_aRGBMode
0017 E0                MOVX    A,@DPTR
0018 FF                MOV     R7,A
                                           ; SOURCE LINE # 872
0019 75F015            MOV     B,#015H
001C A4                MUL     AB
001D 2400        E     ADD     A,#LOW TW8836_COMP_TABLE
001F F9                MOV     R1,A
0020 7400        E     MOV     A,#HIGH TW8836_COMP_TABLE
0022 35F0              ADDC    A,B
0024 FA                MOV     R2,A
0025 7B00        E     MOV     R3,#MBYTE TW8836_COMP_TABLE
0027 90000000    R     MOV     DPTR,#pVideoTable
002B 110000      R     ACALL   L?0185
                                           ; SOURCE LINE # 873
002E 110000      E     ACALL   _PrintCompVideoTimeTable
                                           ; SOURCE LINE # 874
0031 90000000    R     MOV     DPTR,#pVideoTable
0035 110000      R     ACALL   L?0189
0038 2401              ADD     A,#01H
003A 110000      R     ACALL   L?0203
003D FF                MOV     R7,A
003E E5F0              MOV     A,B
0040 110000      R     ACALL   L?0232
                                           ; SOURCE LINE # 875
0043 110000      R     ACALL   L?0243
0046 2403              ADD     A,#03H
0048 110000      R     ACALL   L?0203
004B FF                MOV     R7,A
004C 90000000    R     MOV     DPTR,#vActive
0050 E5F0              MOV     A,B
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 58  

0052 F0                MOVX    @DPTR,A
0053 A3                INC     DPTR
0054 EF                MOV     A,R7
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 876
0056 90000000    R     MOV     DPTR,#pVideoTable
005A 110000      R     ACALL   L?0197
005D 90000000    R     MOV     DPTR,#vFreq
0061 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 878
0062 110000      R     ACALL   L?0243
0065 2409              ADD     A,#09H
0067 110000      R     ACALL   L?0203
006A 90000000    R     MOV     DPTR,#pVideoTable
006E 110000      R     ACALL   L?0201
0071 2F                ADD     A,R7
0072 FF                MOV     R7,A
0073 E5F0              MOV     A,B
0075 3E                ADDC    A,R6
0076 FE                MOV     R6,A
;---- Variable 'hDelay' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 879
0077 110000      R     ACALL   L?0244
007A 2410              ADD     A,#010H
007C 110000      R     ACALL   L?0200
007F C3                CLR     C
0080 9401              SUBB    A,#01H
0082 FD                MOV     R5,A
0083 E4                CLR     A
0084 9400              SUBB    A,#00H
;---- Variable 'vDelay' assigned to Register 'DPTR' ----
0086 8D82              MOV     DPL,R5
0088 F583              MOV     DPH,A
                                           ; SOURCE LINE # 880
008A 7B00        R     MOV     R3,#MBYTE ?SC_157
008C 7A00        R     MOV     R2,#HIGH ?SC_157
008E 7900        R     MOV     R1,#LOW ?SC_157
0090 AD07              MOV     R5,AR7
0092 AC06              MOV     R4,AR6
0094 AF82              MOV     R7,DPL
0096 90000000    E     MOV     DPTR,#?_PrintMeasAdjValue?BYTE+05H
009A F0                MOVX    @DPTR,A
009B A3                INC     DPTR
009C EF                MOV     A,R7
009D F0                MOVX    @DPTR,A
009E 110000      E     ACALL   _PrintMeasAdjValue
                                           ; SOURCE LINE # 882
00A1 110000      R     ACALL   L?0219
00A4 A3                INC     DPTR
00A5 110000      R     ACALL   L?0265
00A8 110000      R     ACALL   L?0185
                                           ; SOURCE LINE # 883
00AB 90000000    R     MOV     DPTR,#p
00AF 110000      R     ACALL   L?0189
00B2 4A                ORL     A,R2
00B3 4B                ORL     A,R3
00B4 701A              JNZ     ?C0102
                                           ; SOURCE LINE # 884
00B6 90000000    R     MOV     DPTR,#hActive
00BA 110000      R     ACALL   L?0207
00BD 90000000    R     MOV     DPTR,#vActive
00C1 110000      R     ACALL   L?0209
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 59  

00C4 90000000    R     MOV     DPTR,#vFreq
00C8 110000      R     ACALL   L?0248
00CB 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 885
00CE 802D              SJMP    ?C0169
                                           ; SOURCE LINE # 886
00D0         ?C0102:
                                           ; SOURCE LINE # 887
00D0 7B00        R     MOV     R3,#MBYTE BT656SCALE_COMP_OPTION_table
00D2 7A00        R     MOV     R2,#HIGH BT656SCALE_COMP_OPTION_table
00D4 7900        R     MOV     R1,#LOW BT656SCALE_COMP_OPTION_table
00D6 90000000    R     MOV     DPTR,#hActive
00DA 110000      R     ACALL   L?0215
00DD 90000000    R     MOV     DPTR,#vFreq
00E1 110000      R     ACALL   L?0250
00E4 90000000    R     MOV     DPTR,#fScale
00E8 110000      R     ACALL   L?0252
00EB 110000      R     ACALL   _FindBT656ScalerTable
00EE 90000000    R     MOV     DPTR,#idx_comp
00F2 EF                MOV     A,R7
00F3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 888
00F4 BFFF0A            CJNE    R7,#0FFH,?C0104
                                           ; SOURCE LINE # 889
00F7 110000      R     ACALL   L?0254
00FA 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 890
00FD         ?C0169:
00FD 110000      R     ACALL   L?0241
0100 22                RET     
                                           ; SOURCE LINE # 891
0101         ?C0104:
                                           ; SOURCE LINE # 892
0101 90000000    R     MOV     DPTR,#idx_comp
0105 E0                MOVX    A,@DPTR
0106 90000000    R     MOV     DPTR,#pBt656Scaler
                                           ; SOURCE LINE # 893
010A 110000      R     ACALL   L?0183
                                           ; SOURCE LINE # 894
010D 110000      R     ACALL   L?0236
                                           ; SOURCE LINE # 895
0110 110000      R     ACALL   L?0188
0113 F9                MOV     R1,A
0114 E4                CLR     A
0115 110000      E     ACALL   _OverWriteBt656ScalerTable
                                           ; SOURCE LINE # 901
0118 90000000    R     MOV     DPTR,#hActive
011C 110000      R     ACALL   L?0187
011F 2404              ADD     A,#04H
0121 110000      R     ACALL   L?0203
0124 FD                MOV     R5,A
0125 ACF0              MOV     R4,B
0127 110000      R     ACALL   _BT656Enc_Calc_hActive
012A EE                MOV     A,R6
012B 110000      R     ACALL   L?0232
                                           ; SOURCE LINE # 902
012E A3                INC     DPTR
012F 110000      R     ACALL   L?0187
0132 240A              ADD     A,#0AH
0134 110000      R     ACALL   L?0200
0137 FD                MOV     R5,A
0138 110000      R     ACALL   _BT656Enc_Calc_vActive
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 60  

013B 90000000    R     MOV     DPTR,#vActive
013F 110000      R     ACALL   L?0260
                                           ; SOURCE LINE # 904
0142 90000000    R     MOV     DPTR,#hActive
0146 E0                MOVX    A,@DPTR
0147 FE                MOV     R6,A
0148 A3                INC     DPTR
0149 E0                MOVX    A,@DPTR
014A FF                MOV     R7,A
014B 90000000    R     MOV     DPTR,#vFreq
014F 110000      R     ACALL   L?0265
0152 110000      R     ACALL   L?0185
                                           ; SOURCE LINE # 905
0155 4A                ORL     A,R2
0156 4B                ORL     A,R3
0157 600B              JZ      ?C0105
                                           ; SOURCE LINE # 906
0159 90000000    R     MOV     DPTR,#p
015D 110000      R     ACALL   L?0189
0160 F9                MOV     R1,A
0161 110000      E     ACALL   _PrintCEAVideoTimeTable
0164         ?C0105:
                                           ; SOURCE LINE # 909
0164 110000      R     ACALL   L?0219
0167 110000      R     ACALL   _BT656Enc_Update_BT656ExternalEncoder
                                           ; SOURCE LINE # 911
016A 90000000    R     MOV     DPTR,#p
016E 110000      R     ACALL   L?0189
0171 F9                MOV     R1,A
                                           ; SOURCE LINE # 912
0172         ?C0103:
0172 22                RET     
0173         L?0265:
0173 E0                MOVX    A,@DPTR
0174 FB                MOV     R3,A
0175 110000      E     ACALL   _Find_CEA861_VideoTable
0178 90000000    R     MOV     DPTR,#p
017C 22                RET     
             ; FUNCTION BT656Enc_Setup_aRGB_COMP (END)

             ; FUNCTION BT656Enc_Setup_aRGB_PC (BEGIN)
                                           ; SOURCE LINE # 929
                                           ; SOURCE LINE # 930
                                           ; SOURCE LINE # 932
0000 90000000    E     MOV     DPTR,#InputSubMode
0004 E0                MOVX    A,@DPTR
0005 90000000    R     MOV     DPTR,#VideoInputSub
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 934
000A 90000000    R     MOV     DPTR,#p
000E 110000      R     ACALL   L?0226
                                           ; SOURCE LINE # 942
0011 7F23              MOV     R7,#023H
0013 FE                MOV     R6,A
0014 110000      E     ACALL   _E3P_Read
0017 90000000    R     MOV     DPTR,#fScale
001B EF                MOV     A,R7
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 944
001D 90000000    R     MOV     DPTR,#VideoInputSub
0021 E0                MOVX    A,@DPTR
0022 75F019            MOV     B,#019H
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 61  

0025 A4                MUL     AB
0026 2400        E     ADD     A,#LOW TW8836_VESA_TABLE
0028 F9                MOV     R1,A
0029 7400        E     MOV     A,#HIGH TW8836_VESA_TABLE
002B 35F0              ADDC    A,B
002D FA                MOV     R2,A
002E 7B00        E     MOV     R3,#MBYTE TW8836_VESA_TABLE
0030 90000000    R     MOV     DPTR,#pVideoTable
0034 110000      R     ACALL   L?0185
                                           ; SOURCE LINE # 945
0037 110000      E     ACALL   _PrintVesaVideoTimeTable
                                           ; SOURCE LINE # 947
003A 90000000    R     MOV     DPTR,#pVideoTable
003E 110000      R     ACALL   L?0189
0041 2401              ADD     A,#01H
0043 110000      R     ACALL   L?0203
0046 FF                MOV     R7,A
0047 90000000    R     MOV     DPTR,#hActive
004B E5F0              MOV     A,B
                                           ; SOURCE LINE # 948
004D 110000      R     ACALL   L?0233
0050 2403              ADD     A,#03H
0052 110000      R     ACALL   L?0203
0055 FF                MOV     R7,A
0056 90000000    R     MOV     DPTR,#vActive
005A E5F0              MOV     A,B
005C F0                MOVX    @DPTR,A
005D A3                INC     DPTR
005E EF                MOV     A,R7
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 949
0060 90000000    R     MOV     DPTR,#pVideoTable
0064 110000      R     ACALL   L?0198
0067 90000000    R     MOV     DPTR,#vFreq
006B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 951
006C 90000000    R     MOV     DPTR,#pVideoTable
0070 110000      R     ACALL   L?0202
0073 FF                MOV     R7,A
0074 AEF0              MOV     R6,B
0076 110000      R     ACALL   L?0234
0079 240D              ADD     A,#0DH
007B 110000      R     ACALL   L?0203
007E 2F                ADD     A,R7
007F FF                MOV     R7,A
0080 E5F0              MOV     A,B
0082 3E                ADDC    A,R6
0083 90000000    R     MOV     DPTR,#hDelay
                                           ; SOURCE LINE # 952
0087 110000      R     ACALL   L?0233
008A 2413              ADD     A,#013H
008C 110000      R     ACALL   L?0200
008F 2401              ADD     A,#01H
0091 90000000    R     MOV     DPTR,#pVideoTable
0095 110000      R     ACALL   L?0222
0098 2412              ADD     A,#012H
009A 110000      R     ACALL   L?0200
009D 7C00              MOV     R4,#00H
009F 2F                ADD     A,R7
00A0 FF                MOV     R7,A
00A1 EC                MOV     A,R4
00A2 3E                ADDC    A,R6
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 62  

00A3 FE                MOV     R6,A
;---- Variable 'vDelay' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 953
00A4 7B00        R     MOV     R3,#MBYTE ?SC_157
00A6 7A00        R     MOV     R2,#HIGH ?SC_157
00A8 7900        R     MOV     R1,#LOW ?SC_157
00AA 90000000    R     MOV     DPTR,#hDelay
00AE E0                MOVX    A,@DPTR
00AF FC                MOV     R4,A
00B0 A3                INC     DPTR
00B1 E0                MOVX    A,@DPTR
00B2 FD                MOV     R5,A
00B3 90000000    E     MOV     DPTR,#?_PrintMeasAdjValue?BYTE+05H
00B7 EE                MOV     A,R6
00B8 F0                MOVX    @DPTR,A
00B9 A3                INC     DPTR
00BA EF                MOV     A,R7
00BB F0                MOVX    @DPTR,A
00BC 110000      E     ACALL   _PrintMeasAdjValue
                                           ; SOURCE LINE # 955
00BF 90000000    R     MOV     DPTR,#hActive
00C3 110000      R     ACALL   L?0220
00C6 90000000    R     MOV     DPTR,#vFreq
00CA E0                MOVX    A,@DPTR
00CB FB                MOV     R3,A
00CC 110000      E     ACALL   _Find_CEA861_VideoTable
00CF 90000000    R     MOV     DPTR,#p
00D3 110000      R     ACALL   L?0185
                                           ; SOURCE LINE # 956
00D6 90000000    R     MOV     DPTR,#p
00DA 110000      R     ACALL   L?0189
00DD 4A                ORL     A,R2
00DE 4B                ORL     A,R3
00DF 7020              JNZ     ?C0106
                                           ; SOURCE LINE # 957
00E1 7B00        R     MOV     R3,#MBYTE ?SC_91
00E3 7A00        R     MOV     R2,#HIGH ?SC_91
00E5 7900        R     MOV     R1,#LOW ?SC_91
00E7 90000000    R     MOV     DPTR,#hActive
00EB 110000      R     ACALL   L?0208
00EE 90000000    R     MOV     DPTR,#vActive
00F2 110000      R     ACALL   L?0210
00F5 90000000    R     MOV     DPTR,#vFreq
00F9 110000      R     ACALL   L?0249
00FC 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 958
00FF 802D              SJMP    ?C0170
                                           ; SOURCE LINE # 959
0101         ?C0106:
                                           ; SOURCE LINE # 960
0101 7B00        R     MOV     R3,#MBYTE BT656SCALE_PC_OPTION_table
0103 7A00        R     MOV     R2,#HIGH BT656SCALE_PC_OPTION_table
0105 7900        R     MOV     R1,#LOW BT656SCALE_PC_OPTION_table
0107 90000000    R     MOV     DPTR,#hActive
010B 110000      R     ACALL   L?0215
010E 90000000    R     MOV     DPTR,#vFreq
0112 110000      R     ACALL   L?0251
0115 90000000    R     MOV     DPTR,#fScale
0119 110000      R     ACALL   L?0253
011C 110000      R     ACALL   _FindBT656ScalerTable
011F 90000000    R     MOV     DPTR,#idx_pc
0123 EF                MOV     A,R7
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 63  

0124 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 961
0125 BFFF0A            CJNE    R7,#0FFH,?C0108
                                           ; SOURCE LINE # 962
0128 110000      R     ACALL   L?0255
012B 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 963
012E         ?C0170:
012E 110000      R     ACALL   L?0242
0131 22                RET     
                                           ; SOURCE LINE # 964
0132         ?C0108:
                                           ; SOURCE LINE # 965
0132 90000000    R     MOV     DPTR,#idx_pc
0136 110000      R     ACALL   L?0245
0139 90000000    R     MOV     DPTR,#pBt656Scaler
                                           ; SOURCE LINE # 966
013D 110000      R     ACALL   L?0184
                                           ; SOURCE LINE # 967
                                           ; SOURCE LINE # 968
0140 110000      R     ACALL   L?0235
                                           ; SOURCE LINE # 969
0143 90000000    R     MOV     DPTR,#pBt656Scaler
0147 110000      R     ACALL   L?0189
014A F9                MOV     R1,A
014B E4                CLR     A
014C 110000      E     ACALL   _OverWriteBt656ScalerTable
                                           ; SOURCE LINE # 971
014F 90000000    R     MOV     DPTR,#p
0153 110000      R     ACALL   L?0189
0156 F9                MOV     R1,A
                                           ; SOURCE LINE # 972
0157         ?C0107:
0157 22                RET     
             ; FUNCTION BT656Enc_Setup_aRGB_PC (END)

             ; FUNCTION BT656Enc_Setup_DTV (BEGIN)
                                           ; SOURCE LINE # 1005
                                           ; SOURCE LINE # 1006
                                           ; SOURCE LINE # 1009
0000 90000000    R     MOV     DPTR,#p
0004 110000      R     ACALL   L?0226
                                           ; SOURCE LINE # 1014
0007 7F24              MOV     R7,#024H
0009 FE                MOV     R6,A
000A 110000      E     ACALL   _E3P_Read
000D 90000000    R     MOV     DPTR,#fScale
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1021
0013 110000      E     ACALL   Meas_StartMeasure
                                           ; SOURCE LINE # 1022
0016 7F32              MOV     R7,#032H
0018 110000      E     ACALL   _Meas_IsMeasureDone
                                           ; SOURCE LINE # 1023
001B 7B00        R     MOV     R3,#MBYTE hDelay
001D 7A00        R     MOV     R2,#HIGH hDelay
001F 7900        R     MOV     R1,#LOW hDelay
0021 110000      E     ACALL   _MeasGetHActive
0024 EE                MOV     A,R6
0025 110000      R     ACALL   L?0218
                                           ; SOURCE LINE # 1024
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 64  

0028 7B00        R     MOV     R3,#MBYTE vDelay
002A 7A00        R     MOV     R2,#HIGH vDelay
002C 7900        R     MOV     R1,#LOW vDelay
002E 110000      E     ACALL   _MeasGetVActive
0031 90000000    R     MOV     DPTR,#vActive
0035 EE                MOV     A,R6
0036 F0                MOVX    @DPTR,A
0037 A3                INC     DPTR
0038 EF                MOV     A,R7
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1025
003A 110000      E     ACALL   MeasGetVFreq
003D 90000000    R     MOV     DPTR,#vFreq
0041 EF                MOV     A,R7
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1026
0043 7B00        R     MOV     R3,#MBYTE ?SC_166
0045 7A00        R     MOV     R2,#HIGH ?SC_166
0047 7900        R     MOV     R1,#LOW ?SC_166
0049 90000000    R     MOV     DPTR,#hActive
004D 110000      R     ACALL   L?0208
0050 90000000    R     MOV     DPTR,#hDelay
0054 110000      R     ACALL   L?0210
0057 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 1027
005A 7B00        R     MOV     R3,#MBYTE ?SC_201
005C 7A00        R     MOV     R2,#HIGH ?SC_201
005E 7900        R     MOV     R1,#LOW ?SC_201
0060 90000000    R     MOV     DPTR,#vActive
0064 110000      R     ACALL   L?0208
0067 90000000    R     MOV     DPTR,#vDelay
006B 110000      R     ACALL   L?0210
006E 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 1032
0071 110000      R     ACALL   L?0227
0074 110000      R     ACALL   L?0264
0077 A3                INC     DPTR
0078 110000      R     ACALL   L?0266
007B 110000      R     ACALL   L?0185
                                           ; SOURCE LINE # 1033
007E 90000000    R     MOV     DPTR,#p
0082 110000      R     ACALL   L?0189
0085 4A                ORL     A,R2
0086 4B                ORL     A,R3
0087 701B              JNZ     ?C0109
                                           ; SOURCE LINE # 1034
0089 90000000    R     MOV     DPTR,#hActive
008D 110000      R     ACALL   L?0207
0090 90000000    R     MOV     DPTR,#vActive
0094 110000      R     ACALL   L?0210
0097 90000000    R     MOV     DPTR,#vFreq
009B 110000      R     ACALL   L?0249
009E 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 1037
00A1 010000      R     AJMP    ?C0171
                                           ; SOURCE LINE # 1038
00A4         ?C0109:
                                           ; SOURCE LINE # 1039
00A4 90000000    R     MOV     DPTR,#p
00A8 110000      R     ACALL   L?0189
00AB F9                MOV     R1,A
00AC 110000      E     ACALL   _PrintCEAVideoTimeTable
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 65  

                                           ; SOURCE LINE # 1042
00AF 90000000    R     MOV     DPTR,#p
00B3 110000      R     ACALL   L?0189
00B6 2401              ADD     A,#01H
00B8 110000      R     ACALL   L?0203
00BB FF                MOV     R7,A
00BC E5F0              MOV     A,B
00BE 110000      R     ACALL   L?0218
                                           ; SOURCE LINE # 1043
00C1 110000      R     ACALL   L?0224
00C4 2403              ADD     A,#03H
00C6 110000      R     ACALL   L?0203
00C9 FF                MOV     R7,A
00CA 90000000    R     MOV     DPTR,#vActive
00CE E5F0              MOV     A,B
                                           ; SOURCE LINE # 1044
00D0 110000      R     ACALL   L?0223
00D3 240D              ADD     A,#0DH
00D5 110000      R     ACALL   L?0203
00D8 90000000    R     MOV     DPTR,#p
00DC 110000      R     ACALL   L?0201
00DF 2F                ADD     A,R7
00E0 FF                MOV     R7,A
00E1 E5F0              MOV     A,B
00E3 3E                ADDC    A,R6
00E4 90000000    R     MOV     DPTR,#hDelay
                                           ; SOURCE LINE # 1045
00E8 110000      R     ACALL   L?0223
00EB 2413              ADD     A,#013H
00ED 110000      R     ACALL   L?0200
00F0 FF                MOV     R7,A
00F1 110000      R     ACALL   L?0224
00F4 2412              ADD     A,#012H
00F6 110000      R     ACALL   L?0200
00F9 2F                ADD     A,R7
00FA FE                MOV     R6,A
00FB E4                CLR     A
00FC 33                RLC     A
00FD 90000000    R     MOV     DPTR,#vDelay
0101 F0                MOVX    @DPTR,A
0102 A3                INC     DPTR
0103 CE                XCH     A,R6
0104 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1046
0105 7B00        R     MOV     R3,#MBYTE BT656SCALE_DTV_OPTION_table
0107 7A00        R     MOV     R2,#HIGH BT656SCALE_DTV_OPTION_table
0109 7900        R     MOV     R1,#LOW BT656SCALE_DTV_OPTION_table
010B 90000000    R     MOV     DPTR,#hActive
010F E0                MOVX    A,@DPTR
0110 FC                MOV     R4,A
0111 A3                INC     DPTR
0112 E0                MOVX    A,@DPTR
0113 FD                MOV     R5,A
0114 90000000    R     MOV     DPTR,#vActive
0118 110000      R     ACALL   L?0217
011B 90000000    R     MOV     DPTR,#vFreq
011F 110000      R     ACALL   L?0251
0122 90000000    R     MOV     DPTR,#fScale
0126 110000      R     ACALL   L?0253
0129 110000      R     ACALL   _FindBT656ScalerTable
012C 90000000    R     MOV     DPTR,#idx_dtv
0130 EF                MOV     A,R7
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 66  

0131 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1047
0132 BFFF0A            CJNE    R7,#0FFH,?C0111
                                           ; SOURCE LINE # 1048
0135 110000      R     ACALL   L?0255
0138 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 1052
013B         ?C0171:
013B 110000      R     ACALL   L?0242
013E 22                RET     
                                           ; SOURCE LINE # 1053
013F         ?C0111:
                                           ; SOURCE LINE # 1054
013F 90000000    R     MOV     DPTR,#idx_dtv
0143 110000      R     ACALL   L?0245
0146 A3                INC     DPTR
                                           ; SOURCE LINE # 1055
0147 110000      R     ACALL   L?0184
                                           ; SOURCE LINE # 1056
                                           ; SOURCE LINE # 1057
014A 110000      R     ACALL   L?0235
                                           ; SOURCE LINE # 1058
014D 90000000    R     MOV     DPTR,#pBt656Scaler
0151 110000      R     ACALL   L?0189
0154 F9                MOV     R1,A
0155 E4                CLR     A
0156 110000      E     ACALL   _OverWriteBt656ScalerTable
                                           ; SOURCE LINE # 1064
0159 110000      R     ACALL   L?0228
015C 90000000    R     MOV     DPTR,#pBt656Scaler
0160 110000      R     ACALL   L?0189
0163 2404              ADD     A,#04H
0165 110000      R     ACALL   L?0203
0168 FD                MOV     R5,A
0169 ACF0              MOV     R4,B
016B 110000      R     ACALL   _BT656Enc_Calc_hActive
016E 90000000    R     MOV     DPTR,#hActive
0172 EE                MOV     A,R6
0173 F0                MOVX    @DPTR,A
0174 A3                INC     DPTR
0175 EF                MOV     A,R7
0176 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1065
0177 90000000    R     MOV     DPTR,#vActive
017B E0                MOVX    A,@DPTR
017C FE                MOV     R6,A
017D A3                INC     DPTR
017E E0                MOVX    A,@DPTR
017F FF                MOV     R7,A
0180 90000000    R     MOV     DPTR,#pBt656Scaler
0184 110000      R     ACALL   L?0189
0187 240A              ADD     A,#0AH
0189 110000      R     ACALL   L?0200
018C FD                MOV     R5,A
018D 110000      R     ACALL   _BT656Enc_Calc_vActive
0190 90000000    R     MOV     DPTR,#vActive
0194 110000      R     ACALL   L?0261
                                           ; SOURCE LINE # 1067
0197 110000      R     ACALL   L?0227
019A 90000000    R     MOV     DPTR,#vFreq
019E 110000      R     ACALL   L?0266
01A1 110000      R     ACALL   L?0185
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 67  

                                           ; SOURCE LINE # 1068
01A4 4A                ORL     A,R2
01A5 4B                ORL     A,R3
01A6 600B              JZ      ?C0112
                                           ; SOURCE LINE # 1069
01A8 90000000    R     MOV     DPTR,#p
01AC 110000      R     ACALL   L?0189
01AF F9                MOV     R1,A
01B0 110000      E     ACALL   _PrintCEAVideoTimeTable
01B3         ?C0112:
                                           ; SOURCE LINE # 1072
01B3 110000      R     ACALL   L?0228
01B6 110000      R     ACALL   L?0264
01B9 110000      R     ACALL   _BT656Enc_Update_BT656ExternalEncoder
                                           ; SOURCE LINE # 1074
01BC 90000000    R     MOV     DPTR,#p
01C0 110000      R     ACALL   L?0189
01C3 F9                MOV     R1,A
                                           ; SOURCE LINE # 1075
01C4         ?C0110:
01C4 22                RET     
01C5         L?0266:
01C5 E0                MOVX    A,@DPTR
01C6 FB                MOV     R3,A
01C7 110000      E     ACALL   _Find_CEA861_VideoTable
01CA 90000000    R     MOV     DPTR,#p
01CE 22                RET     
             ; FUNCTION BT656Enc_Setup_DTV (END)

             ; FUNCTION BT656Enc_Setup_PANEL (BEGIN)
                                           ; SOURCE LINE # 1078
                                           ; SOURCE LINE # 1079
                                           ; SOURCE LINE # 1080
0000 90000000    R     MOV     DPTR,#p
0004 110000      R     ACALL   L?0226
                                           ; SOURCE LINE # 1082
0007 7F01              MOV     R7,#01H
0009 110000      R     ACALL   _BT656Enc_D_SetRGB
                                           ; SOURCE LINE # 1083
000C 90000000    R     MOV     DPTR,#?_BT656Enc_Crop?BYTE+06H
0010 7401              MOV     A,#01H
0012 F0                MOVX    @DPTR,A
0013 A3                INC     DPTR
0014 74E0              MOV     A,#0E0H
0016 F0                MOVX    @DPTR,A
0017 7B20              MOV     R3,#020H
0019 7A03              MOV     R2,#03H
001B 7D18              MOV     R5,#018H
001D 7C00              MOV     R4,#00H
001F 7F36              MOV     R7,#036H
0021 7E00              MOV     R6,#00H
0023 110000      R     ACALL   _BT656Enc_Crop
                                           ; SOURCE LINE # 1085
                                           ; SOURCE LINE # 1086
                                           ; SOURCE LINE # 1087
                                           ; SOURCE LINE # 1088
                                           ; SOURCE LINE # 1090
                                           ; SOURCE LINE # 1091
                                           ; SOURCE LINE # 1092
                                           ; SOURCE LINE # 1093
                                           ; SOURCE LINE # 1094
                                           ; SOURCE LINE # 1095
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 68  

                                           ; SOURCE LINE # 1096
                                           ; SOURCE LINE # 1097
0026         ?C0115:
                                           ; SOURCE LINE # 1098
                                           ; SOURCE LINE # 1099
0026 7D09              MOV     R5,#09H
0028 7FAA              MOV     R7,#0AAH
002A 7E0A              MOV     R6,#0AH
002C 110000      R     ACALL   _BT656Enc_SetScaler
                                           ; SOURCE LINE # 1100
002F 7D8E              MOV     R5,#08EH
0031 7C06              MOV     R4,#06H
0033 7F28              MOV     R7,#028H
0035 7E00              MOV     R6,#00H
0037 110000      R     ACALL   _BT656Enc_SetOutputActiveLen
                                           ; SOURCE LINE # 1101
003A E4                CLR     A
003B FD                MOV     R5,A
003C 7F08              MOV     R7,#08H
003E 110000      R     ACALL   _BT656Enc_GenLock
                                           ; SOURCE LINE # 1102
0041 7B3C              MOV     R3,#03CH
0043 7DE0              MOV     R5,#0E0H
0045 7C01              MOV     R4,#01H
0047 7F20              MOV     R7,#020H
0049 7E03              MOV     R6,#03H
004B 110000      E     ACALL   _Find_CEA861_VideoTable
004E 90000000    R     MOV     DPTR,#p
0052 110000      R     ACALL   L?0185
                                           ; SOURCE LINE # 1103
0055         ?C0114:
                                           ; SOURCE LINE # 1105
0055 90000000    R     MOV     DPTR,#p
0059 110000      R     ACALL   L?0189
005C F9                MOV     R1,A
                                           ; SOURCE LINE # 1106
005D         ?C0117:
005D 22                RET     
             ; FUNCTION BT656Enc_Setup_PANEL (END)

             ; FUNCTION _BT656Enc_Setup (BEGIN)
                                           ; SOURCE LINE # 1116
0000 90000000    R     MOV     DPTR,#BT656EncSource
0004 EF                MOV     A,R7
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1117
                                           ; SOURCE LINE # 1118
0006 90000000    E     MOV     DPTR,#InputMain
000A E0                MOVX    A,@DPTR
000B 90000000    R     MOV     DPTR,#VideoInputMain
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1119
0010 90000000    E     MOV     DPTR,#InputSubMode
0014 E0                MOVX    A,@DPTR
0015 90000000    R     MOV     DPTR,#VideoInputSub
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1120
001A A3                INC     DPTR
001B 110000      R     ACALL   L?0226
                                           ; SOURCE LINE # 1122
001E EF                MOV     A,R7
001F D3                SETB    C
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 69  

0020 9404              SUBB    A,#04H
0022 4009              JC      ?C0118
                                           ; SOURCE LINE # 1123
0024 E4                CLR     A
0025 FF                MOV     R7,A
0026 110000      R     ACALL   _BT656Enc_Enable
                                           ; SOURCE LINE # 1124
0029 110000      R     ACALL   L?0242
002C 22                RET     
                                           ; SOURCE LINE # 1125
002D         ?C0118:
                                           ; SOURCE LINE # 1126
002D 90000000    E     MOV     DPTR,#G_pBt656Scaler
0031 110000      R     ACALL   L?0226
                                           ; SOURCE LINE # 1129
0034 90000000    R     MOV     DPTR,#BT656EncSource
0038 E0                MOVX    A,@DPTR
0039 FF                MOV     R7,A
003A 110000      R     ACALL   _BT656Enc_Setup_Init
                                           ; SOURCE LINE # 1131
003D 90000000    R     MOV     DPTR,#p
0041 110000      R     ACALL   L?0226
                                           ; SOURCE LINE # 1132
0044 90000000    R     MOV     DPTR,#BT656EncSource
0048 E0                MOVX    A,@DPTR
0049 7005              JNZ     ?C0120
                                           ; SOURCE LINE # 1133
004B 110000      R     ACALL   BT656Enc_Setup_Dec
004E 802F              SJMP    ?C0174
0050         ?C0120:
                                           ; SOURCE LINE # 1135
0050 90000000    R     MOV     DPTR,#BT656EncSource
0054 E0                MOVX    A,@DPTR
0055 B4010F            CJNE    A,#01H,?C0122
                                           ; SOURCE LINE # 1136
0058 A3                INC     DPTR
0059 E0                MOVX    A,@DPTR
005A B40205            CJNE    A,#02H,?C0123
                                           ; SOURCE LINE # 1137
005D 110000      R     ACALL   BT656Enc_Setup_aRGB_COMP
0060 8003              SJMP    ?C0172
0062         ?C0123:
                                           ; SOURCE LINE # 1139
0062 110000      R     ACALL   BT656Enc_Setup_aRGB_PC
0065         ?C0172:
0065         ?C0173:
                                           ; SOURCE LINE # 1140
0065 8018              SJMP    ?C0174
0067         ?C0122:
                                           ; SOURCE LINE # 1142
0067 90000000    R     MOV     DPTR,#BT656EncSource
006B E0                MOVX    A,@DPTR
006C B40205            CJNE    A,#02H,?C0126
                                           ; SOURCE LINE # 1143
006F 110000      R     ACALL   BT656Enc_Setup_DTV
0072 8017              SJMP    ?C0121
0074         ?C0126:
                                           ; SOURCE LINE # 1144
0074 90000000    R     MOV     DPTR,#BT656EncSource
0078 E0                MOVX    A,@DPTR
0079 B4030C            CJNE    A,#03H,?C0128
                                           ; SOURCE LINE # 1145
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 70  

007C 110000      R     ACALL   BT656Enc_Setup_DTV
007F         ?C0174:
007F 90000000    R     MOV     DPTR,#p
0083 110000      R     ACALL   L?0185
0086 8003              SJMP    ?C0121
0088         ?C0128:
                                           ; SOURCE LINE # 1147
0088 110000      R     ACALL   BT656Enc_Setup_PANEL
008B         ?C0121:
                                           ; SOURCE LINE # 1151
008B 90000000    R     MOV     DPTR,#p
008F 110000      R     ACALL   L?0189
0092 F9                MOV     R1,A
                                           ; SOURCE LINE # 1152
0093         ?C0119:
0093 22                RET     
             ; FUNCTION _BT656Enc_Setup (END)

             ; FUNCTION _BT656Dec_LoopBack (BEGIN)
                                           ; SOURCE LINE # 1310
;---- Variable 'BT656EncSource' assigned to Register 'R7' ----
;---- Variable '_p' assigned to Register 'R1/R2/R3' ----
                                           ; SOURCE LINE # 1311
                                           ; SOURCE LINE # 1314
0000 90000000    E     MOV     DPTR,#InputMain
0004 E0                MOVX    A,@DPTR
0005 90000000    R     MOV     DPTR,#VideoInputMain
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1315
000A 90000000    E     MOV     DPTR,#InputSubMode
000E E0                MOVX    A,@DPTR
000F 90000000    R     MOV     DPTR,#VideoInputSub
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1316
0014 A3                INC     DPTR
0015 110000      R     ACALL   L?0185
                                           ; SOURCE LINE # 1317
0018 90000000    E     MOV     DPTR,#G_pBt656Scaler
001C E0                MOVX    A,@DPTR
001D F9                MOV     R1,A
001E A3                INC     DPTR
001F E0                MOVX    A,@DPTR
0020 FA                MOV     R2,A
0021 A3                INC     DPTR
0022 E0                MOVX    A,@DPTR
0023 90000000    R     MOV     DPTR,#pBt656Scaler
0027 C9                XCH     A,R1
0028 110000      R     ACALL   L?0186
                                           ; SOURCE LINE # 1326
002B EF                MOV     A,R7
002C C3                CLR     C
002D 9404              SUBB    A,#04H
002F 4003              JC      ?C0130
                                           ; SOURCE LINE # 1327
0031 7F01              MOV     R7,#01H
0033 22                RET     
0034         ?C0130:
                                           ; SOURCE LINE # 1328
0034 EF                MOV     A,R7
0035 B40203            CJNE    A,#02H,?C0132
                                           ; SOURCE LINE # 1329
0038 7F01              MOV     R7,#01H
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 71  

003A 22                RET     
003B         ?C0132:
                                           ; SOURCE LINE # 1331
003B 90000000    R     MOV     DPTR,#pBt656Scaler
003F 110000      R     ACALL   L?0189
0042 241F              ADD     A,#01FH
0044 110000      R     ACALL   L?0200
0047 30E608            JNB     ACC.6,?C0133
                                           ; SOURCE LINE # 1332
004A E4                CLR     A
004B 90000000    R     MOV     DPTR,#dtv_format
004F F0                MOVX    @DPTR,A
0050 8007              SJMP    ?C0134
0052         ?C0133:
                                           ; SOURCE LINE # 1334
0052 90000000    R     MOV     DPTR,#dtv_format
0056 7401              MOV     A,#01H
0058 F0                MOVX    @DPTR,A
0059         ?C0134:
                                           ; SOURCE LINE # 1335
0059 E4                CLR     A
005A 90000000    R     MOV     DPTR,#input_format
005E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1336
;---- Variable 'dtv_route' assigned to Register 'R7' ----
005F 7F02              MOV     R7,#02H
                                           ; SOURCE LINE # 1337
0061 90000000    R     MOV     DPTR,#dtv_format
0065 E0                MOVX    A,@DPTR
0066 FD                MOV     R5,A
0067 110000      E     ACALL   _DtvSetRouteFormat
                                           ; SOURCE LINE # 1338
006A 7F01              MOV     R7,#01H
006C 110000      E     ACALL   _DtvSetReverseBusOrder
                                           ; SOURCE LINE # 1340
006F 90000000    R     MOV     DPTR,#pBt656Scaler
0073 110000      R     ACALL   L?0189
0076 241F              ADD     A,#01FH
0078 110000      R     ACALL   L?0200
007B 5410              ANL     A,#010H
007D FF                MOV     R7,A
007E 110000      E     ACALL   _Bt656DecSetClkPol
                                           ; SOURCE LINE # 1345
0081 E4                CLR     A
0082 FF                MOV     R7,A
0083 110000      E     ACALL   _Interrupt_enableVideoDetect
                                           ; SOURCE LINE # 1349
0086 90000000    R     MOV     DPTR,#input_format
008A E0                MOVX    A,@DPTR
008B FD                MOV     R5,A
008C 7F02              MOV     R7,#02H
008E 110000      E     ACALL   _InputSetSource
                                           ; SOURCE LINE # 1350
0091 110000      R     ACALL   L?0259
0094 110000      R     ACALL   L?0182
0097 E0                MOVX    A,@DPTR
0098 4404              ORL     A,#04H
009A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1352
009B 90000000    R     MOV     DPTR,#pBt656Scaler
009F 110000      R     ACALL   L?0189
00A2 F9                MOV     R1,A
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 72  

00A3 7D02              MOV     R5,#02H
00A5 110000      E     ACALL   _OverWriteBt656ScalerTable
                                           ; SOURCE LINE # 1358
00A8 7F01              MOV     R7,#01H
00AA 110000      E     ACALL   _Interrupt_enableVideoDetect
                                           ; SOURCE LINE # 1361
00AD 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 1362
00AF         ?C0131:
00AF 22                RET     
             ; FUNCTION _BT656Dec_LoopBack (END)

             ; FUNCTION _ChangeBT656__MAIN (BEGIN)
                                           ; SOURCE LINE # 1379
0000 90000000    R     MOV     DPTR,#mode
0004 EF                MOV     A,R7
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1380
                                           ; SOURCE LINE # 1385
0006 7B00        R     MOV     R3,#MBYTE ?SC_236
0008 7A00        R     MOV     R2,#HIGH ?SC_236
000A 7900        R     MOV     R1,#LOW ?SC_236
000C 90000000    E     MOV     DPTR,#?_Printf?BYTE+03H
0010 F0                MOVX    @DPTR,A
0011 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 1386
0014 90000000    R     MOV     DPTR,#mode
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A 110000      R     ACALL   _BT656_CheckLoopbackCombination
001D 90000000    R     MOV     DPTR,#bt656_src_mode
0021 EF                MOV     A,R7
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1387
0023 F4                CPL     A
0024 6032              JZ      ?C0136
                                           ; SOURCE LINE # 1390
0026         ?C0135:
                                           ; SOURCE LINE # 1393
0026 90000000    R     MOV     DPTR,#bt656_src_mode
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C 110000      R     ACALL   _BT656Enc_Setup
002F 90000000    R     MOV     DPTR,#p
0033 110000      R     ACALL   L?0185
                                           ; SOURCE LINE # 1394
0036 90000000    R     MOV     DPTR,#p
003A 110000      R     ACALL   L?0189
003D 4A                ORL     A,R2
003E 4B                ORL     A,R3
003F 6017              JZ      ?C0136
0041         ?C0137:
                                           ; SOURCE LINE # 1399
0041 90000000    R     MOV     DPTR,#bt656_src_mode
0045 E0                MOVX    A,@DPTR
0046 FF                MOV     R7,A
0047 90000000    R     MOV     DPTR,#p
004B 110000      R     ACALL   L?0189
004E F9                MOV     R1,A
004F 110000      R     ACALL   _BT656Dec_LoopBack
0052 90000000    R     MOV     DPTR,#ret
0056 EF                MOV     A,R7
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 73  

0057 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1401
0058         ?C0136:
0058 22                RET     
             ; FUNCTION _ChangeBT656__MAIN (END)

             ; FUNCTION BT656Enc_Info (BEGIN)
                                           ; SOURCE LINE # 1403
                                           ; SOURCE LINE # 1404
                                           ; SOURCE LINE # 1407
0000 110000      R     ACALL   L?0257
0003 110000      R     ACALL   L?0182
0006 E0                MOVX    A,@DPTR
0007 90000000    R     MOV     DPTR,#bTemp
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1408
000C E0                MOVX    A,@DPTR
000D 30E308            JNB     ACC.3,?C0138
0010 7B00        R     MOV     R3,#MBYTE ?SC_272
0012 7A00        R     MOV     R2,#HIGH ?SC_272
0014 7900        R     MOV     R1,#LOW ?SC_272
0016 8006              SJMP    ?C0139
0018         ?C0138:
0018 7B00        R     MOV     R3,#MBYTE ?SC_275
001A 7A00        R     MOV     R2,#HIGH ?SC_275
001C 7900        R     MOV     R1,#LOW ?SC_275
001E         ?C0139:
001E 90000000    E     MOV     DPTR,#?_Printf?BYTE+03H
0022 110000      R     ACALL   L?0185
0025 7B00        R     MOV     R3,#MBYTE ?SC_261
0027 7A00        R     MOV     R2,#HIGH ?SC_261
0029 7900        R     MOV     R1,#LOW ?SC_261
002B 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 1409
                                           ; SOURCE LINE # 1410
002E         ?C0140:
                                           ; SOURCE LINE # 1412
002E 110000      R     ACALL   L?0181
0031 E0                MOVX    A,@DPTR
0032 5407              ANL     A,#07H
0034 90000000    R     MOV     DPTR,#bTemp
0038 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1413
0039 E0                MOVX    A,@DPTR
003A 14                DEC     A
003B 6015              JZ      ?C0144
003D 14                DEC     A
003E 601A              JZ      ?C0145
0040 14                DEC     A
0041 601F              JZ      ?C0146
0043 14                DEC     A
0044 6024              JZ      ?C0147
0046 2404              ADD     A,#04H
0048 702B              JNZ     ?C0148
                                           ; SOURCE LINE # 1414
004A         ?C0143:
                                           ; SOURCE LINE # 1415
004A 7B00        R     MOV     R3,#MBYTE ?SC_279
004C 7A00        R     MOV     R2,#HIGH ?SC_279
004E 7900        R     MOV     R1,#LOW ?SC_279
                                           ; SOURCE LINE # 1416
0050 801E              SJMP    ?C0178
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 74  

                                           ; SOURCE LINE # 1417
0052         ?C0144:
                                           ; SOURCE LINE # 1418
0052 7B00        R     MOV     R3,#MBYTE ?SC_289
0054 7A00        R     MOV     R2,#HIGH ?SC_289
0056 7900        R     MOV     R1,#LOW ?SC_289
0058         ?C0175:
                                           ; SOURCE LINE # 1419
0058 8016              SJMP    ?C0178
                                           ; SOURCE LINE # 1420
005A         ?C0145:
                                           ; SOURCE LINE # 1421
005A 7B00        R     MOV     R3,#MBYTE ?SC_296
005C 7A00        R     MOV     R2,#HIGH ?SC_296
005E 7900        R     MOV     R1,#LOW ?SC_296
0060         ?C0176:
                                           ; SOURCE LINE # 1422
0060 800E              SJMP    ?C0178
                                           ; SOURCE LINE # 1423
0062         ?C0146:
                                           ; SOURCE LINE # 1424
0062 7B00        R     MOV     R3,#MBYTE ?SC_302
0064 7A00        R     MOV     R2,#HIGH ?SC_302
0066 7900        R     MOV     R1,#LOW ?SC_302
0068         ?C0177:
                                           ; SOURCE LINE # 1425
0068 8006              SJMP    ?C0178
                                           ; SOURCE LINE # 1426
006A         ?C0147:
                                           ; SOURCE LINE # 1427
006A 7B00        R     MOV     R3,#MBYTE ?SC_312
006C 7A00        R     MOV     R2,#HIGH ?SC_312
006E 7900        R     MOV     R1,#LOW ?SC_312
0070         ?C0178:
0070 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 1428
0073 803F              SJMP    ?C0142
                                           ; SOURCE LINE # 1429
0075         ?C0148:
                                           ; SOURCE LINE # 1430
0075 7B00        R     MOV     R3,#MBYTE ?SC_320
0077 7A00        R     MOV     R2,#HIGH ?SC_320
0079 7900        R     MOV     R1,#LOW ?SC_320
007B 90000000    R     MOV     DPTR,#bTemp
007F E0                MOVX    A,@DPTR
0080 90000000    E     MOV     DPTR,#?_Printf?BYTE+03H
0084 F0                MOVX    @DPTR,A
0085 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 1432
0088 110000      E     ACALL   ScalerReadHDEReg
                                           ; SOURCE LINE # 1433
008B 110000      E     ACALL   ScalerReadLineBufferDelay
                                           ; SOURCE LINE # 1434
008E E4                CLR     A
008F FD                MOV     R5,A
0090 7F01              MOV     R7,#01H
0092 110000      R     ACALL   _BT656_A_SelectCLKO
                                           ; SOURCE LINE # 1435
0095 E4                CLR     A
0096 FF                MOV     R7,A
0097 110000      R     ACALL   _BT656_A_SetLLCLK_Pol
                                           ; SOURCE LINE # 1436
C51 COMPILER V9.56.0.0   BT656                                                             07/18/2018 10:44:38 PAGE 75  

009A 7F01              MOV     R7,#01H
009C 110000      R     ACALL   _BT656Enc_En2DDI
                                           ; SOURCE LINE # 1438
009F E4                CLR     A
00A0 90000000    R     MOV     DPTR,#?_BT656_A_SelectOutput?BYTE+03H
00A4 F0                MOVX    @DPTR,A
00A5 FB                MOV     R3,A
00A6 7F01              MOV     R7,#01H
00A8 110000      R     ACALL   _BT656_A_SelectOutput
                                           ; SOURCE LINE # 1439
00AB 110000      E     ACALL   InputGetHLen
                                           ; SOURCE LINE # 1440
00AE 110000      E     ACALL   InputGetVLen
                                           ; SOURCE LINE # 1442
00B1 7F02              MOV     R7,#02H
00B3 22                RET     
                                           ; SOURCE LINE # 1443
00B4         ?C0142:
                                           ; SOURCE LINE # 1444
00B4 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 1445
00B6         ?C0141:
00B6 22                RET     
             ; FUNCTION BT656Enc_Info (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   4483    ----
   CONSTANT SIZE    =    334    ----
   XDATA SIZE       =    272     136
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  3 WARNING(S),  0 ERROR(S)
