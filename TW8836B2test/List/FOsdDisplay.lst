C51 COMPILER V9.56.0.0   FOSDDISPLAY                                                       07/18/2018 10:44:48 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE FOSDDISPLAY
OBJECT MODULE PLACED IN .\Output\FOsdDisplay.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE source36\FOsdDisplay.c LARGE OMF2 ROM(D512K) OPTIMIZE(9,SPEED) REGFILE(.
                    -\Output\TW8836B_EVB11.ORC) BROWSE INCDIR(SiI-SW;SiI-SW\HAL;SiI-SW\DEBUG;SiI-SW\CEC;.\Source36\LIB) DEFINE(EVB_11,nullFn=
                    -//) DEBUG CODE PRINT(.\List\FOsdDisplay.lst) TABS(2) OBJECT(.\Output\FOsdDisplay.obj)

line level    source

   1          /**
   2           * @file
   3           * FOsdDisplay.c 
   4           * @author Brian Kang
   5           * @version 1.0
   6           * @section LICENSE
   7           *  Copyright (C) 2011~2012 Intersil Corporation
   8           * @section DESCRIPTION
   9           *  FontOSD display routines
  10          */
  11          /*
  12          Disclaimer: THIS INFORMATION IS PROVIDED 'AS-IS' FOR EVALUATION PURPOSES ONLY.  
  13          INTERSIL CORPORATION AND ITS SUBSIDIARIES ('INTERSIL') DISCLAIM ALL WARRANTIES, 
  14          INCLUDING WITHOUT LIMITATION FITNESS FOR A PARTICULAR PURPOSE AND MERCHANTABILITY.  
  15          Intersil provides evaluation platforms to help our customers to develop products. 
  16          However, factors beyond Intersil's control could significantly affect Intersil 
  17          product performance. 
  18          It remains the customers' responsibility to verify the actual system performance.
  19          */
  20          #include "Config.h"
  21          #include "typedefs.h"
  22          #include "TW8836.h"
  23          
  24          #include "Global.h"
  25          #include "cpu.h"
  26          #include "printf.h"
  27          #include "util.h"
  28          #include "Debug.h"
  29          
  30          #include "i2c.h"
  31          
  32          #include "main.h"
  33          #include "EEPROM.h"
  34          
  35          #include "SOsd.h"
  36          #include "FOsd.h"
  37          
  38          #include "FOsdMenu.h"
  39          #include "FOsdDisplay.h"
  40          //#include "RegMap.h"
  41          
  42          #include "InputCtrl.h"
  43          #include "decoder.h"
  44          #include "FOsdTable.h"
  45          #include "FOsdString.h"
  46          
  47          #ifndef SUPPORT_FOSD_MENU
  48          //==========================================
  49          //----------------------------
  50          //Trick for Bank Code Segment
  51          //----------------------------
  52          CODE BYTE DUMMY_FOSD_DISPINFO_CODE;
  53          void Dummy_FosdDispInfo_func(void)
C51 COMPILER V9.56.0.0   FOSDDISPLAY                                                       07/18/2018 10:44:48 PAGE 2   

  54          {
  55   1        BYTE temp;
  56   1        temp = DUMMY_FOSD_DISPINFO_CODE;
  57   1      }
  58          //==========================================
  59          //==========================================
  60          #else //..SUPPORT_FOSD_MENU
              //==========================================
                    WORD  OSDLastKeyInTime;   // in ms
              
              //----------------------------------------------------------------------
              
              DATA  WORD  OSDDisplayedTime;   //in ms
              DATA  BYTE  DisplayedOSD = 0;
              //      DATA BYTE  DisplayedOSD = 0;
              //extern  IDATA struct BarInfo BarInfo;
              //extern  bit   TVChManual;
              extern  bit DisplayInputHold;
              
              extern  BYTE  DummyChannel;
              #ifdef SUPPORT_COMPONENT
              extern  BYTE  ComponentMode;
              #endif
              
              
              
              
              CODE BYTE COMPONENT_STR[][15] = {
                  "YPbPr 480i", // 0
                  "YPbPr 576i", // 1
                  "YPbPr 480p", // 2
                  "YPbPr 576p", // 3
                  "YPbPr 1080i",  // 4
                  "YPbPr 720p", // 5
                "YPbPr 1080p",  
                  "YPbPr NONE",
              };
              
              
              //================================================================
              //          Display information
              //          Display Win0 :Intersil - from 0 ~ 3bit color, size 44
              //          Display Win1 :Techwell - from 0x84 ~ 3bit color, size 15
              //================================================================
              #if 0
              //code WORD LOGO_COLOR_8[16] = {
              //     0xFFFF,0x0020,0xDEDB,0xA534,0x6B6D,0xC826,0x4A49,0xDCD5,
              //     0xFFFF,0xC806,0xC98C,0xCB31,0xFE79,0xFCD9,0xCCD4,0xE71C
              //};
              //-------------------------------------------------------------------
              // Display/Clear FOSD LOGO
              //-------------------------------------------------------------------
              void DisplayLogo(void)
              {
                BYTE i;
              
                InitFOsdMenuWindow(Init_Osd_DisplayLogo);
                #ifdef ADD_ANALOGPANEL
                if(IsAnalogOn())
                  InitFOsdMenuWindow(Init_Osd_DisplayLogo_A);
                #endif
                
C51 COMPILER V9.56.0.0   FOSDDISPLAY                                                       07/18/2018 10:44:48 PAGE 3   

                InitFontRamByNum(FONT_NUM_LOGO, 0); //FOsdDownloadFont(2);
              
                FOsdSetPaletteColorArray(0, LOGO_COLOR_8, 16, 1);
              
                dPrintf("\n\rDisplayLogo-Current MCU SPI Clock select : [0x4E0]=0x%02bx, [0x4E1]=0x%02bx", ReadTW88(REG4E
             -0), ReadTW88(REG4E1));
              
                WriteTW88(REG304, ReadTW88(REG304)&0xFE); // OSD RAM Auto Access Enable
                WriteTW88(REG304, (ReadTW88(REG304)&0xF3)); // Normal
              
                for ( i=0; i<70; i++ ) {
                  WriteTW88(REG306, i );
                  WriteTW88(REG307, i*3 );
                  WriteTW88(REG308, (i / 42)*2 );
                }
              
                WriteTW88(REG30B, 0 );            // 2bit multi color start = 0
                WriteTW88(REG_FOSD_MADD3, 0 );        // 3bit multi color start = 0
                WriteTW88(REG_FOSD_MADD4, 0xff );     // 4bit multi color start = 0
              
                FOsdWinEnable(TECHWELLOGO_OSDWIN,TRUE);
                FOsdWinEnable(TECHWELLOGO_OSDWIN+1,FALSE);
                FOsdWinEnable(TECHWELLOGO_OSDWIN+2,TRUE);
              }
              void ClearLogo(void)
              {
                BYTE i, j;
              
                //=============================== Fade OUT ======================================
                for ( i=0; i<9; i++ ) {
                  delay1ms(30);
                  for ( j=0; j<16; j++ ) {
                    WriteTW88(REG_FOSD_ALPHA_SEL, j );
                    WriteTW88(FOSDWinBase[TECHWELLOGO_OSDWIN]  +1, i );
                    WriteTW88(FOSDWinBase[TECHWELLOGO_OSDWIN+2]+1, i );
                  }
                }
                //============ Disable window and recover Trans value ============================
                FOsdOnOff(OFF, 1);  //with vdelay 1
                FOsdWinEnable(TECHWELLOGO_OSDWIN,FALSE);
                FOsdWinEnable(TECHWELLOGO_OSDWIN+2,FALSE);
                //assume page3
                for ( j=0; j<16; j++ ) {
                  WriteTW88(REG_FOSD_ALPHA_SEL, j );
                  WriteTW88(FOSDWinBase[TECHWELLOGO_OSDWIN]  +1, 0 );
                  WriteTW88(FOSDWinBase[TECHWELLOGO_OSDWIN+2]+1, 0 );
                }
              }
              #endif
              
              //-------------------------------------------------------------------
              // Display/Clear FOSD Info
              //-------------------------------------------------------------------
              //desc
              //  set DisplayedOSD global flag.
              void SetDisplayedOSD( BYTE newd )
              {
                DisplayedOSD |= newd;
              }
              
              void ClearOSDInfo(void)
              {
C51 COMPILER V9.56.0.0   FOSDDISPLAY                                                       07/18/2018 10:44:48 PAGE 4   

                BYTE dt;
              
                dt = DisplayedOSD; 
                #ifdef DEBUG_OSD
                dPrintf("\r\nClearOSDInfo: DisplayedOSD:%2x",(WORD) DisplayedOSD);
                #endif
              
                if( (dt & FOSD_TVVOL) || ( dt & FOSD_TVCHN) ) ClearTVInfo();
                if( dt & FOSD_MUTE )              ClearMuteInfo();
                if( dt & FOSD_INPUTINFO )           FOsdClearInput();
                if( dt & FOSD_MENU )              FOsdMenuClose();
                if( dt & FOSD_PCINFO )              ClearPCInfo();
                
              }
              
              //-------------------------------------------------------------------
              // Display/Clear DisplayInput
              //-------------------------------------------------------------------
              void FOsdDisplayInput(void)
              {
                BYTE  inputs, len1, len2,i, SystemAddr;
                #ifdef SUPPORT_COMPONENT
                BYTE CODE   *Str;
                #endif
              
                SystemAddr=INPUTINFO1_ADDR;
              
                if( (DisplayedOSD & FOSD_INPUTINFO ) && DisplayInputHold ) return;
              
                ClearOSDInfo();
              
              
                inputs = InputMain;
              
                #ifdef DEBUG_OSD
                dPrintf("\r\n++(DisplayInput) : %d", (WORD)inputs);
                #endif
              
                #if 0
                #if defined( SUPPORT_PC ) || defined( SUPPORT_BT656_LOOP )
                if( inputs==PC || inputs==DTV )
                  len2 = TWstrlen( GetPCInputSourceName() );
                else
                #endif
                #endif
              
                #ifdef SUPPORT_COMPONENT
                if( inputs==INPUT_COMP ){
                  i = ReadTW88(REG1C1) & 7;
                  Str = COMPONENT_STR[i];
                  len2 = TWstrlen(Str);
                }
                else
                #endif
                  len2 = TWstrlen( struct_VInputStd[GetVInputStdInx()].Name );
              
              
                for (i=1; ;i++)
                  if( struct_InputSelection[i].Id==inputs )  break;
              
                len1 = TWstrlen(struct_InputSelection[i].Name);
              
C51 COMPILER V9.56.0.0   FOSDDISPLAY                                                       07/18/2018 10:44:48 PAGE 5   

                InitFOsdMenuWindow(Init_Osd_DisplayInput);
                #ifdef ADD_ANALOGPANEL
                if(IsAnalogOn())
                  InitFOsdMenuWindow(Init_Osd_DisplayInput_A);
                #endif
                FOsdRamMemset(INPUTINFO_ADDR, 0x020, DEFAULT_COLOR, 51 ); // Total 42 Char. 
                WriteStringToAddr(INPUTINFO_ADDR, struct_InputSelection[i].Name, len1); 
              
                #if 0
                #if defined( SUPPORT_PC ) || defined( SUPPORT_BT656_LOOP )
                if( inputs==PC || inputs==DTV )
                  WriteStringToAddr(SystemAddr, GetPCInputSourceName(), len2); 
                else
                #endif
                #endif
                #ifdef SUPPORT_COMPONENT
                if( inputs==INPUT_COMP ){
                  //i = DecoderIsNoInput();
                  //Printf("\r\n Display Info==> Component Noinutcheck: %d ", (WORD)i );
                  //if( DecoderIsNoInput() == 0 ) WriteStringToAddr(SystemAddr, Str, len2); 
                  WriteStringToAddr(SystemAddr, Str, len2); 
                }
                else
                #endif
                {
                  if( DecoderIsNoInput() == 0 ) 
                  WriteStringToAddr(SystemAddr, struct_VInputStd[GetVInputStdInx()].Name, len2); 
                }
              
                FOsdWinEnable(OSD_Win_Num(INPUTINFO_OSDWIN),TRUE);
                FOsdWinEnable(OSD_Win_Num(INPUTINFO_OSDWIN+1),TRUE);
                FOsdOnOff(ON, 1); //with vdelay 1
              
                DisplayedOSD |= FOSD_INPUTINFO;
                OSDDisplayedTime = GetTime_ms();  
              }
              
              BYTE FOsdClearInput(void)
              {
                //FOsdOnOff(OFF, 1);  //with vdelay 1
                FOsdWinEnable(INPUTINFO_OSDWIN,   FALSE);
                FOsdWinEnable(INPUTINFO_OSDWIN+1,   FALSE);
              
                DisplayedOSD &= (~(FOSD_INPUTINFO));
                //#ifdef DEBUG_OSD
                //dPrintf("\r\n++(ClearInput)");
                //#endif
              
                return 1;
              //  ClearBlending();
              }
              
              //-------------------------------------------------------------------
              // DisplayVol / ClearTVInfo
              //-------------------------------------------------------------------
              
              void DisplayVol(void)
              {
                BYTE CODE *Str ;
                BYTE len;
              
                //#ifdef DEBUG_OSD
C51 COMPILER V9.56.0.0   FOSDDISPLAY                                                       07/18/2018 10:44:48 PAGE 6   

                //dPuts("\r\n++(DisplayVol)");
                //#endif
                
                if(( DisplayedOSD & FOSD_TVVOL ) == 0 ) {
                  ClearOSDInfo();
                  FOsdDefaultLUT();
                  delay1ms(100);
                  
                  InitFOsdMenuWindow(Init_Osd_BarWindow);
                
                  FOsdRamMemset(FOSDMENU_BARADDR,    0x020, BG_COLOR_CYAN | FG_COLOR_WHITE, 25 );   // Total 25*2 Char. 
                  FOsdRamMemset(FOSDMENU_BARADDR+25, 0x020, BG_COLOR_WHITE | FG_COLOR_CYAN, 25 );
                
                  Str = StrVolume[OSDLang];
                  len=TWstrlen(Str);
                  WriteStringToAddr(FOSDMENU_BARADDR, Str, len);  
                
                  FOsdWinEnable(FOSDMENU_BARWIN,TRUE);
                  FOsdOnOff(ON, 1); //with vdelay 1
                }
                DisplayVolumebar(AudioVol);
              
                DisplayedOSD |= FOSD_TVVOL;
                OSDDisplayedTime = GetTime_ms();
              }
              BYTE ClearTVInfo(void)
              {
                
                if( DisplayedOSD & FOSD_TVVOL ) {
                  FOsdWinEnable(FOSDMENU_BARWIN, FALSE);
                  DisplayedOSD &= (~(FOSD_TVVOL));
                }
                else  {
                  FOsdWinEnable(TVINFO_OSDWIN, FALSE);
                  DisplayedOSD &= (~(FOSD_TVCHN));
                }
                return 1;
              }
              
              //-------------------------------------------------------------------
              // Display/Clear Mute Info
              //-------------------------------------------------------------------
              void DisplayMuteInfo(void)
              {
                BYTE CODE *Str ;
                BYTE len;
              
                ClearOSDInfo();
                InitFOsdMenuWindow(Init_Osd_DisplayMuteInfo);
              
                Str = MuteOnStr[OSDLang];
                len = TWstrlen(Str);
                WriteStringToAddr(MUTEINFO_ADDR, Str, len);  
                FOsdRamMemsetAttr(MUTEINFO_ADDR, BACK_COLOR|FG_COLOR_RED, len );   
              
                FOsdWinEnable(TVINFO_OSDWIN,TRUE);
                FOsdOnOff(ON, 1); //with vdelay 1
                DisplayedOSD |= FOSD_MUTE;
              }
              void ClearMuteInfo(void)
              {
                FOsdWinEnable(TVINFO_OSDWIN,FALSE);
C51 COMPILER V9.56.0.0   FOSDDISPLAY                                                       07/18/2018 10:44:48 PAGE 7   

                DisplayedOSD &= (~(FOSD_MUTE));
              }
              
              
              //----------------------------------
              // Display/Clear PCInfo
              //
              //  win: PCINFO_OSDWIN
              //----------------------------------
              void DisplayPCInfo(BYTE CODE *ptr)
              {
                WORD xstart, ystart;
                BYTE len;
              
                //#ifdef DEBUG_PC
                //Printf("\r\n==== DisplayPCInfo (%s) ====", ptr);
                //#endif
              
                len  = TWstrlen(ptr);
              
                xstart = ( PANEL_H - len*PCINFO_ZOOM*FONT_DEF_WIDTH ) / 2;
                ystart =  PANEL_V / 3;
                
                InitFOsdMenuWindow(Init_Osd_DisplayPCInfo);
                FOsdWinScreenXY(PCINFO_OSDWIN, xstart,ystart);
                FOsdWinSetW(PCINFO_OSDWIN, len);
              
                FOsdRamMemset(PCMEASUREINFO_ADDR,0x020, FG_COLOR_RED, len);  
              
                WriteStringToAddr(PCMEASUREINFO_ADDR, (BYTE CODE *)ptr, len);
                FOsdWinEnable(PCINFO_OSDWIN,TRUE);
                FOsdOnOff(ON, 1); //with vdelay 1
                
                DisplayedOSD |=FOSD_PCINFO;
              
              }
              void ClearPCInfo(void)
              {
                if( !(DisplayedOSD & FOSD_PCINFO) )   
                  return;
              
                DisplayedOSD &= (~(FOSD_PCINFO));
                FOsdWinEnable(PCINFO_OSDWIN,FALSE);
                //dPuts("\r\n== ClearPCInfo ==");
              }
              
              /*
              //----------------------------------
              // AutoAdjust
              //----------------------------------
              
              void DisplayAutoAdjust(void)
              {
                InitFOsdMenuWindow(Init_Osd_BarWindow);
                FOsdRamMemset(FOSDMENU_BARADDR, 0x020, BG_COLOR_CYAN | FG_COLOR_WHITE, 50 );  // Total 25*2 Char.  
                WriteStringToAddr(FOSDMENU_BARADDR, AutoAdjustInfo, 25);
              
                FOsdWinEnable(FOSDMENU_BARWIN,TRUE);
                FOsdOnOff(ON, 1); //with vdelay 1
              }
              void ClearAutoAdjust(void)
              {
C51 COMPILER V9.56.0.0   FOSDDISPLAY                                                       07/18/2018 10:44:48 PAGE 8   

                FOsdWinEnable(FOSDMENU_BARWIN,FALSE);
              }
              */
              
              
              BYTE CheckAndClearFOsd(void)
              {
                WORD  ctime,  stime, diff;
                BYTE  dt;
                BYTE  Result=0;
              
                dt = DisplayedOSD;
                if ( dt & ( FOSD_MENU | FOSD_INPUTINFO | FOSD_TVCHN | FOSD_TVVOL  ) ) {
              
                  if( dt & FOSD_MENU )  { 
                    stime = OSDLastKeyInTime; 
                    diff =  20 * 1000; //GetOSDDuration()
                  }
                  else { 
                    stime = OSDDisplayedTime; 
                    diff = 2 * 1000;  
                  }
                
                  ctime = GetTime_ms();     
              
                  if( DiffTime_ms( stime, ctime ) >= diff ) {
              
                    #ifdef DEBUG_OSD
                    if( !(dt & FOSD_MENU) ) {
                      dPrintf("\r\n(CheckAndClearOSD)DisplayedOSD:0x%x, ", (WORD)dt);
                      dPrintf("starttime:%d, currtime:%d", stime, ctime);
                    }
                    #endif
              
                    //if( dt & LOGO )     ClearLogo();
                    if( !DisplayInputHold )
                      if( dt & FOSD_INPUTINFO ) 
                        Result = FOsdClearInput();
                    if( dt & FOSD_TVVOL )   
                      Result = ClearTVInfo();
              
                    if( dt & FOSD_MENU ) {      
                      Result = 1;
                      FOsdMenuClose();  
                    }
              
                    if( Result == 1){
                      if( DisplayInputHold ) 
                        FOsdDisplayInput();
                      else {
                        if( IsAudioMuteOn() ) 
                          DisplayMuteInfo();
                      }
                    }
                    return 1;
                  }
                }
              
                return 0;
              }
              
              //==========================================
C51 COMPILER V9.56.0.0   FOSDDISPLAY                                                       07/18/2018 10:44:48 PAGE 9   

              #endif //.. SUPPORT_FOSD_MENU
 488          //==========================================
 489          
C51 COMPILER V9.56.0.0   FOSDDISPLAY                                                       07/18/2018 10:44:48 PAGE 10  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Dummy_FosdDispInfo_func (BEGIN)
                                           ; SOURCE LINE # 53
                                           ; SOURCE LINE # 54
                                           ; SOURCE LINE # 56
0000 90000000    R     MOV     DPTR,#DUMMY_FOSD_DISPINFO_CODE
0004 E4                CLR     A
0005 93                MOVC    A,@A+DPTR
0006 90000000    R     MOV     DPTR,#temp
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 57
000B 22                RET     
             ; FUNCTION Dummy_FosdDispInfo_func (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     12    ----
   CONSTANT SIZE    =      1    ----
   XDATA SIZE       =   ----       1
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
