C51 COMPILER V9.56.0.0   UTIL                                                              07/18/2018 10:44:33 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE UTIL
OBJECT MODULE PLACED IN .\Output\Util.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE source36\Util.c LARGE OMF2 ROM(D512K) OPTIMIZE(9,SPEED) REGFILE(.\Output
                    -\TW8836B_EVB11.ORC) BROWSE INCDIR(SiI-SW;SiI-SW\HAL;SiI-SW\DEBUG;SiI-SW\CEC;.\Source36\LIB) DEFINE(EVB_11,nullFn=//) DEB
                    -UG CODE PRINT(.\List\Util.lst) TABS(2) OBJECT(.\Output\Util.obj)

line level    source

   1          /**
   2           * @file
   3           * util.c 
   4           * @author Harry Han
   5           * @author YoungHwan Bae
   6           * @author Brian Kang
   7           * @version 1.0
   8           * @section LICENSE
   9           *  Copyright (C) 2011~2012 Intersil Corporation
  10           * @section DESCRIPTION
  11           *  utility library
  12           *
  13          */
  14          /*
  15          Disclaimer: THIS INFORMATION IS PROVIDED 'AS-IS' FOR EVALUATION PURPOSES ONLY.  
  16          INTERSIL CORPORATION AND ITS SUBSIDIARIES ('INTERSIL') DISCLAIM ALL WARRANTIES, 
  17          INCLUDING WITHOUT LIMITATION FITNESS FOR A PARTICULAR PURPOSE AND MERCHANTABILITY.  
  18          Intersil provides evaluation platforms to help our customers to develop products. 
  19          However, factors beyond Intersil's control could significantly affect Intersil 
  20          product performance. 
  21          It remains the customers' responsibility to verify the actual system performance.
  22          */
  23          #include "Config.h"
  24          #include "reg.h"
  25          #include "typedefs.h"
  26          #include "TW8836.h"
  27          #include <stdarg.h>
  28          #include <intrins.h>
  29          
  30          #include "cpu.h"
  31          #include "printf.h"
  32          #include "Global.h"
  33          #include "Util.h"
  34          #include "i2c.h"
  35          #include "inputctrl.h"
  36          
  37          //=============================================================================
  38          //    Convert ASCII to Binery                                             
  39          //    Convert ASCII to ASCII HEX
  40          //    Convert ASCII to Integer                                    
  41          //=============================================================================
  42          
  43          //-----------------------------------------------------------------------------
  44          /**
  45          * return binary value of 'asc' or null for error
  46          */
  47          BYTE Asc1Bin(BYTE asc)
  48          {
  49   1        if(asc>='0' && asc <='9') return (asc - '0');
  50   1        if(asc>='a' && asc <='f') return (asc - 'a' + 0x0a);
  51   1        if(asc>='A' && asc <='F') return (asc - 'A' + 0x0a);
  52   1        return 0;
  53   1      }
C51 COMPILER V9.56.0.0   UTIL                                                              07/18/2018 10:44:33 PAGE 2   

  54          //-----------------------------------------------------------------------------
  55          /**
  56          * Convert *str ASCII to HEX (8 digits max)
  57          */
  58          DWORD a2h(BYTE *str)
  59          {
  60   1        DWORD num=0;
  61   1        BYTE i;
  62   1      
  63   1        for(i=0; i<8; i++, str++) {
  64   2          if( *str=='\0' || *str==' ' ) break;
  65   2          num = num*0x10 + Asc1Bin(*str);
  66   2        }
  67   1        return num;
  68   1      }
  69          //-----------------------------------------------------------------------------
  70          /**
  71          * Convert *str ASCII to integer(DOUBLE size)
  72          */
  73          DWORD a2i(BYTE *str)
  74          {
  75   1        DWORD num=0;
  76   1        BYTE i;
  77   1      
  78   1        for(i=0; ; i++, str++) {
  79   2          if( *str=='\0' || *str==' ' ) break;
  80   2          num = num*10 + *str - '0';
  81   2        }
  82   1        return num;
  83   1      }
  84          
  85          //=============================================================================
  86          //    Convert to Upper Case
  87          //    String Compare
  88          //    Integer to Ascii
  89          //    Return string length
  90          //    Copy String
  91          //    Cat String
  92          //=============================================================================
  93          
  94          //-----------------------------------------------------------------------------
  95          /** 
  96          * return uppercase ASCII character of 'ch'
  97          */
  98          BYTE toupper(BYTE ch)
  99          {
 100   1        if( ch>='a' && ch<='z' )
 101   1          return (ch - 'a' + 'A');
 102   1      
 103   1        return ch;
 104   1      }
 105          
 106          //-----------------------------------------------------------------------------
 107          /**
 108          * Compare *ptr1 to *ptr2. Return 1 for no compare, return 0 for compare 
 109          *
 110          * *ptr1 and *ptr2 modified
 111          * Case insensitve
 112          * Length of *ptr1 and *ptr2 must be equal to compare
 113          */
 114          int stricmp(BYTE *ptr1, BYTE *ptr2)
 115          {
C51 COMPILER V9.56.0.0   UTIL                                                              07/18/2018 10:44:33 PAGE 3   

 116   1      #if 0
                int i, ret;
                
                for(i=0; *ptr1; i++) {
                  ret = toupper(*ptr1++) - toupper(*ptr2++);
                  if( ret ) return ret;
                }
                ret = toupper(*ptr1) - toupper(*ptr2);
                if( ret ) return ret;
              
                return 0;
              #else
 128   1        while (1) {
 129   2          if( toupper(*ptr1) != toupper(*ptr2) ) return 1;
 130   2          if (*ptr1 == 0) return 0;
 131   2          ptr1++;
 132   2          ptr2++;
 133   2        }
 134   1      #endif
 135   1      }
 136          
 137          
 138          //-----------------------------------------------------------------------------
 139          /**
 140          * itoa
 141          *
 142          * max 10000
 143          * @param n    input number
 144          * @ buff *buff  output buffer. 
 145          * I do not check buff size. buff[] have to be big enough. 
 146          * @return
 147          * - 0 something wrong
 148          * - n length of ascii character
 149          */
 150          BYTE TWitoa(short n, BYTE *buff)
 151          {
 152   1        BYTE next,start;
 153   1        WORD k, q;
 154   1      
 155   1        next = 0;
 156   1        start = 0;
 157   1      
 158   1        if(n < 0) {
 159   2          buff[next++] = '-';
 160   2          n = 0 - n;
 161   2          start++;
 162   2        }
 163   1        if(n == 0)
 164   1          buff[next++] = '0';
 165   1        else 
 166   1        {
 167   2          k = 10000;     //max
 168   2          while( k > 0) 
 169   2          {
 170   3            if(n==0)  q = 0;
 171   3            else    q = n / k;
 172   3            if((next!=start) || (q > 0)) { 
 173   4              buff[next++] = '0' + q;
 174   4            }
 175   3            n -= (q*k);
 176   3            k = k / 10;
 177   3          } 
C51 COMPILER V9.56.0.0   UTIL                                                              07/18/2018 10:44:33 PAGE 4   

 178   2        }
 179   1        buff[next] = 0x00;  //make string.      
 180   1        return next;
 181   1      }
 182          
 183          //-----------------------------------------------------------------------------
 184          /**
 185          * convert hex byte to ASCII string
 186          */
 187          BYTE TWhtos(BYTE n, BYTE *buff)
 188          {
 189   1        BYTE nibble;
 190   1        nibble = n >> 4;
 191   1        if(nibble <= 9) buff[0] = '0'+nibble;
 192   1        else            buff[0] = 'A'+nibble - 0x0A;
 193   1        nibble = n & 0x0F;
 194   1        if(nibble <= 9) buff[1] = '0'+nibble;
 195   1        else            buff[1] = 'A'+nibble - 0x0A;
 196   1        buff[2] = 0;
 197   1        if(n >> 4)
 198   1          return 1;
 199   1        return 0;   
 200   1      }
 201          
 202          #ifdef SUPPORT_FOSD_MENU
              //-----------------------------------------------------------------------------
              /**
              * convert uchar to string ASCII string. use radix
              */
              BYTE TWutoa(WORD value, BYTE *str, BYTE radix)
              {
                BYTE cnt, *str1;
                WORD i, div;
              
                #ifdef DEBUG_OSD
              //  dPrintf("\r\n++(utoa):0x%x__", value);
                #endif
              
                str1 = str;
                cnt=0;
                if( radix==10) {
                  for(div = 10000; div>=10; div/=10) {
                    i = value/div;
                    if( i ) {
                      *str++ = i+'0';
                      cnt++;
                    }
                    else if( cnt )    // 100, 200, 20,,,,
                      *str++ = '0';
              
                    value%=div;
                  }
                  *str++ = value+'0';
                  *str = 0;
                }
                else if( radix==16) {
                  for(div = 0x1000; div>=0x10; div/=0x10) {
                    i = value/div;
                    if( i ) {
                      if( i>=0xa ) 
                        *str++ = i-0xa+'A';
                      else
C51 COMPILER V9.56.0.0   UTIL                                                              07/18/2018 10:44:33 PAGE 5   

                        *str++ = i+'0';
                      value%=div;
                    }
                  }
                  if( value>=0xa ) 
                    *str++ = value-0xa+'A';
                  else
                    *str++ = value+'0';
                  *str = 0;
                }
                return 1;
              }
              #endif
 253          
 254          #if 0
              //-----------------------------------------------------------------------------
              /**
              * strlen
              */
              BYTE strlen( BYTE *str )
              {
                BYTE i=0;
              
                while( *str++ ) i++;
                return i;
              }
              #endif
 267          #if 0
              //-----------------------------------------------------------------------------
              /**
              * return legth of *s string
              */
              BYTE TWstrlen(BYTE *s)
              {
                BYTE *p = s;
                while(*p) p++;
                return p - s;
              }
              #endif
 279          //-----------------------------------------------------------------------------
 280          /**
 281          * return legth of *s string. check an escape code.
 282          *
 283          * support an ESCAPE char( >= 0xF0)
 284          */
 285          BYTE TWstrlen(BYTE *s)
 286          {
 287   1        BYTE *p = s;
 288   1        BYTE escape=0;
 289   1        while(1) {
 290   2          if(*p >= 0xF0) {  //??Escape
 291   3            escape = 1;
 292   3            if(*p==0xFF/*FONT_ROM*/)
 293   3              escape = 0;
 294   3            p++;
 295   3            continue;
 296   3          }
 297   2          if(escape) {
 298   3            p++;
 299   3          }
 300   2          else {
 301   3            if(*p==0)
C51 COMPILER V9.56.0.0   UTIL                                                              07/18/2018 10:44:33 PAGE 6   

 302   3              break;
 303   3            p++;
 304   3          }
 305   2        }
 306   1        return p - s;
 307   1      }
 308          
 309          //-----------------------------------------------------------------------------
 310          /**
 311          * copy *s into *d. 
 312          *
 313          * note, *d must have same or more buffer reserved as *s
 314          */
 315          BYTE *TWstrcpy(BYTE *d,BYTE *s)
 316          {
 317   1        BYTE *dd = d;
 318   1        while(*s)
 319   1          *dd++ = *s++;
 320   1        *dd = 0;
 321   1      
 322   1        return d;
 323   1      }
 324          
 325          //-----------------------------------------------------------------------------
 326          /**
 327          * append *s onto *d. note, *d must have buffer reserved for *s
 328          */
 329          BYTE *TWstrcat(BYTE *d,BYTE *s)
 330          {
 331   1        BYTE *dd = d;
 332   1        while(*dd)
 333   1          dd++;
 334   1        while(*s)
 335   1          *dd++ = *s++;
 336   1        *dd = 0;
 337   1      
 338   1        return d;
 339   1      }
 340          //-----------------------------------------------------------------------------
 341          /**
 342          * is a digit character
 343          */
 344          BYTE IsDigit(BYTE c)
 345          {
 346   1        if(c >= 0x30 && c <= 0x39)
 347   1          return 1;
 348   1        return 0;
 349   1      }
 350          
 351          #if defined(SUPPORT_TOUCH)
 352          //-----------------------------------------------------------------------------
 353          /**
 354          * ABS for short 
 355          */
 356          short TWabsShort(short value)
 357          {
 358   1        if(value >0)  return value;
 359   1        return -value;
 360   1      }
 361          #endif
 362          
 363          
C51 COMPILER V9.56.0.0   UTIL                                                              07/18/2018 10:44:33 PAGE 7   

 364          
 365          //=============================================================================
 366          //memcmp                                             
 367          //memcpy
 368          //memset                                   
 369          //=============================================================================
 370          
 371          #if 1
 372          /**
 373          * memcmp
 374          *
 375          * same: int memcmp( const void * ptr1, const void * ptr2, size_t num )
 376          */
 377          int TWmemcmp( const void * ptr1, const void * ptr2, WORD num )
 378          {
 379   1        BYTE *d,*s;
 380   1        WORD i;
 381   1        d = ptr1;
 382   1        s = ptr2;
 383   1        for(i=1; i <= num; i++) {
 384   2          if(d > s) return i;
 385   2          if(d < s)   return -i;
 386   2          d++;
 387   2          s++;
 388   2        }
 389   1        return 0;
 390   1      
 391   1      }
 392          #endif
 393          
 394          #if 0 
              /**
              * memcpy
              */
              void *TWmemcpy( void * destination, const void * source, WORD num )
              {
                BYTE *d,*s;
                d = destination;
                s = source;
                while(num--) {
                  *d++ = *s++;
                }
                return destination;
              
              }
              #endif
 410          
 411          /**
 412          * memset
 413          */
 414          void *TWmemset( void * ptr, int value, WORD num )
 415          {
 416   1        BYTE *d;
 417   1        d = ptr;
 418   1        while(num--) {
 419   2          *d++ = (BYTE)value;
 420   2        }
 421   1        return ptr;
 422   1      }
 423          
 424          
 425          #if 0
C51 COMPILER V9.56.0.0   UTIL                                                              07/18/2018 10:44:33 PAGE 8   

              //-----------------------------------------------------------------------------
              /**
              * check a register value
              *
              * only for debug
              */
              void CheckRegister(BYTE page, BYTE reg, WORD line)
              {
                WORD addr;
                addr = page;
                addr <<= 8;
                addr |= reg;
                Printf("CHECK:%d 0x03x:%bx\n",line, addr, ReadTW88(addr));
              }
              #endif
 441          
 442          /**
 443          * initialize registers with text array
 444          *
 445          * format
 446          *   0xII, 0x00  //start. If II is not 00, use WriteI2CByte.  
 447          *   0xff, 0xXX  //assign page
 448          *   0xRR, 0xDD  //register & data
 449          *   ...
 450          *   0xff, 0xXX  //assign page
 451          *   0xRR, 0xDD  //register & data
 452          *   ...
 453          *   0xff, 0xff  //end
 454          */
 455          #if 0
              void I2CDeviceInitialize(BYTE *RegSet, BYTE delay)
              {
                int cnt=0;
                BYTE addr, index, val;
                WORD w_page=0;
                BYTE speed;
              
                addr = *RegSet;
              #ifdef DEBUG_TW88
                dPrintf("I2C address : %02bx", addr);
              #endif
                cnt = *(RegSet+1);  //ignore cnt
                RegSet+=2;
              
              //  if(addr)
              //    speed = SetI2CSpeed(I2C_SPEED_SLOW);
              
              
                while (( RegSet[0] != 0xFF ) || ( RegSet[1]!= 0xFF )) {     // 0xff, 0xff is end of data
                  index = *RegSet;
                  val = *(RegSet+1);
              
                  if ( addr == 0 ) {
                    if(index==0xFF) {
                      w_page=val << 8;
                    }
                    else {
                      WriteTW88(w_page+index, val);
                    }
                  }
                  else
                    WriteI2CByte(addr, index, val);
C51 COMPILER V9.56.0.0   UTIL                                                              07/18/2018 10:44:33 PAGE 9   

              
                  if(delay)
                    delay1ms(delay);
              #ifdef DEBUG_TW88
                  dPrintf("    addr=%02x  index=%03x   val=%02x\n", (WORD)addr, w_page | index, (WORD)val );
              #endif
                  RegSet+=2;
                }
              
              //  if(addr)
              //    SetI2CSpeed(speed);
                                               
              }
              #endif
 502          
 503          #if 0
              void WriteBlockTW88(WORD reg, BYTE *Buff, BYTE len)
              {
                BYTE i;
                for(i=0; i < len; i++)
                  WriteTW88(reg+i, Buff[i]);
              }
              #endif
 511          
 512          #if defined(SUPPORT_FAST_INPUT_TOGGLE)
              void WriteTW88Buff2Reg(struct REG_BUFF_INFO_s *p, BYTE *buff)
              {
                while(p->reg) {
                  WriteTW88(p->reg, buff[p->idx]);
                  p++; 
                }
              }
              void ReadTW88Reg2Buff(struct REG_BUFF_INFO_s *p, BYTE *buff)
              {
                while(p->reg) {
                  buff[p->idx] = ReadTW88(p->reg);
                  p++; 
                }
              }
              #endif
 528          #if 0
              WORD MemSwap(WORD value)
              {
                WORD rval;
                ((BYTE *)&rval)[0] = ((BYTE *)&value)[1];
                ((BYTE *)&rval)[1] = ((BYTE *)&value)[0];
              }
              BYTE ABS(BYTE x, BYTE y)
              {
                if(x > y) return x - y;
                else        return y - x;
              }
              
              #endif
C51 COMPILER V9.56.0.0   UTIL                                                              07/18/2018 10:44:33 PAGE 10  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com004E (BEGIN)
0000         L?0079:
0000         L?0080:
0000 90000000    R     MOV     DPTR,#buff
0004         L?0081:
0004 E0                MOVX    A,@DPTR
0005 FB                MOV     R3,A
0006         L?0082:
0006 A3                INC     DPTR
0007 E0                MOVX    A,@DPTR
0008 FA                MOV     R2,A
0009 A3                INC     DPTR
000A E0                MOVX    A,@DPTR
000B F9                MOV     R1,A
000C 22                RET     
000D         L?0083:
000D         L?0084:
000D EB                MOV     A,R3
000E         L?0085:
000E F0                MOVX    @DPTR,A
000F A3                INC     DPTR
0010 EA                MOV     A,R2
0011 F0                MOVX    @DPTR,A
0012 A3                INC     DPTR
0013 E9                MOV     A,R1
0014 F0                MOVX    @DPTR,A
0015 22                RET     
0016         L?0086:
0016 FF                MOV     R7,A
0017         L?0087:
0017 E0                MOVX    A,@DPTR
0018 FB                MOV     R3,A
0019         L?0088:
0019 A3                INC     DPTR
001A E4                CLR     A
001B 75F001            MOV     B,#01H
001E 110000      E     ACALL   ?C?ILDIX
0021 A9F0              MOV     R1,B
0023 FA                MOV     R2,A
0024 22                RET     
0025         L?0089:
0025         L?0090:
0025 E4                CLR     A
0026 75F001            MOV     B,#01H
0029 010000      E     AJMP    ?C?IILDX
002C         L?0091:
002C         L?0092:
002C E0                MOVX    A,@DPTR
002D FC                MOV     R4,A
002E A3                INC     DPTR
002F E0                MOVX    A,@DPTR
0030 FD                MOV     R5,A
0031 A3                INC     DPTR
0032 E0                MOVX    A,@DPTR
0033 FE                MOV     R6,A
0034 A3                INC     DPTR
0035 E0                MOVX    A,@DPTR
0036 FF                MOV     R7,A
0037 22                RET     
C51 COMPILER V9.56.0.0   UTIL                                                              07/18/2018 10:44:33 PAGE 11  

0038         L?0093:
0038 E0                MOVX    A,@DPTR
0039 F8                MOV     R0,A
003A A3                INC     DPTR
003B         L?0094:
003B E0                MOVX    A,@DPTR
003C F9                MOV     R1,A
003D A3                INC     DPTR
003E E0                MOVX    A,@DPTR
003F FA                MOV     R2,A
0040 A3                INC     DPTR
0041 E0                MOVX    A,@DPTR
0042 22                RET     
0043         L?0095:
0043 A3                INC     DPTR
0044 E0                MOVX    A,@DPTR
0045 FF                MOV     R7,A
0046 04                INC     A
0047 F0                MOVX    @DPTR,A
0048         L?0096:
0048 E9                MOV     A,R1
0049 2F                ADD     A,R7
004A F9                MOV     R1,A
004B E4                CLR     A
004C 3A                ADDC    A,R2
004D FA                MOV     R2,A
004E 22                RET     
004F         L?0097:
004F 90000000    R     MOV     DPTR,#buff
0053 E0                MOVX    A,@DPTR
0054 FB                MOV     R3,A
0055 A3                INC     DPTR
0056 E0                MOVX    A,@DPTR
0057 FA                MOV     R2,A
0058 A3                INC     DPTR
0059 E0                MOVX    A,@DPTR
005A 22                RET     
005B         L?0098:
005B E4                CLR     A
005C FF                MOV     R7,A
005D FE                MOV     R6,A
005E FD                MOV     R5,A
005F FC                MOV     R4,A
0060 A3                INC     DPTR
0061 110000      E     ACALL   ?C?LSTXDATA
0064 E4                CLR     A
0065 22                RET     
0066         L?0099:
0066 FF                MOV     R7,A
0067 EE                MOV     A,R6
0068 3A                ADDC    A,R2
0069 FE                MOV     R6,A
006A ED                MOV     A,R5
006B 39                ADDC    A,R1
006C FD                MOV     R5,A
006D EC                MOV     A,R4
006E 38                ADDC    A,R0
006F FC                MOV     R4,A
0070 22                RET     
0071         L?0100:
0071 90000000    R     MOV     DPTR,#n
0075 E0                MOVX    A,@DPTR
C51 COMPILER V9.56.0.0   UTIL                                                              07/18/2018 10:44:33 PAGE 12  

0076 FE                MOV     R6,A
0077 A3                INC     DPTR
0078 E0                MOVX    A,@DPTR
0079 FF                MOV     R7,A
007A 22                RET     
007B         L?0101:
007B         L?0102:
007B C3                CLR     C
007C E4                CLR     A
007D 9F                SUBB    A,R7
007E FF                MOV     R7,A
007F E4                CLR     A
0080 9E                SUBB    A,R6
0081 22                RET     
             ; FUNCTION Com004E (END)

             ; FUNCTION _Asc1Bin (BEGIN)
                                           ; SOURCE LINE # 47
;---- Variable 'asc' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 48
                                           ; SOURCE LINE # 49
0000 EF                MOV     A,R7
0001 C3                CLR     C
0002 9430              SUBB    A,#030H
0004 400C              JC      ?C0001
0006 EF                MOV     A,R7
0007 D3                SETB    C
0008 9439              SUBB    A,#039H
000A 5006              JNC     ?C0001
000C C3                CLR     C
000D EF                MOV     A,R7
000E 9430              SUBB    A,#030H
0010 FF                MOV     R7,A
0011 22                RET     
0012         ?C0001:
                                           ; SOURCE LINE # 50
0012 EF                MOV     A,R7
0013 C3                CLR     C
0014 9461              SUBB    A,#061H
0016 400C              JC      ?C0003
0018 EF                MOV     A,R7
0019 D3                SETB    C
001A 9466              SUBB    A,#066H
001C 5006              JNC     ?C0003
001E C3                CLR     C
001F EF                MOV     A,R7
0020 9461              SUBB    A,#061H
0022 8010              SJMP    ?C0073
0024         ?C0003:
                                           ; SOURCE LINE # 51
0024 EF                MOV     A,R7
0025 C3                CLR     C
0026 9441              SUBB    A,#041H
0028 400E              JC      ?C0004
002A EF                MOV     A,R7
002B D3                SETB    C
002C 9446              SUBB    A,#046H
002E 5008              JNC     ?C0004
0030 C3                CLR     C
0031 EF                MOV     A,R7
0032 9441              SUBB    A,#041H
0034         ?C0073:
C51 COMPILER V9.56.0.0   UTIL                                                              07/18/2018 10:44:33 PAGE 13  

0034 240A              ADD     A,#0AH
0036 FF                MOV     R7,A
0037 22                RET     
0038         ?C0004:
                                           ; SOURCE LINE # 52
0038 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 53
003A         ?C0002:
003A 22                RET     
             ; FUNCTION _Asc1Bin (END)

             ; FUNCTION _a2h (BEGIN)
                                           ; SOURCE LINE # 58
0000 90000000    R     MOV     DPTR,#str
0004 110000      R     ACALL   L?0083
                                           ; SOURCE LINE # 59
                                           ; SOURCE LINE # 60
                                           ; SOURCE LINE # 63
0007 110000      R     ACALL   L?0098
000A 90000000    R     MOV     DPTR,#i
000E F0                MOVX    @DPTR,A
000F         ?C0005:
000F 90000000    R     MOV     DPTR,#i
0013 E0                MOVX    A,@DPTR
0014 C3                CLR     C
0015 9408              SUBB    A,#08H
0017 5054              JNC     ?C0006
                                           ; SOURCE LINE # 64
0019 90000000    R     MOV     DPTR,#str
001D 110000      R     ACALL   L?0081
0020 110000      E     ACALL   ?C?CLDPTR
0023 6048              JZ      ?C0006
0025 6420              XRL     A,#020H
0027 6044              JZ      ?C0006
0029         ?C0008:
                                           ; SOURCE LINE # 65
0029 110000      E     ACALL   ?C?CLDPTR
002C FF                MOV     R7,A
002D 110000      R     ACALL   _Asc1Bin
0030 E4                CLR     A
0031 FC                MOV     R4,A
0032 FD                MOV     R5,A
0033 FE                MOV     R6,A
0034 C004              PUSH    AR4
0036 C005              PUSH    AR5
0038 C006              PUSH    AR6
003A C007              PUSH    AR7
003C 7F10              MOV     R7,#010H
003E 90000000    R     MOV     DPTR,#num
0042 110000      R     ACALL   L?0093
0045 FB                MOV     R3,A
0046 110000      E     ACALL   ?C?LMUL
0049 D003              POP     AR3
004B D002              POP     AR2
004D D001              POP     AR1
004F D000              POP     AR0
0051 EF                MOV     A,R7
0052 2B                ADD     A,R3
0053 110000      R     ACALL   L?0099
0056 90000000    R     MOV     DPTR,#num
005A 110000      E     ACALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 66
C51 COMPILER V9.56.0.0   UTIL                                                              07/18/2018 10:44:33 PAGE 14  

005D 90000000    R     MOV     DPTR,#i
0061 E0                MOVX    A,@DPTR
0062 04                INC     A
0063 F0                MOVX    @DPTR,A
0064 90000000    R     MOV     DPTR,#str+01H
0068 110000      R     ACALL   L?0089
006B 80A2              SJMP    ?C0005
006D         ?C0006:
                                           ; SOURCE LINE # 67
006D 90000000    R     MOV     DPTR,#num
0071 110000      R     ACALL   L?0091
                                           ; SOURCE LINE # 68
0074         ?C0010:
0074 22                RET     
             ; FUNCTION _a2h (END)

             ; FUNCTION _a2i (BEGIN)
                                           ; SOURCE LINE # 73
0000 90000000    R     MOV     DPTR,#str
0004 110000      R     ACALL   L?0083
                                           ; SOURCE LINE # 74
                                           ; SOURCE LINE # 75
                                           ; SOURCE LINE # 78
0007 110000      R     ACALL   L?0098
000A 90000000    R     MOV     DPTR,#i
000E F0                MOVX    @DPTR,A
000F         ?C0011:
                                           ; SOURCE LINE # 79
000F 90000000    R     MOV     DPTR,#str
0013 110000      R     ACALL   L?0081
0016 110000      E     ACALL   ?C?CLDPTR
0019 605F              JZ      ?C0012
001B 6420              XRL     A,#020H
001D 605B              JZ      ?C0012
001F         ?C0014:
                                           ; SOURCE LINE # 80
001F E4                CLR     A
0020 7F0A              MOV     R7,#0AH
0022 FE                MOV     R6,A
0023 FD                MOV     R5,A
0024 FC                MOV     R4,A
0025 90000000    R     MOV     DPTR,#num
0029 110000      R     ACALL   L?0093
002C FB                MOV     R3,A
002D 110000      E     ACALL   ?C?LMUL
0030 A804              MOV     R0,AR4
0032 C005              PUSH    AR5
0034 C006              PUSH    AR6
0036 C007              PUSH    AR7
0038 90000000    R     MOV     DPTR,#str
003C 110000      R     ACALL   L?0081
003F 110000      E     ACALL   ?C?CLDPTR
0042 FF                MOV     R7,A
0043 E4                CLR     A
0044 FC                MOV     R4,A
0045 FD                MOV     R5,A
0046 FE                MOV     R6,A
0047 D003              POP     AR3
0049 D002              POP     AR2
004B D001              POP     AR1
004D EB                MOV     A,R3
004E 2F                ADD     A,R7
C51 COMPILER V9.56.0.0   UTIL                                                              07/18/2018 10:44:33 PAGE 15  

004F 110000      R     ACALL   L?0099
0052 C3                CLR     C
0053 EF                MOV     A,R7
0054 9430              SUBB    A,#030H
0056 FF                MOV     R7,A
0057 EE                MOV     A,R6
0058 9400              SUBB    A,#00H
005A FE                MOV     R6,A
005B ED                MOV     A,R5
005C 9400              SUBB    A,#00H
005E FD                MOV     R5,A
005F EC                MOV     A,R4
0060 9400              SUBB    A,#00H
0062 FC                MOV     R4,A
0063 90000000    R     MOV     DPTR,#num
0067 110000      E     ACALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 81
006A 90000000    R     MOV     DPTR,#i
006E E0                MOVX    A,@DPTR
006F 04                INC     A
0070 F0                MOVX    @DPTR,A
0071 90000000    R     MOV     DPTR,#str+01H
0075 110000      R     ACALL   L?0089
0078 8095              SJMP    ?C0011
007A         ?C0012:
                                           ; SOURCE LINE # 82
007A 90000000    R     MOV     DPTR,#num
007E 110000      R     ACALL   L?0091
                                           ; SOURCE LINE # 83
0081         ?C0016:
0081 22                RET     
             ; FUNCTION _a2i (END)

             ; FUNCTION _toupper (BEGIN)
                                           ; SOURCE LINE # 98
;---- Variable 'ch' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 99
                                           ; SOURCE LINE # 100
0000 EF                MOV     A,R7
0001 C3                CLR     C
0002 9461              SUBB    A,#061H
0004 400E              JC      ?C0017
0006 EF                MOV     A,R7
0007 D3                SETB    C
0008 947A              SUBB    A,#07AH
000A 5008              JNC     ?C0017
                                           ; SOURCE LINE # 101
000C C3                CLR     C
000D EF                MOV     A,R7
000E 9461              SUBB    A,#061H
0010 2441              ADD     A,#041H
0012 FF                MOV     R7,A
0013 22                RET     
0014         ?C0017:
                                           ; SOURCE LINE # 103
                                           ; SOURCE LINE # 104
0014         ?C0018:
0014 22                RET     
             ; FUNCTION _toupper (END)

             ; FUNCTION _stricmp (BEGIN)
                                           ; SOURCE LINE # 114
C51 COMPILER V9.56.0.0   UTIL                                                              07/18/2018 10:44:33 PAGE 16  

0000 90000000    R     MOV     DPTR,#ptr1
0004 110000      R     ACALL   L?0084
                                           ; SOURCE LINE # 115
0007         ?C0019:
                                           ; SOURCE LINE # 128
                                           ; SOURCE LINE # 129
0007 90000000    R     MOV     DPTR,#ptr2
000B 110000      R     ACALL   L?0081
000E 110000      E     ACALL   ?C?CLDPTR
0011 FF                MOV     R7,A
0012 110000      R     ACALL   _toupper
0015 AE07              MOV     R6,AR7
0017 90000000    R     MOV     DPTR,#ptr1
001B 110000      R     ACALL   L?0081
001E 110000      E     ACALL   ?C?CLDPTR
0021 FF                MOV     R7,A
0022 110000      R     ACALL   _toupper
0025 EF                MOV     A,R7
0026 6E                XRL     A,R6
0027 6005              JZ      ?C0021
0029 7E00              MOV     R6,#00H
002B 7F01              MOV     R7,#01H
002D 22                RET     
002E         ?C0021:
                                           ; SOURCE LINE # 130
002E 90000000    R     MOV     DPTR,#ptr1
0032 110000      R     ACALL   L?0081
0035 110000      E     ACALL   ?C?CLDPTR
0038 7003              JNZ     ?C0023
003A FE                MOV     R6,A
003B FF                MOV     R7,A
003C 22                RET     
003D         ?C0023:
                                           ; SOURCE LINE # 131
003D 90000000    R     MOV     DPTR,#ptr1+01H
0041 110000      R     ACALL   L?0090
                                           ; SOURCE LINE # 132
0044 90000000    R     MOV     DPTR,#ptr2+01H
0048 110000      R     ACALL   L?0090
                                           ; SOURCE LINE # 133
004B 80BA              SJMP    ?C0019
             ; FUNCTION _stricmp (END)

             ; FUNCTION _TWitoa (BEGIN)
                                           ; SOURCE LINE # 150
0000 90000000    R     MOV     DPTR,#buff
0004 110000      R     ACALL   L?0084
0007 90000000    R     MOV     DPTR,#n
000B EE                MOV     A,R6
000C F0                MOVX    @DPTR,A
000D A3                INC     DPTR
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 151
                                           ; SOURCE LINE # 155
0010 E4                CLR     A
0011 90000000    R     MOV     DPTR,#next
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 156
0016 A3                INC     DPTR
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 158
C51 COMPILER V9.56.0.0   UTIL                                                              07/18/2018 10:44:33 PAGE 17  

0018 C3                CLR     C
0019 EE                MOV     A,R6
001A 6480              XRL     A,#080H
001C 9480              SUBB    A,#080H
001E 5020              JNC     ?C0024
                                           ; SOURCE LINE # 159
0020 110000      R     ACALL   L?0079
0023 110000      R     ACALL   L?0095
0026 742D              MOV     A,#02DH
0028 110000      E     ACALL   ?C?CSTPTR
                                           ; SOURCE LINE # 160
002B 110000      R     ACALL   L?0100
002E 110000      R     ACALL   L?0101
0031 90000000    R     MOV     DPTR,#n
0035 F0                MOVX    @DPTR,A
0036 A3                INC     DPTR
0037 EF                MOV     A,R7
0038 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 161
0039 90000000    R     MOV     DPTR,#start
003D E0                MOVX    A,@DPTR
003E 04                INC     A
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 162
0040         ?C0024:
                                           ; SOURCE LINE # 163
0040 90000000    R     MOV     DPTR,#n
0044 E0                MOVX    A,@DPTR
0045 7002              JNZ     ?C0069
0047 A3                INC     DPTR
0048 E0                MOVX    A,@DPTR
0049         ?C0069:
0049 700E              JNZ     ?C0025
                                           ; SOURCE LINE # 164
004B 110000      R     ACALL   L?0079
004E 110000      R     ACALL   L?0095
0051 7430              MOV     A,#030H
0053 110000      E     ACALL   ?C?CSTPTR
0056 010000      R     AJMP    ?C0026
0059         ?C0025:
                                           ; SOURCE LINE # 166
                                           ; SOURCE LINE # 167
0059 90000000    R     MOV     DPTR,#k
005D 7427              MOV     A,#027H
005F F0                MOVX    @DPTR,A
0060 A3                INC     DPTR
0061 7410              MOV     A,#010H
0063 F0                MOVX    @DPTR,A
0064         ?C0027:
                                           ; SOURCE LINE # 168
0064 90000000    R     MOV     DPTR,#k
0068 E0                MOVX    A,@DPTR
0069 FC                MOV     R4,A
006A A3                INC     DPTR
006B E0                MOVX    A,@DPTR
006C FD                MOV     R5,A
006D D3                SETB    C
006E 9400              SUBB    A,#00H
0070 EC                MOV     A,R4
0071 9400              SUBB    A,#00H
0073 5003              JNC     $ + 5H
0075 010000      R     AJMP    ?C0026
C51 COMPILER V9.56.0.0   UTIL                                                              07/18/2018 10:44:33 PAGE 18  

                                           ; SOURCE LINE # 169
                                           ; SOURCE LINE # 170
0078 110000      R     ACALL   L?0100
007B 4E                ORL     A,R6
007C 7009              JNZ     ?C0029
007E 90000000    R     MOV     DPTR,#q
0082 F0                MOVX    @DPTR,A
0083 A3                INC     DPTR
0084 F0                MOVX    @DPTR,A
0085 800C              SJMP    ?C0030
0087         ?C0029:
                                           ; SOURCE LINE # 171
0087 110000      E     ACALL   ?C?UIDIV
008A 90000000    R     MOV     DPTR,#q
008E EE                MOV     A,R6
008F F0                MOVX    @DPTR,A
0090 A3                INC     DPTR
0091 EF                MOV     A,R7
0092 F0                MOVX    @DPTR,A
0093         ?C0030:
                                           ; SOURCE LINE # 172
0093 90000000    R     MOV     DPTR,#start
0097 E0                MOVX    A,@DPTR
0098 FF                MOV     R7,A
0099 90000000    R     MOV     DPTR,#next
009D E0                MOVX    A,@DPTR
009E B50711            CJNE    A,AR7,?C0032
00A1 D3                SETB    C
00A2 90000000    R     MOV     DPTR,#q+01H
00A6 E0                MOVX    A,@DPTR
00A7 9400              SUBB    A,#00H
00A9 90000000    R     MOV     DPTR,#q
00AD E0                MOVX    A,@DPTR
00AE 9400              SUBB    A,#00H
00B0 401B              JC      ?C0031
00B2         ?C0032:
                                           ; SOURCE LINE # 173
00B2 90000000    R     MOV     DPTR,#q
00B6 A3                INC     DPTR
00B7 E0                MOVX    A,@DPTR
00B8 2430              ADD     A,#030H
00BA FF                MOV     R7,A
00BB 110000      R     ACALL   L?0080
00BE A3                INC     DPTR
00BF E0                MOVX    A,@DPTR
00C0 FE                MOV     R6,A
00C1 04                INC     A
00C2 F0                MOVX    @DPTR,A
00C3 E9                MOV     A,R1
00C4 2E                ADD     A,R6
00C5 F9                MOV     R1,A
00C6 E4                CLR     A
00C7 3A                ADDC    A,R2
00C8 FA                MOV     R2,A
00C9 EF                MOV     A,R7
00CA 110000      E     ACALL   ?C?CSTPTR
                                           ; SOURCE LINE # 174
00CD         ?C0031:
                                           ; SOURCE LINE # 175
00CD 90000000    R     MOV     DPTR,#k
00D1 110000      R     ACALL   L?0092
00D4 110000      E     ACALL   ?C?IMUL
C51 COMPILER V9.56.0.0   UTIL                                                              07/18/2018 10:44:33 PAGE 19  

00D7 C3                CLR     C
00D8 90000000    R     MOV     DPTR,#n+01H
00DC E0                MOVX    A,@DPTR
00DD 9F                SUBB    A,R7
00DE F0                MOVX    @DPTR,A
00DF 90000000    R     MOV     DPTR,#n
00E3 E0                MOVX    A,@DPTR
00E4 9E                SUBB    A,R6
00E5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 176
00E6 90000000    R     MOV     DPTR,#k
00EA E0                MOVX    A,@DPTR
00EB FE                MOV     R6,A
00EC A3                INC     DPTR
00ED E0                MOVX    A,@DPTR
00EE FF                MOV     R7,A
00EF 7C00              MOV     R4,#00H
00F1 7D0A              MOV     R5,#0AH
00F3 110000      E     ACALL   ?C?UIDIV
00F6 90000000    R     MOV     DPTR,#k
00FA EE                MOV     A,R6
00FB F0                MOVX    @DPTR,A
00FC A3                INC     DPTR
00FD EF                MOV     A,R7
00FE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 177
00FF 010000      R     AJMP    ?C0027
                                           ; SOURCE LINE # 178
0102         ?C0026:
                                           ; SOURCE LINE # 179
0102 110000      R     ACALL   L?0080
0105 A3                INC     DPTR
0106 E0                MOVX    A,@DPTR
0107 FF                MOV     R7,A
0108 110000      R     ACALL   L?0096
010B E4                CLR     A
010C 110000      E     ACALL   ?C?CSTPTR
                                           ; SOURCE LINE # 180
                                           ; SOURCE LINE # 181
010F         ?C0033:
010F 22                RET     
             ; FUNCTION _TWitoa (END)

             ; FUNCTION _TWhtos (BEGIN)
                                           ; SOURCE LINE # 187
0000 90000000    R     MOV     DPTR,#buff
0004 110000      R     ACALL   L?0084
;---- Variable 'n' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 188
                                           ; SOURCE LINE # 190
0007 EF                MOV     A,R7
0008 C4                SWAP    A
0009 540F              ANL     A,#0FH
000B FE                MOV     R6,A
;---- Variable 'nibble' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 191
000C D3                SETB    C
000D 9409              SUBB    A,#09H
000F EE                MOV     A,R6
0010 5004              JNC     ?C0034
0012 2430              ADD     A,#030H
0014 8002              SJMP    ?C0074
C51 COMPILER V9.56.0.0   UTIL                                                              07/18/2018 10:44:33 PAGE 20  

0016         ?C0034:
                                           ; SOURCE LINE # 192
0016 2437              ADD     A,#037H
0018         ?C0074:
0018 FD                MOV     R5,A
0019 90000000    R     MOV     DPTR,#buff
001D 110000      R     ACALL   L?0081
0020 ED                MOV     A,R5
0021 110000      E     ACALL   ?C?CSTPTR
0024         ?C0035:
                                           ; SOURCE LINE # 193
0024 EF                MOV     A,R7
0025 540F              ANL     A,#0FH
0027 FE                MOV     R6,A
                                           ; SOURCE LINE # 194
0028 D3                SETB    C
0029 9409              SUBB    A,#09H
002B EE                MOV     A,R6
002C 5004              JNC     ?C0036
002E 2430              ADD     A,#030H
0030 8002              SJMP    ?C0075
0032         ?C0036:
                                           ; SOURCE LINE # 195
0032 2437              ADD     A,#037H
0034         ?C0075:
0034 FE                MOV     R6,A
0035 110000      R     ACALL   L?0097
0038 2401              ADD     A,#01H
003A F9                MOV     R1,A
003B E4                CLR     A
003C 3A                ADDC    A,R2
003D FA                MOV     R2,A
003E EE                MOV     A,R6
003F 110000      E     ACALL   ?C?CSTPTR
0042         ?C0037:
                                           ; SOURCE LINE # 196
0042 110000      R     ACALL   L?0097
0045 2402              ADD     A,#02H
0047 F9                MOV     R1,A
0048 E4                CLR     A
0049 3A                ADDC    A,R2
004A FA                MOV     R2,A
004B E4                CLR     A
004C 110000      E     ACALL   ?C?CSTPTR
                                           ; SOURCE LINE # 197
004F EF                MOV     A,R7
0050 C4                SWAP    A
0051 540F              ANL     A,#0FH
0053 7F00              MOV     R7,#00H
0055 6002              JZ      ?C0038
                                           ; SOURCE LINE # 198
0057 7F01              MOV     R7,#01H
0059         ?C0038:
                                           ; SOURCE LINE # 199
                                           ; SOURCE LINE # 200
0059         ?C0039:
0059 22                RET     
             ; FUNCTION _TWhtos (END)

             ; FUNCTION _TWstrlen (BEGIN)
                                           ; SOURCE LINE # 285
0000 90000000    R     MOV     DPTR,#s
C51 COMPILER V9.56.0.0   UTIL                                                              07/18/2018 10:44:33 PAGE 21  

0004 110000      R     ACALL   L?0084
                                           ; SOURCE LINE # 286
                                           ; SOURCE LINE # 287
0007 A3                INC     DPTR
0008 110000      R     ACALL   L?0084
                                           ; SOURCE LINE # 288
;---- Variable 'escape' assigned to Register 'R7' ----
000B E4                CLR     A
000C FF                MOV     R7,A
000D         ?C0040:
                                           ; SOURCE LINE # 289
                                           ; SOURCE LINE # 290
000D 90000000    R     MOV     DPTR,#p
0011 110000      R     ACALL   L?0081
0014 110000      E     ACALL   ?C?CLDPTR
0017 FE                MOV     R6,A
0018 C3                CLR     C
0019 94F0              SUBB    A,#0F0H
001B 4009              JC      ?C0042
                                           ; SOURCE LINE # 291
001D 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 292
001F EE                MOV     A,R6
0020 B4FF01            CJNE    A,#0FFH,?C0043
                                           ; SOURCE LINE # 293
0023 1F                DEC     R7
0024         ?C0043:
                                           ; SOURCE LINE # 294
                                           ; SOURCE LINE # 295
0024 800A              SJMP    ?C0077
                                           ; SOURCE LINE # 296
0026         ?C0042:
                                           ; SOURCE LINE # 297
0026 EF                MOV     A,R7
0027 6002              JZ      ?C0044
                                           ; SOURCE LINE # 298
0029         ?C0076:
                                           ; SOURCE LINE # 299
0029 8005              SJMP    ?C0077
002B         ?C0044:
                                           ; SOURCE LINE # 300
                                           ; SOURCE LINE # 301
002B 110000      E     ACALL   ?C?CLDPTR
002E 6009              JZ      ?C0041
                                           ; SOURCE LINE # 302
0030         ?C0046:
                                           ; SOURCE LINE # 303
0030         ?C0077:
0030 90000000    R     MOV     DPTR,#p+01H
0034 110000      R     ACALL   L?0090
                                           ; SOURCE LINE # 304
                                           ; SOURCE LINE # 305
0037 80D4              SJMP    ?C0040
0039         ?C0041:
                                           ; SOURCE LINE # 306
0039 90000000    R     MOV     DPTR,#s
003D A3                INC     DPTR
003E A3                INC     DPTR
003F E0                MOVX    A,@DPTR
0040 FF                MOV     R7,A
0041 A3                INC     DPTR
0042 A3                INC     DPTR
C51 COMPILER V9.56.0.0   UTIL                                                              07/18/2018 10:44:33 PAGE 22  

0043 A3                INC     DPTR
0044 E0                MOVX    A,@DPTR
0045 C3                CLR     C
0046 9F                SUBB    A,R7
0047 FF                MOV     R7,A
                                           ; SOURCE LINE # 307
0048         ?C0047:
0048 22                RET     
             ; FUNCTION _TWstrlen (END)

             ; FUNCTION _TWstrcpy (BEGIN)
                                           ; SOURCE LINE # 315
0000 90000000    R     MOV     DPTR,#d
0004 110000      R     ACALL   L?0084
                                           ; SOURCE LINE # 316
                                           ; SOURCE LINE # 317
0007 90000000    R     MOV     DPTR,#dd
000B 110000      R     ACALL   L?0084
000E         ?C0048:
                                           ; SOURCE LINE # 318
000E 90000000    R     MOV     DPTR,#s
0012 110000      R     ACALL   L?0081
0015 110000      E     ACALL   ?C?CLDPTR
0018 6017              JZ      ?C0049
                                           ; SOURCE LINE # 319
001A 90000000    R     MOV     DPTR,#s
001E 110000      R     ACALL   L?0088
0021 110000      E     ACALL   ?C?CLDPTR
0024 90000000    R     MOV     DPTR,#dd
0028 110000      R     ACALL   L?0086
002B EF                MOV     A,R7
002C 110000      E     ACALL   ?C?CSTPTR
002F 80DD              SJMP    ?C0048
0031         ?C0049:
                                           ; SOURCE LINE # 320
0031 90000000    R     MOV     DPTR,#dd
0035 110000      R     ACALL   L?0081
0038 E4                CLR     A
0039 110000      E     ACALL   ?C?CSTPTR
                                           ; SOURCE LINE # 322
003C 90000000    R     MOV     DPTR,#d
0040 110000      R     ACALL   L?0081
                                           ; SOURCE LINE # 323
0043         ?C0050:
0043 22                RET     
             ; FUNCTION _TWstrcpy (END)

             ; FUNCTION _TWstrcat (BEGIN)
                                           ; SOURCE LINE # 329
0000 90000000    R     MOV     DPTR,#d
0004 110000      R     ACALL   L?0084
                                           ; SOURCE LINE # 330
                                           ; SOURCE LINE # 331
0007 90000000    R     MOV     DPTR,#dd
000B 110000      R     ACALL   L?0084
000E         ?C0051:
                                           ; SOURCE LINE # 332
000E 90000000    R     MOV     DPTR,#dd
0012 110000      R     ACALL   L?0081
0015 110000      E     ACALL   ?C?CLDPTR
0018 6009              JZ      ?C0053
                                           ; SOURCE LINE # 333
C51 COMPILER V9.56.0.0   UTIL                                                              07/18/2018 10:44:33 PAGE 23  

001A 90000000    R     MOV     DPTR,#dd+01H
001E 110000      R     ACALL   L?0090
0021 80EB              SJMP    ?C0051
0023         ?C0053:
                                           ; SOURCE LINE # 334
0023 90000000    R     MOV     DPTR,#s
0027 110000      R     ACALL   L?0081
002A 110000      E     ACALL   ?C?CLDPTR
002D 6017              JZ      ?C0054
                                           ; SOURCE LINE # 335
002F 90000000    R     MOV     DPTR,#s
0033 110000      R     ACALL   L?0088
0036 110000      E     ACALL   ?C?CLDPTR
0039 90000000    R     MOV     DPTR,#dd
003D 110000      R     ACALL   L?0086
0040 EF                MOV     A,R7
0041 110000      E     ACALL   ?C?CSTPTR
0044 80DD              SJMP    ?C0053
0046         ?C0054:
                                           ; SOURCE LINE # 336
0046 90000000    R     MOV     DPTR,#dd
004A 110000      R     ACALL   L?0081
004D E4                CLR     A
004E 110000      E     ACALL   ?C?CSTPTR
                                           ; SOURCE LINE # 338
0051 90000000    R     MOV     DPTR,#d
0055 110000      R     ACALL   L?0081
                                           ; SOURCE LINE # 339
0058         ?C0055:
0058 22                RET     
             ; FUNCTION _TWstrcat (END)

             ; FUNCTION _IsDigit (BEGIN)
                                           ; SOURCE LINE # 344
;---- Variable 'c' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 345
                                           ; SOURCE LINE # 346
0000 EF                MOV     A,R7
0001 C3                CLR     C
0002 9430              SUBB    A,#030H
0004 4009              JC      ?C0056
0006 EF                MOV     A,R7
0007 D3                SETB    C
0008 9439              SUBB    A,#039H
000A 5003              JNC     ?C0056
                                           ; SOURCE LINE # 347
000C 7F01              MOV     R7,#01H
000E 22                RET     
000F         ?C0056:
                                           ; SOURCE LINE # 348
000F 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 349
0011         ?C0057:
0011 22                RET     
             ; FUNCTION _IsDigit (END)

             ; FUNCTION _TWabsShort (BEGIN)
                                           ; SOURCE LINE # 356
;---- Variable 'value' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 357
                                           ; SOURCE LINE # 358
0000 D3                SETB    C
C51 COMPILER V9.56.0.0   UTIL                                                              07/18/2018 10:44:33 PAGE 24  

0001 EF                MOV     A,R7
0002 9400              SUBB    A,#00H
0004 EE                MOV     A,R6
0005 6480              XRL     A,#080H
0007 9480              SUBB    A,#080H
0009 4001              JC      ?C0058
000B 22                RET     
000C         ?C0058:
                                           ; SOURCE LINE # 359
000C 110000      R     ACALL   L?0101
000F FE                MOV     R6,A
                                           ; SOURCE LINE # 360
0010         ?C0059:
0010 22                RET     
             ; FUNCTION _TWabsShort (END)

             ; FUNCTION _TWmemcmp (BEGIN)
                                           ; SOURCE LINE # 377
;---- Variable 'ptr1' assigned to Register 'R1/R2/R3' ----
                                           ; SOURCE LINE # 378
                                           ; SOURCE LINE # 381
0000 90000000    R     MOV     DPTR,#d
0004 110000      R     ACALL   L?0084
                                           ; SOURCE LINE # 382
0007 90000000    R     MOV     DPTR,#ptr2
000B 110000      R     ACALL   L?0094
000E 90000000    R     MOV     DPTR,#s
0012 C9                XCH     A,R1
0013 110000      R     ACALL   L?0085
                                           ; SOURCE LINE # 383
;---- Variable 'i' assigned to Register 'R6/R7' ----
0016 7F01              MOV     R7,#01H
0018 7E00              MOV     R6,#00H
001A         ?C0060:
001A C3                CLR     C
001B 90000000    R     MOV     DPTR,#num+01H
001F E0                MOVX    A,@DPTR
0020 9F                SUBB    A,R7
0021 90000000    R     MOV     DPTR,#num
0025 E0                MOVX    A,@DPTR
0026 9E                SUBB    A,R6
0027 4061              JC      ?C0061
                                           ; SOURCE LINE # 384
0029 90000000    R     MOV     DPTR,#s
002D 110000      R     ACALL   L?0081
0030 C003              PUSH    AR3
0032 C002              PUSH    AR2
0034 C001              PUSH    AR1
0036 90000000    R     MOV     DPTR,#d
003A 110000      R     ACALL   L?0082
003D D3                SETB    C
003E D082              POP     DPL
0040 D083              POP     DPH
0042 D0E0              POP     ACC
0044 E9                MOV     A,R1
0045 9582              SUBB    A,DPL
0047 EA                MOV     A,R2
0048 9583              SUBB    A,DPH
004A         ?C0070:
004A 4001              JC      ?C0063
004C 22                RET     
004D         ?C0063:
C51 COMPILER V9.56.0.0   UTIL                                                              07/18/2018 10:44:33 PAGE 25  

                                           ; SOURCE LINE # 385
004D 90000000    R     MOV     DPTR,#s
0051 110000      R     ACALL   L?0081
0054 C003              PUSH    AR3
0056 C002              PUSH    AR2
0058 C001              PUSH    AR1
005A 90000000    R     MOV     DPTR,#d
005E 110000      R     ACALL   L?0082
0061 C3                CLR     C
0062 D082              POP     DPL
0064 D083              POP     DPH
0066 D0E0              POP     ACC
0068 E9                MOV     A,R1
0069 9582              SUBB    A,DPL
006B EA                MOV     A,R2
006C 9583              SUBB    A,DPH
006E         ?C0071:
006E 5005              JNC     ?C0065
0070 110000      R     ACALL   L?0102
0073 FE                MOV     R6,A
0074 22                RET     
0075         ?C0065:
                                           ; SOURCE LINE # 386
0075 90000000    R     MOV     DPTR,#d+01H
0079 110000      R     ACALL   L?0090
                                           ; SOURCE LINE # 387
007C 90000000    R     MOV     DPTR,#s+01H
0080 110000      R     ACALL   L?0090
                                           ; SOURCE LINE # 388
0083 0F                INC     R7
0084 BF0001            CJNE    R7,#00H,?C0072
0087 0E                INC     R6
0088         ?C0072:
0088 8090              SJMP    ?C0060
008A         ?C0061:
                                           ; SOURCE LINE # 389
008A E4                CLR     A
008B FE                MOV     R6,A
008C FF                MOV     R7,A
                                           ; SOURCE LINE # 391
008D         ?C0064:
008D 22                RET     
             ; FUNCTION _TWmemcmp (END)

             ; FUNCTION _TWmemset (BEGIN)
                                           ; SOURCE LINE # 414
;---- Variable 'value' assigned to Register 'R4/R5' ----
0000 90000000    R     MOV     DPTR,#ptr
0004 110000      R     ACALL   L?0084
                                           ; SOURCE LINE # 415
                                           ; SOURCE LINE # 417
0007 90000000    R     MOV     DPTR,#d
000B 110000      R     ACALL   L?0084
000E         ?C0066:
                                           ; SOURCE LINE # 418
000E 90000000    R     MOV     DPTR,#num
0012 74FF              MOV     A,#0FFH
0014 F5F0              MOV     B,A
0016 110000      E     ACALL   ?C?ILDIX
0019 45F0              ORL     A,B
001B 600D              JZ      ?C0067
                                           ; SOURCE LINE # 419
C51 COMPILER V9.56.0.0   UTIL                                                              07/18/2018 10:44:33 PAGE 26  

001D 90000000    R     MOV     DPTR,#d
0021 110000      R     ACALL   L?0087
0024 ED                MOV     A,R5
0025 110000      E     ACALL   ?C?CSTPTR
                                           ; SOURCE LINE # 420
0028 80E4              SJMP    ?C0066
002A         ?C0067:
                                           ; SOURCE LINE # 421
002A 90000000    R     MOV     DPTR,#ptr
002E 110000      R     ACALL   L?0081
                                           ; SOURCE LINE # 422
0031         ?C0068:
0031 22                RET     
             ; FUNCTION _TWmemset (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1353    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      84
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
