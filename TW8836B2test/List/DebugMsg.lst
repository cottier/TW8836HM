C51 COMPILER V9.56.0.0   DEBUGMSG                                                          07/18/2018 10:44:46 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE DEBUGMSG
OBJECT MODULE PLACED IN .\Output\DebugMsg.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE source36\DebugMsg.c LARGE OMF2 ROM(D512K) OPTIMIZE(9,SPEED) REGFILE(.\Ou
                    -tput\TW8836B_EVB11.ORC) BROWSE INCDIR(SiI-SW;SiI-SW\HAL;SiI-SW\DEBUG;SiI-SW\CEC;.\Source36\LIB) DEFINE(EVB_11,nullFn=//)
                    - DEBUG CODE PRINT(.\List\DebugMsg.lst) TABS(2) OBJECT(.\Output\DebugMsg.obj)

line level    source

   1          /**
   2           * @file
   3           * DebugMsg.c 
   4           * @author Brian Kang
   5           * @version 1.0
   6           * @section LICENSE
   7           *  Copyright (C) 2011~2012 Intersil Corporation
   8           * @section DESCRIPTION
   9           *  Debug Message
  10          */
  11          /*
  12          Disclaimer: THIS INFORMATION IS PROVIDED 'AS-IS' FOR EVALUATION PURPOSES ONLY.  
  13          INTERSIL CORPORATION AND ITS SUBSIDIARIES ('INTERSIL') DISCLAIM ALL WARRANTIES, 
  14          INCLUDING WITHOUT LIMITATION FITNESS FOR A PARTICULAR PURPOSE AND MERCHANTABILITY.  
  15          Intersil provides evaluation platforms to help our customers to develop products. 
  16          However, factors beyond Intersil's control could significantly affect Intersil 
  17          product performance. 
  18          It remains the customers' responsibility to verify the actual system performance.
  19          */
  20          #include "Config.h"
  21          #include "reg.h"
  22          #include "typedefs.h"
  23          #include "TW8836.h"
  24          
  25          #include "CPU.h"
  26          #include "Printf.h"
  27          #include "Monitor.h"
  28          
  29          #include "I2C.h"
  30          
  31          #include "Scaler.h"
  32          #include "InputCtrl.h"
  33          #include "eeprom.h"
  34          #include "aRGB.h"
  35          #include "dtv.h"
  36          #include "measure.h"
  37          #include "PC_modes.h" //for DVI_PrepareInfoString
  38          
  39          
  40          #ifdef SUPPORT_HDMI_EP907M
  41          #include "EP907M_RegDef.h"
  42          #endif
  43          #ifdef SUPPORT_HDMI_TW8837
              #include "HDMI_TW8837.h"
              #endif
  46          
  47          
  48          #if !defined(SUPPORT_HDMI_EP907M)
              
              //==========================================
              //----------------------------
              //Trick for Bank Code Segment
              //----------------------------
C51 COMPILER V9.56.0.0   DEBUGMSG                                                          07/18/2018 10:44:46 PAGE 2   

              CODE BYTE DUMMY_DEBUGMSG_CODE;
              void Dummy_DebugMsg_func(void)
              {
                BYTE temp;
                temp = DUMMY_DEBUGMSG_CODE;
              }
              #else 
  61          
  62          
  63          #if 0
              void HDMI_DumpVideoCode(BYTE vcode)
              {
              //#if 1 //BK120214 I need memory
              //  BYTE temp = vcode;
              //#else
                switch(vcode) {
                case 1: dPuts("640x480p@60"); break;
                case 2:
                case 3: dPuts("720x480p@59.94/60"); break;
                case 4: dPuts("1280x720p @ 59.94/60"); break;
                case 5: dPuts("1920x1080i @ 59.94/60"); break;
                case 6: 
                case 7: dPuts("720(1440)x480i@59.94/60Hz Pixel sent 2 times"); break;
                case 8: 
                case 9: dPuts("720(1440)x240p@59.94/60Hz Pixel sent 2 times"); break;
                case 10:
                case 11: dPuts("2880x480i @ 59.94/60Hz Pixel sent 1 to 10 times"); break;
                case 12:
                case 13: dPuts("2880x240p @ 59.94/60Hz Pixel sent 1 to 10 times"); break;
                case 14: 
                case 15: dPuts("1440x480p @ 59.94/60Hz Pixel sent 1 to 2 times"); break;
                case 16: dPuts("1920x1080p @ 59.94/60"); break;
                case 17: 
                case 18: dPuts("720x576p @ 50"); break;
                case 19: dPuts("1280x720p @ 50"); break;
                case 20: dPuts("1920x1080i @ 50"); break;
                case 21: 
                case 22: dPuts("720(1440)x576i @ 50Hz Pixel sent 2 times"); break;
                case 23: 
                case 24: dPuts("720(1440)x288p @ 50Hz Pixel sent 2 times"); break;
                case 25: 
                case 26: dPuts("2880x576i @ 50Hz Pixel sent 1 to 10 times"); break;
                case 27: 
                case 28: dPuts("2880x288 @ 50Hz Pixel sent 1 to 10 times"); break;
                case 29: 
                case 30: dPuts("1440x576p @ 50Hz Pixel sent 1 to 2 times"); break;
                case 31: dPuts("1920x1080p @ 50"); break;
                case 32: dPuts("1920x1080p @ 23.97/24"); break;
                case 33: dPuts("1920x1080p @ 25"); break;
                case 34: dPuts("1920x1080p @ 29.97/30"); break;
                case 35: 
                case 36: dPuts("2880x480p @ 59.94/60Hz Pixel sent 1, 2 or 4 times"); break;
                case 37: 
                case 38: dPuts("2880x576p @ 50Hz Pixel sent 1, 2 or 4 times"); break;
                case 39: dPuts("1920x1080i (1250 total) @ 50Hz No Repetition"); break;
                case 40: dPuts("1920x1080i @ 100"); break;
                case 41: dPuts("1280x720p @ 100"); break;
                case 42: 
                case 43: dPuts("720x576p @ 100"); break;
                case 44: 
                case 45: dPuts("720(1440)x576i @ 100Hz Pixel sent 2 times"); break;
                case 46: dPuts("1920x1080i @ 119.88/120"); break;
C51 COMPILER V9.56.0.0   DEBUGMSG                                                          07/18/2018 10:44:46 PAGE 3   

                case 47: dPuts("1280x720p @ 119.88/120"); break;
                case 48: 
                case 49: dPuts("720x480p @ 119.88/120"); break;
                case 50: 
                case 51: dPuts("720(1440)x480i @ 119.88/120Hz Pixel sent 2 times"); break;
                case 52: 
                case 53: dPuts("720X576p @ 200"); break;
                case 54: 
                case 55: dPuts("720(1440)x576i @ 200Hz Pixel sent 2 times"); break;
                case 56: 
                case 57: dPuts("720x480p @ 239.76/240"); break;
                case 58: 
                case 59: dPuts("720(1440)x480i @ 239.76/240Hz Pixel sent 2 times"); break;
                default: dPrintf("Unknown:%bx",vcode); break;
                }
              //#endif
              }
              #endif
 134          
 135          
 136          #if 0
              void HDMI_DumpAviInfoFrame(BYTE *cVal)
              {
                BYTE i;
              
                Puts("\n\rAVI Info Frame reg $2A:");
                for ( i=0; i<15; i++ ) {
                  Printf( "%02bx ", cVal[i] );
                }
                //S [2][1:0]
                i = cVal[2] & 3;
                dPuts("\n\r\tScan Information: ");
                if ( i==0 ) dPuts("No Data");
                else if ( i==1 ) dPuts("overscan");
                else if ( i==2 ) dPuts("underscan");
                else dPuts("Future");
                //B [2][3:2]
                i = (cVal[2] & 0x0c)>>2;
                dPuts("\n\r\tBar Information: ");
                if ( i==0 ) dPuts("Bar data not Valid");
                else if ( i==1 ) dPuts("Vertical Data info Valid - [11]~[14]");
                else if ( i==2 ) dPuts("Horizontal Data info Valid - [7]~[10]");
                else dPuts("Vert[11]~[14] & Horiz[7]~[10] Data info Valid");
                //A [2][4]
                dPuts("\n\r\tActive Info:");
                if ( cVal[2] & 0x10 ) {
                  // R [3][3:0]
                  switch(cVal[3]&0x0f) {
                  case 8:   dPuts("Same as picture aspect ratio"); break;
                  case 9:   dPuts("4:3(center)"); break;
                  case 10:  dPuts("16:9(center)"); break;
                  default:  dPrintf("0x%bX",cVal[3]&0x0f); break;
                  }
                }
                else dPuts("No");
              
                // Y [2][6:5]
                dPuts("\n\r\tInput HDMI format:");
                i = (cVal[2] & 0x60) >> 5;
                switch(i) {
                case 0: dPuts("RGB"); break;
                case 1: dPuts("YUV(422)"); break;
C51 COMPILER V9.56.0.0   DEBUGMSG                                                          07/18/2018 10:44:46 PAGE 4   

                case 2: dPuts("YUV(444)"); break;
                default: dPrintf("%bx",i);
                }
                // M [3][5:4]
                i = (cVal[3] & 0x30)>>4;
                Puts("\n\r\tPicture Aspect Ratio: ");
                if ( i==0 ) Puts("No Data");
                else if ( i==1 ) Puts("4:3");
                else if ( i==2 ) Puts("16:9");
                else Puts("Future");
                // 3[7:6]
                i = (cVal[3] & 0xc0)>>6;
                Puts("\n\r\tColorimetry: ");
                if ( i==0 ) Puts("No Data");
                else if ( i==1 ) Puts("SMPTE 170M, ITU601");
                else if ( i==2 ) Puts("ITU709");
                else {
                  Printf("Extended Colorimetry Info - %bd", (cVal[4]&0x70)>>4);
                  Puts("\n\r    0: xvYCC601");
                  Puts("\n\r    1: xvYCC709");
                }
                // 4[1:0]
                i = cVal[4] & 3;
                Puts("\n\r\tNon-Uniform Picture Scaling: ");
                if ( i==0 ) Puts("No known");
                else if ( i==1 ) Puts("Horizontally");
                else if ( i==2 ) Puts("Vertically");
                else Puts("Horizontally and Vertically");
              
                Printf("\n\r\tVideo Identification Code:%bd:", cVal[5] & 0x7f );
                HDMI_DumpVideoCode(cVal[5] & 0x7f);
              
              
                Printf("\n\r\tPixel Repetition Factor: %bd", cVal[6] & 0x0f);
              }
              #endif
 214          
 215          #if 0
              void DBG_PrintAviInfoFrame(void)
              {
                BYTE TempByte[15];
              
              
              #ifdef SUPPORT_HDMI_EP907M
                TempByte[0] = ReadI2C_multi(I2CID_EP907M,0x21, EP907M_AVI_Information);
                TempByte[1] = 0xFF;  //dummy
                ReadI2CS_multi(I2CID_EP907M,0x21, EP907M_AVI_Information+1, &TempByte[2], 5);
              #endif
                HDMI_DumpAviInfoFrame(TempByte);
              }
              #endif
 229          //-------------------------------------
 230          #if 0
              //BKFYI121121. 
              //This function has a bank issue.
              //Please do not use it. I will update it later.
              void HDMI_DumpTimingRegister(BYTE *TempByte, BYTE Status)
              {
                //WORD temp16;
                //BYTE i;
                //WORD HActiveStart;
              //  WORD VDEStart;
C51 COMPILER V9.56.0.0   DEBUGMSG                                                          07/18/2018 10:44:46 PAGE 5   

                //BYTE ret;
              
                WORD HSync,HBPorch,HActive,HFPorch;
                WORD VActive, VFPorch;
                WORD VSync,VBPorch;
              
                BYTE i;
                //volatile BYTE vTemp;
                //BYTE TempByte[15];
                //BYTE bTemp;
              
                //BYTE Status;
                BYTE HPol,VPol;   
                WORD HTotal,VTotal;
              
              
              
              #ifdef SUPPORT_HDMI_EP907M
                HActive = TempByte[0];  HActive <<= 8;    HActive += TempByte[1];
                HFPorch = TempByte[2];  HFPorch <<= 8;    HFPorch += TempByte[3];
                HBPorch = TempByte[4];  HBPorch <<= 8;    HBPorch += TempByte[5];
                HSync   = TempByte[6];  HSync <<= 8;    HSync   += TempByte[7];
                VActive = TempByte[8];  VActive <<= 8;    VActive += TempByte[9];
                VFPorch =  TempByte[10];
                VBPorch =  TempByte[11];
                VSync =  TempByte[12]&0x7F;
                HTotal = HSync + HBPorch + HActive + HFPorch;
                VTotal = VSync + VBPorch + VActive + VFPorch;
                HPol = Status & EP907M_Polarity_Control__HS_POL_Low ? 1:0;  //ActiveLow
                VPol = Status & EP907M_Polarity_Control__VS_POL_Low ? 1:0;  //ActiveLow
              #endif
              
              
              
              #ifdef SUPPORT_HDMI_EP907M
                Puts("\n\rTimeReg:$3B:");
              #endif
                for(i=0; i < 13; i++)
                  Printf("%02bx ",TempByte[i]);
                dPrintf(" $41:%02bx",Status);
              
                dPrintf("\n\r\tH Total:%4d Pulse:%4d BPorch:%4d Active:%4d FPorch:%3d Pol:%bd",
                  HTotal,HSync,HBPorch,HActive,HFPorch,HPol);
                dPrintf("\n\r\tV Total:%4d Pulse:%4d BPorch:%4d Active:%4d FPorch:%3d Pol:%bd",
                  VTotal,VSync,VBPorch,VActive,VFPorch,VPol);
                dPrintf("\n\r\t%s", TempByte[12] & 0x80 ? "Interlace" : "Progressive");
              }
              #endif
 288          
 289          
 290          #if 0
              void DBG_PrintTimingRegister(void)
              {
                BYTE TempByte[15];
                BYTE Status;
                WORD HSync,HBPorch,HActive,HFPorch;
                WORD VActive, VFPorch;
                WORD VSync,VBPorch;
              
                BYTE i;
                BYTE HPol,VPol;   
                WORD HTotal,VTotal;
C51 COMPILER V9.56.0.0   DEBUGMSG                                                          07/18/2018 10:44:46 PAGE 6   

              
              
              #ifdef SUPPORT_HDMI_EP907M
                ReadI2CS_multi(I2CID_EP907M,0x21, EP907M_Hsync_Timing, TempByte, 8);
                ReadI2CS_multi(I2CID_EP907M,0x21, EP907M_Vsync_Timing, &TempByte[8], 5);
                Status = ReadI2C_multi(I2CID_EP907M,0x21,EP907M_Polarity_Control);
              #endif
              
                //HDMI_DumpTimingRegister(TempByte,Status);
              
              
              #ifdef SUPPORT_HDMI_EP907M
                HActive = TempByte[0];  HActive <<= 8;    HActive += TempByte[1];
                HFPorch = TempByte[2];  HFPorch <<= 8;    HFPorch += TempByte[3];
                HBPorch = TempByte[4];  HBPorch <<= 8;    HBPorch += TempByte[5];
                HSync   = TempByte[6];  HSync <<= 8;    HSync   += TempByte[7];
                VActive = TempByte[8];  VActive <<= 8;    VActive += TempByte[9];
                VFPorch =  TempByte[10];
                VBPorch =  TempByte[11];
                VSync =  TempByte[12]&0x7F;
                HTotal = HSync + HBPorch + HActive + HFPorch;
                VTotal = VSync + VBPorch + VActive + VFPorch;
                HPol = Status & EP907M_Polarity_Control__HS_POL_Low ? 1:0;  //ActiveLow
                VPol = Status & EP907M_Polarity_Control__VS_POL_Low ? 1:0;  //ActiveLow
              #endif
              
              
              #ifdef SUPPORT_HDMI_EP907M
                Puts("\n\rTimeReg:$3B:");
              #endif
                for(i=0; i < 13; i++)
                  Printf("%02bx ",TempByte[i]);
                dPrintf(" $41:%02bx",Status);
              
                dPrintf("\n\r\tH Total:%4d Pulse:%4d BPorch:%4d Active:%4d FPorch:%3d Pol:%bd",
                  HTotal,HSync,HBPorch,HActive,HFPorch,HPol);
                dPrintf("\n\r\tV Total:%4d Pulse:%4d BPorch:%4d Active:%4d FPorch:%3d Pol:%bd",
                  VTotal,VSync,VBPorch,VActive,VFPorch,VPol);
                dPrintf("\n\r\t%s", TempByte[12] & 0x80 ? "Interlace" : "Progressive");
              
              }
              #endif
 344          
 345          
 346          
 347          //===================================================================
 348          
 349          #if 0
              #define PI_I       0  //Interlaced
              #define PI_P       1  //Progressive
              #define ASPECT_43 0x10  //4x3
              #define ASPECT_169  0x20  //16x9
              #define ASPECT_BOTH 0x00  //4x3,16x9
              struct DVITimeData_s {
                BYTE format;
                WORD hActive,vActive;
                BYTE aspect_p;
                //WORD hTotal; = hActive+hBlank
                //WORD vTotal; = vActive+vBlank
                BYTE hPol_vPol;
                WORD hSync,hBPorch,hBlank;  //hFPorch=hBlank-hSync-hBPorch;
                WORD vSync,vBPorch,vBlank;
C51 COMPILER V9.56.0.0   DEBUGMSG                                                          07/18/2018 10:44:46 PAGE 7   

                BYTE hFreq_hi;
                WORD hFreq_lo;
                BYTE vFreq_hi;
                WORD vFreq_lo;  
                //DWORD pFreq;  //Pixel Freq. = hTotal * hFreq
              };
              CODE struct DVITimeData_s DviTable[] = {
              //Format V active Int/Prog Total Lines V blanking1 V Freq H Freq Pixel Freq H total H active H blanking As
             -pect2 Display3 Reference
              //  Active        Total   Blank      Freq       Pixel
              //  H    V        H     V   H   V   H   V   Freq
              //#if 0 //Output~59.94Hz
              {1,  640, 480,PI_P|ASPECT_43,   /*800, 525, */ 0x00,  96,48,160,  2,33,45,  31,469, 59,940  },  //  25.175,  CRT/
             -Dig MTS [10]
              {3,  720, 480,PI_P|ASPECT_BOTH, /*858, 525, */ 0x00,  62,60,138,  6,30,45,  31,469, 59,940  },  //  27.000,  CRT
             -/Dig 770.2 [19]
              {4, 1280, 720,PI_P|ASPECT_169,  /*1650, 750,*/ 0x11,  40,220,370, 5,20,30,  44,955, 59,939  },  //  74.175,  Dig
             - 770.3 [20]
              {5, 1920,1080,PI_I|ASPECT_169,  /*2200,1125,*/ 0x11,  44,148,280, 5,15,22,  33,716, 59,939  },  //  74.175,  CRT
             - 770.3 [20]
              {7, 1440, 480,PI_I|ASPECT_BOTH, /*1716, 525,*/ 0x00,  124,114,276,3,15,22,  15,734, 59,940  },  //  27.000, CRT
             - 770.2 [19]
              {9, 1440, 240,PI_P|ASPECT_BOTH, /*1716, 262,*/ 0x00,  124,114,276,3,15,22,  15,734, 60, 54  },  //  27.000, CR
             -T 770.2 [19]
              {9, 1440, 240,PI_P|ASPECT_BOTH, /*1716, 263,*/ 0x00,  124,114,276,3,15,23,  15,734, 59,826  },  //  27.000, CR
             -T 770.2 [19]
              {11,2880, 480,PI_I|ASPECT_BOTH, /*3432, 525,*/ 0x00,  248,228,552,3,15,22,  15,734, 59,940  },  //  54.000, CR
             -T 770.2 [19]
              {13,2880, 240,PI_P|ASPECT_BOTH, /*3432, 262,*/ 0x00,  248,228,552,3,15,22,  15,734, 60, 54  },  //  54.000, CR
             -T 770.2 [19]
              {13,2880, 240,PI_P|ASPECT_BOTH, /*3432, 263,*/ 0x00,  248,228,552,3,15,23,  15,734, 59,826  },  //  54.000, CR
             -T 770.2 [19]
              {15,1440, 480,PI_P|ASPECT_BOTH, /*1716, 525,*/ 0x00,  124,120,276,6,30,45,  31,469, 59,940  },  //  54.000, CR
             -T/Dig 770.2 [19]
              {16,1920,1080,PI_P|ASPECT_169,  /*2200,1125,*/ 0x11,  44,148,280, 5,36,45,  67,432, 59,939  },  // 148.350, Di
             -g
              //#endif
              
              {1,  640, 480,PI_P|ASPECT_43,   /*800, 525, */  0x00, 96,48,160,  2,33,45,  31,500, 60,  0},  //  25.200,   CRT/
             -Dig MTS [10]
              {3,  720, 480,PI_P|ASPECT_BOTH, /*858, 525, */  0x00, 62,60,138,  6,30,45,  31,500, 60,  0},  //  27.027,    CR
             -T/Dig 770.2 [19]
              {4, 1280, 720,PI_P|ASPECT_169,  /*1650, 750,*/  0x11, 40,220,370, 5,20,30,  45,  0, 60,  0},  //  74.250,    Di
             -g 770.3 [20]
              {5, 1920,1080,PI_I|ASPECT_169,  /*2200,1125,*/  0x11, 44,148,280, 5,15,22,  33,750, 60,  0},  //  74.250,    CR
             -T 770.3 [20]
              {7, 1440, 480,PI_I|ASPECT_BOTH, /*1716, 525,*/  0x00, 124,114,276,3,15,22,  15,750, 60,  0},  //  27.027,      
             -CRT 770.2 [19]
              {9, 1440, 240,PI_P|ASPECT_BOTH, /*1716, 262,*/  0x00, 124,114,276,3,15,22,  15,750, 60,115},  //  27.027,     
             - CRT 770.2 [19]
              {9, 1440, 240,PI_P|ASPECT_BOTH, /*1716, 263,*/  0x00, 124,114,276,3,15,23,  15,750, 59,886},  //  27.027,     
             - CRT 770.2 [19]
              {11,2880, 480,PI_I|ASPECT_BOTH, /*3432, 525,*/  0x00, 248,228,552,3,15,22,  15,750, 60,  0},  //  54.054,     
             - CRT 770.2 [19]
              {13,2880, 240,PI_P|ASPECT_BOTH, /*3432, 262,*/  0x00, 248,228,552,3,15,22,  15,750, 60,115},  //  54.054,     
             - CRT 770.2 [19]
              {13,2880, 240,PI_P|ASPECT_BOTH, /*3432, 263,*/  0x00, 248,228,552,3,15,23,  15,750, 59,886},  //  54.054,     
             - CRT 770.2 [19]
              {15,1440, 480,PI_P|ASPECT_BOTH, /*1716, 525,*/  0x00, 124,120,276,6,30,45,  31,500, 60,  0},  //  54.054,    
             -CRT/Dig 770.2 [19]
              {16,1920,1080,PI_P|ASPECT_169,  /*2200,1125,*/  0x11, 44,148,280, 5,36,45,  67,500, 60,  0},  // 148.500,    
             -Dig
C51 COMPILER V9.56.0.0   DEBUGMSG                                                          07/18/2018 10:44:46 PAGE 8   

              
              {18, 720, 576,PI_P|ASPECT_BOTH, /*864, 625, */  0x00, 64,68,144,  5,39,49,  31,250, 50,  0},  //   27.000     
             -  CRT/Dig BT1358[31]
              {19,1280, 720,PI_P|ASPECT_169,  /*1980, 750,*/  0x11, 40,220,700, 5,20,30,  37,500, 50,  0},  //   74.250       
             -Dig 296M[14]
              {20,1920,1080,PI_I|ASPECT_169,  /*2640,1125,*/  0x11, 44,148,720, 5,15,22,  28,125, 50,  0},  //   74.250     
             -  CRT 274M[12]
              {22,1440, 576,PI_I|ASPECT_BOTH, /*1728, 625,*/  0x00, 126,138,288,3,19,24,  15,625, 50,  0},  //   27.000    
             -   CRT BT656-4[33]
              {24,1440, 288,PI_P|ASPECT_BOTH, /*1728, 312,*/  0x00, 126,138,276,3,19,24,  15,625, 50, 80},  //   27.000    
             -   CRT BT656-4[33]
              {24,1440, 288,PI_P|ASPECT_BOTH, /*1728, 313,*/  0x00, 126,138,276,3,19,25,  15,625, 49,920},  //   27.000    
             -   CRT BT656-4[33]
              {24,1440, 288,PI_P|ASPECT_BOTH, /*1728, 314,*/  0x00, 126,138,276,3,19,26,  15,625, 49,761},  //   27.000    
             -   CRT BT656-4[33]
              {26,2880, 576,PI_I|ASPECT_BOTH, /*3456, 625,*/  0x00, 252,276,552,3,19,24,  15,625, 50,  0},  //   54.000    
             -   CRT BT656-4[33]
              {28,2880, 288,PI_P|ASPECT_BOTH, /*3456, 312,*/  0x00, 252,276,552,3,19,24,  15,625, 50, 80},  //   54.000    
             -   CRT BT656-4[33]
              {28,2880, 288,PI_P|ASPECT_BOTH, /*3456, 313,*/  0x00, 252,276,552,3,19,25,  15,625, 49,920},  //   54.000    
             -   CRT BT656-4[33]
              {28,2880, 288,PI_P|ASPECT_BOTH, /*3456, 314,*/  0x00, 252,276,552,3,19,26,  15,625, 49,761},  //   54.000    
             -   CRT BT656-4[33]
              {30,1440, 576,PI_P|ASPECT_BOTH, /*1728, 625,*/  0x01, 128,136,288,5,19,49,  31,250, 50,  0},  //   54.000     
             -  CRT/Dig BT1358[31]
              {31,1920,1080,PI_P|ASPECT_169,  /*2640,1125,*/  0x11, 44,148,720, 5,36,45,  56,250, 50,  0},  //   148.500  Di
             -g 274M[12]
              
              {32,1920,1080,PI_P|ASPECT_169,  /*2750,1125,*/  0x11, 44,148,830, 5,36,45,  26,973, 23,976},  //  74.175,    C
             -RT/Dig 274M[12]
              {32,1920,1080,PI_P|ASPECT_169,  /*2750,1125,*/  0x11, 44,148,830, 5,36,45,  27,  0, 24,  0},  //  74.250,    C
             -RT/Dig 274M[12]
              {33,1920,1080,PI_P|ASPECT_169,  /*2640,1125,*/  0x11, 44,148,720, 5,36,45,  28,125, 25,  0},  //  74.250,    C
             -RT/Dig 274M[12]
              {34,1920,1080,PI_P|ASPECT_169,  /*2200,1125,*/  0x11, 44,148,280, 5,36,45,  33,716, 29,970},  //  74.175,    C
             -RT/Dig 274M[12]
              {34,1920,1080,PI_P|ASPECT_169,  /*2200,1125,*/  0x11, 44,148,280, 5,36,45,  33,750, 30,  0},  //  74.250,    
             -CRT/Dig 274M[12]
              {0,0,0}
              };                      
              #endif            
 424                      
 425          
 426          //===================================================================
 427          
 428          
 429          #endif
 430          
 431          void DbgMsg_EEP_Corruptted(void)
 432          {
 433   1        Printf("\n\rSPI EEPROM is Corruptted.");
 434   1      //  Printf("\n\rPlease execute following steps.");
 435   1      //  Printf("\n\r  mcu ws 9b 0 ;turnoff cache");
 436   1      //  Printf("\n\r  ee format ;format EEPROM");
 437   1      //  Printf("\n\r  ee find   ;find bank& write position");
 438   1      //  Printf("\n\r  ee init   ;assign default video values");
 439   1      //  Printf("\n\r  ee w %bx 3  ;set DEBUG_INFO", EEP_DEBUGLEVEL);
 440   1      //  Printf("\n\r--and restart system");
 441   1      }
C51 COMPILER V9.56.0.0   DEBUGMSG                                                          07/18/2018 10:44:46 PAGE 9   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION DbgMsg_EEP_Corruptted (BEGIN)
                                           ; SOURCE LINE # 431
                                           ; SOURCE LINE # 432
                                           ; SOURCE LINE # 433
0000 7B00        R     MOV     R3,#MBYTE ?SC_0
0002 7A00        R     MOV     R2,#HIGH ?SC_0
0004 7900        R     MOV     R1,#LOW ?SC_0
0006 010000      E     AJMP    _Printf
             ; FUNCTION DbgMsg_EEP_Corruptted (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =      9    ----
   CONSTANT SIZE    =     28    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
