C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE OSDSPI
OBJECT MODULE PLACED IN .\Output\OSDSPI.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE source36\OSDSPI.c LARGE OMF2 ROM(D512K) OPTIMIZE(9,SPEED) REGFILE(.\Outp
                    -ut\TW8836B_EVB11.ORC) BROWSE INCDIR(SiI-SW;SiI-SW\HAL;SiI-SW\DEBUG;SiI-SW\CEC;.\Source36\LIB) DEFINE(EVB_11,nullFn=//) D
                    -EBUG CODE PRINT(.\List\OSDSPI.lst) TABS(2) OBJECT(.\Output\OSDSPI.obj)

line level    source

   1          /**
   2           * @file
   3           * OSDSPI.c 
   4           * @author Brian Kang
   5           * @version 1.0
   6           * @section LICENSE
   7           *  Copyright (C) 2011~2013 Intersil Corporation
   8           * @section DESCRIPTION
   9           *  low level SpiOSD layer
  10          */
  11          /*
  12          Disclaimer: THIS INFORMATION IS PROVIDED 'AS-IS' FOR EVALUATION PURPOSES ONLY.  
  13          INTERSIL CORPORATION AND ITS SUBSIDIARIES ('INTERSIL') DISCLAIM ALL WARRANTIES, 
  14          INCLUDING WITHOUT LIMITATION FITNESS FOR A PARTICULAR PURPOSE AND MERCHANTABILITY.  
  15          Intersil provides evaluation platforms to help our customers to develop products. 
  16          However, factors beyond Intersil's control could significantly affect Intersil 
  17          product performance. 
  18          It remains the customers' responsibility to verify the actual system performance.
  19          */
  20          //*****************************************************************************
  21          //
  22          //                OSD.c
  23          //
  24          //*****************************************************************************
  25          //
  26          /*
  27            BandWidth = ((SPICLK / PCLKO) * Htotal - alpha ) / 2.
  28            alpha = (3+8+8+7+2)*3 / 2.
  29                  = 42
  30          
  31          */
  32          
  33          
  34          //
  35          #include "config.h"
  36          #include "reg.h"
  37          #include "typedefs.h"
  38          #include "TW8836.h"
  39          #include "Global.h"
  40          
  41          #include "CPU.h"
  42          #include "printf.h"
  43          #include "Util.h"
  44          
  45          #include "I2C.h"
  46          #include "spi.h"
  47          
  48          #include "SOsd.h"
  49          #include "FOsd.h"
  50          #include "SpiFlashMap.h"
  51          #include "Settings.h"
  52          
  53          void dummy_osdspi_code(void)
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 2   

  54          {
  55   1        Puts("dummy_osdspi_code");
  56   1      }
  57          
  58          
  59          //==========================================
  60          //TW8836 SpiOSD Registers
  61          //
  62          //win#  addr    Group description
  63          //----  ----    ----- -----------
  64          //win0: 0x420 A   animation
  65          //win1: 0x440 B   background. low priority.
  66          //win2: 0x430 B   background. 
  67          //win3: 0x440   A
  68          //...
  69          //win8: 0x4B0 A   focused.    high priority.
  70          //----------------------------------------
  71          XDATA BYTE SpiWinBuff[10*0x10];
  72          
  73          
  74          #ifdef SUPPORT_SPIOSD
  75          
  76          struct SOsdLut_s {
  77            BYTE type;    //use flag (0x80) + LUTTYPE (BYTE:1, ADDR 0)  
  78            WORD offset;  //lut offset. if LUTTYPE_BYTE, MSB:(LutOffset >> 6),LSB:(LutOffset << 2)
  79            WORD size;    //lut size
  80            DWORD addr;   //address on SpiFlash.
  81            BYTE alpha;   //alpha_index. 0~0xFE. 0xFF measn the no-alpha.
  82          }; /* 10 */
  83          struct SOsdRle_s {
  84            BYTE win;
  85            BYTE bpp;
  86            BYTE count;
  87          };
  88          
  89          //=====================================================
  90          // SpiOSD control buffer
  91          //======================================================
  92          struct SOSD_CTRL_s {
  93            BYTE XDATA *reg[9];
  94            struct SOsdLut_s lut[9]; /* 10*9 */
  95            struct SOsdRle_s rlc[2]; /* 3*2 */
  96          } SOsdCtrl;
  97          
  98          
  99          //TW8836 has 9 windows
 100          code WORD SpiOsdWinBase[9] = { SPI_WIN0_ST, 
 101              SPI_WIN1_ST, SPI_WIN2_ST, SPI_WIN3_ST, SPI_WIN4_ST,
 102              SPI_WIN5_ST, SPI_WIN6_ST, SPI_WIN7_ST, SPI_WIN8_ST
 103              };
 104          
 105          //=============================================================================
 106          //    OSD Window Functions
 107          //=============================================================================
 108          void SOsd_init(void)
 109          {
 110   1        BYTE win;
 111   1        BYTE offset;
 112   1      
 113   1        for(win=0; win <= 8; win++) {
 114   2          if(win) offset = win+1;
 115   2          else  offset = 0;
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 3   

 116   2          SOsdCtrl.reg[win] = &SpiWinBuff[offset << 4];
 117   2        }
 118   1      }
 119          
 120          #ifdef DEBUG_OSD
              void SOsd_dump(void)
              {
                DATA BYTE XDATA *data_p;
                struct SOsdLut_s *pLut;
                BYTE win;
                BYTE i;
              
                Printf("\n\rreg:");
                for(win=0; win <= 8; win++) {
                  data_p = SOsdCtrl.reg[win];
                  Printf("\n\r\t%bd:",win);
                  for(i=0; i < 0x10; i++) {
                    Printf("%02bx ",*data_p++);
                  }
                  if(win==0) {
                    Printf("\n\r\t :");
                    for(i=0; i < 0x10; i++) {
                      Printf("%02bx ",*data_p++);
                    }
                  }
                }
                Printf("\n\rLut:");
                for(win=0; win <= 8; win++) {
                  pLut = &SOsdCtrl.lut[win];
                  Printf("\n\r\t%bd:",win);
                  Printf("%02bx ",pLut->type);
                  Printf("%03x ",pLut->offset);
                  Printf("%04x ",pLut->size);
                  Printf("%08lx ",pLut->addr);
                } 
                Printf("\n\rrlc:");
                Printf("\n\r\t%bd %bd %bd", SOsdCtrl.rlc[0].win,SOsdCtrl.rlc[0].bpp,SOsdCtrl.rlc[0].count);
                Printf("\n\r\t%bd %bd %bd", SOsdCtrl.rlc[1].win,SOsdCtrl.rlc[1].bpp,SOsdCtrl.rlc[1].count);
              }
              #endif
 156          
 157          
 158          //=============================================================================
 159          //    OSD Window Setup
 160          //=============================================================================
 161          
 162          
 163          //-----------------------------------------------------------------------------
 164          // R40E[7:4]  OSD Linebuffer MSB
 165          
 166          
 167          
 168          //-----------------------------------------------------------------------------
 169          /**
 170          * Description
 171          * Set SpiOsd DE value.
 172          *
 173          * How to calculate DE value.
 174          * HDE = REG(0x210[7:0])
 175          * PCLKO = REG(0x20d[1:0]) {0,1,2,2}
 176          * PCLKO = REG(0x20d[1:0]) {1,1,1,1}  new
 177          * result = HDE + PCLKO - 17
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 4   

 178          * @param
 179          * @return
 180          */
 181          void SpiOsdSetDeValue(void)
 182          {
 183   1        XDATA WORD wTemp;
 184   1        BYTE hDE,pclko;
 185   1      
 186   1        hDE = ReadTW88(REG210);
 187   1        pclko = ReadTW88(REG20D) & 0x03;
 188   1        //if(pclko == 3)
 189   1        //  pclko = 2;
 190   1        //pclko = 1;
 191   1        pclko = 0;
 192   1      
 193   1        wTemp = (WORD)hDE + pclko - 18;
 194   1      
 195   1      #if defined(PANEL_AUO_B133EW01) || defined(PANEL_1024X600)
                wTemp--;
              #endif
 198   1      
 199   1        WriteTW88(REG40E, (BYTE)(wTemp>>8) ); // write SPI OSD DE value(high nibble)
 200   1        WriteTW88(REG40F, (BYTE)wTemp );      // write SPI OSD DE value(low byte)
 201   1      #ifdef DEBUG_OSD
                dPrintf("\n\rSpiOsdDe:%04x",wTemp);   
              #endif
 204   1      }
 205          
 206          
 207          //-----------------------------------------------------------------------------
 208          /**
 209          * Description
 210          * Enable SpiOsd.
 211          * It is a HW function.
 212          *
 213          *   If enable SpiOSD, HW uses CLKPLL.(normally use divider 1.5).
 214          *   If disable SpiOSD, HW uses 27MHz.
 215          *
 216          * set I2C_delay_base depend on the MCU clock speed.
 217          *
 218          * On MODEL_TW8835_EXTI2C.
 219          * Do not toggle MCUSPI clock. Internal MCU can not make a synch.
 220          *
 221          * @param  en
 222          * 1: Enable SpiOSD, 0:Disable SpiOSD.
 223          * @return void
 224          * 
 225          * extern
 226          * I2C_delay_base  
 227          */
 228          void SpiOsdEnable(BYTE en)
 229          {
 230   1        BYTE dat;
 231   1        dat = ReadTW88(REG400);
 232   1        if( en ) {
 233   2          WriteTW88(REG400, dat | 0x04);            //enable SpiOSD
 234   2        }
 235   1        else {
 236   2          WriteTW88(REG400, dat & ~0x04);           //disable SpiOSD
 237   2        }
 238   1      }
 239          
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 5   

 240          //==============================
 241          // Windows Finctions
 242          //==============================
 243          
 244          //-----------------------------------------------------------------------------
 245          /**
 246          * Description
 247          * Enable SpiOsd Window. HW function.
 248          * @param  winno
 249          * 0 to 8.
 250          * @param  en
 251          * 1:Enable 0:disable
 252          * @return void
 253          */
 254          /**
 255          * 
 256          */
 257          #if 0
              void SpiOsdWinHWEnable(BYTE winno, BYTE en)
              {
              #if 0
                XDATA WORD index;
                XDATA BYTE dat;
              
                index = SpiOsdWinBase[winno] + SPI_OSDWIN_ENABLE;
              
                dat = ReadTW88(index);
                if( en ) WriteTW88(index, dat | 0x01);
                else     WriteTW88(index, dat & 0xfe);
              #endif
                //update buffer
                SOsd_Enable(winno,en);
                SOsd_UpdateReg(winno, winno);
              }
              #endif
 275          
 276          
 277          
 278          
 279          //-----------------------------------------------------------------------------
 280          /**
 281          * Description
 282          *
 283          * @param
 284          * @return
 285          */
 286          //BYTE SpiOsdWinIsOn(BYTE winno){}
 287          
 288          
 289          //-----------------------------------------------------------------------------
 290          /**
 291          * Description
 292          * enable SpiOSD window on WinBuff.
 293          * @param
 294          * @return
 295          */
 296          //void OLD___SpiOsdWinBuffEnable(BYTE winno, BYTE en) { }
 297          void SOsd_Enable(BYTE win, BYTE fOn)
 298          {
 299   1        XDATA BYTE  *p;
 300   1        p = SOsdCtrl.reg[win];
 301   1        if(fOn) *p |= 0x01;
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 6   

 302   1        else    *p &= 0xfe;
 303   1      }
 304          
 305          
 306          //-----------------------------------------------------------------------------
 307          /**
 308          * Description
 309          * clear all SpiWinBuff[]
 310          * @param  hw
 311          * 1:update HW. 0:skip HW update.
 312          * @return void
 313          */
 314          //void OLD___SOsdWinBuffClean(BYTE hw){}
 315          void SOsd_CleanReg(void)
 316          {
 317   1        BYTE i;
 318   1        for(i=0; i < 0xA0; i++)
 319   1          SpiWinBuff[i] =0; 
 320   1      }
 321          //void SOsd_CleanLutOffset(void)
 322          //{
 323          //  BYTE i;
 324          //  for(i=0; i <= 8; i++)
 325          //    SOsdCtrl.LutOffset[i] =0; 
 326          //}
 327          #if 0
              void SOsdHw_Clean(void)
              {
                SpiOsdWinHWOffAll(1);
                SOsd_SetRlc(0,0,0); //disable RLC
                SOsd_UpdateRlc();
              }
              //use 
              //  SOsd_CleanReg()
              //  SOsd_CleanRlc()
              //
              //  SOsd_UpdateReg()
              //  SOsd_UpdateRlc()
              //
              #endif
 342          //-----------------------------------------------------------------------------
 343          /**
 344          * Description
 345          *   write SpiWinBuff to HW registers
 346          *
 347          * start address for ecah window
 348          *
 349          * WIN     0 1 2 3 4 5 6 7 8
 350          *   ----        --- --- --- --- --- --- --- --- ---
 351          * register  420 440 450 460 470 480 490 4A0 4B0
 352          *
 353          * @param  start: start window. between 0 to 8
 354          * @param  end:   end window. between 0 to 8
 355          *
 356          * Note: this function needs a WaitVBlank(1).
 357          *       Execute WaitVBlank(1) before you call this function.
 358          */
 359          #pragma SAVE
 360          #pragma OPTIMIZE(8,SPEED)
 361          //void OLD___SOsdWinBuffWrite2Hw(BYTE start, BYTE end){}
 362          void SOsd_UpdateReg(BYTE s_win, BYTE e_win)
 363          {
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 7   

 364   1        BYTE win;
 365   1        XDATA BYTE *data_p;
 366   1        DATA WORD reg_i;
 367   1      
 368   1      #ifdef DEBUG_OSD
                dPrintf("\n\rSOsd_UpdateReg(%bd,%bd)",s_win,e_win);
                //NOTE: If you print the debug message, we have to check the vblank again.
                WaitVBlank(1);
              #endif
 373   1      
 374   1        for(win=s_win; win <= e_win; win++) {
 375   2          data_p = SOsdCtrl.reg[win]; 
 376   2          reg_i = SpiOsdWinBase[win];
 377   2      
 378   2          WriteTW88(reg_i++, *data_p++);  //0
 379   2          WriteTW88(reg_i++, *data_p++);  //1
 380   2          WriteTW88(reg_i++, *data_p++);  //2
 381   2          WriteTW88(reg_i++, *data_p++);  //3
 382   2          WriteTW88(reg_i++, *data_p++);  //4
 383   2          WriteTW88(reg_i++, *data_p++);  //5
 384   2          WriteTW88(reg_i++, *data_p++);  //6
 385   2          WriteTW88(reg_i++, *data_p++);  //7
 386   2          WriteTW88(reg_i++, *data_p++);  //8
 387   2          WriteTW88(reg_i++, *data_p++);  //9
 388   2          WriteTW88(reg_i++, *data_p++);  //A
 389   2          WriteTW88(reg_i++, *data_p++);  //B
 390   2          WriteTW88(reg_i++, *data_p++);  //C
 391   2          WriteTW88(reg_i++, *data_p++);  //D
 392   2          WriteTW88(reg_i++, *data_p++);  //E
 393   2          WriteTW88(reg_i++, *data_p++);  //F
 394   2          if(win==0) {
 395   3            WriteTW88(reg_i++, *data_p++);  //10  REG430
 396   3            WriteTW88(reg_i++, *data_p++);  //11
 397   3            WriteTW88(reg_i++, *data_p++);  //12
 398   3            WriteTW88(reg_i++, *data_p++);  //13
 399   3            WriteTW88(reg_i++, *data_p++);  //14
 400   3            WriteTW88(reg_i++, *data_p++);  //15
 401   3            WriteTW88(reg_i++, *data_p++);  //16 REG436
 402   3            WriteTW88(reg_i++, *data_p++);  //17 REG437
 403   3          }
 404   2        }
 405   1      }
 406          #pragma RESTORE
 407          
 408          
 409          #if 0
              //-----------------------------------------------------------------------------
              /**
              * Description
              * check win buff, if HW is enabled and buff is not, disable HW
              * @param
              * @return
              */
              //void SpiOsdWinBuffSynchEnable(void)
              //{
              //}
              #endif
 421          
 422          //-----------------------------------------------------------------------------
 423          /**
 424          * Description
 425          * turn off all SpiOsd Window.
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 8   

 426          * @param
 427          * @return
 428          * @see SpiOsdWinHWEnable
 429          */
 430          void SpiOsdWinHWOffAll(BYTE wait)
 431          {
 432   1        BYTE win;
 433   1      
 434   1        if(wait)
 435   1          WaitVBlank(wait);
 436   1      
 437   1        SOsd_CleanRlc();
 438   1        for(win=0; win <= 8; win++)
 439   1          SOsd_Enable(win,OFF);
 440   1      
 441   1        SOsd_UpdateRlc();
 442   1        SOsd_UpdateReg(0, 8);
 443   1      }
 444          //void SOsdHw_OffAll(BYTE wait)
 445          //{
 446          //  if(wait)
 447          //    WaitVBlank(wait);
 448          //}
 449          
 450          //-----------------------------------------------------------------------------
 451          /**
 452          * Description
 453          *   set image location
 454          *
 455          * @param  winno
 456          * SpiOsd Window number. 0..8
 457          * @param  start:
 458          * @return void
 459          *
 460          * reg
 461          * WINx Image Location on SpiFlash  
 462          */
 463          //void OLD___SpiOsdWinImageLoc(BYTE winno, DWORD start) {}
 464          //TW8836 uses 4bit align registers.
 465          void SOsd_SetSpiStartOffset(BYTE win, DWORD offset)
 466          {
 467   1        DATA BYTE XDATA *data_p;
 468   1      
 469   1        data_p = SOsdCtrl.reg[win]; 
 470   1        data_p += SPI_OSDWIN_BUFFERSTART;
 471   1        *data_p++ =  (BYTE)(offset>>20);  //+0x07
 472   1        *data_p++ =  (BYTE)(offset>>12);  //+0x08
 473   1        *data_p   =  (BYTE)(offset>>4);   //+0x09
 474   1      
 475   1        if(win==0)  data_p += 0x0E;     //+0x17  
 476   1        else    data_p += 6;      //+0x0F
 477   1        *data_p = (BYTE)offset & 0x0F;   
 478   1      }
 479          
 480          //-----------------------------------------------------------------------------
 481          /**
 482          * Description
 483          *   set image bit location.
 484          *
 485          * @param  winno
 486          * from 1 to 8. win0 does not have a bit operation.
 487          * @param  start
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 9   

 488          * @return
 489          *
 490          * reg
 491          * win0 win1       win2 
 492          * N/A  0x44A[7:6] 0x45A[7:6].,,,
 493          */
 494          //void OLD___SpiOsdWinImageLocBit(BYTE winno, BYTE start){}
 495          void SOsd_SetSpiStartBit(BYTE win, BYTE start)
 496          {
 497   1        DATA BYTE XDATA *data_p;
 498   1        BYTE bTemp;
 499   1      
 500   1        if(win==0)
 501   1          //wrong. win0 do not have a bit operation.
 502   1          return;
 503   1      
 504   1        data_p = SOsdCtrl.reg[win]; 
 505   1        data_p += SPI_OSDWIN_BUFFERSTART_BIT;
 506   1        bTemp = *data_p;
 507   1        bTemp &= 0x3F;
 508   1        bTemp |= (start << 6);
 509   1        *data_p = bTemp;
 510   1      }
 511          
 512          
 513          //-----------------------------------------------------------------------------
 514          /**
 515          * Description
 516          * set image buffer width
 517          * @param  winno
 518          * @param  w
 519          * width
 520          * @return void
 521          */
 522          //static void OLD___SpiOsdWinImageSizeW(BYTE winno, WORD w) {}
 523          #if 0
              static void SOsd_SetImgWidth(BYTE win, WORD width)
              {
                DATA BYTE XDATA *data_p;
                BYTE bTemp;
              
                data_p = SOsdCtrl.reg[win] + SPI_OSDWIN_DISPSIZE; 
              
                bTemp = *data_p & 0xC0;
                *data_p++ = (BYTE)(width >> 8 | bTemp);   //+0x0A
                *data_p++ = (BYTE)width;          //+0x0B
              }
              #endif
 536          
 537          //-----------------------------------------------------------------------------
 538          /**
 539          * Description
 540          * set image width and height
 541          * @param  winno
 542          * @param  w
 543          * width
 544          * @param  h
 545          * height
 546          * @return void
 547          */
 548          //void OLD___SpiOsdWinImageSizeWH (BYTE winno, WORD w, WORD h) {}
 549          void SOsd_SetImageWidthHeight(BYTE win, WORD w, WORD h)
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 10  

 550          {
 551   1        DATA BYTE XDATA *data_p;
 552   1        BYTE bTemp;
 553   1      
 554   1        data_p = SOsdCtrl.reg[win] + SPI_OSDWIN_DISPSIZE; 
 555   1        if(win) {
 556   2          //WIN1to8 need only Width.
 557   2          bTemp = *data_p & 0xC0;
 558   2          *data_p++ = (BYTE)(w >> 8 | bTemp);   //+0x0A
 559   2          *data_p++ = (BYTE)w;          //+0x0B
 560   2        }
 561   1        else {
 562   2          bTemp = (BYTE)(h >> 8);
 563   2          bTemp <<= 4;
 564   2          bTemp |= (BYTE)(w >> 8);
 565   2          *data_p++ = bTemp;    //42A
 566   2          *data_p++ = (BYTE)w;  //42B
 567   2          *data_p++ = (BYTE)h;  //42C
 568   2        }
 569   1      }
 570          
 571          
 572          //-----------------------------------------------------------------------------
 573          /**
 574          * Description
 575          * set window position and size
 576          * @param
 577          * @return
 578          */
 579          //WINx Screen(win) Pos & Size
 580          //void SpiOsdWinScreen(BYTE winno, WORD x, WORD y, WORD w, WORD h)
 581          void SOsd_SetScreen(BYTE winno, WORD x, WORD y, WORD w, WORD h)
 582          {
 583   1        DATA BYTE XDATA *data_p;
 584   1        BYTE value;
 585   1      
 586   1        data_p = SOsdCtrl.reg[winno];
 587   1      
 588   1        data_p += SPI_OSDWIN_SCREEN;
 589   1        value = (y >> 8);
 590   1        value <<= 4;
 591   1        value |= (x >> 8);
 592   1        *data_p++ = value;    //421 441...
 593   1        *data_p++ = (BYTE)x;  //422 442...  
 594   1        *data_p++ = (BYTE)y;  //423 443...
 595   1        
 596   1        value = (h >> 8);
 597   1        value <<= 4;
 598   1        value |= (w >> 8);
 599   1        *data_p++ = value;    //424 444...
 600   1        *data_p++ = (BYTE)w;  //425 445...    
 601   1        *data_p++ = (BYTE)h;  //426 446...   
 602   1      }
 603          
 604          
 605          //=============================================================================
 606          //    Load LUT
 607          //=============================================================================
 608          //
 609          //-----------------------------------------------------------------------------
 610          /**
 611          * Description
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 11  

 612          * set Lut Offset
 613          * LUT offset use 5bit & 16 unit
 614          * @param
 615          * @return
 616          */
 617          void SOsd_SetLutOffset( BYTE winno, WORD table_offset )
 618          {
 619   1        DATA BYTE XDATA *data_p;
 620   1      
 621   1        data_p = SOsdCtrl.reg[winno];
 622   1      
 623   1        data_p += SPI_OSDWIN_LUT_PTR;
 624   1        if(!winno) data_p += 4;
 625   1        
 626   1        //LUT offset use 5bit & 16 unit
 627   1        *data_p = table_offset >> 4;
 628   1      }
 629          
 630              
 631          
 632          
 633          //=============================================================================
 634          //    Pixel Width
 635          //=============================================================================
 636          //-----------------------------------------------------------------------------
 637          /**
 638          * Description
 639          *   set pixel width
 640          *
 641          * @param  winno
 642          * @param  bpp
 643          * 0:4bit, 1:6bit others:8bit.
 644          * 7bpp uses 8bit.
 645          * @return void
 646          */
 647          void SOsd_SetPixelWidth(BYTE winno, BYTE bpp)
 648          {
 649   1        DATA BYTE XDATA *data_p;
 650   1        BYTE mode;
 651   1      
 652   1        if(bpp==4)    mode=0;
 653   1        else if(bpp==6) mode=1;
 654   1        else      mode=2;
 655   1      
 656   1        data_p = SOsdCtrl.reg[winno];
 657   1      
 658   1        *data_p &= 0x3f;
 659   1        *data_p |= (mode <<6);
 660   1      }
 661          //-----------------------------------------------------------------------------
 662          /**
 663          * Description
 664          *   fill color
 665          * color will be an offset from the LUT location that Window have.
 666          * If window starts LUT from 80, the color value means color+80 indexed color.
 667          * @param  winno
 668          * @param  color
 669          * @return
 670          */
 671          /**
 672          */
 673          #if 0
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 12  

              void SpiOsdWinFillColor( BYTE winno, BYTE color )
              {
                WORD index;
              
                index = SpiOsdWinBase[winno];
              
                if ( color ) {
                  WriteTW88(index, (ReadTW88(index ) | 0x04));        // en Alpha & Global
                }
                else {
                  WriteTW88(index, (ReadTW88(index ) & 0xFB ) );        // dis Alpha & Global
                }
                index = SpiOsdWinBase[winno] + SPI_OSDWIN_FILLCOLOR;
                if(!winno)  index += 8;
                WriteTW88(index, color );
              }
              #endif
 691          
 692          //-----------------------------------------------------------------------------
 693          /**
 694          * Description
 695          *   Enable Global Alpha and set the alpha value
 696          * @param winno
 697          * @param alpha
 698          * 0 to 7F. 0x7F is a higest transparent value.
 699          * @return
 700          */
 701          /**
 702          * set global alpha
 703          */
 704          void SOsd_SetGlobalAlpha( BYTE winno, BYTE alpha )
 705          {
 706   1        DATA BYTE XDATA *data_p;
 707   1      
 708   1        data_p = SOsdCtrl.reg[winno];
 709   1      
 710   1        *data_p &= 0xCF;
 711   1        if(alpha) *data_p |= 0x10;
 712   1      
 713   1        data_p += SPI_OSDWIN_ALPHA;
 714   1        if(!winno)  data_p += 4;
 715   1        *data_p = alpha;
 716   1      }
 717          
 718          //-----------------------------------------------------------------------------
 719          /**
 720          * Description
 721          * set Pixel alpha
 722          * @param winno
 723          * @param alpha
 724          * 0 to 7F. 0x7F is a higest transparent value.
 725          * @return
 726          */
 727          void SOsd_SetPixelAlpha( BYTE winno, BYTE alpha )
 728          {
 729   1        DATA BYTE XDATA *data_p;
 730   1      
 731   1        data_p = SOsdCtrl.reg[winno];
 732   1      
 733   1        if(alpha) *data_p |= 0x30;
 734   1        else    *data_p &= 0xCF;
 735   1      
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 13  

 736   1        data_p += SPI_OSDWIN_ALPHA;
 737   1        if(!winno)  data_p += 4;
 738   1        *data_p = alpha;
 739   1      }
 740          
 741          
 742          
 743          //-----------------------------------------------------------------------------
 744          /**
 745          * Description
 746          * adjust Win0 priority
 747          *   NOTE:Only fow Win0.
 748          * @param
 749          * @return
 750          */
 751          #if 0
              //TW8836. REG420[1] is for Zoom, not a priority
              void SOsd_SetWin0Priority(BYTE high)
              {
                DATA BYTE XDATA *data_p;
              
                data_p = SOsdCtrl.reg[0];
              
                if(high) *data_p |= 0x02;
                else     *data_p &= 0xfd;
              }
              #endif
 763          
 764          //=============================================================================
 765          //    Animation
 766          //=============================================================================
 767          //-----------------------------------------------------------------------------
 768          /**
 769          * Description
 770          *   set Animation.
 771          * Only for WIN0
 772          * @param mode 
 773          * -0:display one time of the loop and then disappear
 774          * -1:display one time of the loop and then stay at the last frame
 775          * -2:Enable looping 
 776          * -3:static. Show the frame pointed by (0x431 and 0x432)
 777          * @param Duration duration time of each frame (in unit of VSync)
 778          * - 0: infinite
 779          * - 1: One VSync period
 780          * - max 0xFF: 255 VSync period    
 781          * @return
 782          */
 783          void SOsd_SetWin0Animation(BYTE mode, BYTE FrameH, BYTE FrameV, BYTE Duration)
 784          {
 785   1        DATA BYTE XDATA *data_p;
 786   1      
 787   1        data_p = SOsdCtrl.reg[0];
 788   1        data_p += SPI_OSDWIN_ANIMATION;
 789   1      
 790   1        *data_p++ = FrameH;
 791   1        *data_p++ = FrameV;
 792   1        *data_p++ = Duration;
 793   1      
 794   1        *data_p &= 0x3f;
 795   1        *data_p |= (mode << 6);
 796   1      }
 797          
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 14  

 798          //-----------------------------------------------------------------------------
 799          /**
 800          * Description
 801          * set Win0 X,Y
 802          * @param
 803          * @return
 804          */
 805          void SOsd_SetWin0ImageOffsetXY (WORD x, WORD y)
 806          {
 807   1        BYTE value;
 808   1        DATA BYTE XDATA *data_p;
 809   1      
 810   1        data_p = SOsdCtrl.reg[0];     //Only WIN0
 811   1        data_p += SPI_OSDWIN_DISPOFFSET;
 812   1      
 813   1        value  = (BYTE)(y >> 8);
 814   1        value <<=4;
 815   1        value |= (BYTE)(x >> 8);
 816   1        *data_p++ = value;
 817   1        *data_p++ = (BYTE)x;
 818   1        *data_p++ = (BYTE)y;
 819   1      }
 820          
 821          
 822          
 823          //-----------------------------------------------------------------------------
 824          /**
 825          * Description
 826          * clear HwBuff.
 827          * @param
 828          * @return
 829          */
 830          //void OLD___SOsdHwBuffClean(void){ }
 831          void SOsd_CleanLut(void)
 832          {
 833   1        struct SOsdLut_s *pLut;
 834   1        BYTE win;
 835   1      
 836   1        for(win=0; win <= 8; win++) {
 837   2          pLut = &SOsdCtrl.lut[win];
 838   2          pLut->type = 0;
 839   2          pLut->offset = 0;
 840   2          pLut->size = 0;
 841   2          pLut->addr = 0;
 842   2          pLut->alpha = 0xFF; //disable alpha
 843   2        }
 844   1      }
 845          void SOsd_CleanRlc(void)
 846          {
 847   1        SOsdCtrl.rlc[0].win = 0;  SOsdCtrl.rlc[0].bpp = 0; SOsdCtrl.rlc[0].count = 0;
 848   1        SOsdCtrl.rlc[1].win = 0;  SOsdCtrl.rlc[1].bpp = 0; SOsdCtrl.rlc[1].count = 0;
 849   1      }
 850          
 851          //-----------------------------------------------------------------------------
 852          /**
 853          * Description
 854          * set LUT info to HwBuff.
 855          * @param  winno
 856          * @param  LutOffset
 857          * destination LUT location
 858          * @param  size
 859          * @param  address
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 15  

 860          * image location on SpiFlash
 861          * @return
 862          */
 863          //void OLD___SOsdHwBuffSetLut(BYTE win, /*BYTE type,*/  WORD LutOffset, WORD size, DWORD address) {}
 864          
 865          void SOsd_SetLut(BYTE win, BYTE type, WORD LutOffset, WORD size, DWORD address, BYTE alpha_index)
 866          {
 867   1        struct SOsdLut_s *pLut;
 868   1      
 869   1        pLut = &SOsdCtrl.lut[win];
 870   1      
 871   1        pLut->type = 0x80 | type; //with USE flag
 872   1        pLut->offset = LutOffset;
 873   1        pLut->size = size;
 874   1        pLut->addr = address;
 875   1        pLut->alpha = alpha_index;
 876   1      
 877   1      }
 878           
 879          //-----------------------------------------------------------------------------
 880          /**
 881          * Description
 882          * set RLE info to HwBuff
 883          * @param
 884          * @return
 885          */
 886          //void OLD___SOsdHwBuffSetRle(BYTE win, BYTE bpp, BYTE count) {}
 887          void SOsd_SetRlc(BYTE win, BYTE bpp, BYTE count)
 888          {
 889   1        struct SOsdRle_s *pRlc;
 890   1      
 891   1        if(win==0) {
 892   2          Printf("\n\rPlease use SOsd_CleanRlc()");
 893   2          return;
 894   2        }
 895   1      
 896   1        if(win==1 || win==2)  pRlc = &SOsdCtrl.rlc[0];  //background group
 897   1        else          pRlc = &SOsdCtrl.rlc[1];  //foreground group
 898   1        pRlc->win   = win;
 899   1        pRlc->bpp   = bpp;
 900   1        pRlc->count = count;
 901   1      }
 902          
 903          //-----------------------------------------------------------------------------
 904          /**
 905          * Description
 906          * set Alpha to HwBuff
 907          * @param
 908          * @return
 909          */
 910          //void OLD___SOsdHwBuffSetAlpha(BYTE win, WORD alpha_index){}
 911          void SOsd_SetPixelAlphaIndex(BYTE win, BYTE alpha_index)
 912          {
 913   1        struct SOsdLut_s *pLut;
 914   1      
 915   1        pLut = &SOsdCtrl.lut[win];
 916   1        pLut->alpha = alpha_index;
 917   1      }
 918          
 919          
 920          
 921          /*
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 16  

 922          example: volatile & memory register access
 923          volatile BYTE XDATA mm_dev_R1CD _at_ 0xC1CD;  //use 1 XDATA BYTE
 924          //#define TW8835_R1CD (*((unsigned char volatile xdata *) (0xc000+0x1CD)))
 925          #define TW8835_R1CD (*((unsigned char volatile xdata *) (REG_START_ADDRESS+0x1CD) ))
 926          void Dummy_Volatile_memory_register_test(void)
 927          {
 928            volatile BYTE mode;
 929            volatile BYTE XDATA *p; // = (BYTE XDATA *)0xC1CD;
 930          
 931            mode = *(volatile BYTE XDATA*)(0xC1CD);
 932          
 933            p = (BYTE XDATA *)0xC1CD;
 934            mode = *p;
 935          
 936            mode = mm_dev_R1CD;
 937          
 938            mode = TW8835_R1CD;
 939          }
 940          */
 941          
 942          //-----------------------------------------------------------------------------
 943          /**
 944          * Description
 945          * write H2Buff to real HW
 946          * @param
 947          * @return
 948          */
 949          
 950          //void OLD___SOsdHwBuffWrite2Hw(void){}
 951          
 952          
 953          //see SpiOsdLoadLUT() and SpiOsdIoLoadLUT().
 954          void SOsd_UpdateLut(BYTE win, BYTE fAlpha)
 955          {
 956   1        struct SOsdLut_s *pLut;
 957   1        BYTE bTemp;
 958   1        WORD wTemp;
 959   1      //  DWORD dTemp;
 960   1        WORD LutOffset;
 961   1        BYTE type;
 962   1      #ifdef DEBUG_SPIFLASH_TEST
 963   1        volatile BYTE B0,B;
 964   1      #endif
 965   1      
 966   1      
 967   1      
 968   1      #ifdef DEBUG_OSD
                Printf("\n\rSOsd_UpdateLut(%bd,%bd)",win,fAlpha);
                SOsd_dump();
              #endif
 972   1      
 973   1        pLut = &SOsdCtrl.lut[win];
 974   1      
 975   1        //check Use flag.
 976   1        type = pLut->type;
 977   1        if((type & 0x80)==0)
 978   1          return;
 979   1        type &= LUTTYPE_MASK;
 980   1      
 981   1        //if LUTTYPE_ADDR, use IO method.
 982   1        if(type==LUTTYPE_ADDR) {
 983   2          SpiOsdIoLoadLUT(win, type, pLut->offset, pLut->size, pLut->addr, pLut->alpha);
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 17  

 984   2          return;
 985   2        }
 986   1      
 987   1      
 988   1        LutOffset = pLut->offset;
 989   1      
 990   1        //select PCLK domain
 991   1        //TW8836:divider3, TW8835:divider2.
 992   1      #ifdef DEBUG_SPIFLASH_TEST
 993   1        //win_lut_debug = 0;
 994   1        if(LutOffset) {
 995   2          WriteTW88(REG410,0x80/*0xa0*/); //read B
 996   2          WriteTW88(REG411,0);    //addr 0
 997   2          //read twice
 998   2          B0=ReadTW88(REG412);    
 999   2          B0=(volatile)ReadTW88(REG412);    
1000   2          //win_lut_debug = 1;
1001   2        }
1002   1      #endif
1003   1      
1004   1        bTemp = SOSD_LUT_WEN;                
1005   1        if(type==LUTTYPE_ADDR)    bTemp |= SOSD_LUT_INC_ADDR;               
1006   1        else            bTemp |= SOSD_LUT_INC_COLM;   // (TW8835 & TW8836 prefer this mode)
1007   1        if(win == 1 || win == 2)  bTemp |= SOSD_LUT_BGRP;
1008   1        else if(LutOffset & 0x0F00) bTemp |= SOSD_LUT_HIGH256;  
1009   1        WriteTW88(REG410, bTemp );
1010   1        WriteTW88(REG411, (BYTE)LutOffset );    // LUT addr.
1011   1      
1012   1        wTemp = pLut->offset;
1013   1        if(type != LUTTYPE_ADDR)
1014   1          wTemp <<= 2;
1015   1        SpiFlash_Read_SOsd(pLut->addr, wTemp, pLut->size);
1016   1      
1017   1      #ifdef DEBUG_SPIFLASH_TEST
1018   1        if(LutOffset) {
1019   2          WriteTW88(REG410,0x80/*0xa0*/); //read B
1020   2          WriteTW88(REG411,0);    //addr 0
1021   2          //read twice
1022   2          B=ReadTW88(REG412);   
1023   2          B=ReadTW88(REG412); 
1024   2      
1025   2          if(B0 != B) {
1026   3            WriteTW88(REG411, 0);     //addr 0
1027   3      //BK110809      WriteTW88(REG412, B0);  //overwrite
1028   3            Printf("\n***BUGBUG*** B0 %bx->%bx",B, B0); //--pls, use without EA
1029   3          }
1030   2        }
1031   1      #endif
1032   1      
1033   1        /*updata alpha..*/
1034   1        if(fAlpha) {
1035   2          bTemp = pLut->alpha;
1036   2          if(bTemp != 0xFF) {
1037   3            LutOffset += bTemp;
1038   3            bTemp = SOSD_LUT_WEN | SOSD_LUT_INC_NO | SOSD_LUT_ATTR;
1039   3            if(win==1 || win==2)  bTemp |= SOSD_LUT_BGRP; 
1040   3            else if(LutOffset >> 8) bTemp |= SOSD_LUT_HIGH256;
1041   3      
1042   3            WriteTW88(REG410, bTemp);
1043   3            WriteTW88(REG411, (BYTE)LutOffset );    // alpha index
1044   3            WriteTW88(REG412, 0x7F/*value*/ );      // alpha value
1045   3          }
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 18  

1046   2        }
1047   1      }
1048          
1049          void SOsd_UpdatePixelAlpha(BYTE win)
1050          {
1051   1        struct SOsdLut_s *pLut;
1052   1        BYTE bTemp;
1053   1        WORD LutOffset;
1054   1        BYTE alpha_index;
1055   1        BYTE type;
1056   1        
1057   1        pLut = &SOsdCtrl.lut[win];
1058   1        type = pLut->type & LUTTYPE_MASK;
1059   1        alpha_index = pLut->alpha;
1060   1        //updata alpha..
1061   1        if(alpha_index != 0xFF) {
1062   2          LutOffset = pLut->offset;
1063   2          LutOffset += alpha_index;
1064   2      
1065   2          bTemp = SOSD_LUT_WEN | SOSD_LUT_INC_NO; 
1066   2          if(win==1 || win==2)  bTemp |= SOSD_LUT_BGRP;
1067   2          else if(LutOffset >> 8) bTemp |= SOSD_LUT_HIGH256;  
1068   2      
1069   2          WriteTW88(REG410, bTemp);
1070   2          WriteTW88(REG411, (BYTE)LutOffset );    // alpha index
1071   2          WriteTW88(REG412, 0x7F/*value*/ );      // alpha value
1072   2      
1073   2        }
1074   1      }
1075          
1076          //update everything.
1077          
1078          //SOsd_menu_show
1079          // when menu changes the page,
1080          //  if the previous page uses rlc,
1081          //  FW will update GroupB first, 
1082          void SOsd_show(BYTE fClean)
1083          {
1084   1        BYTE bTemp;
1085   1        BYTE win;
1086   1        WORD LutOffset;
1087   1        BYTE type;
1088   1        WORD wTemp;
1089   1      //  DWORD dTemp;
1090   1        struct SOsdLut_s *pLut;
1091   1      
1092   1      
1093   1      #ifdef DEBUG_OSD
                dPuts("\n\rSOsd_show.....");
                SOsd_dump();
              #endif
1097   1      
1098   1      
1099   1        WaitVBlank(1);  
1100   1        //-----------------------------
1101   1        // time cirtical section start.
1102   1        //-----------------------------
1103   1        
1104   1        //-----------------------
1105   1        //disable all
1106   1        if(fClean) {
1107   2          WriteTW88(REG420, ReadTW88(REG420) & ~0x01);
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 19  

1108   2          for(win=1; win <= 8; win++) {
1109   3            wTemp = REG430 + (win << 4);
1110   3            WriteTW88(wTemp, ReadTW88(wTemp) & ~0x01);
1111   3          }
1112   2        }
1113   1        //-----------------------
1114   1        // update Group B.
1115   1        for(win=1;win<=2;win++) {
1116   2          pLut = &SOsdCtrl.lut[win];
1117   2          type = pLut->type;
1118   2          if((type & 0x80)==0)
1119   2            continue;
1120   2          type &= LUTTYPE_MASK;
1121   2          LutOffset = pLut->offset;
1122   2      
1123   2          bTemp = SOSD_LUT_WEN | SOSD_LUT_BGRP;                
1124   2          if(type==LUTTYPE_ADDR)    bTemp |= SOSD_LUT_INC_ADDR;             
1125   2          else            bTemp |= SOSD_LUT_INC_COLM;
1126   2      
1127   2          WriteTW88(REG410, bTemp );
1128   2          WriteTW88(REG411, (BYTE)LutOffset );    // LUT addr.
1129   2      
1130   2          wTemp = pLut->offset;
1131   2          if(type != LUTTYPE_ADDR)
1132   2            wTemp <<= 2;
1133   2          SpiFlash_Read_SOsd(pLut->addr, wTemp, pLut->size);
1134   2      
1135   2          //Internal MCU is stopped until it finishes DMA.
1136   2          //So, we do not need to read back the done flag
1137   2          //    we do not need a busy check also.
1138   2          //If you are using an external MCU
1139   2          // you can use below trick to check DONE. BusyWait
1140   2          //while(ReadTW88Page() != PAGE4_SPI);     
1141   2      
1142   2          /*updata alpha..*/
1143   2          bTemp = pLut->alpha;
1144   2          if(bTemp != 0xFF) {
1145   3            LutOffset += bTemp;
1146   3            bTemp = SOSD_LUT_WEN | SOSD_LUT_INC_NO | SOSD_LUT_BGRP | SOSD_LUT_ATTR;
1147   3      
1148   3            WriteTW88(REG410, bTemp);
1149   3            WriteTW88(REG411, (BYTE)LutOffset );    // alpha index
1150   3            WriteTW88(REG412, 0x7F);          // alpha value
1151   3          }
1152   2        }
1153   1        SOsd_UpdateRlcB();
1154   1        SOsd_UpdateReg(1,2);
1155   1      
1156   1        WaitVBlank(1);  
1157   1        //-----------------------
1158   1        // update Group A.
1159   1        for(win=0;win<=8;win++) {
1160   2          if(win==1 || win==2)
1161   2            continue;
1162   2          pLut = &SOsdCtrl.lut[win];
1163   2          type = pLut->type;
1164   2          if((type & 0x80)==0)
1165   2            continue;
1166   2          type &= LUTTYPE_MASK;
1167   2          LutOffset = pLut->offset;
1168   2      
1169   2          bTemp = SOSD_LUT_WEN;                
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 20  

1170   2          if(type==LUTTYPE_ADDR)  bTemp |= SOSD_LUT_INC_ADDR;             
1171   2          else          bTemp |= SOSD_LUT_INC_COLM; 
1172   2          if(LutOffset & 0x0F00)  bTemp |= SOSD_LUT_HIGH256;
1173   2          WriteTW88(REG410, bTemp );
1174   2          WriteTW88(REG411, (BYTE)LutOffset );    // LUT addr.
1175   2      
1176   2          wTemp = pLut->offset;
1177   2          if(type != LUTTYPE_ADDR)
1178   2            wTemp <<= 2;
1179   2          SpiFlash_Read_SOsd(pLut->addr, wTemp, pLut->size);
1180   2      
1181   2          //Internal MCU is stopped until it finishes DMA.
1182   2          //So, we do not need to read back the done flag
1183   2          //    we do not need a busy check also.
1184   2          //If you are using an external MCU
1185   2          // you can use below trick to check DONE. BusyWait
1186   2          //while(ReadTW88Page() != PAGE4_SPI);     
1187   2      
1188   2          /*updata alpha..*/
1189   2          bTemp = pLut->alpha;
1190   2          if(bTemp != 0xFF) {
1191   3            LutOffset += bTemp;               
1192   3            bTemp = SOSD_LUT_WEN | SOSD_LUT_INC_NO | SOSD_LUT_ATTR ; 
1193   3            if(LutOffset >> 8)  bTemp |= SOSD_LUT_HIGH256;
1194   3      
1195   3            WriteTW88(REG410, bTemp);
1196   3            WriteTW88(REG411, (BYTE)LutOffset );    // alpha index
1197   3            WriteTW88(REG412, 0x7F/*value*/ );      // alpha value
1198   3          }
1199   2        }
1200   1        SOsd_UpdateReg(3,8);
1201   1        SOsd_UpdateReg(0,0);
1202   1        SOsd_UpdateRlcA();
1203   1        //-----------------------------
1204   1        // time cirtical section end
1205   1        //-----------------------------
1206   1      }
1207          
1208          
1209          
1210          //-----------------------------------------------------------------------------
1211          /**
1212          * Description
1213          *   set alpha attribute on LUT (A or B).
1214          * @param
1215          * @return
1216          */
1217          //BKTODO: If you donot using alpha, disable alpha.
1218          //void SpiOsdPixelAlphaAttr(BYTE win, WORD lutloc, BYTE value)
1219          //{
1220          //  BYTE bTemp;
1221          //
1222          //  bTemp = SOSD_LUT_WEN | SOSD_LUT_INC_NO | SOSD_LUT_ATTR ; 
1223          //  if(win==1 || win==2)  bTemp |= SOSD_LUT_BGRP; 
1224          //  else if(lutloc >> 8)  bTemp |= SOSD_LUT_HIGH256;
1225          //  
1226          //  WriteTW88(REG410, bTemp);
1227          //  WriteTW88(REG411, (BYTE)lutloc );   // LUT addr
1228          //  WriteTW88(REG412, value );      // LUT addr
1229          //}
1230          
1231          
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 21  

1232          
1233          //-----------------------------------------------------------------------------
1234          /**
1235          * Description
1236          *   download LUT
1237          *
1238          * NOTE BK110330:after we support 512 palette, we donot support the address method.
1239          * We need a width and a height info. but RTL only supports a size info.
1240          * So, if you want to use the address method, use a PIO method.
1241          *
1242          * NOTE Do not add WaitVBlank() here.
1243          *
1244          * @param type 
1245          * - 1:Byte pointer - LUTS type. LUTTYPE_BYTE
1246          * - 0:Address pointer - LUT type. LUTTYPE_ADDR
1247          * if 0, use LutOffset:0, size:0x400.
1248          * @param alpha
1249          * - 0xFF: no alpha. 
1250          * - other: use alpha value 0x7F. location is LutOffset+alpha.
1251          * @see SpiOsdIoLoadLUT
1252          * @see McuSpiClkToPclk
1253          * @see McuSpiClkRestore
1254          * @see SpiFlashDmaStart
1255          */
1256          //void OLD___SpiOsdLoadLUT(BYTE _winno, BYTE _type, WORD LutOffset, WORD size, DWORD address, BYTE alpha) 
             -{}
1257          
1258          
1259          //-----------------------------------
1260          // RLC(RunLengthCompress) functions
1261          //
1262          //-----------------------------------
1263          
1264          //-----------------------------------------------------------------------------
1265          /**
1266          * Description
1267          *   set RLC register
1268          *
1269          * @param winno win number.
1270          *   winno 0 means disable.
1271          * @param dcnt Data BPP
1272          * 4:4bit, 6:6bit, others:8bit
1273          * 7 means 8BPP with 128 color.  
1274          * @param ccnt counter value.
1275          * - 4:4bit,5:5bit,..15:16bit, others:16bit
1276          */
1277          //void OLD___SpiOsdRlcReg(BYTE winno,BYTE dcnt, BYTE ccnt) {}
1278          void SOsd_UpdateRlc(void)
1279          {
1280   1        BYTE i;
1281   1        BYTE bTemp;
1282   1        struct SOsdRle_s *pRlc;
1283   1      
1284   1        for(i=0; i < 2; i++) {
1285   2          pRlc = &SOsdCtrl.rlc[i];
1286   2          WriteTW88(REG404 + 2 - i*2, pRlc->win << 4);
1287   2          bTemp = pRlc->bpp;
1288   2          if(bTemp==7)  bTemp++;
1289   2          bTemp <<= 4;
1290   2          bTemp |= pRlc->count;
1291   2          WriteTW88(REG405 + 2 - i*2, bTemp);
1292   2        }
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 22  

1293   1      }
1294          void SOsd_UpdateRlcB(void)
1295          {
1296   1        BYTE bTemp;
1297   1        struct SOsdRle_s *pRlc;
1298   1      
1299   1        pRlc = &SOsdCtrl.rlc[0];
1300   1        WriteTW88(REG406, pRlc->win << 4);
1301   1        bTemp = pRlc->bpp;
1302   1        if(bTemp==7)  bTemp++;
1303   1        bTemp <<= 4;
1304   1        bTemp |= pRlc->count;
1305   1        WriteTW88(REG407, bTemp);
1306   1      }
1307          void SOsd_UpdateRlcA(void)
1308          {
1309   1        BYTE bTemp;
1310   1        struct SOsdRle_s *pRlc;
1311   1      
1312   1        pRlc = &SOsdCtrl.rlc[1];
1313   1        WriteTW88(REG404, pRlc->win << 4);
1314   1        bTemp = pRlc->bpp;
1315   1        if(bTemp==7)  bTemp++;
1316   1        bTemp <<= 4;
1317   1        bTemp |= pRlc->count;
1318   1        WriteTW88(REG405, bTemp);
1319   1      }
1320          
1321          
1322          //-----------------------------------------------------------------------------
1323          /**
1324          * Description
1325          *   disable RLC Register
1326          * @param winno
1327          *   win0 means disable both RLE_A and RLE_B.
1328          * @return
1329          */
1330          //void OLD___SpiOsdDisableRlcReg(BYTE winno){ }
1331          
1332          
1333          
1334          #endif //..SUPPORT_SPIOSD
1335          
1336          
1337          #ifdef SUPPORT_SPIOSD
1338          void SpiOsdIoLoadLUT(BYTE _winno, BYTE type, WORD LutOffset, WORD size, DWORD spiaddr, BYTE alpha)
1339          {
1340   1        BYTE i,j,k;
1341   1        BYTE bTemp;
1342   1      #ifdef DEBUG_OSD
                dPrintf("\n\rSpiOsdIoLoadLUT%s win:%bd, LutLoc:%d size:%d 0x%06lx", type ? "S":" ", _winno, LutOffset, si
             -ze, spiaddr);
              #endif
1345   1      
1346   1        //--- SPI-OSD config
1347   1        bTemp = SOSD_LUT_WEN;
1348   1        if(type==LUTTYPE_ADDR)    bTemp |= SOSD_LUT_INC_ADDR;
1349   1        else            bTemp |= SOSD_LUT_INC_COLM; 
1350   1        if(_winno==1 || _winno==2)  bTemp |= SOSD_LUT_BGRP;   
1351   1        else if(LutOffset >> 8)   bTemp |= SOSD_LUT_HIGH256; 
1352   1      
1353   1      
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 23  

1354   1        if(type==LUTTYPE_ADDR) {
1355   2          //
1356   2          //ignore size. it is always 0x400.(256*4)
1357   2          //    
1358   2          for(i=0; i < 4; i++) {   
1359   3            WriteTW88(REG410, bTemp | i );    //assign byte ptr 
1360   3            WriteTW88(REG411, (BYTE)LutOffset); //reset address ptr.
1361   3            for(j=0; j<(256/64);j++) {
1362   4              SpiFlash_Read_XMem(spiaddr + i*256 + j*64, (WORD)SPI_Buffer, 64);
1363   4              //SpiFlashDmaRead2XMem(SPI_Buffer,spiaddr + i*256 + j*64,64, SPIFLASH_WAIT_READ);
1364   4              for(k=0; k < 64; k++)
1365   4                WriteTW88(REG412, SPI_Buffer[k]);   //write data
1366   4            }
1367   3          }
1368   2        }
1369   1        else {
1370   2          WriteTW88(REG410, bTemp);     
1371   2          WriteTW88(REG411, (BYTE)LutOffset);   //reset address ptr.
1372   2      
1373   2          for(i=0; i < (size / 64); i++ ) {   //min size is a 64(16*4)
1374   3            SpiFlash_Read_XMem(spiaddr + i*64, (WORD)SPI_Buffer, 64);
1375   3            //SpiFlashDmaRead2XMem(SPI_Buffer,spiaddr + i*64,64, SPIFLASH_WAIT_READ);
1376   3            for(k=0; k < 64; k++)
1377   3              WriteTW88(REG412, SPI_Buffer[k]);   //write data
1378   3          }
1379   2        }
1380   1        //pixel alpha
1381   1        if(alpha!=0xFF) {
1382   2          LutOffset += alpha;
1383   2      
1384   2          bTemp = SOSD_LUT_WEN | SOSD_LUT_INC_NO | SOSD_LUT_ATTR ; 
1385   2          if(_winno==1 || _winno==2)  bTemp |= SOSD_LUT_BGRP; 
1386   2          else if(LutOffset >> 8)   bTemp |= SOSD_LUT_HIGH256;
1387   2        
1388   2          WriteTW88(REG410, bTemp);
1389   2          WriteTW88(REG411, (BYTE)LutOffset );
1390   2          WriteTW88(REG412, 0x7F );
1391   2        }
1392   1      }
1393          #endif
1394          
1395          /**
1396          * description
1397          * read SpiOSD LUT and compare it with SpiFlash Data.
1398          * winno: LUT A or LUT B
1399          * type : LUT or LUTS
1400          * offset: lut location
1401          * size : lut size
1402          * addr : address at SpiFlash
1403          *
1404          */
1405          #ifdef SUPPORT_SPIOSD
1406          BYTE SpiOsdCheckLut(BYTE win, BYTE type, WORD offset, WORD size, DWORD addr)
1407          {
1408   1        DWORD spiaddr;
1409   1        WORD lut_offset;
1410   1        BYTE r410;
1411   1        volatile BYTE rdata0, rdata1;
1412   1        BYTE errno;
1413   1        WORD nRead;
1414   1        BYTE i;
1415   1        BYTE bgra;
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 24  

1416   1      
1417   1        ePrintf("\n\rSpiOsdCheckLut(%bd, %bd, %d, %d, 0x%lx)", win, type, offset, size, addr);
1418   1        spiaddr = addr;
1419   1        lut_offset = offset;
1420   1      
1421   1        errno = 0;
1422   1        while(size) {
1423   2          nRead = 64; //min. color is 16.
1424   2          SpiFlash_Read_XMem(spiaddr, (WORD)SPI_Buffer, nRead); 
1425   2          //SpiFlashDmaRead2XMem(SPI_Buffer,spiaddr,nRead, SPIFLASH_WAIT_READ);
1426   2      
1427   2          for(i=0; i < (nRead >> 2); i++) {
1428   3            r410 = SOSD_LUT_WEN;
1429   3            if(win==1 || win==2)  r410 |= SOSD_LUT_BGRP;
1430   3            if(lut_offset >> 8)   r410 |= SOSD_LUT_HIGH256;
1431   3      
1432   3            for(bgra=0; bgra < 4; bgra++) {
1433   4              r410 &= 0xFC;
1434   4              r410 |= bgra; 
1435   4              WriteTW88(REG410, r410);
1436   4              WriteTW88(REG411, (BYTE)lut_offset);
1437   4        
1438   4              rdata0 = ReadTW88(REG412);  
1439   4              rdata1 = ReadTW88(REG412);  //read twice
1440   4              if(rdata1 != SPI_Buffer[i*4+bgra]) {
1441   5                delay1ms(100);
1442   5                rdata0 = ReadTW88(REG412);
1443   5                errno++;
1444   5                Printf("\n\r%04x",lut_offset);
1445   5                Printf("+%bx ", bgra);
1446   5                Printf("%02bx->%02bx,%02bx", SPI_Buffer[i*4+bgra], rdata1, rdata0 );
1447   5              }
1448   4            }
1449   3            lut_offset++;
1450   3          }
1451   2          if(errno)
1452   2            break;
1453   2          if(size >= nRead) size -= nRead;
1454   2          else        size = 0;
1455   2          spiaddr += nRead;
1456   2        }
1457   1        if(errno==0) {
1458   2          ePrintf("\n\rPass."); 
1459   2          ePrintf("%04x",lut_offset);
1460   2        }
1461   1        return errno;
1462   1      }
1463          #endif //..SUPPORT_SPIOSD
1464          
1465          
1466          
1467          
1468          
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 25  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com00E4 (BEGIN)
0000         L?0229:
0000 759300      E     MOV     DPX,#?C?XDATASEG
0003 E500        E     MOV     A,regTW88+01H
0005 2410              ADD     A,#010H
0007 F582              MOV     DPL,A
0009 E500        E     MOV     A,regTW88
000B 3404              ADDC    A,#04H
000D F583              MOV     DPH,A
000F 759300      E     MOV     DPX,#?C?XDATASEG
0012 EF                MOV     A,R7
0013 F0                MOVX    @DPTR,A
0014 AF05              MOV     R7,AR5
0016         L?0230:
0016 759300      E     MOV     DPX,#?C?XDATASEG
0019 E500        E     MOV     A,regTW88+01H
001B 2411              ADD     A,#011H
001D F582              MOV     DPL,A
001F E500        E     MOV     A,regTW88
0021 3404              ADDC    A,#04H
0023 F583              MOV     DPH,A
0025 759300      E     MOV     DPX,#?C?XDATASEG
0028 EF                MOV     A,R7
0029         L?0231:
0029 F0                MOVX    @DPTR,A
002A         L?0232:
002A 759300      E     MOV     DPX,#?C?XDATASEG
002D E500        E     MOV     A,regTW88+01H
002F 2412              ADD     A,#012H
0031         L?0233:
0031 F582              MOV     DPL,A
0033 E500        E     MOV     A,regTW88
0035 3404              ADDC    A,#04H
0037 F583              MOV     DPH,A
0039 759300      E     MOV     DPX,#?C?XDATASEG
003C 22                RET     
003D         L?0234:
003D 90000000    R     MOV     DPTR,#pLut
0041 E0                MOVX    A,@DPTR
0042 FB                MOV     R3,A
0043 A3                INC     DPTR
0044 E0                MOVX    A,@DPTR
0045 FA                MOV     R2,A
0046 A3                INC     DPTR
0047 E0                MOVX    A,@DPTR
0048 2405              ADD     A,#05H
004A F9                MOV     R1,A
004B E4                CLR     A
004C 3A                ADDC    A,R2
004D FA                MOV     R2,A
004E 110000      E     ACALL   ?C?LLDPTR
0051 90000000    R     MOV     DPTR,#wTemp
0055 E0                MOVX    A,@DPTR
0056 FB                MOV     R3,A
0057 A3                INC     DPTR
0058 E0                MOVX    A,@DPTR
0059 90000000    E     MOV     DPTR,#?_SpiFlash_Read_SOsd?BYTE+04H
005D CB                XCH     A,R3
005E F0                MOVX    @DPTR,A
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 26  

005F A3                INC     DPTR
0060 EB                MOV     A,R3
0061         L?0235:
0061 F0                MOVX    @DPTR,A
0062         L?0236:
0062 90000000    R     MOV     DPTR,#pLut
0066         L?0237:
0066 E0                MOVX    A,@DPTR
0067 FB                MOV     R3,A
0068 A3                INC     DPTR
0069 E0                MOVX    A,@DPTR
006A FA                MOV     R2,A
006B A3                INC     DPTR
006C E0                MOVX    A,@DPTR
006D 22                RET     
006E         L?0238:
006E         L?0239:
006E EF                MOV     A,R7
006F         L?0240:
006F 25E0              ADD     A,ACC
0071 2400        R     ADD     A,#LOW SOsdCtrl
0073 F582              MOV     DPL,A
0075 E4                CLR     A
0076 3400        R     ADDC    A,#HIGH SOsdCtrl
0078         L?0241:
0078 F583              MOV     DPH,A
007A 759300      E     MOV     DPX,#?C?XDATASEG
007D E0                MOVX    A,@DPTR
007E 22                RET     
007F         L?0242:
007F 90000000    R     MOV     DPTR,#pLut
0083         L?0243:
0083 75F00A            MOV     B,#0AH
0086 A4                MUL     AB
0087 2400        R     ADD     A,#LOW SOsdCtrl+012H
0089 F9                MOV     R1,A
008A 7400        R     MOV     A,#HIGH SOsdCtrl+012H
008C 35F0              ADDC    A,B
008E FA                MOV     R2,A
008F 7B00        R     MOV     R3,#MBYTE SOsdCtrl
0091         L?0244:
0091 EB                MOV     A,R3
0092         L?0245:
0092 F0                MOVX    @DPTR,A
0093 A3                INC     DPTR
0094 EA                MOV     A,R2
0095 F0                MOVX    @DPTR,A
0096 A3                INC     DPTR
0097 E9                MOV     A,R1
0098 F0                MOVX    @DPTR,A
0099 22                RET     
009A         L?0246:
009A         L?0247:
009A 14                DEC     A
009B F582              MOV     DPL,A
009D 8C83              MOV     DPH,R4
009F 759300      E     MOV     DPX,#?C?XDATASEG
00A2 EF                MOV     A,R7
00A3 F0                MOVX    @DPTR,A
00A4 22                RET     
00A5         L?0248:
00A5 EF                MOV     A,R7
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 27  

00A6 F0                MOVX    @DPTR,A
00A7 90000000    R     MOV     DPTR,#LutOffset
00AB         L?0249:
00AB A3                INC     DPTR
00AC         L?0250:
00AC E0                MOVX    A,@DPTR
00AD         L?0251:
00AD FF                MOV     R7,A
00AE 759300      E     MOV     DPX,#?C?XDATASEG
00B1 E500        E     MOV     A,regTW88+01H
00B3 22                RET     
00B4         L?0252:
00B4         L?0253:
00B4 90000000    R     MOV     DPTR,#offset
00B8         L?0254:
00B8 E0                MOVX    A,@DPTR
00B9 FC                MOV     R4,A
00BA A3                INC     DPTR
00BB E0                MOVX    A,@DPTR
00BC FD                MOV     R5,A
00BD A3                INC     DPTR
00BE E0                MOVX    A,@DPTR
00BF FE                MOV     R6,A
00C0 A3                INC     DPTR
00C1 E0                MOVX    A,@DPTR
00C2 FF                MOV     R7,A
00C3 22                RET     
00C4         L?0255:
00C4         L?0256:
00C4 2409              ADD     A,#09H
00C6         L?0257:
00C6 F9                MOV     R1,A
00C7 E4                CLR     A
00C8 3A                ADDC    A,R2
00C9 FA                MOV     R2,A
00CA 010000      E     AJMP    ?C?CLDPTR
00CD         L?0258:
00CD         L?0259:
00CD 2401              ADD     A,#01H
00CF         L?0260:
00CF F9                MOV     R1,A
00D0 E4                CLR     A
00D1 3A                ADDC    A,R2
00D2 FA                MOV     R2,A
00D3 010000      E     AJMP    ?C?ILDPTR
00D6         L?0261:
00D6 2F                ADD     A,R7
00D7 FF                MOV     R7,A
00D8 EA                MOV     A,R2
00D9 35F0              ADDC    A,B
00DB FE                MOV     R6,A
00DC ED                MOV     A,R5
00DD 39                ADDC    A,R1
00DE FD                MOV     R5,A
00DF EC                MOV     A,R4
00E0 38                ADDC    A,R0
00E1 FC                MOV     R4,A
00E2         L?0262:
00E2 90000000    E     MOV     DPTR,#?_SpiFlash_Read_XMem?BYTE+04H
00E6 7400        E     MOV     A,#HIGH SPI_Buffer
00E8 F0                MOVX    @DPTR,A
00E9 A3                INC     DPTR
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 28  

00EA 7400        E     MOV     A,#LOW SPI_Buffer
00EC F0                MOVX    @DPTR,A
00ED A3                INC     DPTR
00EE         L?0263:
00EE E4                CLR     A
00EF F0                MOVX    @DPTR,A
00F0 A3                INC     DPTR
00F1 7440              MOV     A,#040H
00F3 F0                MOVX    @DPTR,A
00F4 22                RET     
00F5         L?0264:
00F5 F0                MOVX    @DPTR,A
00F6 EF                MOV     A,R7
00F7         L?0265:
00F7 75F00A            MOV     B,#0AH
00FA A4                MUL     AB
00FB 2400        R     ADD     A,#LOW SOsdCtrl+012H
00FD F9                MOV     R1,A
00FE 7400        R     MOV     A,#HIGH SOsdCtrl+012H
0100 35F0              ADDC    A,B
0102 FA                MOV     R2,A
0103 7B00        R     MOV     R3,#MBYTE SOsdCtrl
0105 22                RET     
0106         L?0266:
0106 C3                CLR     C
0107 9F                SUBB    A,R7
0108 FF                MOV     R7,A
0109 7404              MOV     A,#04H
010B 95F0              SUBB    A,B
010D FE                MOV     R6,A
010E 759300      E     MOV     DPX,#?C?XDATASEG
0111 E500        E     MOV     A,regTW88+01H
0113 2F                ADD     A,R7
0114         L?0267:
0114 F582              MOV     DPL,A
0116 E500        E     MOV     A,regTW88
0118 3E                ADDC    A,R6
0119 F583              MOV     DPH,A
011B 759300      E     MOV     DPX,#?C?XDATASEG
011E 22                RET     
011F         L?0268:
011F         L?0269:
011F A3                INC     DPTR
0120 E0                MOVX    A,@DPTR
0121         L?0270:
0121 FF                MOV     R7,A
0122 0500        R     INC     data_p+01H
0124 E500        R     MOV     A,data_p+01H
0126 AC00        R     MOV     R4,data_p
0128 22                RET     
0129         L?0271:
0129 E4                CLR     A
012A FC                MOV     R4,A
012B FD                MOV     R5,A
012C 90000000    R     MOV     DPTR,#spiaddr
0130         L?0272:
0130 E0                MOVX    A,@DPTR
0131 F8                MOV     R0,A
0132 A3                INC     DPTR
0133 E0                MOVX    A,@DPTR
0134 F9                MOV     R1,A
0135 A3                INC     DPTR
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 29  

0136 E0                MOVX    A,@DPTR
0137 FA                MOV     R2,A
0138 A3                INC     DPTR
0139 E0                MOVX    A,@DPTR
013A 22                RET     
013B         L?0273:
013B E0                MOVX    A,@DPTR
013C FF                MOV     R7,A
013D 90000000    R     MOV     DPTR,#LutOffset+01H
0141 E0                MOVX    A,@DPTR
0142 2F                ADD     A,R7
0143 F0                MOVX    @DPTR,A
0144 90000000    R     MOV     DPTR,#LutOffset
0148 E0                MOVX    A,@DPTR
0149 3400              ADDC    A,#00H
014B F0                MOVX    @DPTR,A
014C 90000000    R     MOV     DPTR,#bTemp
0150 22                RET     
0151         L?0274:
0151 90000000    R     MOV     DPTR,#w
0155 A3                INC     DPTR
0156 E0                MOVX    A,@DPTR
0157         L?0275:
0157 FF                MOV     R7,A
0158         L?0276:
0158 0500        R     INC     data_p+01H
015A E500        R     MOV     A,data_p+01H
015C AC00        R     MOV     R4,data_p
015E 22                RET     
015F         L?0277:
015F F0                MOVX    @DPTR,A
0160         L?0278:
0160 759300      E     MOV     DPX,#?C?XDATASEG
0163 E500        E     MOV     A,regTW88+01H
0165 2410              ADD     A,#010H
0167 22                RET     
0168         L?0279:
0168         L?0280:
0168 FB                MOV     R3,A
0169 90000000    E     MOV     DPTR,#?_SpiFlash_Read_SOsd?BYTE+06H
016D E5F0              MOV     A,B
016F F0                MOVX    @DPTR,A
0170 A3                INC     DPTR
0171 EB                MOV     A,R3
0172 F0                MOVX    @DPTR,A
0173 22                RET     
0174         L?0281:
0174 90000000    R     MOV     DPTR,#wTemp
0178         L?0282:
0178 FF                MOV     R7,A
0179         L?0283:
0179 E5F0              MOV     A,B
017B F0                MOVX    @DPTR,A
017C A3                INC     DPTR
017D EF                MOV     A,R7
017E F0                MOVX    @DPTR,A
017F 22                RET     
0180         L?0284:
0180 7480              MOV     A,#080H
0182 F0                MOVX    @DPTR,A
0183         L?0285:
0183 759300      E     MOV     DPX,#?C?XDATASEG
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 30  

0186 E500        E     MOV     A,regTW88+01H
0188 2411              ADD     A,#011H
018A 22                RET     
018B         L?0286:
018B         L?0287:
018B 14                DEC     A
018C         L?0288:
018C F582              MOV     DPL,A
018E 8C83              MOV     DPH,R4
0190 759300      E     MOV     DPX,#?C?XDATASEG
0193 22                RET     
0194         L?0289:
0194 F582              MOV     DPL,A
0196 E4                CLR     A
0197 35F0              ADDC    A,B
0199 F583              MOV     DPH,A
019B E582              MOV     A,DPL
019D 2400        E     ADD     A,#LOW SPI_Buffer
019F F582              MOV     DPL,A
01A1 E583              MOV     A,DPH
01A3 3400        E     ADDC    A,#HIGH SPI_Buffer
01A5 22                RET     
01A6         L?0290:
01A6 FD                MOV     R5,A
01A7 90000000    R     MOV     DPTR,#LutOffset
01AB E5F0              MOV     A,B
01AD F0                MOVX    @DPTR,A
01AE A3                INC     DPTR
01AF ED                MOV     A,R5
01B0 F0                MOVX    @DPTR,A
01B1 90000000    R     MOV     DPTR,#bTemp
01B5 22                RET     
01B6         L?0291:
01B6 A3                INC     DPTR
01B7         L?0292:
01B7 E0                MOVX    A,@DPTR
01B8 FE                MOV     R6,A
01B9 A3                INC     DPTR
01BA E0                MOVX    A,@DPTR
01BB 7802              MOV     R0,#02H
01BD 22                RET     
01BE         L?0293:
01BE F582              MOV     DPL,A
01C0 E500        E     MOV     A,regTW88
01C2 3402              ADDC    A,#02H
01C4 F583              MOV     DPH,A
01C6 759300      E     MOV     DPX,#?C?XDATASEG
01C9 E0                MOVX    A,@DPTR
01CA 22                RET     
01CB         L?0294:
01CB 14                DEC     A
01CC         L?0295:
01CC F582              MOV     DPL,A
01CE 8A83              MOV     DPH,R2
01D0 759300      E     MOV     DPX,#?C?XDATASEG
01D3 22                RET     
01D4         L?0296:
01D4         L?0297:
01D4 2405              ADD     A,#05H
01D6 F9                MOV     R1,A
01D7 E4                CLR     A
01D8 3A                ADDC    A,R2
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 31  

01D9 FA                MOV     R2,A
01DA 22                RET     
01DB         L?0298:
01DB         L?0299:
01DB 90000000    R     MOV     DPTR,#win
01DF E0                MOVX    A,@DPTR
01E0 04                INC     A
01E1 F0                MOVX    @DPTR,A
01E2 22                RET     
01E3         L?0300:
01E3 F9                MOV     R1,A
01E4 E4                CLR     A
01E5 3A                ADDC    A,R2
01E6 FA                MOV     R2,A
01E7 E4                CLR     A
01E8 F5F0              MOV     B,A
01EA 010000      E     AJMP    ?C?ISTPTR
01ED         L?0301:
01ED F9                MOV     R1,A
01EE E4                CLR     A
01EF 3A                ADDC    A,R2
01F0 FA                MOV     R2,A
01F1 EE                MOV     A,R6
01F2 8FF0              MOV     B,R7
01F4 010000      E     AJMP    ?C?ISTPTR
01F7         L?0302:
01F7 90000000    R     MOV     DPTR,#i
01FB E0                MOVX    A,@DPTR
01FC 75F002            MOV     B,#02H
01FF A4                MUL     AB
0200 FF                MOV     R7,A
0201 22                RET     
0202         L?0303:
0202 FF                MOV     R7,A
0203 EA                MOV     A,R2
0204 3E                ADDC    A,R6
0205 FE                MOV     R6,A
0206 ED                MOV     A,R5
0207 39                ADDC    A,R1
0208 FD                MOV     R5,A
0209 EC                MOV     A,R4
020A 38                ADDC    A,R0
020B FC                MOV     R4,A
020C 22                RET     
020D         L?0304:
020D 110000      E     ACALL   ?C?ULSHR
0210 0500        R     INC     data_p+01H
0212 E500        R     MOV     A,data_p+01H
0214 AC00        R     MOV     R4,data_p
0216 22                RET     
0217         L?0305:
0217 850082      R     MOV     DPL,data_p+01H
021A 850083      R     MOV     DPH,data_p
021D 759300      E     MOV     DPX,#?C?XDATASEG
0220 22                RET     
0221         L?0306:
0221 2500        R     ADD     A,data_p+01H
0223 F500        R     MOV     data_p+01H,A
0225 E4                CLR     A
0226 3500        R     ADDC    A,data_p
0228 F500        R     MOV     data_p,A
022A 22                RET     
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 32  

022B         L?0307:
022B 850082      R     MOV     DPL,data_p+01H
022E 850083      R     MOV     DPH,data_p
0231 759300      E     MOV     DPX,#?C?XDATASEG
0234 22                RET     
0235         L?0308:
0235 2500        R     ADD     A,data_p+01H
0237 F500        R     MOV     data_p+01H,A
0239 E4                CLR     A
023A 3500        R     ADDC    A,data_p
023C F500        R     MOV     data_p,A
023E 22                RET     
023F         L?0309:
023F         L?0310:
023F 0500        R     INC     data_p+01H
0241 E500        R     MOV     A,data_p+01H
0243 AC00        R     MOV     R4,data_p
0245 22                RET     
0246         L?0311:
0246         L?0312:
0246 2409              ADD     A,#09H
0248 F9                MOV     R1,A
0249 E4                CLR     A
024A 3A                ADDC    A,R2
024B FA                MOV     R2,A
024C 22                RET     
024D         L?0313:
024D E0                MOVX    A,@DPTR
024E FE                MOV     R6,A
024F A3                INC     DPTR
0250 E0                MOVX    A,@DPTR
0251 FF                MOV     R7,A
0252 90000000    R     MOV     DPTR,#pLut
0256 22                RET     
0257         L?0314:
0257         L?0315:
0257 90000000    R     MOV     DPTR,#win
025B E0                MOVX    A,@DPTR
025C FF                MOV     R7,A
025D 22                RET     
025E         L?0316:
025E         L?0317:
025E 90000000    R     MOV     DPTR,#win
0262 E0                MOVX    A,@DPTR
0263 FF                MOV     R7,A
0264 22                RET     
0265         L?0318:
0265         L?0319:
0265 110000      E     ACALL   ?C?CLDPTR
0268 C4                SWAP    A
0269 54F0              ANL     A,#0F0H
026B 22                RET     
026C         L?0320:
026C 90000000    R     MOV     DPTR,#k
0270 E0                MOVX    A,@DPTR
0271 FF                MOV     R7,A
0272 C3                CLR     C
0273 9440              SUBB    A,#040H
0275 22                RET     
0276         L?0321:
0276 EF                MOV     A,R7
0277 F0                MOVX    @DPTR,A
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 33  

0278 90000000    R     MOV     DPTR,#k
027C E0                MOVX    A,@DPTR
027D 04                INC     A
027E F0                MOVX    @DPTR,A
027F 22                RET     
0280         L?0322:
0280 90000000    R     MOV     DPTR,#i
0284 E0                MOVX    A,@DPTR
0285 75F004            MOV     B,#04H
0288 A4                MUL     AB
0289 22                RET     
028A         L?0323:
028A 90000000    R     MOV     DPTR,#nRead
028E E0                MOVX    A,@DPTR
028F FE                MOV     R6,A
0290 A3                INC     DPTR
0291 E0                MOVX    A,@DPTR
0292 FF                MOV     R7,A
0293 22                RET     
             ; FUNCTION Com00E4 (END)

             ; FUNCTION dummy_osdspi_code (BEGIN)
                                           ; SOURCE LINE # 53
                                           ; SOURCE LINE # 54
                                           ; SOURCE LINE # 55
0000 7B00        R     MOV     R3,#MBYTE ?SC_0
0002 7A00        R     MOV     R2,#HIGH ?SC_0
0004 7900        R     MOV     R1,#LOW ?SC_0
0006 010000      E     AJMP    _Puts
             ; FUNCTION dummy_osdspi_code (END)

             ; FUNCTION SOsd_init (BEGIN)
                                           ; SOURCE LINE # 108
;---- Variable 'offset' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 109
                                           ; SOURCE LINE # 113
;---- Variable 'win' assigned to Register 'R4' ----
0000 E4                CLR     A
0001 FC                MOV     R4,A
0002         ?C0002:
                                           ; SOURCE LINE # 114
0002 EC                MOV     A,R4
0003 6004              JZ      ?C0005
0005 04                INC     A
0006 FD                MOV     R5,A
0007 8002              SJMP    ?C0006
0009         ?C0005:
                                           ; SOURCE LINE # 115
0009 E4                CLR     A
000A FD                MOV     R5,A
000B         ?C0006:
                                           ; SOURCE LINE # 116
000B ED                MOV     A,R5
000C 75F010            MOV     B,#010H
000F A4                MUL     AB
0010 2400        R     ADD     A,#LOW SpiWinBuff
0012 F582              MOV     DPL,A
0014 7400        R     MOV     A,#HIGH SpiWinBuff
0016 35F0              ADDC    A,B
0018 759300      E     MOV     DPX,#?C?XDATASEG
001B AF82              MOV     R7,DPL
001D FE                MOV     R6,A
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 34  

001E EC                MOV     A,R4
001F 25E0              ADD     A,ACC
0021 2400        R     ADD     A,#LOW SOsdCtrl
0023 F582              MOV     DPL,A
0025 E4                CLR     A
0026 3400        R     ADDC    A,#HIGH SOsdCtrl
0028 F583              MOV     DPH,A
002A 759300      E     MOV     DPX,#?C?XDATASEG
002D EE                MOV     A,R6
002E F0                MOVX    @DPTR,A
002F A3                INC     DPTR
0030 EF                MOV     A,R7
0031 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 117
0032 0C                INC     R4
0033 EC                MOV     A,R4
0034 B409CB            CJNE    A,#09H,?C0002
                                           ; SOURCE LINE # 118
0037         ?C0007:
0037 22                RET     
             ; FUNCTION SOsd_init (END)

             ; FUNCTION SpiOsdSetDeValue (BEGIN)
                                           ; SOURCE LINE # 181
                                           ; SOURCE LINE # 182
                                           ; SOURCE LINE # 186
0000 110000      R     ACALL   L?0278
0003 110000      R     ACALL   L?0293
0006 FF                MOV     R7,A
;---- Variable 'hDE' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 187
0007 759300      E     MOV     DPX,#?C?XDATASEG
000A E500        E     MOV     A,regTW88+01H
000C 240D              ADD     A,#0DH
000E 110000      R     ACALL   L?0293
;---- Variable 'pclko' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 191
                                           ; SOURCE LINE # 193
0011 EF                MOV     A,R7
0012 2400              ADD     A,#00H
0014 FF                MOV     R7,A
0015 E4                CLR     A
0016 33                RLC     A
0017 CF                XCH     A,R7
0018 C3                CLR     C
0019 9412              SUBB    A,#012H
001B CF                XCH     A,R7
001C 9400              SUBB    A,#00H
;---- Variable 'wTemp' assigned to Register 'R4/R5' ----
001E AD07              MOV     R5,AR7
                                           ; SOURCE LINE # 199
0020 110000      R     ACALL   L?0251
0023 240E              ADD     A,#0EH
0025 110000      R     ACALL   L?0233
0028 EF                MOV     A,R7
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 200
002A AF05              MOV     R7,AR5
002C 759300      E     MOV     DPX,#?C?XDATASEG
002F E500        E     MOV     A,regTW88+01H
0031 240F              ADD     A,#0FH
0033 110000      R     ACALL   L?0233
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 35  

0036 EF                MOV     A,R7
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 204
0038 22                RET     
             ; FUNCTION SpiOsdSetDeValue (END)

             ; FUNCTION _SpiOsdEnable (BEGIN)
                                           ; SOURCE LINE # 228
;---- Variable 'en' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 229
                                           ; SOURCE LINE # 231
0000 759300      E     MOV     DPX,#?C?XDATASEG
0003 E4                CLR     A
0004 2500        E     ADD     A,regTW88+01H
0006 110000      R     ACALL   L?0233
0009 E0                MOVX    A,@DPTR
000A FE                MOV     R6,A
;---- Variable 'dat' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 232
000B EF                MOV     A,R7
000C 6005              JZ      ?C0009
                                           ; SOURCE LINE # 233
000E EE                MOV     A,R6
000F 4404              ORL     A,#04H
                                           ; SOURCE LINE # 234
0011 8005              SJMP    ?C0224
0013         ?C0009:
                                           ; SOURCE LINE # 235
                                           ; SOURCE LINE # 236
0013 AF06              MOV     R7,AR6
0015 EE                MOV     A,R6
0016 54FB              ANL     A,#0FBH
0018         ?C0224:
0018 FF                MOV     R7,A
0019 759300      E     MOV     DPX,#?C?XDATASEG
001C E4                CLR     A
001D 2500        E     ADD     A,regTW88+01H
001F 110000      R     ACALL   L?0233
0022 EF                MOV     A,R7
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 237
                                           ; SOURCE LINE # 238
0024         ?C0011:
0024 22                RET     
             ; FUNCTION _SpiOsdEnable (END)

             ; FUNCTION _SOsd_Enable (BEGIN)
                                           ; SOURCE LINE # 297
;---- Variable 'fOn' assigned to Register 'R5' ----
;---- Variable 'win' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 298
                                           ; SOURCE LINE # 300
0000 110000      R     ACALL   L?0238
0003 FE                MOV     R6,A
0004 A3                INC     DPTR
0005 E0                MOVX    A,@DPTR
0006 AA06              MOV     R2,AR6
0008 F9                MOV     R1,A
0009 90000000    R     MOV     DPTR,#p
000D 7400        E     MOV     A,#?C?XDATAMTYPE
000F 110000      R     ACALL   L?0245
                                           ; SOURCE LINE # 301
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 36  

0012 ED                MOV     A,R5
0013 90000000    R     MOV     DPTR,#p
0017 600B              JZ      ?C0012
0019 110000      R     ACALL   L?0237
001C F9                MOV     R1,A
001D 110000      E     ACALL   ?C?CLDPTR
0020 4401              ORL     A,#01H
0022 8009              SJMP    ?C0225
0024         ?C0012:
                                           ; SOURCE LINE # 302
0024 110000      R     ACALL   L?0237
0027 F9                MOV     R1,A
0028 110000      E     ACALL   ?C?CLDPTR
002B 54FE              ANL     A,#0FEH
002D         ?C0225:
002D 110000      E     ACALL   ?C?CSTPTR
                                           ; SOURCE LINE # 303
0030         ?C0014:
0030 22                RET     
             ; FUNCTION _SOsd_Enable (END)

             ; FUNCTION SOsd_CleanReg (BEGIN)
                                           ; SOURCE LINE # 315
                                           ; SOURCE LINE # 316
                                           ; SOURCE LINE # 318
;---- Variable 'i' assigned to Register 'R7' ----
0000         ?C0015:
                                           ; SOURCE LINE # 319
0000 7FA0              MOV     R7,#0A0H
0002 90000000    R     MOV     DPTR,#SpiWinBuff
0006 E4                CLR     A
0007         ?C0171:
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 DFFC              DJNZ    R7,?C0171
                                           ; SOURCE LINE # 320
000B         ?C0018:
000B 22                RET     
             ; FUNCTION SOsd_CleanReg (END)

             ; FUNCTION _SOsd_UpdateReg (BEGIN)
                                           ; SOURCE LINE # 362
0000 90000000    R     MOV     DPTR,#e_win
0004 ED                MOV     A,R5
0005 F0                MOVX    @DPTR,A
;---- Variable 's_win' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 363
                                           ; SOURCE LINE # 374
0006 A3                INC     DPTR
0007 EF                MOV     A,R7
0008 F0                MOVX    @DPTR,A
0009         ?C0019:
0009 90000000    R     MOV     DPTR,#e_win
000D E0                MOVX    A,@DPTR
000E FF                MOV     R7,A
000F A3                INC     DPTR
0010 E0                MOVX    A,@DPTR
0011 D3                SETB    C
0012 9F                SUBB    A,R7
0013 4003              JC      $ + 5H
0015 010000      R     AJMP    ?C0023
                                           ; SOURCE LINE # 375
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 37  

0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A 25E0              ADD     A,ACC
001C 2400        R     ADD     A,#LOW SOsdCtrl
001E F582              MOV     DPL,A
0020 E4                CLR     A
0021 3400        R     ADDC    A,#HIGH SOsdCtrl
0023 F583              MOV     DPH,A
0025 759300      E     MOV     DPX,#?C?XDATASEG
0028 E0                MOVX    A,@DPTR
0029 FC                MOV     R4,A
002A A3                INC     DPTR
002B E0                MOVX    A,@DPTR
002C AA04              MOV     R2,AR4
002E F9                MOV     R1,A
002F 90000000    R     MOV     DPTR,#data_p
0033 7400        E     MOV     A,#?C?XDATAMTYPE
0035 F0                MOVX    @DPTR,A
0036 A3                INC     DPTR
0037 EA                MOV     A,R2
0038 F0                MOVX    @DPTR,A
0039 A3                INC     DPTR
003A E9                MOV     A,R1
003B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 376
003C EF                MOV     A,R7
003D 25E0              ADD     A,ACC
003F 2400        R     ADD     A,#LOW SpiOsdWinBase
0041 F582              MOV     DPL,A
0043 E4                CLR     A
0044 3400        R     ADDC    A,#HIGH SpiOsdWinBase
0046 F583              MOV     DPH,A
0048 759300      E     MOV     DPX,#?C?CODESEG
004B E4                CLR     A
004C 93                MOVC    A,@A+DPTR
004D F500        R     MOV     reg_i,A
004F 7401              MOV     A,#01H
0051 93                MOVC    A,@A+DPTR
0052 F500        R     MOV     reg_i+01H,A
                                           ; SOURCE LINE # 378
0054 90000000    R     MOV     DPTR,#data_p
0058 E0                MOVX    A,@DPTR
0059 FB                MOV     R3,A
005A A3                INC     DPTR
005B E4                CLR     A
005C 75F001            MOV     B,#01H
005F 110000      E     ACALL   ?C?ILDIX
0062 A9F0              MOV     R1,B
0064 FA                MOV     R2,A
0065 110000      E     ACALL   ?C?CLDPTR
0068 FF                MOV     R7,A
0069 759300      E     MOV     DPX,#?C?XDATASEG
006C 0500        R     INC     reg_i+01H
006E E500        R     MOV     A,reg_i+01H
0070 AC00        R     MOV     R4,reg_i
0072 7002              JNZ     ?C0172
0074 0500        R     INC     reg_i
0076         ?C0172:
0076 14                DEC     A
0077 2500        E     ADD     A,regTW88+01H
0079 F582              MOV     DPL,A
007B E500        E     MOV     A,regTW88
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 38  

007D 3C                ADDC    A,R4
007E F583              MOV     DPH,A
0080 759300      E     MOV     DPX,#?C?XDATASEG
0083 EF                MOV     A,R7
0084 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 379
0085 90000000    R     MOV     DPTR,#data_p
0089 E0                MOVX    A,@DPTR
008A FB                MOV     R3,A
008B A3                INC     DPTR
008C E4                CLR     A
008D 75F001            MOV     B,#01H
0090 110000      E     ACALL   ?C?ILDIX
0093 A9F0              MOV     R1,B
0095 FA                MOV     R2,A
0096 110000      E     ACALL   ?C?CLDPTR
0099 FF                MOV     R7,A
009A 759300      E     MOV     DPX,#?C?XDATASEG
009D 0500        R     INC     reg_i+01H
009F E500        R     MOV     A,reg_i+01H
00A1 AC00        R     MOV     R4,reg_i
00A3 7002              JNZ     ?C0173
00A5 0500        R     INC     reg_i
00A7         ?C0173:
00A7 14                DEC     A
00A8 2500        E     ADD     A,regTW88+01H
00AA F582              MOV     DPL,A
00AC E500        E     MOV     A,regTW88
00AE 3C                ADDC    A,R4
00AF F583              MOV     DPH,A
00B1 759300      E     MOV     DPX,#?C?XDATASEG
00B4 EF                MOV     A,R7
00B5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 380
00B6 90000000    R     MOV     DPTR,#data_p
00BA E0                MOVX    A,@DPTR
00BB FB                MOV     R3,A
00BC A3                INC     DPTR
00BD E4                CLR     A
00BE 75F001            MOV     B,#01H
00C1 110000      E     ACALL   ?C?ILDIX
00C4 A9F0              MOV     R1,B
00C6 FA                MOV     R2,A
00C7 110000      E     ACALL   ?C?CLDPTR
00CA FF                MOV     R7,A
00CB 759300      E     MOV     DPX,#?C?XDATASEG
00CE 0500        R     INC     reg_i+01H
00D0 E500        R     MOV     A,reg_i+01H
00D2 AC00        R     MOV     R4,reg_i
00D4 7002              JNZ     ?C0174
00D6 0500        R     INC     reg_i
00D8         ?C0174:
00D8 14                DEC     A
00D9 2500        E     ADD     A,regTW88+01H
00DB F582              MOV     DPL,A
00DD E500        E     MOV     A,regTW88
00DF 3C                ADDC    A,R4
00E0 F583              MOV     DPH,A
00E2 759300      E     MOV     DPX,#?C?XDATASEG
00E5 EF                MOV     A,R7
00E6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 381
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 39  

00E7 90000000    R     MOV     DPTR,#data_p
00EB E0                MOVX    A,@DPTR
00EC FB                MOV     R3,A
00ED A3                INC     DPTR
00EE E4                CLR     A
00EF 75F001            MOV     B,#01H
00F2 110000      E     ACALL   ?C?ILDIX
00F5 A9F0              MOV     R1,B
00F7 FA                MOV     R2,A
00F8 110000      E     ACALL   ?C?CLDPTR
00FB FF                MOV     R7,A
00FC 759300      E     MOV     DPX,#?C?XDATASEG
00FF 0500        R     INC     reg_i+01H
0101 E500        R     MOV     A,reg_i+01H
0103 AC00        R     MOV     R4,reg_i
0105 7002              JNZ     ?C0175
0107 0500        R     INC     reg_i
0109         ?C0175:
0109 14                DEC     A
010A 2500        E     ADD     A,regTW88+01H
010C F582              MOV     DPL,A
010E E500        E     MOV     A,regTW88
0110 3C                ADDC    A,R4
0111 F583              MOV     DPH,A
0113 759300      E     MOV     DPX,#?C?XDATASEG
0116 EF                MOV     A,R7
0117 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 382
0118 90000000    R     MOV     DPTR,#data_p
011C E0                MOVX    A,@DPTR
011D FB                MOV     R3,A
011E A3                INC     DPTR
011F E4                CLR     A
0120 75F001            MOV     B,#01H
0123 110000      E     ACALL   ?C?ILDIX
0126 A9F0              MOV     R1,B
0128 FA                MOV     R2,A
0129 110000      E     ACALL   ?C?CLDPTR
012C FF                MOV     R7,A
012D 759300      E     MOV     DPX,#?C?XDATASEG
0130 0500        R     INC     reg_i+01H
0132 E500        R     MOV     A,reg_i+01H
0134 AC00        R     MOV     R4,reg_i
0136 7002              JNZ     ?C0176
0138 0500        R     INC     reg_i
013A         ?C0176:
013A 14                DEC     A
013B 2500        E     ADD     A,regTW88+01H
013D F582              MOV     DPL,A
013F E500        E     MOV     A,regTW88
0141 3C                ADDC    A,R4
0142 F583              MOV     DPH,A
0144 759300      E     MOV     DPX,#?C?XDATASEG
0147 EF                MOV     A,R7
0148 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 383
0149 90000000    R     MOV     DPTR,#data_p
014D E0                MOVX    A,@DPTR
014E FB                MOV     R3,A
014F A3                INC     DPTR
0150 E4                CLR     A
0151 75F001            MOV     B,#01H
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 40  

0154 110000      E     ACALL   ?C?ILDIX
0157 A9F0              MOV     R1,B
0159 FA                MOV     R2,A
015A 110000      E     ACALL   ?C?CLDPTR
015D FF                MOV     R7,A
015E 759300      E     MOV     DPX,#?C?XDATASEG
0161 0500        R     INC     reg_i+01H
0163 E500        R     MOV     A,reg_i+01H
0165 AC00        R     MOV     R4,reg_i
0167 7002              JNZ     ?C0177
0169 0500        R     INC     reg_i
016B         ?C0177:
016B 14                DEC     A
016C 2500        E     ADD     A,regTW88+01H
016E F582              MOV     DPL,A
0170 E500        E     MOV     A,regTW88
0172 3C                ADDC    A,R4
0173 F583              MOV     DPH,A
0175 759300      E     MOV     DPX,#?C?XDATASEG
0178 EF                MOV     A,R7
0179 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 384
017A 90000000    R     MOV     DPTR,#data_p
017E E0                MOVX    A,@DPTR
017F FB                MOV     R3,A
0180 A3                INC     DPTR
0181 E4                CLR     A
0182 75F001            MOV     B,#01H
0185 110000      E     ACALL   ?C?ILDIX
0188 A9F0              MOV     R1,B
018A FA                MOV     R2,A
018B 110000      E     ACALL   ?C?CLDPTR
018E FF                MOV     R7,A
018F 759300      E     MOV     DPX,#?C?XDATASEG
0192 0500        R     INC     reg_i+01H
0194 E500        R     MOV     A,reg_i+01H
0196 AC00        R     MOV     R4,reg_i
0198 7002              JNZ     ?C0178
019A 0500        R     INC     reg_i
019C         ?C0178:
019C 14                DEC     A
019D 2500        E     ADD     A,regTW88+01H
019F F582              MOV     DPL,A
01A1 E500        E     MOV     A,regTW88
01A3 3C                ADDC    A,R4
01A4 F583              MOV     DPH,A
01A6 759300      E     MOV     DPX,#?C?XDATASEG
01A9 EF                MOV     A,R7
01AA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 385
01AB 90000000    R     MOV     DPTR,#data_p
01AF E0                MOVX    A,@DPTR
01B0 FB                MOV     R3,A
01B1 A3                INC     DPTR
01B2 E4                CLR     A
01B3 75F001            MOV     B,#01H
01B6 110000      E     ACALL   ?C?ILDIX
01B9 A9F0              MOV     R1,B
01BB FA                MOV     R2,A
01BC 110000      E     ACALL   ?C?CLDPTR
01BF FF                MOV     R7,A
01C0 759300      E     MOV     DPX,#?C?XDATASEG
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 41  

01C3 0500        R     INC     reg_i+01H
01C5 E500        R     MOV     A,reg_i+01H
01C7 AC00        R     MOV     R4,reg_i
01C9 7002              JNZ     ?C0179
01CB 0500        R     INC     reg_i
01CD         ?C0179:
01CD 14                DEC     A
01CE 2500        E     ADD     A,regTW88+01H
01D0 F582              MOV     DPL,A
01D2 E500        E     MOV     A,regTW88
01D4 3C                ADDC    A,R4
01D5 F583              MOV     DPH,A
01D7 759300      E     MOV     DPX,#?C?XDATASEG
01DA EF                MOV     A,R7
01DB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 386
01DC 90000000    R     MOV     DPTR,#data_p
01E0 E0                MOVX    A,@DPTR
01E1 FB                MOV     R3,A
01E2 A3                INC     DPTR
01E3 E4                CLR     A
01E4 75F001            MOV     B,#01H
01E7 110000      E     ACALL   ?C?ILDIX
01EA A9F0              MOV     R1,B
01EC FA                MOV     R2,A
01ED 110000      E     ACALL   ?C?CLDPTR
01F0 FF                MOV     R7,A
01F1 759300      E     MOV     DPX,#?C?XDATASEG
01F4 0500        R     INC     reg_i+01H
01F6 E500        R     MOV     A,reg_i+01H
01F8 AC00        R     MOV     R4,reg_i
01FA 7002              JNZ     ?C0180
01FC 0500        R     INC     reg_i
01FE         ?C0180:
01FE 14                DEC     A
01FF 2500        E     ADD     A,regTW88+01H
0201 F582              MOV     DPL,A
0203 E500        E     MOV     A,regTW88
0205 3C                ADDC    A,R4
0206 F583              MOV     DPH,A
0208 759300      E     MOV     DPX,#?C?XDATASEG
020B EF                MOV     A,R7
020C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 387
020D 90000000    R     MOV     DPTR,#data_p
0211 E0                MOVX    A,@DPTR
0212 FB                MOV     R3,A
0213 A3                INC     DPTR
0214 E4                CLR     A
0215 75F001            MOV     B,#01H
0218 110000      E     ACALL   ?C?ILDIX
021B A9F0              MOV     R1,B
021D FA                MOV     R2,A
021E 110000      E     ACALL   ?C?CLDPTR
0221 FF                MOV     R7,A
0222 759300      E     MOV     DPX,#?C?XDATASEG
0225 0500        R     INC     reg_i+01H
0227 E500        R     MOV     A,reg_i+01H
0229 AC00        R     MOV     R4,reg_i
022B 7002              JNZ     ?C0181
022D 0500        R     INC     reg_i
022F         ?C0181:
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 42  

022F 14                DEC     A
0230 2500        E     ADD     A,regTW88+01H
0232 F582              MOV     DPL,A
0234 E500        E     MOV     A,regTW88
0236 3C                ADDC    A,R4
0237 F583              MOV     DPH,A
0239 759300      E     MOV     DPX,#?C?XDATASEG
023C EF                MOV     A,R7
023D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 388
023E 90000000    R     MOV     DPTR,#data_p
0242 E0                MOVX    A,@DPTR
0243 FB                MOV     R3,A
0244 A3                INC     DPTR
0245 E4                CLR     A
0246 75F001            MOV     B,#01H
0249 110000      E     ACALL   ?C?ILDIX
024C A9F0              MOV     R1,B
024E FA                MOV     R2,A
024F 110000      E     ACALL   ?C?CLDPTR
0252 FF                MOV     R7,A
0253 759300      E     MOV     DPX,#?C?XDATASEG
0256 0500        R     INC     reg_i+01H
0258 E500        R     MOV     A,reg_i+01H
025A AC00        R     MOV     R4,reg_i
025C 7002              JNZ     ?C0182
025E 0500        R     INC     reg_i
0260         ?C0182:
0260 14                DEC     A
0261 2500        E     ADD     A,regTW88+01H
0263 F582              MOV     DPL,A
0265 E500        E     MOV     A,regTW88
0267 3C                ADDC    A,R4
0268 F583              MOV     DPH,A
026A 759300      E     MOV     DPX,#?C?XDATASEG
026D EF                MOV     A,R7
026E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 389
026F 90000000    R     MOV     DPTR,#data_p
0273 E0                MOVX    A,@DPTR
0274 FB                MOV     R3,A
0275 A3                INC     DPTR
0276 E4                CLR     A
0277 75F001            MOV     B,#01H
027A 110000      E     ACALL   ?C?ILDIX
027D A9F0              MOV     R1,B
027F FA                MOV     R2,A
0280 110000      E     ACALL   ?C?CLDPTR
0283 FF                MOV     R7,A
0284 759300      E     MOV     DPX,#?C?XDATASEG
0287 0500        R     INC     reg_i+01H
0289 E500        R     MOV     A,reg_i+01H
028B AC00        R     MOV     R4,reg_i
028D 7002              JNZ     ?C0183
028F 0500        R     INC     reg_i
0291         ?C0183:
0291 14                DEC     A
0292 2500        E     ADD     A,regTW88+01H
0294 F582              MOV     DPL,A
0296 E500        E     MOV     A,regTW88
0298 3C                ADDC    A,R4
0299 F583              MOV     DPH,A
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 43  

029B 759300      E     MOV     DPX,#?C?XDATASEG
029E EF                MOV     A,R7
029F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 390
02A0 90000000    R     MOV     DPTR,#data_p
02A4 E0                MOVX    A,@DPTR
02A5 FB                MOV     R3,A
02A6 A3                INC     DPTR
02A7 E4                CLR     A
02A8 75F001            MOV     B,#01H
02AB 110000      E     ACALL   ?C?ILDIX
02AE A9F0              MOV     R1,B
02B0 FA                MOV     R2,A
02B1 110000      E     ACALL   ?C?CLDPTR
02B4 FF                MOV     R7,A
02B5 759300      E     MOV     DPX,#?C?XDATASEG
02B8 0500        R     INC     reg_i+01H
02BA E500        R     MOV     A,reg_i+01H
02BC AC00        R     MOV     R4,reg_i
02BE 7002              JNZ     ?C0184
02C0 0500        R     INC     reg_i
02C2         ?C0184:
02C2 14                DEC     A
02C3 2500        E     ADD     A,regTW88+01H
02C5 F582              MOV     DPL,A
02C7 E500        E     MOV     A,regTW88
02C9 3C                ADDC    A,R4
02CA F583              MOV     DPH,A
02CC 759300      E     MOV     DPX,#?C?XDATASEG
02CF EF                MOV     A,R7
02D0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 391
02D1 90000000    R     MOV     DPTR,#data_p
02D5 E0                MOVX    A,@DPTR
02D6 FB                MOV     R3,A
02D7 A3                INC     DPTR
02D8 E4                CLR     A
02D9 75F001            MOV     B,#01H
02DC 110000      E     ACALL   ?C?ILDIX
02DF A9F0              MOV     R1,B
02E1 FA                MOV     R2,A
02E2 110000      E     ACALL   ?C?CLDPTR
02E5 FF                MOV     R7,A
02E6 759300      E     MOV     DPX,#?C?XDATASEG
02E9 0500        R     INC     reg_i+01H
02EB E500        R     MOV     A,reg_i+01H
02ED AC00        R     MOV     R4,reg_i
02EF 7002              JNZ     ?C0185
02F1 0500        R     INC     reg_i
02F3         ?C0185:
02F3 14                DEC     A
02F4 2500        E     ADD     A,regTW88+01H
02F6 F582              MOV     DPL,A
02F8 E500        E     MOV     A,regTW88
02FA 3C                ADDC    A,R4
02FB F583              MOV     DPH,A
02FD 759300      E     MOV     DPX,#?C?XDATASEG
0300 EF                MOV     A,R7
0301 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 392
0302 90000000    R     MOV     DPTR,#data_p
0306 E0                MOVX    A,@DPTR
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 44  

0307 FB                MOV     R3,A
0308 A3                INC     DPTR
0309 E4                CLR     A
030A 75F001            MOV     B,#01H
030D 110000      E     ACALL   ?C?ILDIX
0310 A9F0              MOV     R1,B
0312 FA                MOV     R2,A
0313 110000      E     ACALL   ?C?CLDPTR
0316 FF                MOV     R7,A
0317 759300      E     MOV     DPX,#?C?XDATASEG
031A 0500        R     INC     reg_i+01H
031C E500        R     MOV     A,reg_i+01H
031E AC00        R     MOV     R4,reg_i
0320 7002              JNZ     ?C0186
0322 0500        R     INC     reg_i
0324         ?C0186:
0324 14                DEC     A
0325 2500        E     ADD     A,regTW88+01H
0327 F582              MOV     DPL,A
0329 E500        E     MOV     A,regTW88
032B 3C                ADDC    A,R4
032C F583              MOV     DPH,A
032E 759300      E     MOV     DPX,#?C?XDATASEG
0331 EF                MOV     A,R7
0332 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 393
0333 90000000    R     MOV     DPTR,#data_p
0337 E0                MOVX    A,@DPTR
0338 FB                MOV     R3,A
0339 A3                INC     DPTR
033A E4                CLR     A
033B 75F001            MOV     B,#01H
033E 110000      E     ACALL   ?C?ILDIX
0341 A9F0              MOV     R1,B
0343 FA                MOV     R2,A
0344 110000      E     ACALL   ?C?CLDPTR
0347 FF                MOV     R7,A
0348 759300      E     MOV     DPX,#?C?XDATASEG
034B 0500        R     INC     reg_i+01H
034D E500        R     MOV     A,reg_i+01H
034F AC00        R     MOV     R4,reg_i
0351 7002              JNZ     ?C0187
0353 0500        R     INC     reg_i
0355         ?C0187:
0355 14                DEC     A
0356 2500        E     ADD     A,regTW88+01H
0358 F582              MOV     DPL,A
035A E500        E     MOV     A,regTW88
035C 3C                ADDC    A,R4
035D F583              MOV     DPH,A
035F 759300      E     MOV     DPX,#?C?XDATASEG
0362 EF                MOV     A,R7
0363 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 394
0364 90000000    R     MOV     DPTR,#win
0368 E0                MOVX    A,@DPTR
0369 6003              JZ      $ + 5H
036B 010000      R     AJMP    ?C0021
                                           ; SOURCE LINE # 395
036E A3                INC     DPTR
036F E0                MOVX    A,@DPTR
0370 FB                MOV     R3,A
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 45  

0371 A3                INC     DPTR
0372 E4                CLR     A
0373 75F001            MOV     B,#01H
0376 110000      E     ACALL   ?C?ILDIX
0379 A9F0              MOV     R1,B
037B FA                MOV     R2,A
037C 110000      E     ACALL   ?C?CLDPTR
037F FF                MOV     R7,A
0380 759300      E     MOV     DPX,#?C?XDATASEG
0383 0500        R     INC     reg_i+01H
0385 E500        R     MOV     A,reg_i+01H
0387 AC00        R     MOV     R4,reg_i
0389 7002              JNZ     ?C0188
038B 0500        R     INC     reg_i
038D         ?C0188:
038D 14                DEC     A
038E 2500        E     ADD     A,regTW88+01H
0390 F582              MOV     DPL,A
0392 E500        E     MOV     A,regTW88
0394 3C                ADDC    A,R4
0395 F583              MOV     DPH,A
0397 759300      E     MOV     DPX,#?C?XDATASEG
039A EF                MOV     A,R7
039B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 396
039C 90000000    R     MOV     DPTR,#data_p
03A0 E0                MOVX    A,@DPTR
03A1 FB                MOV     R3,A
03A2 A3                INC     DPTR
03A3 E4                CLR     A
03A4 75F001            MOV     B,#01H
03A7 110000      E     ACALL   ?C?ILDIX
03AA A9F0              MOV     R1,B
03AC FA                MOV     R2,A
03AD 110000      E     ACALL   ?C?CLDPTR
03B0 FF                MOV     R7,A
03B1 759300      E     MOV     DPX,#?C?XDATASEG
03B4 0500        R     INC     reg_i+01H
03B6 E500        R     MOV     A,reg_i+01H
03B8 AC00        R     MOV     R4,reg_i
03BA 7002              JNZ     ?C0189
03BC 0500        R     INC     reg_i
03BE         ?C0189:
03BE 14                DEC     A
03BF 2500        E     ADD     A,regTW88+01H
03C1 F582              MOV     DPL,A
03C3 E500        E     MOV     A,regTW88
03C5 3C                ADDC    A,R4
03C6 F583              MOV     DPH,A
03C8 759300      E     MOV     DPX,#?C?XDATASEG
03CB EF                MOV     A,R7
03CC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 397
03CD 90000000    R     MOV     DPTR,#data_p
03D1 E0                MOVX    A,@DPTR
03D2 FB                MOV     R3,A
03D3 A3                INC     DPTR
03D4 E4                CLR     A
03D5 75F001            MOV     B,#01H
03D8 110000      E     ACALL   ?C?ILDIX
03DB A9F0              MOV     R1,B
03DD FA                MOV     R2,A
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 46  

03DE 110000      E     ACALL   ?C?CLDPTR
03E1 FF                MOV     R7,A
03E2 759300      E     MOV     DPX,#?C?XDATASEG
03E5 0500        R     INC     reg_i+01H
03E7 E500        R     MOV     A,reg_i+01H
03E9 AC00        R     MOV     R4,reg_i
03EB 7002              JNZ     ?C0190
03ED 0500        R     INC     reg_i
03EF         ?C0190:
03EF 14                DEC     A
03F0 2500        E     ADD     A,regTW88+01H
03F2 F582              MOV     DPL,A
03F4 E500        E     MOV     A,regTW88
03F6 3C                ADDC    A,R4
03F7 F583              MOV     DPH,A
03F9 759300      E     MOV     DPX,#?C?XDATASEG
03FC EF                MOV     A,R7
03FD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 398
03FE 90000000    R     MOV     DPTR,#data_p
0402 E0                MOVX    A,@DPTR
0403 FB                MOV     R3,A
0404 A3                INC     DPTR
0405 E4                CLR     A
0406 75F001            MOV     B,#01H
0409 110000      E     ACALL   ?C?ILDIX
040C A9F0              MOV     R1,B
040E FA                MOV     R2,A
040F 110000      E     ACALL   ?C?CLDPTR
0412 FF                MOV     R7,A
0413 759300      E     MOV     DPX,#?C?XDATASEG
0416 0500        R     INC     reg_i+01H
0418 E500        R     MOV     A,reg_i+01H
041A AC00        R     MOV     R4,reg_i
041C 7002              JNZ     ?C0191
041E 0500        R     INC     reg_i
0420         ?C0191:
0420 14                DEC     A
0421 2500        E     ADD     A,regTW88+01H
0423 F582              MOV     DPL,A
0425 E500        E     MOV     A,regTW88
0427 3C                ADDC    A,R4
0428 F583              MOV     DPH,A
042A 759300      E     MOV     DPX,#?C?XDATASEG
042D EF                MOV     A,R7
042E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 399
042F 90000000    R     MOV     DPTR,#data_p
0433 E0                MOVX    A,@DPTR
0434 FB                MOV     R3,A
0435 A3                INC     DPTR
0436 E4                CLR     A
0437 75F001            MOV     B,#01H
043A 110000      E     ACALL   ?C?ILDIX
043D A9F0              MOV     R1,B
043F FA                MOV     R2,A
0440 110000      E     ACALL   ?C?CLDPTR
0443 FF                MOV     R7,A
0444 759300      E     MOV     DPX,#?C?XDATASEG
0447 0500        R     INC     reg_i+01H
0449 E500        R     MOV     A,reg_i+01H
044B AC00        R     MOV     R4,reg_i
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 47  

044D 7002              JNZ     ?C0192
044F 0500        R     INC     reg_i
0451         ?C0192:
0451 14                DEC     A
0452 2500        E     ADD     A,regTW88+01H
0454 F582              MOV     DPL,A
0456 E500        E     MOV     A,regTW88
0458 3C                ADDC    A,R4
0459 F583              MOV     DPH,A
045B 759300      E     MOV     DPX,#?C?XDATASEG
045E EF                MOV     A,R7
045F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 400
0460 90000000    R     MOV     DPTR,#data_p
0464 E0                MOVX    A,@DPTR
0465 FB                MOV     R3,A
0466 A3                INC     DPTR
0467 E4                CLR     A
0468 75F001            MOV     B,#01H
046B 110000      E     ACALL   ?C?ILDIX
046E A9F0              MOV     R1,B
0470 FA                MOV     R2,A
0471 110000      E     ACALL   ?C?CLDPTR
0474 FF                MOV     R7,A
0475 759300      E     MOV     DPX,#?C?XDATASEG
0478 0500        R     INC     reg_i+01H
047A E500        R     MOV     A,reg_i+01H
047C AC00        R     MOV     R4,reg_i
047E 7002              JNZ     ?C0193
0480 0500        R     INC     reg_i
0482         ?C0193:
0482 14                DEC     A
0483 2500        E     ADD     A,regTW88+01H
0485 F582              MOV     DPL,A
0487 E500        E     MOV     A,regTW88
0489 3C                ADDC    A,R4
048A F583              MOV     DPH,A
048C 759300      E     MOV     DPX,#?C?XDATASEG
048F EF                MOV     A,R7
0490 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 401
0491 90000000    R     MOV     DPTR,#data_p
0495 E0                MOVX    A,@DPTR
0496 FB                MOV     R3,A
0497 A3                INC     DPTR
0498 E4                CLR     A
0499 75F001            MOV     B,#01H
049C 110000      E     ACALL   ?C?ILDIX
049F A9F0              MOV     R1,B
04A1 FA                MOV     R2,A
04A2 110000      E     ACALL   ?C?CLDPTR
04A5 FF                MOV     R7,A
04A6 759300      E     MOV     DPX,#?C?XDATASEG
04A9 0500        R     INC     reg_i+01H
04AB E500        R     MOV     A,reg_i+01H
04AD AC00        R     MOV     R4,reg_i
04AF 7002              JNZ     ?C0194
04B1 0500        R     INC     reg_i
04B3         ?C0194:
04B3 14                DEC     A
04B4 2500        E     ADD     A,regTW88+01H
04B6 F582              MOV     DPL,A
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 48  

04B8 E500        E     MOV     A,regTW88
04BA 3C                ADDC    A,R4
04BB F583              MOV     DPH,A
04BD 759300      E     MOV     DPX,#?C?XDATASEG
04C0 EF                MOV     A,R7
04C1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 402
04C2 90000000    R     MOV     DPTR,#data_p
04C6 E0                MOVX    A,@DPTR
04C7 FB                MOV     R3,A
04C8 A3                INC     DPTR
04C9 E4                CLR     A
04CA 75F001            MOV     B,#01H
04CD 110000      E     ACALL   ?C?ILDIX
04D0 A9F0              MOV     R1,B
04D2 FA                MOV     R2,A
04D3 110000      E     ACALL   ?C?CLDPTR
04D6 FF                MOV     R7,A
04D7 759300      E     MOV     DPX,#?C?XDATASEG
04DA 0500        R     INC     reg_i+01H
04DC E500        R     MOV     A,reg_i+01H
04DE AC00        R     MOV     R4,reg_i
04E0 7002              JNZ     ?C0195
04E2 0500        R     INC     reg_i
04E4         ?C0195:
04E4 14                DEC     A
04E5 2500        E     ADD     A,regTW88+01H
04E7 F582              MOV     DPL,A
04E9 E500        E     MOV     A,regTW88
04EB 3C                ADDC    A,R4
04EC F583              MOV     DPH,A
04EE 759300      E     MOV     DPX,#?C?XDATASEG
04F1 EF                MOV     A,R7
04F2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 403
                                           ; SOURCE LINE # 404
04F3         ?C0021:
04F3 90000000    R     MOV     DPTR,#win
04F7 E0                MOVX    A,@DPTR
04F8 04                INC     A
04F9 F0                MOVX    @DPTR,A
04FA 010000      R     AJMP    ?C0019
                                           ; SOURCE LINE # 405
04FD         ?C0023:
04FD 22                RET     
             ; FUNCTION _SOsd_UpdateReg (END)

             ; FUNCTION _SpiOsdWinHWOffAll (BEGIN)
                                           ; SOURCE LINE # 430
;---- Variable 'wait' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 431
                                           ; SOURCE LINE # 434
0000 EF                MOV     A,R7
0001 6003              JZ      ?C0024
                                           ; SOURCE LINE # 435
0003 110000      E     ACALL   _WaitVBlank
0006         ?C0024:
                                           ; SOURCE LINE # 437
0006 110000      R     ACALL   SOsd_CleanRlc
                                           ; SOURCE LINE # 438
;---- Variable 'win' assigned to Register 'R4' ----
0009 E4                CLR     A
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 49  

000A FC                MOV     R4,A
000B         ?C0025:
                                           ; SOURCE LINE # 439
000B AF04              MOV     R7,AR4
000D E4                CLR     A
000E FD                MOV     R5,A
000F 110000      R     ACALL   _SOsd_Enable
0012 0C                INC     R4
0013 EC                MOV     A,R4
0014 B409F4            CJNE    A,#09H,?C0025
0017         ?C0026:
                                           ; SOURCE LINE # 441
0017 110000      R     ACALL   SOsd_UpdateRlc
                                           ; SOURCE LINE # 442
001A 7D08              MOV     R5,#08H
001C E4                CLR     A
001D FF                MOV     R7,A
001E 010000      R     AJMP    _SOsd_UpdateReg
             ; FUNCTION _SpiOsdWinHWOffAll (END)

             ; FUNCTION _SOsd_SetSpiStartOffset (BEGIN)
                                           ; SOURCE LINE # 465
;---- Variable 'win' assigned to Register 'R3' ----
0000 AB07              MOV     R3,AR7
                                           ; SOURCE LINE # 466
                                           ; SOURCE LINE # 469
0002 EB                MOV     A,R3
0003 110000      R     ACALL   L?0240
0006 FE                MOV     R6,A
0007 A3                INC     DPTR
0008 E0                MOVX    A,@DPTR
0009 8E00        R     MOV     data_p,R6
000B F500        R     MOV     data_p+01H,A
                                           ; SOURCE LINE # 470
000D 2407              ADD     A,#07H
000F F500        R     MOV     data_p+01H,A
0011 E4                CLR     A
0012 3500        R     ADDC    A,data_p
0014 F500        R     MOV     data_p,A
                                           ; SOURCE LINE # 471
0016 110000      R     ACALL   L?0252
0019 7814              MOV     R0,#014H
001B 110000      R     ACALL   L?0304
001E 7002              JNZ     ?C0196
0020 0500        R     INC     data_p
0022         ?C0196:
0022 110000      R     ACALL   L?0246
                                           ; SOURCE LINE # 472
0025 110000      R     ACALL   L?0252
0028 780C              MOV     R0,#0CH
002A 110000      R     ACALL   L?0304
002D 7002              JNZ     ?C0197
002F 0500        R     INC     data_p
0031         ?C0197:
0031 110000      R     ACALL   L?0246
                                           ; SOURCE LINE # 473
0034 110000      R     ACALL   L?0253
0037 7804              MOV     R0,#04H
0039 110000      E     ACALL   ?C?ULSHR
003C 110000      R     ACALL   L?0305
003F EF                MOV     A,R7
0040 F0                MOVX    @DPTR,A
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 50  

                                           ; SOURCE LINE # 475
0041 EB                MOV     A,R3
0042 7004              JNZ     ?C0029
0044 740E              MOV     A,#0EH
0046 8002              SJMP    ?C0226
0048         ?C0029:
                                           ; SOURCE LINE # 476
0048 7406              MOV     A,#06H
004A         ?C0226:
004A 2500        R     ADD     A,data_p+01H
004C F500        R     MOV     data_p+01H,A
004E E4                CLR     A
004F 3500        R     ADDC    A,data_p
0051 F500        R     MOV     data_p,A
0053         ?C0030:
                                           ; SOURCE LINE # 477
0053 90000000    R     MOV     DPTR,#offset
0057 A3                INC     DPTR
0058 A3                INC     DPTR
0059 A3                INC     DPTR
005A E0                MOVX    A,@DPTR
005B 540F              ANL     A,#0FH
005D 110000      R     ACALL   L?0305
0060 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 478
0061 22                RET     
             ; FUNCTION _SOsd_SetSpiStartOffset (END)

             ; FUNCTION _SOsd_SetSpiStartBit (BEGIN)
                                           ; SOURCE LINE # 495
;---- Variable 'win' assigned to Register 'R7' ----
;---- Variable 'start' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 496
                                           ; SOURCE LINE # 500
0000 EF                MOV     A,R7
0001 6029              JZ      ?C0033
0003         ?C0032:
                                           ; SOURCE LINE # 504
0003 110000      R     ACALL   L?0238
0006 FE                MOV     R6,A
0007 A3                INC     DPTR
0008 E0                MOVX    A,@DPTR
0009 8E00        R     MOV     data_p,R6
000B F500        R     MOV     data_p+01H,A
                                           ; SOURCE LINE # 505
000D 240A              ADD     A,#0AH
000F F500        R     MOV     data_p+01H,A
0011 E4                CLR     A
0012 3500        R     ADDC    A,data_p
0014 F500        R     MOV     data_p,A
                                           ; SOURCE LINE # 506
0016 850082      R     MOV     DPL,data_p+01H
0019 110000      R     ACALL   L?0241
;---- Variable 'bTemp' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 507
001C 543F              ANL     A,#03FH
001E FF                MOV     R7,A
                                           ; SOURCE LINE # 508
001F AE05              MOV     R6,AR5
0021 EE                MOV     A,R6
0022 C4                SWAP    A
0023 33                RLC     A
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 51  

0024 33                RLC     A
0025 54C0              ANL     A,#0C0H
0027 4F                ORL     A,R7
                                           ; SOURCE LINE # 509
0028 759300      E     MOV     DPX,#?C?XDATASEG
002B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 510
002C         ?C0033:
002C 22                RET     
             ; FUNCTION _SOsd_SetSpiStartBit (END)

             ; FUNCTION _SOsd_SetImageWidthHeight (BEGIN)
                                           ; SOURCE LINE # 549
;---- Variable 'bTemp' assigned to Register 'R1' ----
0000 90000000    R     MOV     DPTR,#win
0004 EF                MOV     A,R7
0005 F0                MOVX    @DPTR,A
0006 A3                INC     DPTR
0007 EC                MOV     A,R4
0008 F0                MOVX    @DPTR,A
0009 A3                INC     DPTR
000A ED                MOV     A,R5
000B F0                MOVX    @DPTR,A
;---- Variable 'h' assigned to Register 'R2/R3' ----
                                           ; SOURCE LINE # 550
                                           ; SOURCE LINE # 554
000C 90000000    R     MOV     DPTR,#win
0010 E0                MOVX    A,@DPTR
0011 FF                MOV     R7,A
0012 110000      R     ACALL   L?0240
0015 FC                MOV     R4,A
0016 A3                INC     DPTR
0017 E0                MOVX    A,@DPTR
0018 240A              ADD     A,#0AH
001A F500        R     MOV     data_p+01H,A
001C E4                CLR     A
001D 3C                ADDC    A,R4
001E F500        R     MOV     data_p,A
                                           ; SOURCE LINE # 555
0020 EF                MOV     A,R7
0021 6026              JZ      ?C0034
                                           ; SOURCE LINE # 557
0023 850082      R     MOV     DPL,data_p+01H
0026 850083      R     MOV     DPH,data_p
0029 759300      E     MOV     DPX,#?C?XDATASEG
002C E0                MOVX    A,@DPTR
002D 54C0              ANL     A,#0C0H
002F F9                MOV     R1,A
                                           ; SOURCE LINE # 558
0030 90000000    R     MOV     DPTR,#w
0034 E0                MOVX    A,@DPTR
0035 49                ORL     A,R1
0036 110000      R     ACALL   L?0275
0039 7002              JNZ     ?C0198
003B 0500        R     INC     data_p
003D         ?C0198:
003D 110000      R     ACALL   L?0247
                                           ; SOURCE LINE # 559
0040 110000      R     ACALL   L?0274
0043 7037              JNZ     ?C0227
0045 0500        R     INC     data_p
0047         ?C0199:
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 52  

                                           ; SOURCE LINE # 560
0047 8033              SJMP    ?C0227
0049         ?C0034:
                                           ; SOURCE LINE # 561
                                           ; SOURCE LINE # 562
0049 EA                MOV     A,R2
                                           ; SOURCE LINE # 563
004A C4                SWAP    A
004B 54F0              ANL     A,#0F0H
004D F9                MOV     R1,A
                                           ; SOURCE LINE # 564
004E 90000000    R     MOV     DPTR,#w
0052 E0                MOVX    A,@DPTR
0053 49                ORL     A,R1
0054 F9                MOV     R1,A
                                           ; SOURCE LINE # 565
0055 0500        R     INC     data_p+01H
0057 E500        R     MOV     A,data_p+01H
0059 AE00        R     MOV     R6,data_p
005B 7002              JNZ     ?C0200
005D 0500        R     INC     data_p
005F         ?C0200:
005F 14                DEC     A
0060 F582              MOV     DPL,A
0062 8E83              MOV     DPH,R6
0064 759300      E     MOV     DPX,#?C?XDATASEG
0067 E9                MOV     A,R1
0068 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 566
0069 110000      R     ACALL   L?0274
006C 7002              JNZ     ?C0201
006E 0500        R     INC     data_p
0070         ?C0201:
0070 110000      R     ACALL   L?0247
                                           ; SOURCE LINE # 567
0073 AF03              MOV     R7,AR3
0075 110000      R     ACALL   L?0276
0078 7002              JNZ     ?C0202
007A 0500        R     INC     data_p
007C         ?C0202:
007C         ?C0227:
007C 110000      R     ACALL   L?0247
                                           ; SOURCE LINE # 568
                                           ; SOURCE LINE # 569
007F         ?C0036:
007F 22                RET     
             ; FUNCTION _SOsd_SetImageWidthHeight (END)

             ; FUNCTION _SOsd_SetScreen (BEGIN)
                                           ; SOURCE LINE # 581
0000 90000000    R     MOV     DPTR,#x
0004 EC                MOV     A,R4
0005 F0                MOVX    @DPTR,A
0006 A3                INC     DPTR
0007 ED                MOV     A,R5
0008 F0                MOVX    @DPTR,A
0009 A3                INC     DPTR
000A EA                MOV     A,R2
000B F0                MOVX    @DPTR,A
000C A3                INC     DPTR
000D EB                MOV     A,R3
000E F0                MOVX    @DPTR,A
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 53  

;---- Variable 'winno' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 582
                                           ; SOURCE LINE # 586
000F 110000      R     ACALL   L?0239
0012 FE                MOV     R6,A
0013 A3                INC     DPTR
0014 E0                MOVX    A,@DPTR
0015 8E00        R     MOV     data_p,R6
0017 F500        R     MOV     data_p+01H,A
                                           ; SOURCE LINE # 588
0019 0500        R     INC     data_p+01H
001B E500        R     MOV     A,data_p+01H
001D 7002              JNZ     ?C0203
001F 0500        R     INC     data_p
0021         ?C0203:
                                           ; SOURCE LINE # 589
0021 90000000    R     MOV     DPTR,#y
0025 E0                MOVX    A,@DPTR
;---- Variable 'value' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 590
0026 C4                SWAP    A
0027 54F0              ANL     A,#0F0H
0029 FD                MOV     R5,A
                                           ; SOURCE LINE # 591
002A 90000000    R     MOV     DPTR,#x
002E E0                MOVX    A,@DPTR
002F 4D                ORL     A,R5
0030 FD                MOV     R5,A
                                           ; SOURCE LINE # 592
0031 0500        R     INC     data_p+01H
0033 E500        R     MOV     A,data_p+01H
0035 AE00        R     MOV     R6,data_p
0037 7002              JNZ     ?C0204
0039 0500        R     INC     data_p
003B         ?C0204:
003B 14                DEC     A
003C F582              MOV     DPL,A
003E 8E83              MOV     DPH,R6
0040 759300      E     MOV     DPX,#?C?XDATASEG
0043 ED                MOV     A,R5
0044 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 593
0045 90000000    R     MOV     DPTR,#x
0049 110000      R     ACALL   L?0268
004C 7002              JNZ     ?C0205
004E 0500        R     INC     data_p
0050         ?C0205:
0050 110000      R     ACALL   L?0247
                                           ; SOURCE LINE # 594
0053 90000000    R     MOV     DPTR,#y
0057 110000      R     ACALL   L?0268
005A 7002              JNZ     ?C0206
005C 0500        R     INC     data_p
005E         ?C0206:
005E 110000      R     ACALL   L?0247
                                           ; SOURCE LINE # 596
0061 90000000    R     MOV     DPTR,#h
0065 E0                MOVX    A,@DPTR
                                           ; SOURCE LINE # 597
0066 C4                SWAP    A
0067 54F0              ANL     A,#0F0H
0069 FD                MOV     R5,A
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 54  

                                           ; SOURCE LINE # 598
006A 90000000    R     MOV     DPTR,#w
006E E0                MOVX    A,@DPTR
006F 4D                ORL     A,R5
                                           ; SOURCE LINE # 599
0070 110000      R     ACALL   L?0270
0073 7002              JNZ     ?C0207
0075 0500        R     INC     data_p
0077         ?C0207:
0077 110000      R     ACALL   L?0247
                                           ; SOURCE LINE # 600
007A 90000000    R     MOV     DPTR,#w
007E 110000      R     ACALL   L?0269
0081 7002              JNZ     ?C0208
0083 0500        R     INC     data_p
0085         ?C0208:
0085 110000      R     ACALL   L?0247
                                           ; SOURCE LINE # 601
0088 90000000    R     MOV     DPTR,#h
008C 110000      R     ACALL   L?0269
008F 7002              JNZ     ?C0209
0091 0500        R     INC     data_p
0093         ?C0209:
0093 110000      R     ACALL   L?0247
                                           ; SOURCE LINE # 602
0096 22                RET     
             ; FUNCTION _SOsd_SetScreen (END)

             ; FUNCTION _SOsd_SetLutOffset (BEGIN)
                                           ; SOURCE LINE # 617
;---- Variable 'winno' assigned to Register 'R7' ----
;---- Variable 'table_offset' assigned to Register 'R4/R5' ----
                                           ; SOURCE LINE # 618
                                           ; SOURCE LINE # 621
0000 110000      R     ACALL   L?0239
0003 FA                MOV     R2,A
0004 A3                INC     DPTR
0005 E0                MOVX    A,@DPTR
0006 8A00        R     MOV     data_p,R2
0008 F500        R     MOV     data_p+01H,A
                                           ; SOURCE LINE # 623
000A 240D              ADD     A,#0DH
000C F500        R     MOV     data_p+01H,A
000E E4                CLR     A
000F 3500        R     ADDC    A,data_p
0011 F500        R     MOV     data_p,A
                                           ; SOURCE LINE # 624
0013 EF                MOV     A,R7
0014 700B              JNZ     ?C0038
0016 7404              MOV     A,#04H
0018 2500        R     ADD     A,data_p+01H
001A F500        R     MOV     data_p+01H,A
001C E4                CLR     A
001D 3500        R     ADDC    A,data_p
001F F500        R     MOV     data_p,A
0021         ?C0038:
                                           ; SOURCE LINE # 627
0021 EC                MOV     A,R4
0022 C4                SWAP    A
0023 F8                MOV     R0,A
0024 54F0              ANL     A,#0F0H
0026 C8                XCH     A,R0
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 55  

0027 ED                MOV     A,R5
0028 C4                SWAP    A
0029 540F              ANL     A,#0FH
002B 48                ORL     A,R0
002C 850082      R     MOV     DPL,data_p+01H
002F 850083      R     MOV     DPH,data_p
0032 759300      E     MOV     DPX,#?C?XDATASEG
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 628
0036 22                RET     
             ; FUNCTION _SOsd_SetLutOffset (END)

             ; FUNCTION _SOsd_SetPixelWidth (BEGIN)
                                           ; SOURCE LINE # 647
;---- Variable 'mode' assigned to Register 'R6' ----
;---- Variable 'bpp' assigned to Register 'R5' ----
;---- Variable 'winno' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 648
                                           ; SOURCE LINE # 652
0000 ED                MOV     A,R5
0001 B40404            CJNE    A,#04H,?C0040
0004 E4                CLR     A
0005 FE                MOV     R6,A
0006 8008              SJMP    ?C0041
0008         ?C0040:
                                           ; SOURCE LINE # 653
0008 ED                MOV     A,R5
0009 7E02              MOV     R6,#02H
000B B40602            CJNE    A,#06H,?C0042
000E 7E01              MOV     R6,#01H
0010         ?C0042:
                                           ; SOURCE LINE # 654
0010         ?C0041:
                                           ; SOURCE LINE # 656
0010 110000      R     ACALL   L?0239
0013 FC                MOV     R4,A
0014 A3                INC     DPTR
0015 E0                MOVX    A,@DPTR
0016 8C00        R     MOV     data_p,R4
0018 F500        R     MOV     data_p+01H,A
                                           ; SOURCE LINE # 658
001A 110000      R     ACALL   L?0288
001D E0                MOVX    A,@DPTR
001E 543F              ANL     A,#03FH
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 659
0021 759300      E     MOV     DPX,#?C?XDATASEG
0024 E0                MOVX    A,@DPTR
0025 FF                MOV     R7,A
0026 EE                MOV     A,R6
0027 C4                SWAP    A
0028 33                RLC     A
0029 33                RLC     A
002A 54C0              ANL     A,#0C0H
002C FD                MOV     R5,A
002D EF                MOV     A,R7
002E 4D                ORL     A,R5
002F 759300      E     MOV     DPX,#?C?XDATASEG
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 660
0033 22                RET     
             ; FUNCTION _SOsd_SetPixelWidth (END)
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 56  


             ; FUNCTION _SOsd_SetGlobalAlpha (BEGIN)
                                           ; SOURCE LINE # 704
;---- Variable 'alpha' assigned to Register 'R5' ----
;---- Variable 'winno' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 705
                                           ; SOURCE LINE # 708
0000 110000      R     ACALL   L?0239
0003 FA                MOV     R2,A
0004 A3                INC     DPTR
0005 E0                MOVX    A,@DPTR
0006 8A00        R     MOV     data_p,R2
0008 F500        R     MOV     data_p+01H,A
                                           ; SOURCE LINE # 710
000A 110000      R     ACALL   L?0295
000D E0                MOVX    A,@DPTR
000E 54CF              ANL     A,#0CFH
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 711
0011 ED                MOV     A,R5
0012 6007              JZ      ?C0045
0014 759300      E     MOV     DPX,#?C?XDATASEG
0017 E0                MOVX    A,@DPTR
0018 4410              ORL     A,#010H
001A F0                MOVX    @DPTR,A
001B         ?C0045:
                                           ; SOURCE LINE # 713
001B 740C              MOV     A,#0CH
001D 110000      R     ACALL   L?0306
                                           ; SOURCE LINE # 714
0020 EF                MOV     A,R7
0021 7005              JNZ     ?C0046
0023 7404              MOV     A,#04H
0025 110000      R     ACALL   L?0306
0028         ?C0046:
                                           ; SOURCE LINE # 715
0028 AF05              MOV     R7,AR5
002A 850082      R     MOV     DPL,data_p+01H
002D 850083      R     MOV     DPH,data_p
0030 759300      E     MOV     DPX,#?C?XDATASEG
0033 EF                MOV     A,R7
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 716
0035 22                RET     
             ; FUNCTION _SOsd_SetGlobalAlpha (END)

             ; FUNCTION _SOsd_SetPixelAlpha (BEGIN)
                                           ; SOURCE LINE # 727
;---- Variable 'alpha' assigned to Register 'R5' ----
;---- Variable 'winno' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 728
                                           ; SOURCE LINE # 731
0000 110000      R     ACALL   L?0239
0003 FA                MOV     R2,A
0004 A3                INC     DPTR
0005 E0                MOVX    A,@DPTR
0006 8A00        R     MOV     data_p,R2
0008 F500        R     MOV     data_p+01H,A
                                           ; SOURCE LINE # 733
000A ED                MOV     A,R5
000B 600E              JZ      ?C0048
000D 850082      R     MOV     DPL,data_p+01H
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 57  

0010 8A83              MOV     DPH,R2
0012 759300      E     MOV     DPX,#?C?XDATASEG
0015 E0                MOVX    A,@DPTR
0016 4430              ORL     A,#030H
0018 F0                MOVX    @DPTR,A
0019 8007              SJMP    ?C0049
001B         ?C0048:
                                           ; SOURCE LINE # 734
001B 110000      R     ACALL   L?0307
001E E0                MOVX    A,@DPTR
001F 54CF              ANL     A,#0CFH
0021 F0                MOVX    @DPTR,A
0022         ?C0049:
                                           ; SOURCE LINE # 736
0022 740C              MOV     A,#0CH
0024 110000      R     ACALL   L?0308
                                           ; SOURCE LINE # 737
0027 EF                MOV     A,R7
0028 7005              JNZ     ?C0050
002A 7404              MOV     A,#04H
002C 110000      R     ACALL   L?0308
002F         ?C0050:
                                           ; SOURCE LINE # 738
002F AF05              MOV     R7,AR5
0031 110000      R     ACALL   L?0307
0034 EF                MOV     A,R7
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 739
0036 22                RET     
             ; FUNCTION _SOsd_SetPixelAlpha (END)

             ; FUNCTION _SOsd_SetWin0Animation (BEGIN)
                                           ; SOURCE LINE # 783
;---- Variable 'mode' assigned to Register 'R7' ----
;---- Variable 'FrameV' assigned to Register 'R3' ----
;---- Variable 'FrameH' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 784
                                           ; SOURCE LINE # 787
0000 90000000    R     MOV     DPTR,#SOsdCtrl
0004 E0                MOVX    A,@DPTR
0005 F8                MOV     R0,A
0006 A3                INC     DPTR
0007 E0                MOVX    A,@DPTR
0008 8883              MOV     DPH,R0
000A 858300      R     MOV     data_p,DPH
000D F500        R     MOV     data_p+01H,A
                                           ; SOURCE LINE # 788
000F 7412              MOV     A,#012H
0011 2500        R     ADD     A,data_p+01H
0013 F500        R     MOV     data_p+01H,A
0015 E4                CLR     A
0016 3500        R     ADDC    A,data_p
0018 F500        R     MOV     data_p,A
                                           ; SOURCE LINE # 790
001A AE05              MOV     R6,AR5
001C 110000      R     ACALL   L?0309
001F 7002              JNZ     ?C0210
0021 0500        R     INC     data_p
0023         ?C0210:
0023 110000      R     ACALL   L?0286
0026 EE                MOV     A,R6
0027 F0                MOVX    @DPTR,A
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 58  

                                           ; SOURCE LINE # 791
0028 AE03              MOV     R6,AR3
002A 110000      R     ACALL   L?0309
002D 7002              JNZ     ?C0211
002F 0500        R     INC     data_p
0031         ?C0211:
0031 110000      R     ACALL   L?0286
0034 EE                MOV     A,R6
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 792
0036 90000000    R     MOV     DPTR,#Duration
003A E0                MOVX    A,@DPTR
003B FE                MOV     R6,A
003C 110000      R     ACALL   L?0310
003F 7002              JNZ     ?C0212
0041 0500        R     INC     data_p
0043         ?C0212:
0043 110000      R     ACALL   L?0287
0046 EE                MOV     A,R6
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 794
0048 850082      R     MOV     DPL,data_p+01H
004B 850083      R     MOV     DPH,data_p
004E 759300      E     MOV     DPX,#?C?XDATASEG
0051 E0                MOVX    A,@DPTR
0052 543F              ANL     A,#03FH
0054 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 795
0055 759300      E     MOV     DPX,#?C?XDATASEG
0058 E0                MOVX    A,@DPTR
0059 FE                MOV     R6,A
005A EF                MOV     A,R7
005B C4                SWAP    A
005C 33                RLC     A
005D 33                RLC     A
005E 54C0              ANL     A,#0C0H
0060 FF                MOV     R7,A
0061 EE                MOV     A,R6
0062 4F                ORL     A,R7
0063 759300      E     MOV     DPX,#?C?XDATASEG
0066 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 796
0067 22                RET     
             ; FUNCTION _SOsd_SetWin0Animation (END)

             ; FUNCTION _SOsd_SetWin0ImageOffsetXY (BEGIN)
                                           ; SOURCE LINE # 805
0000 90000000    R     MOV     DPTR,#x
0004 EE                MOV     A,R6
0005 F0                MOVX    @DPTR,A
0006 A3                INC     DPTR
0007 EF                MOV     A,R7
0008 F0                MOVX    @DPTR,A
;---- Variable 'y' assigned to Register 'R4/R5' ----
                                           ; SOURCE LINE # 806
                                           ; SOURCE LINE # 810
0009 90000000    R     MOV     DPTR,#SOsdCtrl
000D E0                MOVX    A,@DPTR
000E FE                MOV     R6,A
000F A3                INC     DPTR
0010 E0                MOVX    A,@DPTR
0011 8E00        R     MOV     data_p,R6
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 59  

0013 F500        R     MOV     data_p+01H,A
                                           ; SOURCE LINE # 811
0015 740D              MOV     A,#0DH
0017 2500        R     ADD     A,data_p+01H
0019 F500        R     MOV     data_p+01H,A
001B E4                CLR     A
001C 3500        R     ADDC    A,data_p
001E F500        R     MOV     data_p,A
                                           ; SOURCE LINE # 813
0020 EC                MOV     A,R4
;---- Variable 'value' assigned to Register 'R3' ----
                                           ; SOURCE LINE # 814
0021 C4                SWAP    A
0022 54F0              ANL     A,#0F0H
0024 FB                MOV     R3,A
                                           ; SOURCE LINE # 815
0025 90000000    R     MOV     DPTR,#x
0029 E0                MOVX    A,@DPTR
002A 4B                ORL     A,R3
                                           ; SOURCE LINE # 816
002B FF                MOV     R7,A
002C 0500        R     INC     data_p+01H
002E E500        R     MOV     A,data_p+01H
0030 AA00        R     MOV     R2,data_p
0032 7002              JNZ     ?C0213
0034 0500        R     INC     data_p
0036         ?C0213:
0036 110000      R     ACALL   L?0294
0039 EF                MOV     A,R7
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 817
003B 90000000    R     MOV     DPTR,#x
003F A3                INC     DPTR
0040 E0                MOVX    A,@DPTR
0041 FF                MOV     R7,A
0042 0500        R     INC     data_p+01H
0044 E500        R     MOV     A,data_p+01H
0046 AA00        R     MOV     R2,data_p
0048 7002              JNZ     ?C0214
004A 0500        R     INC     data_p
004C         ?C0214:
004C 110000      R     ACALL   L?0294
004F EF                MOV     A,R7
0050 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 818
0051 AF05              MOV     R7,AR5
0053 0500        R     INC     data_p+01H
0055 E500        R     MOV     A,data_p+01H
0057 AC00        R     MOV     R4,data_p
0059 7002              JNZ     ?C0215
005B 0500        R     INC     data_p
005D         ?C0215:
005D 110000      R     ACALL   L?0247
                                           ; SOURCE LINE # 819
0060 22                RET     
             ; FUNCTION _SOsd_SetWin0ImageOffsetXY (END)

             ; FUNCTION SOsd_CleanLut (BEGIN)
                                           ; SOURCE LINE # 831
                                           ; SOURCE LINE # 832
                                           ; SOURCE LINE # 836
0000 E4                CLR     A
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 60  

0001 90000000    R     MOV     DPTR,#win
0005 F0                MOVX    @DPTR,A
0006         ?C0054:
                                           ; SOURCE LINE # 837
0006 90000000    R     MOV     DPTR,#win
000A E0                MOVX    A,@DPTR
000B 90000000    R     MOV     DPTR,#pLut
000F 110000      R     ACALL   L?0243
                                           ; SOURCE LINE # 838
0012 E4                CLR     A
0013 110000      E     ACALL   ?C?CSTPTR
                                           ; SOURCE LINE # 839
0016 90000000    R     MOV     DPTR,#pLut
001A 110000      R     ACALL   L?0237
001D 2401              ADD     A,#01H
001F 110000      R     ACALL   L?0300
                                           ; SOURCE LINE # 840
0022 90000000    R     MOV     DPTR,#pLut
0026 110000      R     ACALL   L?0237
0029 2403              ADD     A,#03H
002B 110000      R     ACALL   L?0300
                                           ; SOURCE LINE # 841
002E E4                CLR     A
002F FF                MOV     R7,A
0030 FE                MOV     R6,A
0031 FD                MOV     R5,A
0032 FC                MOV     R4,A
0033 90000000    R     MOV     DPTR,#pLut
0037 110000      R     ACALL   L?0237
003A 110000      R     ACALL   L?0296
003D 110000      E     ACALL   ?C?LSTPTR
                                           ; SOURCE LINE # 842
0040 90000000    R     MOV     DPTR,#pLut
0044 110000      R     ACALL   L?0237
0047 110000      R     ACALL   L?0311
004A 74FF              MOV     A,#0FFH
004C 110000      E     ACALL   ?C?CSTPTR
                                           ; SOURCE LINE # 843
004F 90000000    R     MOV     DPTR,#win
0053 E0                MOVX    A,@DPTR
0054 04                INC     A
0055 F0                MOVX    @DPTR,A
0056 E0                MOVX    A,@DPTR
0057 6409              XRL     A,#09H
0059 70AB              JNZ     ?C0054
                                           ; SOURCE LINE # 844
005B         ?C0057:
005B 22                RET     
             ; FUNCTION SOsd_CleanLut (END)

             ; FUNCTION SOsd_CleanRlc (BEGIN)
                                           ; SOURCE LINE # 845
                                           ; SOURCE LINE # 846
                                           ; SOURCE LINE # 847
0000 E4                CLR     A
0001 90000000    R     MOV     DPTR,#SOsdCtrl+06CH
0005 F0                MOVX    @DPTR,A
0006 A3                INC     DPTR
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 848
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 61  

000A A3                INC     DPTR
000B F0                MOVX    @DPTR,A
000C A3                INC     DPTR
000D F0                MOVX    @DPTR,A
000E A3                INC     DPTR
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 849
0010 22                RET     
             ; FUNCTION SOsd_CleanRlc (END)

             ; FUNCTION _SOsd_SetLut (BEGIN)
                                           ; SOURCE LINE # 865
0000 90000000    R     MOV     DPTR,#type
0004 ED                MOV     A,R5
0005 F0                MOVX    @DPTR,A
0006 A3                INC     DPTR
0007 EA                MOV     A,R2
0008 F0                MOVX    @DPTR,A
0009 A3                INC     DPTR
000A EB                MOV     A,R3
;---- Variable 'win' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 866
                                           ; SOURCE LINE # 869
000B 110000      R     ACALL   L?0264
000E 90000000    R     MOV     DPTR,#pLut
0012 110000      R     ACALL   L?0244
                                           ; SOURCE LINE # 871
0015 90000000    R     MOV     DPTR,#type
0019 E0                MOVX    A,@DPTR
001A 4480              ORL     A,#080H
001C 110000      E     ACALL   ?C?CSTPTR
                                           ; SOURCE LINE # 872
001F 90000000    R     MOV     DPTR,#LutOffset
0023 110000      R     ACALL   L?0313
0026 110000      R     ACALL   L?0237
0029 2401              ADD     A,#01H
002B 110000      R     ACALL   L?0301
                                           ; SOURCE LINE # 873
002E 90000000    R     MOV     DPTR,#size
0032 110000      R     ACALL   L?0313
0035 110000      R     ACALL   L?0237
0038 2403              ADD     A,#03H
003A 110000      R     ACALL   L?0301
                                           ; SOURCE LINE # 874
003D 90000000    R     MOV     DPTR,#address
0041 110000      R     ACALL   L?0254
0044 90000000    R     MOV     DPTR,#pLut
0048 110000      R     ACALL   L?0237
004B 110000      R     ACALL   L?0296
004E 110000      E     ACALL   ?C?LSTPTR
                                           ; SOURCE LINE # 875
0051 90000000    R     MOV     DPTR,#alpha_index
0055 E0                MOVX    A,@DPTR
0056 FF                MOV     R7,A
0057 A3                INC     DPTR
0058 110000      R     ACALL   L?0237
005B 110000      R     ACALL   L?0311
005E EF                MOV     A,R7
005F 010000      E     AJMP    ?C?CSTPTR
             ; FUNCTION _SOsd_SetLut (END)

             ; FUNCTION _SOsd_SetRlc (BEGIN)
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 62  

                                           ; SOURCE LINE # 887
0000 90000000    R     MOV     DPTR,#bpp
0004 ED                MOV     A,R5
0005 F0                MOVX    @DPTR,A
0006 A3                INC     DPTR
0007 EB                MOV     A,R3
0008 F0                MOVX    @DPTR,A
0009 90000000    R     MOV     DPTR,#win
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 888
                                           ; SOURCE LINE # 891
000F 7009              JNZ     ?C0060
                                           ; SOURCE LINE # 892
0011 7B00        R     MOV     R3,#MBYTE ?SC_18
0013 7A00        R     MOV     R2,#HIGH ?SC_18
0015 7900        R     MOV     R1,#LOW ?SC_18
0017 010000      E     AJMP    _Printf
                                           ; SOURCE LINE # 894
001A         ?C0060:
                                           ; SOURCE LINE # 896
001A 90000000    R     MOV     DPTR,#win
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 6401              XRL     A,#01H
0022 6004              JZ      ?C0063
0024 EF                MOV     A,R7
0025 B40211            CJNE    A,#02H,?C0062
0028         ?C0063:
0028 90000000    R     MOV     DPTR,#pRlc
002C 7400        R     MOV     A,#MBYTE SOsdCtrl
002E F0                MOVX    @DPTR,A
002F A3                INC     DPTR
0030 7400        R     MOV     A,#HIGH SOsdCtrl+06CH
0032 F0                MOVX    @DPTR,A
0033 A3                INC     DPTR
0034 7400        R     MOV     A,#LOW SOsdCtrl+06CH
0036 F0                MOVX    @DPTR,A
0037 800F              SJMP    ?C0064
0039         ?C0062:
                                           ; SOURCE LINE # 897
0039 90000000    R     MOV     DPTR,#pRlc
003D 7400        R     MOV     A,#MBYTE SOsdCtrl
003F F0                MOVX    @DPTR,A
0040 A3                INC     DPTR
0041 7400        R     MOV     A,#HIGH SOsdCtrl+06FH
0043 F0                MOVX    @DPTR,A
0044 A3                INC     DPTR
0045 7400        R     MOV     A,#LOW SOsdCtrl+06FH
0047 F0                MOVX    @DPTR,A
0048         ?C0064:
                                           ; SOURCE LINE # 898
0048 90000000    R     MOV     DPTR,#pRlc
004C 110000      R     ACALL   L?0237
004F F9                MOV     R1,A
0050 EF                MOV     A,R7
0051 110000      E     ACALL   ?C?CSTPTR
                                           ; SOURCE LINE # 899
0054 90000000    R     MOV     DPTR,#bpp
0058 E0                MOVX    A,@DPTR
0059 FF                MOV     R7,A
005A 90000000    R     MOV     DPTR,#pRlc
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 63  

005E 110000      R     ACALL   L?0237
0061 2401              ADD     A,#01H
0063 F9                MOV     R1,A
0064 E4                CLR     A
0065 3A                ADDC    A,R2
0066 FA                MOV     R2,A
0067 EF                MOV     A,R7
0068 110000      E     ACALL   ?C?CSTPTR
                                           ; SOURCE LINE # 900
006B 90000000    R     MOV     DPTR,#count
006F E0                MOVX    A,@DPTR
0070 FF                MOV     R7,A
0071 A3                INC     DPTR
0072 110000      R     ACALL   L?0237
0075 2402              ADD     A,#02H
0077 F9                MOV     R1,A
0078 E4                CLR     A
0079 3A                ADDC    A,R2
007A FA                MOV     R2,A
007B EF                MOV     A,R7
007C 110000      E     ACALL   ?C?CSTPTR
                                           ; SOURCE LINE # 901
007F         ?C0061:
007F 22                RET     
             ; FUNCTION _SOsd_SetRlc (END)

             ; FUNCTION _SOsd_SetPixelAlphaIndex (BEGIN)
                                           ; SOURCE LINE # 911
0000 90000000    R     MOV     DPTR,#alpha_index
0004 ED                MOV     A,R5
;---- Variable 'win' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 912
                                           ; SOURCE LINE # 915
0005 110000      R     ACALL   L?0264
;---- Variable 'pLut' assigned to Register 'R1/R2/R3' ----
                                           ; SOURCE LINE # 916
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A E9                MOV     A,R1
000B 110000      R     ACALL   L?0312
000E EF                MOV     A,R7
000F 010000      E     AJMP    ?C?CSTPTR
             ; FUNCTION _SOsd_SetPixelAlphaIndex (END)

             ; FUNCTION _SOsd_UpdateLut (BEGIN)
                                           ; SOURCE LINE # 954
0000 90000000    R     MOV     DPTR,#win
0004 EF                MOV     A,R7
0005 F0                MOVX    @DPTR,A
0006 A3                INC     DPTR
0007 ED                MOV     A,R5
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 955
                                           ; SOURCE LINE # 973
0009 90000000    R     MOV     DPTR,#win
000D E0                MOVX    A,@DPTR
000E 110000      R     ACALL   L?0265
0011 90000000    R     MOV     DPTR,#pLut
0015 110000      R     ACALL   L?0244
                                           ; SOURCE LINE # 976
0018 110000      E     ACALL   ?C?CLDPTR
001B 90000000    R     MOV     DPTR,#type
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 64  

001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 977
0020 20E703            JB      ACC.7,$ + 6H
0023 010000      R     AJMP    ?C0067
0026         ?C0066:
                                           ; SOURCE LINE # 979
0026 90000000    R     MOV     DPTR,#type
002A E0                MOVX    A,@DPTR
002B 5401              ANL     A,#01H
002D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 982
002E 7059              JNZ     ?C0068
                                           ; SOURCE LINE # 983
0030 90000000    R     MOV     DPTR,#pLut
0034 110000      R     ACALL   L?0237
0037 110000      R     ACALL   L?0258
003A FB                MOV     R3,A
003B AAF0              MOV     R2,B
003D C002              PUSH    AR2
003F C003              PUSH    AR3
0041 90000000    R     MOV     DPTR,#pLut
0045 110000      R     ACALL   L?0237
0048 2403              ADD     A,#03H
004A 110000      R     ACALL   L?0260
004D 90000000    R     MOV     DPTR,#?_SpiOsdIoLoadLUT?BYTE+04H
0051 110000      R     ACALL   L?0282
0054 90000000    R     MOV     DPTR,#pLut
0058 A3                INC     DPTR
0059 E0                MOVX    A,@DPTR
005A FA                MOV     R2,A
005B A3                INC     DPTR
005C E0                MOVX    A,@DPTR
005D 110000      R     ACALL   L?0297
0060 110000      E     ACALL   ?C?LLDPTR
0063 90000000    R     MOV     DPTR,#?_SpiOsdIoLoadLUT?BYTE+06H
0067 110000      E     ACALL   ?C?LSTXDATA
006A 90000000    R     MOV     DPTR,#pLut
006E 110000      R     ACALL   L?0237
0071 110000      R     ACALL   L?0255
0074 90000000    R     MOV     DPTR,#?_SpiOsdIoLoadLUT?BYTE+0AH
0078 F0                MOVX    @DPTR,A
0079 90000000    R     MOV     DPTR,#type
007D E0                MOVX    A,@DPTR
007E FD                MOV     R5,A
007F 110000      R     ACALL   L?0314
0082 D003              POP     AR3
0084 D002              POP     AR2
0086 010000      R     AJMP    _SpiOsdIoLoadLUT
                                           ; SOURCE LINE # 985
0089         ?C0068:
                                           ; SOURCE LINE # 988
0089 90000000    R     MOV     DPTR,#pLut
008D 110000      R     ACALL   L?0237
0090 110000      R     ACALL   L?0258
0093 FF                MOV     R7,A
0094 AEF0              MOV     R6,B
0096 90000000    R     MOV     DPTR,#LutOffset
009A EE                MOV     A,R6
009B F0                MOVX    @DPTR,A
009C A3                INC     DPTR
009D EF                MOV     A,R7
009E F0                MOVX    @DPTR,A
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 65  

                                           ; SOURCE LINE # 994
009F 4E                ORL     A,R6
00A0 601E              JZ      ?C0069
                                           ; SOURCE LINE # 995
00A2 110000      R     ACALL   L?0278
00A5 110000      R     ACALL   L?0233
                                           ; SOURCE LINE # 996
00A8 110000      R     ACALL   L?0284
00AB 110000      R     ACALL   L?0233
00AE E4                CLR     A
                                           ; SOURCE LINE # 998
00AF 110000      R     ACALL   L?0231
00B2 E0                MOVX    A,@DPTR
00B3 90000000    R     MOV     DPTR,#B0
                                           ; SOURCE LINE # 999
00B7 110000      R     ACALL   L?0231
00BA E0                MOVX    A,@DPTR
00BB 90000000    R     MOV     DPTR,#B0
00BF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1001
00C0         ?C0069:
                                           ; SOURCE LINE # 1004
00C0 90000000    R     MOV     DPTR,#bTemp
00C4 7480              MOV     A,#080H
00C6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1005
00C7 90000000    R     MOV     DPTR,#type
00CB E0                MOVX    A,@DPTR
00CC 90000000    R     MOV     DPTR,#bTemp
00D0 7006              JNZ     ?C0070
00D2 E0                MOVX    A,@DPTR
00D3 4440              ORL     A,#040H
00D5 F0                MOVX    @DPTR,A
00D6 8004              SJMP    ?C0071
00D8         ?C0070:
                                           ; SOURCE LINE # 1006
00D8 E0                MOVX    A,@DPTR
00D9 4420              ORL     A,#020H
00DB F0                MOVX    @DPTR,A
00DC         ?C0071:
                                           ; SOURCE LINE # 1007
00DC 110000      R     ACALL   L?0314
00DF 6401              XRL     A,#01H
00E1 6004              JZ      ?C0073
00E3 EF                MOV     A,R7
00E4 B4020A            CJNE    A,#02H,?C0072
00E7         ?C0073:
00E7 90000000    R     MOV     DPTR,#bTemp
00EB E0                MOVX    A,@DPTR
00EC 4404              ORL     A,#04H
00EE F0                MOVX    @DPTR,A
00EF 8011              SJMP    ?C0074
00F1         ?C0072:
                                           ; SOURCE LINE # 1008
00F1 90000000    R     MOV     DPTR,#LutOffset
00F5 E0                MOVX    A,@DPTR
00F6 540F              ANL     A,#0FH
00F8 6008              JZ      ?C0074
00FA 90000000    R     MOV     DPTR,#bTemp
00FE E0                MOVX    A,@DPTR
00FF 4408              ORL     A,#08H
0101 F0                MOVX    @DPTR,A
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 66  

0102         ?C0074:
                                           ; SOURCE LINE # 1009
0102 90000000    R     MOV     DPTR,#bTemp
0106 110000      R     ACALL   L?0250
0109 2410              ADD     A,#010H
010B 110000      R     ACALL   L?0233
010E EF                MOV     A,R7
010F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1010
0110 90000000    R     MOV     DPTR,#LutOffset
0114 110000      R     ACALL   L?0249
0117 2411              ADD     A,#011H
0119 110000      R     ACALL   L?0233
011C EF                MOV     A,R7
011D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1012
011E 110000      E     ACALL   ?C?ILDPTR
0121 FF                MOV     R7,A
0122 90000000    R     MOV     DPTR,#wTemp
0126 110000      R     ACALL   L?0283
                                           ; SOURCE LINE # 1013
0129 90000000    R     MOV     DPTR,#type
012D E0                MOVX    A,@DPTR
012E 6015              JZ      ?C0076
                                           ; SOURCE LINE # 1014
0130 90000000    R     MOV     DPTR,#wTemp
0134 110000      R     ACALL   L?0292
0137         ?C0216:
0137 C3                CLR     C
0138 33                RLC     A
0139 CE                XCH     A,R6
013A 33                RLC     A
013B CE                XCH     A,R6
013C D8F9              DJNZ    R0,?C0216
013E F0                MOVX    @DPTR,A
013F EE                MOV     A,R6
0140 90000000    R     MOV     DPTR,#wTemp
0144 F0                MOVX    @DPTR,A
0145         ?C0076:
                                           ; SOURCE LINE # 1015
0145 90000000    R     MOV     DPTR,#pLut
0149 110000      R     ACALL   L?0237
014C 110000      R     ACALL   L?0297
014F 110000      E     ACALL   ?C?LLDPTR
0152 90000000    R     MOV     DPTR,#wTemp
0156 E0                MOVX    A,@DPTR
0157 FB                MOV     R3,A
0158 A3                INC     DPTR
0159 E0                MOVX    A,@DPTR
015A 90000000    E     MOV     DPTR,#?_SpiFlash_Read_SOsd?BYTE+04H
015E CB                XCH     A,R3
015F F0                MOVX    @DPTR,A
0160 A3                INC     DPTR
0161 EB                MOV     A,R3
0162 F0                MOVX    @DPTR,A
0163 90000000    R     MOV     DPTR,#pLut
0167 110000      R     ACALL   L?0237
016A 2403              ADD     A,#03H
016C 110000      R     ACALL   L?0260
016F 110000      R     ACALL   L?0279
0172 110000      E     ACALL   _SpiFlash_Read_SOsd
                                           ; SOURCE LINE # 1018
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 67  

0175 90000000    R     MOV     DPTR,#LutOffset
0179 E0                MOVX    A,@DPTR
017A 7002              JNZ     ?C0217
017C A3                INC     DPTR
017D E0                MOVX    A,@DPTR
017E         ?C0217:
017E 604D              JZ      ?C0077
                                           ; SOURCE LINE # 1019
0180 110000      R     ACALL   L?0278
0183 110000      R     ACALL   L?0233
                                           ; SOURCE LINE # 1020
0186 110000      R     ACALL   L?0284
0189 110000      R     ACALL   L?0233
018C E4                CLR     A
                                           ; SOURCE LINE # 1022
018D 110000      R     ACALL   L?0231
0190 E0                MOVX    A,@DPTR
0191 90000000    R     MOV     DPTR,#B
                                           ; SOURCE LINE # 1023
0195 110000      R     ACALL   L?0231
0198 E0                MOVX    A,@DPTR
0199 90000000    R     MOV     DPTR,#B
019D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1025
019E E0                MOVX    A,@DPTR
019F FF                MOV     R7,A
01A0 90000000    R     MOV     DPTR,#B0
01A4 E0                MOVX    A,@DPTR
01A5 6F                XRL     A,R7
01A6 6025              JZ      ?C0077
                                           ; SOURCE LINE # 1026
01A8 110000      R     ACALL   L?0285
01AB 110000      R     ACALL   L?0233
01AE E4                CLR     A
01AF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1028
01B0 7B00        R     MOV     R3,#MBYTE ?SC_47
01B2 7A00        R     MOV     R2,#HIGH ?SC_47
01B4 7900        R     MOV     R1,#LOW ?SC_47
01B6 90000000    R     MOV     DPTR,#B
01BA E0                MOVX    A,@DPTR
01BB 90000000    E     MOV     DPTR,#?_Printf?BYTE+03H
01BF F0                MOVX    @DPTR,A
01C0 90000000    R     MOV     DPTR,#B0
01C4 E0                MOVX    A,@DPTR
01C5 90000000    E     MOV     DPTR,#?_Printf?BYTE+04H
01C9 F0                MOVX    @DPTR,A
01CA 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 1029
                                           ; SOURCE LINE # 1030
01CD         ?C0077:
                                           ; SOURCE LINE # 1034
01CD 90000000    R     MOV     DPTR,#fAlpha
01D1 E0                MOVX    A,@DPTR
01D2 6066              JZ      ?C0067
                                           ; SOURCE LINE # 1035
01D4 A3                INC     DPTR
01D5 110000      R     ACALL   L?0237
01D8 110000      R     ACALL   L?0255
01DB 90000000    R     MOV     DPTR,#bTemp
01DF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1036
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 68  

01E0 F4                CPL     A
01E1 6057              JZ      ?C0067
                                           ; SOURCE LINE # 1037
01E3 E0                MOVX    A,@DPTR
01E4 FF                MOV     R7,A
01E5 90000000    R     MOV     DPTR,#LutOffset+01H
01E9 E0                MOVX    A,@DPTR
01EA 2F                ADD     A,R7
01EB F0                MOVX    @DPTR,A
01EC 90000000    R     MOV     DPTR,#LutOffset
01F0 E0                MOVX    A,@DPTR
01F1 3400              ADDC    A,#00H
01F3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1038
01F4 90000000    R     MOV     DPTR,#bTemp
01F8 7483              MOV     A,#083H
01FA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1039
01FB 110000      R     ACALL   L?0315
01FE 6401              XRL     A,#01H
0200 6004              JZ      ?C0082
0202 EF                MOV     A,R7
0203 B4020A            CJNE    A,#02H,?C0081
0206         ?C0082:
0206 90000000    R     MOV     DPTR,#bTemp
020A E0                MOVX    A,@DPTR
020B 4404              ORL     A,#04H
020D F0                MOVX    @DPTR,A
020E 800F              SJMP    ?C0083
0210         ?C0081:
                                           ; SOURCE LINE # 1040
0210 90000000    R     MOV     DPTR,#LutOffset
0214 E0                MOVX    A,@DPTR
0215 6008              JZ      ?C0083
0217 90000000    R     MOV     DPTR,#bTemp
021B E0                MOVX    A,@DPTR
021C 4408              ORL     A,#08H
021E F0                MOVX    @DPTR,A
021F         ?C0083:
                                           ; SOURCE LINE # 1042
021F 90000000    R     MOV     DPTR,#bTemp
0223 110000      R     ACALL   L?0250
0226 2410              ADD     A,#010H
0228 110000      R     ACALL   L?0233
022B EF                MOV     A,R7
022C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1043
022D 90000000    R     MOV     DPTR,#LutOffset
0231 A3                INC     DPTR
0232 E0                MOVX    A,@DPTR
0233 FF                MOV     R7,A
                                           ; SOURCE LINE # 1044
0234 110000      R     ACALL   L?0230
0237 747F              MOV     A,#07FH
0239 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1045
                                           ; SOURCE LINE # 1046
                                           ; SOURCE LINE # 1047
023A         ?C0067:
023A 22                RET     
             ; FUNCTION _SOsd_UpdateLut (END)

C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 69  

             ; FUNCTION _SOsd_UpdatePixelAlpha (BEGIN)
                                           ; SOURCE LINE # 1049
0000 90000000    R     MOV     DPTR,#win
0004 EF                MOV     A,R7
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1050
                                           ; SOURCE LINE # 1057
0006 E0                MOVX    A,@DPTR
0007 110000      R     ACALL   L?0265
000A A3                INC     DPTR
000B 110000      R     ACALL   L?0244
                                           ; SOURCE LINE # 1058
000E 110000      E     ACALL   ?C?CLDPTR
0011 5401              ANL     A,#01H
0013 90000000    R     MOV     DPTR,#type
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1059
0018 E9                MOV     A,R1
0019 110000      R     ACALL   L?0256
001C FF                MOV     R7,A
;---- Variable 'alpha_index' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1061
001D F4                CPL     A
001E 6036              JZ      ?C0090
                                           ; SOURCE LINE # 1062
0020 90000000    R     MOV     DPTR,#pLut
0024 110000      R     ACALL   L?0237
0027 110000      R     ACALL   L?0259
002A ACF0              MOV     R4,B
;---- Variable 'LutOffset' assigned to Register 'R4/R5' ----
                                           ; SOURCE LINE # 1063
002C 2F                ADD     A,R7
002D FD                MOV     R5,A
002E E4                CLR     A
002F 3C                ADDC    A,R4
0030 FC                MOV     R4,A
                                           ; SOURCE LINE # 1065
;---- Variable 'bTemp' assigned to Register 'R3' ----
0031 7B80              MOV     R3,#080H
                                           ; SOURCE LINE # 1066
0033 90000000    R     MOV     DPTR,#win
0037 E0                MOVX    A,@DPTR
0038 FF                MOV     R7,A
0039 6401              XRL     A,#01H
003B 6004              JZ      ?C0087
003D EF                MOV     A,R7
003E B40206            CJNE    A,#02H,?C0086
0041         ?C0087:
0041 EB                MOV     A,R3
0042 4404              ORL     A,#04H
0044 FB                MOV     R3,A
0045 8007              SJMP    ?C0088
0047         ?C0086:
                                           ; SOURCE LINE # 1067
0047 EC                MOV     A,R4
0048 6004              JZ      ?C0088
004A EB                MOV     A,R3
004B 4408              ORL     A,#08H
004D FB                MOV     R3,A
004E         ?C0088:
                                           ; SOURCE LINE # 1069
004E AF03              MOV     R7,AR3
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 70  

                                           ; SOURCE LINE # 1070
                                           ; SOURCE LINE # 1071
0050 110000      R     ACALL   L?0229
0053 747F              MOV     A,#07FH
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1073
                                           ; SOURCE LINE # 1074
0056         ?C0090:
0056 22                RET     
             ; FUNCTION _SOsd_UpdatePixelAlpha (END)

             ; FUNCTION _SOsd_show (BEGIN)
                                           ; SOURCE LINE # 1082
0000 90000000    R     MOV     DPTR,#fClean
0004 EF                MOV     A,R7
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1083
                                           ; SOURCE LINE # 1099
0006 7F01              MOV     R7,#01H
0008 110000      E     ACALL   _WaitVBlank
                                           ; SOURCE LINE # 1106
000B 90000000    R     MOV     DPTR,#fClean
000F E0                MOVX    A,@DPTR
0010 604A              JZ      ?C0091
                                           ; SOURCE LINE # 1107
0012 759300      E     MOV     DPX,#?C?XDATASEG
0015 E500        E     MOV     A,regTW88+01H
0017 2420              ADD     A,#020H
0019 110000      R     ACALL   L?0233
001C E0                MOVX    A,@DPTR
001D 54FE              ANL     A,#0FEH
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1108
0020 90000000    R     MOV     DPTR,#win
0024 7401              MOV     A,#01H
0026 F0                MOVX    @DPTR,A
0027         ?C0092:
0027 110000      R     ACALL   L?0316
002A D3                SETB    C
002B 9408              SUBB    A,#08H
002D 502D              JNC     ?C0091
                                           ; SOURCE LINE # 1109
002F EF                MOV     A,R7
0030 75F010            MOV     B,#010H
0033 A4                MUL     AB
0034 2430              ADD     A,#030H
0036 FE                MOV     R6,A
0037 E5F0              MOV     A,B
0039 3404              ADDC    A,#04H
003B 90000000    R     MOV     DPTR,#wTemp
003F F0                MOVX    @DPTR,A
0040 A3                INC     DPTR
0041 CE                XCH     A,R6
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1110
0043 90000000    R     MOV     DPTR,#wTemp
0047 E0                MOVX    A,@DPTR
0048 FE                MOV     R6,A
0049 A3                INC     DPTR
004A E0                MOVX    A,@DPTR
004B 759300      E     MOV     DPX,#?C?XDATASEG
004E 2500        E     ADD     A,regTW88+01H
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 71  

0050 110000      R     ACALL   L?0267
0053 E0                MOVX    A,@DPTR
0054 54FE              ANL     A,#0FEH
0056 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1111
0057 110000      R     ACALL   L?0298
005A 80CB              SJMP    ?C0092
                                           ; SOURCE LINE # 1112
005C         ?C0091:
                                           ; SOURCE LINE # 1115
005C 90000000    R     MOV     DPTR,#win
0060 7401              MOV     A,#01H
0062 F0                MOVX    @DPTR,A
0063         ?C0095:
0063 110000      R     ACALL   L?0316
0066 D3                SETB    C
0067 9402              SUBB    A,#02H
0069 4003              JC      $ + 5H
006B 010000      R     AJMP    ?C0096
                                           ; SOURCE LINE # 1116
006E EF                MOV     A,R7
006F 110000      R     ACALL   L?0242
                                           ; SOURCE LINE # 1117
0072 110000      E     ACALL   ?C?CLDPTR
0075 90000000    R     MOV     DPTR,#type
0079 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1118
007A 20E703            JB      ACC.7,$ + 6H
007D 010000      R     AJMP    ?C0097
                                           ; SOURCE LINE # 1119
0080         ?C0098:
                                           ; SOURCE LINE # 1120
0080 90000000    R     MOV     DPTR,#type
0084 E0                MOVX    A,@DPTR
0085 5401              ANL     A,#01H
0087 FF                MOV     R7,A
                                           ; SOURCE LINE # 1121
0088 110000      R     ACALL   L?0235
008B 110000      R     ACALL   L?0259
                                           ; SOURCE LINE # 1123
008E 110000      R     ACALL   L?0290
0091 7484              MOV     A,#084H
0093 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1124
0094 EF                MOV     A,R7
0095 7006              JNZ     ?C0099
0097 E0                MOVX    A,@DPTR
0098 4440              ORL     A,#040H
009A F0                MOVX    @DPTR,A
009B 8008              SJMP    ?C0100
009D         ?C0099:
                                           ; SOURCE LINE # 1125
009D 90000000    R     MOV     DPTR,#bTemp
00A1 E0                MOVX    A,@DPTR
00A2 4420              ORL     A,#020H
00A4 F0                MOVX    @DPTR,A
00A5         ?C0100:
                                           ; SOURCE LINE # 1127
00A5 90000000    R     MOV     DPTR,#bTemp
00A9 110000      R     ACALL   L?0250
00AC 2410              ADD     A,#010H
00AE 110000      R     ACALL   L?0233
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 72  

00B1 EF                MOV     A,R7
00B2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1128
00B3 90000000    R     MOV     DPTR,#LutOffset
00B7 110000      R     ACALL   L?0249
00BA 2411              ADD     A,#011H
00BC 110000      R     ACALL   L?0233
00BF EF                MOV     A,R7
00C0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1130
00C1 110000      E     ACALL   ?C?ILDPTR
00C4 110000      R     ACALL   L?0281
                                           ; SOURCE LINE # 1131
00C7 90000000    R     MOV     DPTR,#type
00CB E0                MOVX    A,@DPTR
00CC 6011              JZ      ?C0101
                                           ; SOURCE LINE # 1132
00CE 110000      R     ACALL   L?0291
00D1         ?C0218:
00D1 C3                CLR     C
00D2 33                RLC     A
00D3 CE                XCH     A,R6
00D4 33                RLC     A
00D5 CE                XCH     A,R6
00D6 D8F9              DJNZ    R0,?C0218
00D8 F0                MOVX    @DPTR,A
00D9 EE                MOV     A,R6
00DA 90000000    R     MOV     DPTR,#wTemp
00DE F0                MOVX    @DPTR,A
00DF         ?C0101:
                                           ; SOURCE LINE # 1133
00DF 110000      R     ACALL   L?0234
00E2 2403              ADD     A,#03H
00E4 110000      R     ACALL   L?0260
00E7 110000      R     ACALL   L?0279
00EA 110000      E     ACALL   _SpiFlash_Read_SOsd
                                           ; SOURCE LINE # 1143
00ED 110000      R     ACALL   L?0236
00F0 110000      R     ACALL   L?0256
00F3 90000000    R     MOV     DPTR,#bTemp
00F7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1144
00F8 F4                CPL     A
00F9 601B              JZ      ?C0097
                                           ; SOURCE LINE # 1145
                                           ; SOURCE LINE # 1146
00FB 110000      R     ACALL   L?0273
00FE 7487              MOV     A,#087H
                                           ; SOURCE LINE # 1148
0100 110000      R     ACALL   L?0277
0103 110000      R     ACALL   L?0233
0106 7487              MOV     A,#087H
0108 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1149
0109 90000000    R     MOV     DPTR,#LutOffset
010D A3                INC     DPTR
010E E0                MOVX    A,@DPTR
010F FF                MOV     R7,A
                                           ; SOURCE LINE # 1150
0110 110000      R     ACALL   L?0230
0113 747F              MOV     A,#07FH
0115 F0                MOVX    @DPTR,A
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 73  

                                           ; SOURCE LINE # 1151
                                           ; SOURCE LINE # 1152
0116         ?C0097:
0116 110000      R     ACALL   L?0298
0119 010000      R     AJMP    ?C0095
011C         ?C0096:
                                           ; SOURCE LINE # 1153
011C 110000      R     ACALL   SOsd_UpdateRlcB
                                           ; SOURCE LINE # 1154
011F 7D02              MOV     R5,#02H
0121 7F01              MOV     R7,#01H
0123 110000      R     ACALL   _SOsd_UpdateReg
                                           ; SOURCE LINE # 1156
0126 7F01              MOV     R7,#01H
0128 110000      E     ACALL   _WaitVBlank
                                           ; SOURCE LINE # 1159
012B E4                CLR     A
012C 90000000    R     MOV     DPTR,#win
0130 F0                MOVX    @DPTR,A
0131         ?C0103:
0131 110000      R     ACALL   L?0317
0134 D3                SETB    C
0135 9408              SUBB    A,#08H
0137 4003              JC      $ + 5H
0139 010000      R     AJMP    ?C0104
                                           ; SOURCE LINE # 1160
013C EF                MOV     A,R7
013D 6401              XRL     A,#01H
013F 7003              JNZ     $ + 5H
0141 010000      R     AJMP    ?C0105
0144 EF                MOV     A,R7
0145 6402              XRL     A,#02H
0147 7003              JNZ     $ + 5H
0149 010000      R     AJMP    ?C0105
                                           ; SOURCE LINE # 1161
014C         ?C0106:
                                           ; SOURCE LINE # 1162
014C 90000000    R     MOV     DPTR,#win
0150 E0                MOVX    A,@DPTR
0151 110000      R     ACALL   L?0242
                                           ; SOURCE LINE # 1163
0154 110000      E     ACALL   ?C?CLDPTR
0157 90000000    R     MOV     DPTR,#type
015B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1164
015C 20E703            JB      ACC.7,$ + 6H
015F 010000      R     AJMP    ?C0105
                                           ; SOURCE LINE # 1165
0162         ?C0108:
                                           ; SOURCE LINE # 1166
0162 90000000    R     MOV     DPTR,#type
0166 E0                MOVX    A,@DPTR
0167 5401              ANL     A,#01H
0169 FF                MOV     R7,A
                                           ; SOURCE LINE # 1167
016A 110000      R     ACALL   L?0235
016D 110000      R     ACALL   L?0259
                                           ; SOURCE LINE # 1169
0170 110000      R     ACALL   L?0290
0173 7480              MOV     A,#080H
0175 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1170
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 74  

0176 EF                MOV     A,R7
0177 7006              JNZ     ?C0109
0179 E0                MOVX    A,@DPTR
017A 4440              ORL     A,#040H
017C F0                MOVX    @DPTR,A
017D 8008              SJMP    ?C0110
017F         ?C0109:
                                           ; SOURCE LINE # 1171
017F 90000000    R     MOV     DPTR,#bTemp
0183 E0                MOVX    A,@DPTR
0184 4420              ORL     A,#020H
0186 F0                MOVX    @DPTR,A
0187         ?C0110:
                                           ; SOURCE LINE # 1172
0187 90000000    R     MOV     DPTR,#LutOffset
018B E0                MOVX    A,@DPTR
018C FA                MOV     R2,A
018D A3                INC     DPTR
018E E0                MOVX    A,@DPTR
018F FB                MOV     R3,A
0190 EA                MOV     A,R2
0191 540F              ANL     A,#0FH
0193 6008              JZ      ?C0111
0195 90000000    R     MOV     DPTR,#bTemp
0199 E0                MOVX    A,@DPTR
019A 4408              ORL     A,#08H
019C F0                MOVX    @DPTR,A
019D         ?C0111:
                                           ; SOURCE LINE # 1173
019D 90000000    R     MOV     DPTR,#bTemp
01A1 110000      R     ACALL   L?0250
01A4 2410              ADD     A,#010H
01A6 110000      R     ACALL   L?0233
01A9 EF                MOV     A,R7
01AA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1174
01AB AF03              MOV     R7,AR3
01AD 110000      R     ACALL   L?0285
01B0 110000      R     ACALL   L?0233
01B3 EF                MOV     A,R7
01B4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1176
01B5 110000      R     ACALL   L?0236
01B8 110000      R     ACALL   L?0259
01BB 110000      R     ACALL   L?0281
                                           ; SOURCE LINE # 1177
01BE 90000000    R     MOV     DPTR,#type
01C2 E0                MOVX    A,@DPTR
01C3 6011              JZ      ?C0112
                                           ; SOURCE LINE # 1178
01C5 110000      R     ACALL   L?0291
01C8         ?C0219:
01C8 C3                CLR     C
01C9 33                RLC     A
01CA CE                XCH     A,R6
01CB 33                RLC     A
01CC CE                XCH     A,R6
01CD D8F9              DJNZ    R0,?C0219
01CF F0                MOVX    @DPTR,A
01D0 EE                MOV     A,R6
01D1 90000000    R     MOV     DPTR,#wTemp
01D5 F0                MOVX    @DPTR,A
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 75  

01D6         ?C0112:
                                           ; SOURCE LINE # 1179
01D6 110000      R     ACALL   L?0234
01D9 2403              ADD     A,#03H
01DB 110000      R     ACALL   L?0260
01DE 110000      R     ACALL   L?0280
01E1 110000      E     ACALL   _SpiFlash_Read_SOsd
                                           ; SOURCE LINE # 1189
01E4 110000      R     ACALL   L?0236
01E7 110000      R     ACALL   L?0256
01EA 90000000    R     MOV     DPTR,#bTemp
01EE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1190
01EF F4                CPL     A
01F0 6026              JZ      ?C0105
                                           ; SOURCE LINE # 1191
                                           ; SOURCE LINE # 1192
01F2 110000      R     ACALL   L?0273
01F5 7483              MOV     A,#083H
01F7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1193
01F8 90000000    R     MOV     DPTR,#LutOffset
01FC E0                MOVX    A,@DPTR
01FD FC                MOV     R4,A
01FE A3                INC     DPTR
01FF E0                MOVX    A,@DPTR
0200 FD                MOV     R5,A
0201 EC                MOV     A,R4
0202 6008              JZ      ?C0114
0204 90000000    R     MOV     DPTR,#bTemp
0208 E0                MOVX    A,@DPTR
0209 4408              ORL     A,#08H
020B F0                MOVX    @DPTR,A
020C         ?C0114:
                                           ; SOURCE LINE # 1195
020C 90000000    R     MOV     DPTR,#bTemp
0210 E0                MOVX    A,@DPTR
0211 FF                MOV     R7,A
                                           ; SOURCE LINE # 1196
                                           ; SOURCE LINE # 1197
0212 110000      R     ACALL   L?0229
0215 747F              MOV     A,#07FH
0217 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1198
                                           ; SOURCE LINE # 1199
0218         ?C0105:
0218 110000      R     ACALL   L?0299
021B 010000      R     AJMP    ?C0103
021E         ?C0104:
                                           ; SOURCE LINE # 1200
021E 7D08              MOV     R5,#08H
0220 7F03              MOV     R7,#03H
0222 110000      R     ACALL   _SOsd_UpdateReg
                                           ; SOURCE LINE # 1201
0225 E4                CLR     A
0226 FD                MOV     R5,A
0227 FF                MOV     R7,A
0228 110000      R     ACALL   _SOsd_UpdateReg
                                           ; SOURCE LINE # 1202
022B 010000      R     AJMP    SOsd_UpdateRlcA
             ; FUNCTION _SOsd_show (END)

C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 76  

             ; FUNCTION SOsd_UpdateRlc (BEGIN)
                                           ; SOURCE LINE # 1278
                                           ; SOURCE LINE # 1279
                                           ; SOURCE LINE # 1284
0000 E4                CLR     A
0001 90000000    R     MOV     DPTR,#i
0005 F0                MOVX    @DPTR,A
0006         ?C0116:
0006 90000000    R     MOV     DPTR,#i
000A E0                MOVX    A,@DPTR
000B FF                MOV     R7,A
000C C3                CLR     C
000D 9402              SUBB    A,#02H
000F 5069              JNC     ?C0120
                                           ; SOURCE LINE # 1285
0011 EF                MOV     A,R7
0012 75F003            MOV     B,#03H
0015 A4                MUL     AB
0016 2400        R     ADD     A,#LOW SOsdCtrl+06CH
0018 F9                MOV     R1,A
0019 7400        R     MOV     A,#HIGH SOsdCtrl+06CH
001B 35F0              ADDC    A,B
001D FA                MOV     R2,A
001E 7B00        R     MOV     R3,#MBYTE SOsdCtrl
0020 90000000    R     MOV     DPTR,#pRlc
0024 110000      R     ACALL   L?0244
                                           ; SOURCE LINE # 1286
0027 110000      R     ACALL   L?0318
002A FD                MOV     R5,A
002B 110000      R     ACALL   L?0302
002E 7406              MOV     A,#06H
0030 110000      R     ACALL   L?0266
0033 ED                MOV     A,R5
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1287
0035 90000000    R     MOV     DPTR,#pRlc
0039 110000      R     ACALL   L?0237
003C 2401              ADD     A,#01H
003E 110000      R     ACALL   L?0257
0041 FF                MOV     R7,A
0042 90000000    R     MOV     DPTR,#bTemp
0046 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1288
0047 BF0703            CJNE    R7,#07H,?C0119
004A E0                MOVX    A,@DPTR
004B 04                INC     A
004C F0                MOVX    @DPTR,A
004D         ?C0119:
                                           ; SOURCE LINE # 1289
004D 90000000    R     MOV     DPTR,#bTemp
0051 E0                MOVX    A,@DPTR
0052 C4                SWAP    A
0053 54F0              ANL     A,#0F0H
0055 FF                MOV     R7,A
0056 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1290
0057 A3                INC     DPTR
0058 110000      R     ACALL   L?0237
005B 2402              ADD     A,#02H
005D 110000      R     ACALL   L?0257
0060 4F                ORL     A,R7
0061 F9                MOV     R1,A
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 77  

0062 90000000    R     MOV     DPTR,#bTemp
0066 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1291
0067 110000      R     ACALL   L?0302
006A 7407              MOV     A,#07H
006C 110000      R     ACALL   L?0266
006F E9                MOV     A,R1
0070 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1292
0071 90000000    R     MOV     DPTR,#i
0075 E0                MOVX    A,@DPTR
0076 04                INC     A
0077 F0                MOVX    @DPTR,A
0078 808C              SJMP    ?C0116
                                           ; SOURCE LINE # 1293
007A         ?C0120:
007A 22                RET     
             ; FUNCTION SOsd_UpdateRlc (END)

             ; FUNCTION SOsd_UpdateRlcB (BEGIN)
                                           ; SOURCE LINE # 1294
                                           ; SOURCE LINE # 1295
                                           ; SOURCE LINE # 1299
0000 7B00        R     MOV     R3,#MBYTE SOsdCtrl
0002 7A00        R     MOV     R2,#HIGH SOsdCtrl+06CH
0004 7900        R     MOV     R1,#LOW SOsdCtrl+06CH
0006 90000000    R     MOV     DPTR,#pRlc
000A 110000      R     ACALL   L?0244
                                           ; SOURCE LINE # 1300
000D 110000      R     ACALL   L?0318
0010 110000      R     ACALL   L?0251
0013 2406              ADD     A,#06H
0015 110000      R     ACALL   L?0233
0018 EF                MOV     A,R7
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1301
001A E9                MOV     A,R1
001B 2401              ADD     A,#01H
001D 110000      R     ACALL   L?0257
0020 FF                MOV     R7,A
;---- Variable 'bTemp' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1302
0021 B40701            CJNE    A,#07H,?C0121
0024 0F                INC     R7
0025         ?C0121:
                                           ; SOURCE LINE # 1303
0025 EF                MOV     A,R7
0026 C4                SWAP    A
0027 54F0              ANL     A,#0F0H
0029 FF                MOV     R7,A
                                           ; SOURCE LINE # 1304
002A 90000000    R     MOV     DPTR,#pRlc
002E 110000      R     ACALL   L?0237
0031 2402              ADD     A,#02H
0033 110000      R     ACALL   L?0257
0036 4F                ORL     A,R7
                                           ; SOURCE LINE # 1305
0037 110000      R     ACALL   L?0251
003A 2407              ADD     A,#07H
003C 110000      R     ACALL   L?0233
003F EF                MOV     A,R7
0040 F0                MOVX    @DPTR,A
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 78  

                                           ; SOURCE LINE # 1306
0041 22                RET     
             ; FUNCTION SOsd_UpdateRlcB (END)

             ; FUNCTION SOsd_UpdateRlcA (BEGIN)
                                           ; SOURCE LINE # 1307
                                           ; SOURCE LINE # 1308
                                           ; SOURCE LINE # 1312
0000 7B00        R     MOV     R3,#MBYTE SOsdCtrl
0002 7A00        R     MOV     R2,#HIGH SOsdCtrl+06FH
0004 7900        R     MOV     R1,#LOW SOsdCtrl+06FH
0006 90000000    R     MOV     DPTR,#pRlc
000A 110000      R     ACALL   L?0244
                                           ; SOURCE LINE # 1313
000D 110000      R     ACALL   L?0319
0010 110000      R     ACALL   L?0251
0013 2404              ADD     A,#04H
0015 110000      R     ACALL   L?0233
0018 EF                MOV     A,R7
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1314
001A E9                MOV     A,R1
001B 2401              ADD     A,#01H
001D 110000      R     ACALL   L?0257
0020 FF                MOV     R7,A
;---- Variable 'bTemp' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1315
0021 B40701            CJNE    A,#07H,?C0123
0024 0F                INC     R7
0025         ?C0123:
                                           ; SOURCE LINE # 1316
0025 EF                MOV     A,R7
0026 C4                SWAP    A
0027 54F0              ANL     A,#0F0H
0029 FF                MOV     R7,A
                                           ; SOURCE LINE # 1317
002A 90000000    R     MOV     DPTR,#pRlc
002E 110000      R     ACALL   L?0237
0031 2402              ADD     A,#02H
0033 110000      R     ACALL   L?0257
0036 4F                ORL     A,R7
                                           ; SOURCE LINE # 1318
0037 110000      R     ACALL   L?0251
003A 2405              ADD     A,#05H
003C 110000      R     ACALL   L?0233
003F EF                MOV     A,R7
0040 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1319
0041 22                RET     
             ; FUNCTION SOsd_UpdateRlcA (END)

             ; FUNCTION _SpiOsdIoLoadLUT (BEGIN)
                                           ; SOURCE LINE # 1338
0000 90000000    R     MOV     DPTR,#_winno
0004 EF                MOV     A,R7
0005 F0                MOVX    @DPTR,A
0006 90000000    R     MOV     DPTR,#LutOffset
000A EA                MOV     A,R2
000B F0                MOVX    @DPTR,A
000C A3                INC     DPTR
000D EB                MOV     A,R3
000E F0                MOVX    @DPTR,A
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 79  

;---- Variable 'type' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 1339
                                           ; SOURCE LINE # 1347
000F 90000000    R     MOV     DPTR,#bTemp
0013 7480              MOV     A,#080H
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1348
0016 ED                MOV     A,R5
0017 7006              JNZ     ?C0125
0019 E0                MOVX    A,@DPTR
001A 4440              ORL     A,#040H
001C F0                MOVX    @DPTR,A
001D 8008              SJMP    ?C0126
001F         ?C0125:
                                           ; SOURCE LINE # 1349
001F 90000000    R     MOV     DPTR,#bTemp
0023 E0                MOVX    A,@DPTR
0024 4420              ORL     A,#020H
0026 F0                MOVX    @DPTR,A
0027         ?C0126:
                                           ; SOURCE LINE # 1350
0027 90000000    R     MOV     DPTR,#_winno
002B E0                MOVX    A,@DPTR
002C FF                MOV     R7,A
002D 6401              XRL     A,#01H
002F 6004              JZ      ?C0128
0031 EF                MOV     A,R7
0032 B4020A            CJNE    A,#02H,?C0127
0035         ?C0128:
0035 90000000    R     MOV     DPTR,#bTemp
0039 E0                MOVX    A,@DPTR
003A 4404              ORL     A,#04H
003C F0                MOVX    @DPTR,A
003D 800F              SJMP    ?C0129
003F         ?C0127:
                                           ; SOURCE LINE # 1351
003F 90000000    R     MOV     DPTR,#LutOffset
0043 E0                MOVX    A,@DPTR
0044 6008              JZ      ?C0129
0046 90000000    R     MOV     DPTR,#bTemp
004A E0                MOVX    A,@DPTR
004B 4408              ORL     A,#08H
004D F0                MOVX    @DPTR,A
004E         ?C0129:
                                           ; SOURCE LINE # 1354
004E ED                MOV     A,R5
004F 6003              JZ      $ + 5H
0051 010000      R     AJMP    ?C0131
                                           ; SOURCE LINE # 1358
0054 90000000    R     MOV     DPTR,#i
0058 F0                MOVX    @DPTR,A
0059         ?C0132:
0059 90000000    R     MOV     DPTR,#i
005D E0                MOVX    A,@DPTR
005E FF                MOV     R7,A
005F C3                CLR     C
0060 9404              SUBB    A,#04H
0062 4003              JC      $ + 5H
0064 010000      R     AJMP    ?C0141
                                           ; SOURCE LINE # 1359
0067 90000000    R     MOV     DPTR,#bTemp
006B E0                MOVX    A,@DPTR
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 80  

006C 4F                ORL     A,R7
006D 110000      R     ACALL   L?0251
0070 2410              ADD     A,#010H
0072 110000      R     ACALL   L?0233
                                           ; SOURCE LINE # 1360
0075 110000      R     ACALL   L?0248
0078 2411              ADD     A,#011H
007A 110000      R     ACALL   L?0233
007D EF                MOV     A,R7
007E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1361
007F E4                CLR     A
0080 90000000    R     MOV     DPTR,#j
0084 F0                MOVX    @DPTR,A
0085         ?C0135:
                                           ; SOURCE LINE # 1362
0085 90000000    R     MOV     DPTR,#i
0089 E0                MOVX    A,@DPTR
008A FE                MOV     R6,A
008B 110000      R     ACALL   L?0271
008E 2400              ADD     A,#00H
0090 110000      R     ACALL   L?0303
0093 A804              MOV     R0,AR4
0095 A905              MOV     R1,AR5
0097 AA06              MOV     R2,AR6
0099 AB07              MOV     R3,AR7
009B 90000000    R     MOV     DPTR,#j
009F E0                MOVX    A,@DPTR
00A0 75F040            MOV     B,#040H
00A3 A4                MUL     AB
00A4 FF                MOV     R7,A
00A5 E4                CLR     A
00A6 FC                MOV     R4,A
00A7 FD                MOV     R5,A
00A8 EB                MOV     A,R3
00A9 110000      R     ACALL   L?0261
                                           ; SOURCE LINE # 1364
00AC 110000      R     ACALL   L?0324
00AF         ?C0138:
00AF 110000      R     ACALL   L?0320
00B2 5014              JNC     ?C0137
                                           ; SOURCE LINE # 1365
00B4 7400        E     MOV     A,#LOW SPI_Buffer
00B6 2F                ADD     A,R7
00B7 F582              MOV     DPL,A
00B9 E4                CLR     A
00BA 3400        E     ADDC    A,#HIGH SPI_Buffer
00BC 110000      R     ACALL   L?0241
00BF FF                MOV     R7,A
00C0 110000      R     ACALL   L?0232
00C3 110000      R     ACALL   L?0321
00C6 80E7              SJMP    ?C0138
                                           ; SOURCE LINE # 1366
00C8         ?C0137:
00C8 90000000    R     MOV     DPTR,#j
00CC E0                MOVX    A,@DPTR
00CD 04                INC     A
00CE F0                MOVX    @DPTR,A
00CF E0                MOVX    A,@DPTR
00D0 C3                CLR     C
00D1 9404              SUBB    A,#04H
00D3 40B0              JC      ?C0135
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 81  

                                           ; SOURCE LINE # 1367
00D5         ?C0134:
00D5 90000000    R     MOV     DPTR,#i
00D9 E0                MOVX    A,@DPTR
00DA 04                INC     A
00DB F0                MOVX    @DPTR,A
00DC 010000      R     AJMP    ?C0132
                                           ; SOURCE LINE # 1368
00DF         ?C0131:
                                           ; SOURCE LINE # 1369
                                           ; SOURCE LINE # 1370
00DF 90000000    R     MOV     DPTR,#bTemp
00E3 110000      R     ACALL   L?0250
00E6 2410              ADD     A,#010H
00E8 110000      R     ACALL   L?0233
                                           ; SOURCE LINE # 1371
00EB 110000      R     ACALL   L?0248
00EE 2411              ADD     A,#011H
00F0 110000      R     ACALL   L?0233
00F3 EF                MOV     A,R7
00F4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1373
00F5 E4                CLR     A
00F6 90000000    R     MOV     DPTR,#i
00FA F0                MOVX    @DPTR,A
00FB         ?C0142:
00FB 90000000    R     MOV     DPTR,#size
00FF E0                MOVX    A,@DPTR
0100 FE                MOV     R6,A
0101 A3                INC     DPTR
0102 E0                MOVX    A,@DPTR
0103 7806              MOV     R0,#06H
0105         ?C0220:
0105 CE                XCH     A,R6
0106 C3                CLR     C
0107 13                RRC     A
0108 CE                XCH     A,R6
0109 13                RRC     A
010A D8F9              DJNZ    R0,?C0220
010C FF                MOV     R7,A
010D 90000000    R     MOV     DPTR,#i
0111 E0                MOVX    A,@DPTR
0112 FD                MOV     R5,A
0113 C3                CLR     C
0114 9F                SUBB    A,R7
0115 E4                CLR     A
0116 9E                SUBB    A,R6
0117 5031              JNC     ?C0141
                                           ; SOURCE LINE # 1374
0119 ED                MOV     A,R5
011A 75F040            MOV     B,#040H
011D A4                MUL     AB
011E FF                MOV     R7,A
011F 110000      R     ACALL   L?0271
0122 110000      R     ACALL   L?0261
                                           ; SOURCE LINE # 1376
0125 110000      R     ACALL   L?0324
0128         ?C0145:
0128 110000      R     ACALL   L?0320
012B 5014              JNC     ?C0144
                                           ; SOURCE LINE # 1377
012D 7400        E     MOV     A,#LOW SPI_Buffer
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 82  

012F 2F                ADD     A,R7
0130 F582              MOV     DPL,A
0132 E4                CLR     A
0133 3400        E     ADDC    A,#HIGH SPI_Buffer
0135 110000      R     ACALL   L?0241
0138 FF                MOV     R7,A
0139 110000      R     ACALL   L?0232
013C 110000      R     ACALL   L?0321
013F 80E7              SJMP    ?C0145
                                           ; SOURCE LINE # 1378
0141         ?C0144:
0141 90000000    R     MOV     DPTR,#i
0145 E0                MOVX    A,@DPTR
0146 04                INC     A
0147 F0                MOVX    @DPTR,A
0148 80B1              SJMP    ?C0142
                                           ; SOURCE LINE # 1379
014A         ?C0141:
                                           ; SOURCE LINE # 1381
014A 90000000    R     MOV     DPTR,#alpha
014E E0                MOVX    A,@DPTR
014F FF                MOV     R7,A
0150 F4                CPL     A
0151 6058              JZ      ?C0153
                                           ; SOURCE LINE # 1382
0153 90000000    R     MOV     DPTR,#LutOffset+01H
0157 E0                MOVX    A,@DPTR
0158 2F                ADD     A,R7
0159 F0                MOVX    @DPTR,A
015A 90000000    R     MOV     DPTR,#LutOffset
015E E0                MOVX    A,@DPTR
015F 3400              ADDC    A,#00H
0161 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1384
0162 90000000    R     MOV     DPTR,#bTemp
0166 7483              MOV     A,#083H
0168 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1385
0169 90000000    R     MOV     DPTR,#_winno
016D E0                MOVX    A,@DPTR
016E FF                MOV     R7,A
016F 6401              XRL     A,#01H
0171 6004              JZ      ?C0150
0173 EF                MOV     A,R7
0174 B4020A            CJNE    A,#02H,?C0149
0177         ?C0150:
0177 90000000    R     MOV     DPTR,#bTemp
017B E0                MOVX    A,@DPTR
017C 4404              ORL     A,#04H
017E F0                MOVX    @DPTR,A
017F 800F              SJMP    ?C0151
0181         ?C0149:
                                           ; SOURCE LINE # 1386
0181 90000000    R     MOV     DPTR,#LutOffset
0185 E0                MOVX    A,@DPTR
0186 6008              JZ      ?C0151
0188 90000000    R     MOV     DPTR,#bTemp
018C E0                MOVX    A,@DPTR
018D 4408              ORL     A,#08H
018F F0                MOVX    @DPTR,A
0190         ?C0151:
                                           ; SOURCE LINE # 1388
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 83  

0190 90000000    R     MOV     DPTR,#bTemp
0194 110000      R     ACALL   L?0250
0197 2410              ADD     A,#010H
0199 110000      R     ACALL   L?0233
019C EF                MOV     A,R7
019D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1389
019E 90000000    R     MOV     DPTR,#LutOffset
01A2 A3                INC     DPTR
01A3 E0                MOVX    A,@DPTR
01A4 FF                MOV     R7,A
                                           ; SOURCE LINE # 1390
01A5 110000      R     ACALL   L?0230
01A8 747F              MOV     A,#07FH
01AA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1391
                                           ; SOURCE LINE # 1392
01AB         ?C0153:
01AB 22                RET     
01AC         L?0324:
01AC 110000      E     ACALL   _SpiFlash_Read_XMem
01AF E4                CLR     A
01B0 90000000    R     MOV     DPTR,#k
01B4 F0                MOVX    @DPTR,A
01B5 22                RET     
             ; FUNCTION _SpiOsdIoLoadLUT (END)

             ; FUNCTION _SpiOsdCheckLut (BEGIN)
                                           ; SOURCE LINE # 1406
0000 90000000    R     MOV     DPTR,#win
0004 EF                MOV     A,R7
0005 F0                MOVX    @DPTR,A
0006 90000000    R     MOV     DPTR,#offset
000A EA                MOV     A,R2
000B F0                MOVX    @DPTR,A
000C A3                INC     DPTR
000D EB                MOV     A,R3
000E F0                MOVX    @DPTR,A
;---- Variable 'type' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 1407
                                           ; SOURCE LINE # 1417
000F 7B00        R     MOV     R3,#MBYTE ?SC_73
0011 7A00        R     MOV     R2,#HIGH ?SC_73
0013 7900        R     MOV     R1,#LOW ?SC_73
0015 90000000    R     MOV     DPTR,#win
0019 E0                MOVX    A,@DPTR
001A 90000000    E     MOV     DPTR,#?_ePrintf?BYTE+03H
001E F0                MOVX    @DPTR,A
001F A3                INC     DPTR
0020 ED                MOV     A,R5
0021 F0                MOVX    @DPTR,A
0022 90000000    R     MOV     DPTR,#offset
0026 E0                MOVX    A,@DPTR
0027 FF                MOV     R7,A
0028 A3                INC     DPTR
0029 E0                MOVX    A,@DPTR
002A 90000000    E     MOV     DPTR,#?_ePrintf?BYTE+05H
002E CF                XCH     A,R7
002F F0                MOVX    @DPTR,A
0030 A3                INC     DPTR
0031 EF                MOV     A,R7
0032 F0                MOVX    @DPTR,A
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 84  

0033 90000000    R     MOV     DPTR,#size
0037 E0                MOVX    A,@DPTR
0038 FF                MOV     R7,A
0039 A3                INC     DPTR
003A E0                MOVX    A,@DPTR
003B 90000000    E     MOV     DPTR,#?_ePrintf?BYTE+07H
003F CF                XCH     A,R7
0040 F0                MOVX    @DPTR,A
0041 A3                INC     DPTR
0042 EF                MOV     A,R7
0043 F0                MOVX    @DPTR,A
0044 90000000    R     MOV     DPTR,#addr
0048 110000      R     ACALL   L?0254
004B 90000000    E     MOV     DPTR,#?_ePrintf?BYTE+09H
004F 110000      E     ACALL   ?C?LSTXDATA
0052 110000      E     ACALL   _ePrintf
                                           ; SOURCE LINE # 1418
0055 90000000    R     MOV     DPTR,#addr
0059 110000      R     ACALL   L?0254
005C A3                INC     DPTR
005D 110000      E     ACALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1419
0060 90000000    R     MOV     DPTR,#offset
0064 E0                MOVX    A,@DPTR
0065 FF                MOV     R7,A
0066 A3                INC     DPTR
0067 E0                MOVX    A,@DPTR
0068 90000000    R     MOV     DPTR,#lut_offset
006C CF                XCH     A,R7
006D F0                MOVX    @DPTR,A
006E A3                INC     DPTR
006F EF                MOV     A,R7
0070 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1421
0071 E4                CLR     A
0072 90000000    R     MOV     DPTR,#errno
0076 F0                MOVX    @DPTR,A
0077         ?C0154:
                                           ; SOURCE LINE # 1422
0077 90000000    R     MOV     DPTR,#size
007B E0                MOVX    A,@DPTR
007C 7002              JNZ     ?C0221
007E A3                INC     DPTR
007F E0                MOVX    A,@DPTR
0080         ?C0221:
0080 7003              JNZ     $ + 5H
0082 010000      R     AJMP    ?C0155
                                           ; SOURCE LINE # 1423
0085 90000000    R     MOV     DPTR,#nRead
0089 110000      R     ACALL   L?0263
                                           ; SOURCE LINE # 1424
008C 90000000    R     MOV     DPTR,#spiaddr
0090 110000      R     ACALL   L?0254
0093 110000      R     ACALL   L?0262
0096 110000      E     ACALL   _SpiFlash_Read_XMem
                                           ; SOURCE LINE # 1427
0099 E4                CLR     A
009A 90000000    R     MOV     DPTR,#i
009E F0                MOVX    @DPTR,A
009F         ?C0156:
009F 90000000    R     MOV     DPTR,#nRead
00A3 110000      R     ACALL   L?0292
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 85  

00A6         ?C0222:
00A6 CE                XCH     A,R6
00A7 C3                CLR     C
00A8 13                RRC     A
00A9 CE                XCH     A,R6
00AA 13                RRC     A
00AB D8F9              DJNZ    R0,?C0222
00AD FF                MOV     R7,A
00AE 90000000    R     MOV     DPTR,#i
00B2 E0                MOVX    A,@DPTR
00B3 C3                CLR     C
00B4 9F                SUBB    A,R7
00B5 E4                CLR     A
00B6 9E                SUBB    A,R6
00B7 4003              JC      $ + 5H
00B9 010000      R     AJMP    ?C0157
                                           ; SOURCE LINE # 1428
00BC 90000000    R     MOV     DPTR,#r410
00C0 7480              MOV     A,#080H
00C2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1429
00C3 90000000    R     MOV     DPTR,#win
00C7 E0                MOVX    A,@DPTR
00C8 FF                MOV     R7,A
00C9 6401              XRL     A,#01H
00CB 6004              JZ      ?C0160
00CD EF                MOV     A,R7
00CE B40208            CJNE    A,#02H,?C0159
00D1         ?C0160:
00D1 90000000    R     MOV     DPTR,#r410
00D5 E0                MOVX    A,@DPTR
00D6 4404              ORL     A,#04H
00D8 F0                MOVX    @DPTR,A
00D9         ?C0159:
                                           ; SOURCE LINE # 1430
00D9 90000000    R     MOV     DPTR,#lut_offset
00DD E0                MOVX    A,@DPTR
00DE 6008              JZ      ?C0161
00E0 90000000    R     MOV     DPTR,#r410
00E4 E0                MOVX    A,@DPTR
00E5 4408              ORL     A,#08H
00E7 F0                MOVX    @DPTR,A
00E8         ?C0161:
                                           ; SOURCE LINE # 1432
00E8 E4                CLR     A
00E9 90000000    R     MOV     DPTR,#bgra
00ED F0                MOVX    @DPTR,A
00EE         ?C0162:
                                           ; SOURCE LINE # 1433
00EE 90000000    R     MOV     DPTR,#r410
00F2 E0                MOVX    A,@DPTR
00F3 54FC              ANL     A,#0FCH
00F5 FF                MOV     R7,A
00F6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1434
00F7 90000000    R     MOV     DPTR,#bgra
00FB E0                MOVX    A,@DPTR
00FC FE                MOV     R6,A
00FD 4F                ORL     A,R7
00FE FF                MOV     R7,A
00FF 90000000    R     MOV     DPTR,#r410
                                           ; SOURCE LINE # 1435
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 86  

0103 110000      R     ACALL   L?0277
0106 110000      R     ACALL   L?0233
0109 EF                MOV     A,R7
010A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1436
010B 90000000    R     MOV     DPTR,#lut_offset
010F A3                INC     DPTR
0110 E0                MOVX    A,@DPTR
0111 FF                MOV     R7,A
                                           ; SOURCE LINE # 1438
0112 110000      R     ACALL   L?0230
0115 E0                MOVX    A,@DPTR
0116 90000000    R     MOV     DPTR,#rdata0
                                           ; SOURCE LINE # 1439
011A 110000      R     ACALL   L?0231
011D E0                MOVX    A,@DPTR
011E 90000000    R     MOV     DPTR,#rdata1
0122 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1440
0123 110000      R     ACALL   L?0322
0126 2E                ADD     A,R6
0127 110000      R     ACALL   L?0289
012A 110000      R     ACALL   L?0241
012D FF                MOV     R7,A
012E 90000000    R     MOV     DPTR,#rdata1
0132 E0                MOVX    A,@DPTR
0133 6F                XRL     A,R7
0134 6076              JZ      ?C0164
                                           ; SOURCE LINE # 1441
0136 7F64              MOV     R7,#064H
0138 7E00              MOV     R6,#00H
013A 110000      E     ACALL   _delay1ms
                                           ; SOURCE LINE # 1442
013D 110000      R     ACALL   L?0232
0140 E0                MOVX    A,@DPTR
0141 90000000    R     MOV     DPTR,#rdata0
0145 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1443
0146 90000000    R     MOV     DPTR,#errno
014A E0                MOVX    A,@DPTR
014B 04                INC     A
014C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1444
014D 7B00        R     MOV     R3,#MBYTE ?SC_115
014F 7A00        R     MOV     R2,#HIGH ?SC_115
0151 7900        R     MOV     R1,#LOW ?SC_115
0153 90000000    R     MOV     DPTR,#lut_offset
0157 E0                MOVX    A,@DPTR
0158 FF                MOV     R7,A
0159 A3                INC     DPTR
015A E0                MOVX    A,@DPTR
015B 90000000    E     MOV     DPTR,#?_Printf?BYTE+03H
015F CF                XCH     A,R7
0160 F0                MOVX    @DPTR,A
0161 A3                INC     DPTR
0162 EF                MOV     A,R7
0163 F0                MOVX    @DPTR,A
0164 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 1445
0167 7B00        R     MOV     R3,#MBYTE ?SC_122
0169 7A00        R     MOV     R2,#HIGH ?SC_122
016B 7900        R     MOV     R1,#LOW ?SC_122
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 87  

016D 90000000    R     MOV     DPTR,#bgra
0171 E0                MOVX    A,@DPTR
0172 90000000    E     MOV     DPTR,#?_Printf?BYTE+03H
0176 F0                MOVX    @DPTR,A
0177 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 1446
017A 7B00        R     MOV     R3,#MBYTE ?SC_128
017C 7A00        R     MOV     R2,#HIGH ?SC_128
017E 7900        R     MOV     R1,#LOW ?SC_128
0180 90000000    R     MOV     DPTR,#bgra
0184 E0                MOVX    A,@DPTR
0185 FF                MOV     R7,A
0186 110000      R     ACALL   L?0322
0189 2F                ADD     A,R7
018A 110000      R     ACALL   L?0289
018D 110000      R     ACALL   L?0241
0190 90000000    E     MOV     DPTR,#?_Printf?BYTE+03H
0194 F0                MOVX    @DPTR,A
0195 90000000    R     MOV     DPTR,#rdata1
0199 E0                MOVX    A,@DPTR
019A 90000000    E     MOV     DPTR,#?_Printf?BYTE+04H
019E F0                MOVX    @DPTR,A
019F 90000000    R     MOV     DPTR,#rdata0
01A3 E0                MOVX    A,@DPTR
01A4 90000000    E     MOV     DPTR,#?_Printf?BYTE+05H
01A8 F0                MOVX    @DPTR,A
01A9 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 1447
                                           ; SOURCE LINE # 1448
01AC         ?C0164:
01AC 90000000    R     MOV     DPTR,#bgra
01B0 E0                MOVX    A,@DPTR
01B1 04                INC     A
01B2 F0                MOVX    @DPTR,A
01B3 E0                MOVX    A,@DPTR
01B4 C3                CLR     C
01B5 9404              SUBB    A,#04H
01B7 5003              JNC     $ + 5H
01B9 010000      R     AJMP    ?C0162
01BC         ?C0163:
                                           ; SOURCE LINE # 1449
01BC 90000000    R     MOV     DPTR,#lut_offset+01H
01C0 E0                MOVX    A,@DPTR
01C1 04                INC     A
01C2 F0                MOVX    @DPTR,A
01C3 7007              JNZ     ?C0223
01C5 90000000    R     MOV     DPTR,#lut_offset
01C9 E0                MOVX    A,@DPTR
01CA 04                INC     A
01CB F0                MOVX    @DPTR,A
01CC         ?C0223:
                                           ; SOURCE LINE # 1450
01CC 90000000    R     MOV     DPTR,#i
01D0 E0                MOVX    A,@DPTR
01D1 04                INC     A
01D2 F0                MOVX    @DPTR,A
01D3 010000      R     AJMP    ?C0156
01D6         ?C0157:
                                           ; SOURCE LINE # 1451
01D6 90000000    R     MOV     DPTR,#errno
01DA E0                MOVX    A,@DPTR
01DB 7046              JNZ     ?C0155
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 88  

                                           ; SOURCE LINE # 1452
01DD         ?C0166:
                                           ; SOURCE LINE # 1453
01DD 110000      R     ACALL   L?0323
01E0 90000000    R     MOV     DPTR,#size
01E4 E0                MOVX    A,@DPTR
01E5 FC                MOV     R4,A
01E6 A3                INC     DPTR
01E7 E0                MOVX    A,@DPTR
01E8 FD                MOV     R5,A
01E9 C3                CLR     C
01EA 9F                SUBB    A,R7
01EB EC                MOV     A,R4
01EC 9E                SUBB    A,R6
01ED 400F              JC      ?C0167
01EF ED                MOV     A,R5
01F0 9F                SUBB    A,R7
01F1 FF                MOV     R7,A
01F2 EC                MOV     A,R4
01F3 9E                SUBB    A,R6
01F4 90000000    R     MOV     DPTR,#size
01F8 F0                MOVX    @DPTR,A
01F9 A3                INC     DPTR
01FA EF                MOV     A,R7
01FB F0                MOVX    @DPTR,A
01FC 8008              SJMP    ?C0168
01FE         ?C0167:
                                           ; SOURCE LINE # 1454
01FE E4                CLR     A
01FF 90000000    R     MOV     DPTR,#size
0203 F0                MOVX    @DPTR,A
0204 A3                INC     DPTR
0205 F0                MOVX    @DPTR,A
0206         ?C0168:
                                           ; SOURCE LINE # 1455
0206 90000000    R     MOV     DPTR,#spiaddr
020A 110000      R     ACALL   L?0272
020D FB                MOV     R3,A
020E 110000      R     ACALL   L?0323
0211 E4                CLR     A
0212 FC                MOV     R4,A
0213 FD                MOV     R5,A
0214 EB                MOV     A,R3
0215 2F                ADD     A,R7
0216 110000      R     ACALL   L?0303
0219 90000000    R     MOV     DPTR,#spiaddr
021D 110000      E     ACALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1456
0220 010000      R     AJMP    ?C0154
0223         ?C0155:
                                           ; SOURCE LINE # 1457
0223 90000000    R     MOV     DPTR,#errno
0227 E0                MOVX    A,@DPTR
0228 7023              JNZ     ?C0169
                                           ; SOURCE LINE # 1458
022A 7B00        R     MOV     R3,#MBYTE ?SC_147
022C 7A00        R     MOV     R2,#HIGH ?SC_147
022E 7900        R     MOV     R1,#LOW ?SC_147
0230 110000      E     ACALL   _ePrintf
                                           ; SOURCE LINE # 1459
0233 7B00        R     MOV     R3,#MBYTE ?SC_155
0235 7A00        R     MOV     R2,#HIGH ?SC_155
C51 COMPILER V9.56.0.0   OSDSPI                                                            07/18/2018 10:44:47 PAGE 89  

0237 7900        R     MOV     R1,#LOW ?SC_155
0239 90000000    R     MOV     DPTR,#lut_offset
023D E0                MOVX    A,@DPTR
023E FF                MOV     R7,A
023F A3                INC     DPTR
0240 E0                MOVX    A,@DPTR
0241 90000000    E     MOV     DPTR,#?_ePrintf?BYTE+03H
0245 CF                XCH     A,R7
0246 F0                MOVX    @DPTR,A
0247 A3                INC     DPTR
0248 EF                MOV     A,R7
0249 F0                MOVX    @DPTR,A
024A 110000      E     ACALL   _ePrintf
                                           ; SOURCE LINE # 1460
024D         ?C0169:
                                           ; SOURCE LINE # 1461
024D 90000000    R     MOV     DPTR,#errno
0251 E0                MOVX    A,@DPTR
0252 FF                MOV     R7,A
                                           ; SOURCE LINE # 1462
0253         ?C0170:
0253 22                RET     
             ; FUNCTION _SpiOsdCheckLut (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   5888    ----
   CONSTANT SIZE    =    178    ----
   XDATA SIZE       =    274     135
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      22
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
