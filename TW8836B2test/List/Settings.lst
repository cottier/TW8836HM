C51 COMPILER V9.56.0.0   SETTINGS                                                          08/24/2018 16:22:02 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE SETTINGS
OBJECT MODULE PLACED IN .\Output\Settings.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE source\drv\Settings.c LARGE OMF2 ROM(D512K) OPTIMIZE(9,SPEED) REGFILE(.\
                    -Output\TW8836B_EVB11.ORC) BROWSE INCDIR(.\source\app;.\source\common;.\source\drv;.\source\HW;.\source\utils;.\source\te
                    -st) DEFINE(EVB_11,nullFn=//) DEBUG CODE PRINT(.\List\Settings.lst) TABS(2) OBJECT(.\Output\Settings.obj)

line level    source

   1          /**
   2           * @file
   3           * settings.c 
   4           * @author Brian Kang
   5           * @version 1.0
   6           * @section LICENSE
   7           *  Copyright (C) 2011~2012 Intersil Corporation
   8           * @section DESCRIPTION
   9           *  setup system 
  10          */
  11          /*
  12          Disclaimer: THIS INFORMATION IS PROVIDED 'AS-IS' FOR EVALUATION PURPOSES ONLY.  
  13          INTERSIL CORPORATION AND ITS SUBSIDIARIES ('INTERSIL') DISCLAIM ALL WARRANTIES, 
  14          INCLUDING WITHOUT LIMITATION FITNESS FOR A PARTICULAR PURPOSE AND MERCHANTABILITY.  
  15          Intersil provides evaluation platforms to help our customers to develop products. 
  16          However, factors beyond Intersil's control could significantly affect Intersil 
  17          product performance. 
  18          It remains the customers' responsibility to verify the actual system performance.
  19          */
  20          //input     
  21          //  CVBS  YIN0
  22          //  SVIDEO  YIN1, CIN0
  23          //  aRGB  G:YIN2 B:CIN0 R:VIN0 
  24          //  aYUV  G:YIN2 B:CIN0 R:VIN0
  25          
  26          #include "HWconf.h"
  27          
  28          
  29          #if 0
              //If we use SSPLL1, SW_Reset will hangup the system.
              //we can not recover.
              //TW8836B have to use 27MHz.
              void SW_Reset_TW8836B(void)
              {
                BYTE bTemp;
              
                bTemp = ReadTW88(REG4E1);
                if((bTemp & 0x30))
                  WriteTW88(REG4E1, bTemp & ~0x30); /* I am not using 32KHz */
                WriteTW88(REG006, ReadTW88(REG006) | 0x80); //SW RESET
              
                if(bTemp & 0x30)
                  WriteTW88(REG4E0, bTemp);
              }
              #endif  
  46          #if 0
              //Low Voltage reset
              //same as HW reset
              void LV_Reset_TW8836B(void)
              {
                  WriteTW88(REG0D4,0x01);
                  WriteTW88(REG0D4,0x00);
              }
C51 COMPILER V9.56.0.0   SETTINGS                                                          08/24/2018 16:22:02 PAGE 2   

              #endif
  55          
  56          //=============================================================================
  57          //  INPUT CLOCKS                                                     
  58          //=============================================================================
  59          
  60          
  61          //=============================================================================
  62          // SSPLL
  63          //=============================================================================
  64          
  65          //-----------------------------------------------------------------------------
  66          /**
  67          * power up the SSPLL
  68          * PLL108M(REG4E0[0]=1) also needs to turn on SSPLL1.
  69          */
  70          void Sspll1PowerUp(BYTE fOn)
  71          {
  72   1        if(fOn) WriteTW88(REG0FC, ReadTW88(REG0FC) & ~0x80);
  73   1        else  WriteTW88(REG0FC, ReadTW88(REG0FC) |  0x80);
  74   1      }
  75          void Sspll2PowerUp(BYTE fOn)
  76          {
  77   1        if(fOn) WriteTW88(REG0EC, ReadTW88(REG0EC) & ~0x80);
  78   1        else  WriteTW88(REG0EC, ReadTW88(REG0EC) |  0x80);
  79   1      }
  80          
  81          //-----------------------------------------------------------------------------
  82          /**
  83          * SSPLL1 center frequency register value
  84          *
  85          * register
  86          * R0F8[3:0] FPLL[19:16]
  87          * R0F9[7:0] FPLL[15:8]
  88          * R0FA[7:0] FPLL[7:0]
  89          
  90          * 2 80 00   135MHz
  91          * 2 78 00   133.3125MHz
  92          * 2 76 85   133MHz
  93          * 2 71 C8   132MHz
  94          * 2 70 00   131.625MHz
  95          * 2 6D 0A   131MHz
  96          * 2 68 4B   130MHz
  97          * 2 60 00   128.25
  98          * 2 40 00   121.5MHz
  99          * 2 20 00   114.75MHz
 100          * 2 00 00   108MHz
 101          * 1 F1 C7   105Mhz
 102          * 1 80 00   81MHz
 103          * 1 55 55   72MHz
 104          * 1 40 00   67.5MHz
 105          * 1 20 00   60.75MHz
 106          * 1 00 00   54MHz
 107          * 0 80 00   27MHz
 108          */
 109          void Sspll1SetFreqReg(DWORD fpll)
 110          {
 111   1        WriteTW88(REG0FA_FPLL2, (BYTE)fpll );
 112   1        WriteTW88(REG0F9_FPLL1, (BYTE)(fpll>>8));
 113   1        WriteTW88(REG0F8_FPLL0, (BYTE)(fpll>>16));
 114   1      }
 115          /**
C51 COMPILER V9.56.0.0   SETTINGS                                                          08/24/2018 16:22:02 PAGE 3   

 116          * SSPLL2 center frequency register value
 117          *
 118          * register
 119          * R0E8[3:0] FPLL[19:16]
 120          * R0E9[7:0] FPLL[15:8]
 121          * R0EA[7:0] FPLL[7:0]
 122          */
 123          void Sspll2SetFreqReg(DWORD fpll)
 124          {
 125   1        WriteTW88(REG0EA, (BYTE)fpll );
 126   1        WriteTW88(REG0E9, (BYTE)(fpll>>8));
 127   1        WriteTW88(REG0E8, (BYTE)(fpll>>16));
 128   1      }
 129          
 130          static DWORD Sspll1GetFreqReg(void)
 131          {
 132   1        DWORD dFPLL;
 133   1        
 134   1        dFPLL = ReadTW88(REG0F8_FPLL0)&0x0F;
 135   1        dFPLL <<=8;
 136   1        dFPLL |= ReadTW88(REG0F9_FPLL1);
 137   1        dFPLL <<=8;
 138   1        dFPLL |= ReadTW88(REG0FA_FPLL2);
 139   1      
 140   1        return dFPLL;
 141   1      }
 142          
 143          static DWORD Sspll2GetFreqReg(void)
 144          {
 145   1        DWORD dFPLL;
 146   1        
 147   1        dFPLL = ReadTW88(REG0E8)&0x0F;
 148   1        dFPLL <<=8;
 149   1        dFPLL |= ReadTW88(REG0E9);
 150   1        dFPLL <<=8;
 151   1        dFPLL |= ReadTW88(REG0EA);
 152   1      
 153   1        return dFPLL;
 154   1      }
 155          
 156          //-----------------------------------------------------------------------------
 157          /**
 158          * set SSPLL AnalogControl register
 159          *
 160          * register
 161          * R0FD[7:6] POST
 162          * R0FD[5:4] VCO
 163          * R0FD[2:0] ChargePump
 164          */
 165          static void Sspll1SetAnalogControl(BYTE value)
 166          {
 167   1        WriteTW88(REG0FD_SSPLL_ANALOG, value );
 168   1      }
 169          static void Sspll2SetAnalogControl(BYTE value)
 170          {
 171   1        WriteTW88(REG0ED, value );
 172   1      }
 173          
 174          //-----------------------------------------------------------------------------
 175          /**
 176          * get SSPLL Post value
 177          */
C51 COMPILER V9.56.0.0   SETTINGS                                                          08/24/2018 16:22:02 PAGE 4   

 178          BYTE Sspll1GetPost(void)
 179          {
 180   1        BYTE post;
 181   1      
 182   1        post = ReadTW88(REG0FD);
 183   1        return ((post>>6) & 0x03);
 184   1      }
 185          BYTE Sspll2GetPost(void)
 186          {
 187   1        BYTE post;
 188   1      
 189   1        post = ReadTW88(REG0ED);
 190   1        return ((post>>6) & 0x03);
 191   1      }
 192          
 193          #if 1 //GOOD
 194          //-----------------------------------------------------------------------------
 195          /**
 196          * get FPLL value from freq.
 197          *
 198          *
 199          * PLL Osc Freq = 108MHz * FPLL / 2^17 / 2^POST
 200          *
 201          * FREQ      = 27000000 * 4 * FPLL / 2^17  / 2^POST
 202          *
 203          *   FPLL      = FREQ *((2^15) * (2^POST)) / 27000000              
 204          *   FPLL      = (FREQ / 1000) *((2^15) * (2^POST)) / 27000              
 205          *   FPLL      = (FREQ / 1000) *((2^12) * (2^POST)) * (2^3  / 27000)
 206          *   FPLL      = (FREQ / 1000) *((2^12) * (2^POST)) / (3375)               
 207          *
 208          * We divides 1000 first, the minimal offset is 1KHz unit.
 209          */
 210          static DWORD SspllFREQ2FPLL(DWORD freq, BYTE post)
 211          {
 212   1        DWORD fpll;
 213   1        fpll = freq/1000L;
 214   1        fpll <<= post;
 215   1        fpll <<= 12;
 216   1        fpll = fpll / 3375L;
 217   1        return fpll;
 218   1      }
 219          #endif
 220          #if 0 //BAD
              //-----------------------------------------------------------------------------
              /*
                This method do multiply first. it can be overflow.
                and, divide by 421875. Big value means big lost.
                  FPLL      = FREQ *((2^15) * (2^POST)) / 27000000              
                FPLL      = FREQ *(32768 * (2^POST)) / 27000000
                FPLL      = FREQ *(512 * (2^POST)) / 421875
                  FPLL            = FREQ * 16 / 421875 * 32 * (2^POST)
              
              static DWORD SspllFREQ2FPLL(DWORD FREQ, BYTE POST)
              {
                DWORD FPLL;
                FPLL = FREQ * 16; 
                FPLL /= 421875;
                FPLL *= 32;
                FPLL <<= POST;
                return FPLL;
              }
              */
C51 COMPILER V9.56.0.0   SETTINGS                                                          08/24/2018 16:22:02 PAGE 5   

              #endif
 241          
 242          
 243          static DWORD Sspll1ConvertFreq2FPLL(DWORD freq)
 244          {
 245   1        BYTE post;
 246   1        post = Sspll1GetPost();
 247   1        return SspllFREQ2FPLL(freq,post);
 248   1      }
 249          static DWORD Sspll2ConvertFreq2FPLL(DWORD freq)
 250          {
 251   1        BYTE post;
 252   1        post = Sspll2GetPost();
 253   1        return SspllFREQ2FPLL(freq,post);
 254   1      }
 255          
 256          
 257          //-----------------------------------------------------------------------------
 258          /**
 259          * Convert FPLL to Freq.
 260          *
 261          *  Freq     = 27000000 * 4 * FPLL / 2^17  / 2^POST
 262          *    Freq       = 27000000 * FPLL / ( (2^15) * (2^POST) )
 263          *    Freq       = 27000000 * FPLL / ( (2^15) * (2^POST) )
 264          *         = 421875 * 64 * FPLL / (64 * 2^9 *(2^POST))
 265          *         = 421875 * FPLL / (512 *(2^POST))
 266          *           = FPLL / 64 * 421875 / 8 / (2^POST)
 267              Simpilfied FREQ = 824L * FPLL * 2^POST
 268          */
 269          static DWORD SspllFPLL2FREQ(DWORD fpll, BYTE post)
 270          {
 271   1        DWORD freq;
 272   1        freq = fpll >> 6; /* div 64 */
 273   1        freq *= 421875;
 274   1        freq >>= 3;       /* div 8 */
 275   1        freq >>= post;
 276   1        return freq;
 277   1      }
 278          
 279          static DWORD Sspll1ConvertFPLL2Freq(DWORD fpll)
 280          {
 281   1        BYTE post;
 282   1      
 283   1        post = Sspll1GetPost();
 284   1      
 285   1        return SspllFPLL2FREQ(fpll, post);
 286   1      }
 287          
 288          static DWORD Sspll2ConvertFPLL2Freq(DWORD fpll)
 289          {
 290   1        BYTE post;
 291   1      
 292   1        post = Sspll2GetPost();
 293   1      
 294   1        return SspllFPLL2FREQ(fpll, post);
 295   1      }
 296          
 297          //-----------------------------------------------------------------------------
 298          /**
 299          * set SSPLL freq and Pll
 300          *
 301          * @param _PPF ? What this measn ?
C51 COMPILER V9.56.0.0   SETTINGS                                                          08/24/2018 16:22:02 PAGE 6   

 302          *     Freq
 303          * @param fControl
 304          * 1: update analog control registers
 305          */
 306          void Sspll1SetFreq(DWORD freq, BYTE fControl)
 307          {
 308   1        BYTE freq1m; 
 309   1        BYTE curr, vco, post;
 310   1        DWORD fpll;
 311   1        
 312   1        //dPrintf("\n\rSspll1SetFreq(%ld,%bd)",freq,fControl);
 313   1        freq1m = freq/1000000L;   //base:1MHz
 314   1        if (freq1m > 150)
 315   1          Puts("\nERROR:Max SSPLL speed is 150MHz");
 316   1        
 317   1        if (fControl == 0)
 318   1        {
 319   2          fpll = Sspll1ConvertFreq2FPLL(freq);  
 320   2          Sspll1SetFreqReg(fpll);
 321   2          
 322   2          return;
 323   2        }
 324   1      
 325   1        //----- Frequency Range --------------------
 326   1        if (freq1m < 27)
 327   1        {
 328   2          vco = 2;
 329   2          curr = 0;
 330   2          post = 2;
 331   2        }   // step = 0.5MHz
 332   1        else if (freq1m < 54)
 333   1        {
 334   2          vco = 2;
 335   2          curr = 1;
 336   2          post = 1;
 337   2        }   // step = 1.0MHz
 338   1        else if (freq1m < 108)
 339   1        {
 340   2          vco = 2;
 341   2          curr = 2;
 342   2          post = 0;
 343   2        }   // step = 1.0MHz
 344   1        else
 345   1        {
 346   2          vco = 3;
 347   2          curr = 3;
 348   2          post = 0;
 349   2        }   // step = 1.0MHz
 350   1      
 351   1        curr = vco + 1; //BK110721. Harry Suggest.
 352   1      
 353   1        //----- Get pll register value from freq
 354   1        fpll = SspllFREQ2FPLL(freq, post);
 355   1      
 356   1        //----- Setting Registers
 357   1        Sspll1SetFreqReg(fpll);
 358   1        Sspll1SetAnalogControl((vco<<4) | (post<<6) | curr);
 359   1        //dPrintf("\n\rPOST:%bx VCO:%bx CURR:%bx",post, vco, curr);
 360   1      }
 361          
 362          void Sspll2SetFreq(DWORD freq, BYTE fControl)
 363          {
C51 COMPILER V9.56.0.0   SETTINGS                                                          08/24/2018 16:22:02 PAGE 7   

 364   1        BYTE  freq1m; 
 365   1        BYTE    curr, vco, post;
 366   1        DWORD fpll; //register value
 367   1        
 368   1        //dPrintf("\n\rSspll2SetFreq(%ld,%bd)",freq,fControl);
 369   1        freq1m = freq/1000000L;   //base:1MHz
 370   1        if(freq1m > 150)
 371   1          Puts("\nERROR:Max SSPLL2 speed is 150MHz");
 372   1      
 373   1        if(fControl==0) {
 374   2          fpll=Sspll2ConvertFreq2FPLL(freq);  
 375   2          Sspll2SetFreqReg(fpll);
 376   2          return;
 377   2        }
 378   1      
 379   1        //----- Frequency Range --------------------
 380   1        //this routine make FPLL as bigger than 54MHz and uses the post divider
 381   1        if     ( freq1m < 27 )  { vco=2; curr=0; post=2; }    // step = 0.5MHz
 382   1        else if( freq1m < 54 )  { vco=2; curr=1; post=1; }    // step = 1.0MHz
 383   1        else if( freq1m < 108 ) { vco=2; curr=2; post=0; }    // step = 1.0MHz
 384   1        else                    { vco=3; curr=3; post=0; }    // step = 1.0MHz
 385   1        curr = vco+1; //BK110721. Harry Suggest.
 386   1      
 387   1        //----- Get pll register value from freq
 388   1        fpll = SspllFREQ2FPLL(freq, post);
 389   1      
 390   1        //----- Setting Registers
 391   1        Sspll2SetFreqReg(fpll);
 392   1        Sspll2SetAnalogControl((vco<<4) | (post<<6) | curr);
 393   1        //dPrintf("\n\rPOST:%bx VCO:%bx CURR:%bx",post, vco, curr);
 394   1      
 395   1      
 396   1        PclkSetDividerReg(0); //div1:default
 397   1        
 398   1        if(freq1m > 108)
 399   1          Puts("\nERROR:Max PCLK speed is 108MHz");
 400   1          //You need  PclkSetDividerReg(1); //div2
 401   1      
 402   1      }
 403          
 404          
 405          
 406          //-----------------------------------------------------------------------------
 407          /**
 408          * get SSPLL Frequency.
 409          *
 410          *
 411          * FPLL = REG(0x0f8[3:0],0x0f9[7:0],0x0fa[7:0])
 412          * POST = REG(0x0fd[7:6])
 413          * PLL Osc Freq = 108MHz * FPLL / 2^17 / 2^POST
 414          */
 415          DWORD Sspll1GetFreq(void)
 416          {
 417   1        DWORD freq, fpll;
 418   1      
 419   1        //read PLL center frequency
 420   1        fpll = Sspll1GetFreqReg();
 421   1        //convert FPLL to Frequency value
 422   1        freq = Sspll1ConvertFPLL2Freq(fpll);
 423   1        //dPrintf("\r\n(GetPPF) :%ld", freq);
 424   1      
 425   1        return freq;
C51 COMPILER V9.56.0.0   SETTINGS                                                          08/24/2018 16:22:02 PAGE 8   

 426   1      }
 427          
 428          DWORD Sspll2GetFreq(void)
 429          {
 430   1        DWORD freq, fpll;
 431   1      
 432   1        //read PLL center frequency
 433   1        fpll = Sspll2GetFreqReg();
 434   1        //convert FPLL to Frequency value
 435   1        freq = Sspll2ConvertFPLL2Freq(fpll);
 436   1        //dPrintf("\r\n(GetPPF) :%ld", freq);
 437   1      
 438   1        return freq;
 439   1      }
 440          
 441          
 442          //=============================================================================
 443          // PCLK
 444          //=============================================================================
 445          
 446          //-----------------------------------------------------------------------------
 447          /**
 448          * set PCLK divider
 449          *
 450          * REG0F6[4]
 451          * REG0F6[2:0]
 452          * 
 453          * parm:
 454          * divider
 455          * 0:div1    1=div1.5  2=div2    3=div2.5  4=div3
 456          * 5:div3.5  6:div4    7:div5    
 457          * 8:div8    9:div16   10:div32
 458          * note:
 459          * REG0F6[3] always have 0.
 460          */
 461          void PclkSetDividerReg(BYTE divider)
 462          {
 463   1        BYTE bTemp;
 464   1      
 465   1        bTemp = ReadTW88(REG0F6) & ~0x1F;
 466   1        if(divider & 0x08) {
 467   2          divider &= 0x07;
 468   2          bTemp |= 0x10;
 469   2        }
 470   1        bTemp |= divider;
 471   1        WriteTW88(REG0F6, bTemp);
 472   1      }
 473          #if 0
              /**
              * REG0F6[3]
              */
              void PclkSetPolarity(BYTE pol)
              {
                BYTE bTemp;
              
                bTemp = ReadTW88(REG0F6);
                if(pol) bTemp |=  0x08;
                else    bTemp &= ~0x08; 
                WriteTW88(REG0F6, bTemp);
              }
              #endif
 487          
C51 COMPILER V9.56.0.0   SETTINGS                                                          08/24/2018 16:22:02 PAGE 9   

 488          //-----------------------------------------------------------------------------
 489          /**
 490          * get PCLK frequency
 491          *
 492          */
 493          DWORD PclkGetFreq(DWORD sspll)
 494          {
 495   1        BYTE divider;
 496   1        DWORD temp32;
 497   1        BYTE bTemp;
 498   1      
 499   1        bTemp = ReadTW88(REG0F6);
 500   1        divider = bTemp & 0x03;
 501   1        if(bTemp & 0x10)
 502   1          divider |= 0x04;  
 503   1      
 504   1        switch(divider) {
 505   2        case 0: temp32 = sspll;     break;
 506   2        case 1: temp32 = sspll *2/3;  break; //div1.5
 507   2        case 2: temp32 = sspll >>1;   break; //div2
 508   2        case 3: temp32 = sspll *2/5;  break; //div2.5
 509   2        case 4: temp32 = sspll /3;    break; //div3
 510   2        case 5: temp32 = sspll *2/7;  break; //div3.5
 511   2        case 6: temp32 = sspll >>2;   break; //div4
 512   2        case 7: temp32 = sspll / 5;   break; //div5
 513   2        }
 514   1        return temp32;
 515   1      }
 516          
 517          //-----------------------------------------------------------------------------
 518          /**
 519          * get PCLKO frequency
 520          */
 521          DWORD PclkoGetFreq(DWORD pclk)
 522          {
 523   1        BYTE divider;
 524   1        DWORD temp32;
 525   1        BYTE bTemp;
 526   1      
 527   1        bTemp = ReadTW88(REG20D);
 528   1        divider = bTemp & 0x03;
 529   1      
 530   1        divider++;
 531   1        temp32 = pclk / divider;
 532   1        if(divider==3) {
 533   2          if(bTemp & 0x20)
 534   2            temp32 <<= 1;
 535   2        }
 536   1        return temp32;
 537   1      }
 538          
 539          //AN-TW8836B Scaler & TCON.
 540          //only div2 and div1.5 have 0 value.
 541          code BYTE pclok_pol_table[] = 
 542          // 0    1    2    3    4    5    6      7
 543          // div1 div2 div3 div4 div1 div2 div1.5 div4
 544          {  1,   0,   1,   1,   1,   0,   0,     1};
 545          #if 1
 546          BYTE CheckPclko_polarity(void)
 547          {
 548   1        BYTE pclko_div;
 549   1        pclko_div = PclkoReadDiv();
C51 COMPILER V9.56.0.0   SETTINGS                                                          08/24/2018 16:22:02 PAGE 10  

 550   1        return pclok_pol_table[pclko_div];
 551   1      }
 552          #endif
 553          //-----------------------------------------------------------------------------
 554          /**
 555          * set PCLKO polarity
 556          *
 557          * @param pol - Pixel clock output polarity
 558          * -0: no inversion
 559          * -1: inversion
 560          * - 0xFF: do not change it. Use previous value
 561          */
 562          void PclkoSetPolarity(BYTE pol)
 563          {
 564   1        BYTE value;
 565   1        value = ReadTW88(REG20D);
 566   1        if(pol) value |=  0x10;
 567   1        else  value &= ~0x10;
 568   1        WriteTW88(REG20D, value);
 569   1      }
 570          
 571          //-----------------------------------------------------------------------------
 572          /**
 573          * set PCLKO divider and CLK polarity
 574          *
 575          * R20D[4]   Pixel clock polarity control.
 576          * R20D[5]   divider for 1.5 (Only work with div 3).
 577          * R20D[1:0] Pixel clock output frequency division control.
 578          
 579          * @param div - Pixel clock output frequency division
 580          * 0:div 1,  1:div 2,  2:div 3,  3:div 4.
 581          * 4:div 1,  5:div 2,  6:div 1.5,  7:div 4.
 582          *
 583          */
 584          void PclkoSetDiv(BYTE div)
 585          {
 586   1        BYTE value;
 587   1        value = ReadTW88(REG20D) & ~0x23;
 588   1        if(div==6)
 589   1          value |= 0x20;
 590   1        div &= 0x03;
 591   1        value |= div;
 592   1      
 593   1        WriteTW88(REG20D, value);
 594   1      }
 595          
 596          void PclkoSetDiv_with_pol(BYTE div)
 597          {
 598   1        BYTE value;
 599   1        BYTE pol;
 600   1      
 601   1        value = ReadTW88(REG20D) & ~0x33;
 602   1        if(div==6)
 603   1          value |= 0x20;
 604   1        div &= 0x03;
 605   1        value |= div;
 606   1      
 607   1        pol = pclok_pol_table[div];
 608   1        if(pol) 
 609   1          value |= 0x10;
 610   1        WriteTW88(REG20D, value);
 611   1      }
C51 COMPILER V9.56.0.0   SETTINGS                                                          08/24/2018 16:22:02 PAGE 11  

 612          
 613          
 614          BYTE PclkoReadDiv(void)
 615          {
 616   1        BYTE value;
 617   1        value = ReadTW88(REG20D) & 0x23;
 618   1        if(value & 0x20) value |= 0x04;
 619   1        value &= 0x07;
 620   1      
 621   1        return value;
 622   1      }
 623          
 624          void PclkoPrintDiv(BYTE div)
 625          {
 626   1        switch(div) {
 627   2        case 0: 
 628   2        case 4: Puts("div1");   break;
 629   2        case 1:
 630   2        case 5: Puts("div2");   break;
 631   2        case 2: Puts("div3"); break;
 632   2        case 6: Puts("div1.5"); break;
 633   2        default: Puts("div4"); break;  //3,7
 634   2        } 
 635   1      }
 636          
 637          
 638          
 639          //=============================================================================
 640          // PLLCLK
 641          //=============================================================================
 642          
 643          //-----------------------------------------------------------------------------
 644          /**
 645          * select PLLClk input
 646          * @param 
 647          * 0:SSPLL1 1:PLL108
 648          *
 649          * register
 650          * REG4E0[0]
 651          */
 652          void PllClkSetSource(BYTE fPLL108)
 653          {
 654   1        BYTE bTemp;
 655   1      
 656   1        bTemp = ReadTW88(REG4E0);
 657   1      
 658   1        if (fPLL108)
 659   1          bTemp |= 0x01;
 660   1        else
 661   1          bTemp &= ~0x01;
 662   1      
 663   1        WriteTW88(REG4E0, bTemp);
 664   1      }
 665          
 666          BYTE PllClkGetSource(void)
 667          {
 668   1        BYTE bTemp;
 669   1      
 670   1        bTemp = ReadTW88(REG4E0);
 671   1      
 672   1        return (bTemp & 0x01);
 673   1      }
C51 COMPILER V9.56.0.0   SETTINGS                                                          08/24/2018 16:22:02 PAGE 12  

 674          
 675          //-----------------------------------------------------------------------------
 676          /**
 677          * set PLLClk divider
 678          * only for monitor
 679          * 
 680          * register
 681          * REG4E1[3:0]
 682          */
 683          void PllClkSetDividerReg(BYTE divider)
 684          {
 685   1        WriteTW88(REG4E1, (ReadTW88(REG4E1) & 0xF0) | divider); //CLKPLL Divider
 686   1      }
 687          
 688          //-----------------------------------------------------------------------------
 689          /**
 690          * set PLLClk input and divider
 691          * 
 692          * only for monitor
 693          */
 694          //void PllClkSetSelDiv(BYTE ClkPllSel, BYTE ClkPllDiv)
 695          //{
 696          //  BYTE mcu_sel;
 697          //  DWORD clkpll,spi_clk;
 698          //  BYTE i=0;
 699          //
 700          //  //check & move MCU CLK source to 27M 
 701          //  mcu_sel = McuSpiClkReadSelectReg();
 702          //  if(mcu_sel==MCUSPI_CLK_PLLCLK) {
 703          //    McuSpiClkSelect(MCUSPI_CLK_27M);
 704          //    I2C_delay_base = 1; 
 705          //  }
 706          //  //
 707          //  //Now, MCU uses 27M. You can change PLLClk register without a system hang.
 708          //  //
 709          //  
 710          //  PllClkSetSource(ClkPllSel);
 711          //  do {
 712          //    PllClkSetDividerReg(ClkPllDiv);
 713          //    ClkPllDiv++;
 714          //    clkpll =PllClkGetFreq();
 715          //    spi_clk=SpiClkGetFreq(clkpll);  //-->McuClkGetFreq
 716          //    i++;
 717          //  } while(spi_clk > 75000000L); //MAX SPICLK
 718          //  if(i!=1)
 719          //    ePrintf("\n\rPllClkSetSelDiv div increased:%d",i-1);
 720          //  
 721          //  //restore MCU CLK source
 722          //  if(mcu_sel==MCUSPI_CLK_PLLCLK)
 723          //    McuSpiClkSelect(MCUSPI_CLK_PLLCLK); 
 724          //}
 725          
 726          //-----------------------------------------------------------------------------
 727          /**
 728          * get PLLClk frequency
 729          */
 730          DWORD PllClkGetFreq(void)
 731          {
 732   1        BYTE temp8;
 733   1        DWORD clkpll;
 734   1        DWORD temp32;
 735   1      
C51 COMPILER V9.56.0.0   SETTINGS                                                          08/24/2018 16:22:02 PAGE 13  

 736   1        //check PLLCLK_Sel.
 737   1        temp8 = PllClkGetSource();
 738   1        if (temp8)
 739   1          clkpll = 108000000L;    //comes from PLL108M.
 740   1        else 
 741   1        {
 742   2          if (ReadTW88(REG04B) & 0x20)  // REG04B BIT5 = 1, SPI CLK select SSPLL2
 743   2            clkpll = Sspll2GetFreq(); // comes from SSPLL2
 744   2          else  
 745   2            clkpll = Sspll1GetFreq(); // comes from SSPLL1
 746   2        }
 747   1        
 748   1        //read divider and calculate PLLCLK.
 749   1        temp8 = ReadTW88(REG4E1) & 0x0F;
 750   1      
 751   1        switch (temp8)
 752   1        {
 753   2        case 0: temp32 = clkpll;    break;
 754   2        case 1: temp32 = clkpll*2/3;  break; //1.5
 755   2        case 2: temp32 = clkpll >> 1; break; //2
 756   2        case 3: temp32 = clkpll*2/5;  break; //2.5
 757   2        case 4: temp32 = clkpll/3;    break; //3
 758   2        case 5: temp32 = clkpll*2/7;  break; //3.5
 759   2        case 6: temp32 = clkpll >> 2; break; //4
 760   2        case 7: temp32 = clkpll/5;    break; //5
 761   2        case 8: temp32 = clkpll >> 3; break; //8
 762   2        case 9: temp32 = clkpll >> 4; break; //16
 763   2        default:temp32 = clkpll >> 5; break; //32
 764   2        }
 765   1      
 766   1        return temp32;
 767   1      }
 768          
 769          //=============================================================================
 770          // MCUSPI
 771          //=============================================================================
 772          
 773          //-----------------------------------
 774          // McuSpiClkToPclk & McuSpiClkRestore
 775          //-----------------------------------
 776          
 777          /*
 778          result  register        stepA stepB stepC stepD stepE
 779          ------  --------    ----- ----- ----- ----- -----
 780          fail  PCLK_SEL      PLL           PCLK
 781              MCUSPI_CLK_SEL    PCLK  27M           PCLK
 782              MCUSPI_CLK_DIV    1         0       1
 783          
 784          OK    PCLK_SEL      PLL           PCLK
 785              MCUSPI_CLK_SEL    PCLK  27M           PCLK
 786              MCUSPI_CLK_DIV    1                 1
 787          
 788          OK    PCLK_SEL      PLL           PCLK
 789              MCUSPI_CLK_SEL    PCLK
 790              MCUSPI_CLK_DIV    1
 791          ---------------------------------------------------------------
 792          */
 793          //BYTE shadow_r4e0;
 794          //BYTE shadow_r4e1;
 795          
 796          //-----------------------------------------------------------------------------
 797          /**
C51 COMPILER V9.56.0.0   SETTINGS                                                          08/24/2018 16:22:02 PAGE 14  

 798          * select PCLK for McuSpi
 799          *
 800          * NOTE: SPIDMA needs a PCLK source
 801          * @see McuSpiClkRestore
 802          *
 803          *
 804          */
 805          
 806          
 807          
 808          //-----------------------------------------------------------------------------
 809          /**
 810          * restore MCUSPI clock
 811          *
 812          * @see McuSpiClkToPclk
 813          */
 814          
 815          
 816          //-----------------------------------------------------------------------------
 817          /**
 818          * read SPI clock mode
 819          *
 820          *@return
 821          * 0:27MHz
 822          * 1:32KHz
 823          * 2:PLLCLK
 824          *
 825          * register
 826          * REG4E1[5:4]
 827          */
 828          BYTE SpiClkReadSource(void)
 829          {
 830   1        BYTE value;
 831   1        value = ReadTW88(REG4E1) & 0x30;
 832   1        return (value >> 4);
 833   1      }
 834          void SpiClkSetSource(BYTE mode)
 835          {
 836   1        BYTE value;
 837   1        BYTE cache;
 838   1      
 839   1        value = ReadTW88(REG4E1) & ~0x30;
 840   1        value |= mode;
 841   1        cache = SFR_CACHE_EN;
 842   1        SFRB_EA = 0;
 843   1        SFR_CACHE_EN=0;
 844   1        WriteTW88(REG4E1, value);
 845   1        SFR_CACHE_EN=cache;
 846   1        SFRB_EA = 1;
 847   1      }
 848          
 849          
 850          
 851          //-----------------------------------------------------------------------------
 852          /**
 853          * Select McuSpi clock source
 854          *
 855          * register
 856          * R4E1[5:4]
 857          * @param McuSpiClkSel clock source
 858          * -0:27MHz
 859          * -1:32KHz
C51 COMPILER V9.56.0.0   SETTINGS                                                          08/24/2018 16:22:02 PAGE 15  

 860          * -2:CLKPLL. << (PLL Divider) << (PCLK or 108M) << (if PCLK, SSPLL with PCLK Divider)
 861          */
 862          //void McuSpiClkSelect(BYTE McuSpiClkSel)
 863          //{
 864          //#if defined(PANEL_AUO_B133EW01) || defined(PANEL_TM070DDH01)
 865          //  //I will use SSPLL. Do not change MCU clock.
 866          //  BYTE value=McuSpiClkSel;
 867          //#else
 868          //  BYTE value;
 869          //  BYTE cache;
 870          //  cache =  SFR_CACHE_EN;
 871          //  SFR_CACHE_EN = 0;
 872          //  value = ReadTW88(REG4E1) & 0x0F;
 873          //
 874          //  WriteTW88(REG4E1, (McuSpiClkSel << 4) | value);
 875          //  SFR_CACHE_EN = cache;
 876          //#endif
 877          //} 
 878          
 879          //-----------------------------------------------------------------------------
 880          /**
 881          * get Spi clock frequency
 882          */
 883          DWORD SpiClkGetFreq(void)
 884          {
 885   1        BYTE temp8;
 886   1        DWORD temp32;
 887   1      
 888   1        temp8 = ReadTW88(REG4E1) >> 4;
 889   1        temp8 &= 0x03;
 890   1      
 891   1        switch (temp8)
 892   1        {
 893   2        case 0:  temp32 = 27000000L;    break;
 894   2        case 1:  temp32 = 32000L;     break;
 895   2        case 2:  temp32 = PllClkGetFreq();  break;
 896   2        default: temp32 = 27000000L;    break;  //unknown. bug.
 897   2        }
 898   1      
 899   1        return temp32;
 900   1      }
 901          
 902          /**
 903          * Get MCU clock from SpiClk
 904          * @param spiclk
 905          */
 906          DWORD McuClkGetFreq(DWORD spiclk)
 907          {
 908   1        BYTE temp;
 909   1        DWORD temp32;
 910   1      
 911   1        temp = ReadTW88(REG4F0) >> 4;
 912   1        switch (temp)
 913   1        {
 914   2        case 0: temp32 = spiclk;    break;
 915   2        case 1: temp32 = spiclk *2/3; break;
 916   2        case 2: temp32 = spiclk / 2;  break;
 917   2        case 3: temp32 = spiclk *2/5; break;
 918   2        case 4: temp32 = spiclk / 3;  break;
 919   2        case 5: temp32 = spiclk *2/7; break;
 920   2        case 6: temp32 = spiclk / 4;  break;
 921   2        case 7: temp32 = spiclk / 5;  break;
C51 COMPILER V9.56.0.0   SETTINGS                                                          08/24/2018 16:22:02 PAGE 16  

 922   2        }
 923   1        
 924   1        return temp32;
 925   1      }
 926          
 927          
 928          
 929          
 930          //=============================================================================
 931          // LLPLL
 932          //=============================================================================
 933          
 934          //-----------------------------------------------------------------------------
 935          /**
 936          * set LLPLL clock source
 937          *
 938          * use 27M OSD or PLL 
 939          */
 940          void aRGBSetClockSource(BYTE use_27M)
 941          {
 942   1        if (use_27M)
 943   1          WriteTW88(REG1C0, ReadTW88(REG1C0) | 0x01); 
 944   1        else
 945   1          WriteTW88(REG1C0, ReadTW88(REG1C0) & ~0x01);
 946   1      }
 947          
 948          
 949          //=============================================================================
 950          // InMux (Input Mux)
 951          //=============================================================================
 952          
 953          //-----------------------------------------------------------------------------
 954          /**
 955          * set input mux format
 956          *
 957          * register
 958          * R102 - input format.
 959          * R105.
 960          * R106.
 961          * @param InputMode
 962          */
 963          //-----------------------------------------------------------------------------
 964          /**
 965          * set input mux format for AnalogModule(DEC and aRGB)
 966          *
 967          * register
 968          * R102 - input format.
 969          * R105.
 970          * R106.
 971          * @param InputMode
 972          */
 973          
 974          /*
 975          Set Analog Mux.
 976          OLD R105 moved to R1E8.
 977          */
 978          //void AMuxSetInput(BYTE InputMode)
 979          //{
 980          //  BYTE r102, r106, r1E8;
 981          
 982          //  r1E8 = ReadTW88(REG1E8) & 0xF0;
 983          //  r106 = ReadTW88(REG106) & ~0x03;  //Do not change Y.
C51 COMPILER V9.56.0.0   SETTINGS                                                          08/24/2018 16:22:02 PAGE 17  

 984          //                    
 985          ////  r1C0 = ReadTW88(REG1C0) & ~0x01; //ADC Clock
 986          //  
 987          //  switch(InputMode) {
 988          //  case INPUT_CVBS:
 989          //  case INPUT_BT656:   //it is for loopback from DEC->BT656Enc->DTV)BT656Dec.
 990          //    r102 = 0x40;    // 0x40 - FC27:27MHz, IFSEL:Composite, YSEL:YIN0 
 991          //    r1E8 |= 0x0F;   //decoder mode
 992          //    r106 |= 0x03;   // C,V adc in Power Down.
 993          //    break;
 994          //  case INPUT_SVIDEO:
 995          //    r102 = 0x58;    // 0x54 - FC27:27MHz, IFSEL:S-Video, YSEL:YIN2, CSEL:CIN0 
 996          //    r1E8 |= 0x0F;   //decoder mode
 997          //    r106 |= 0x01;   // V in PowerDown
 998          //    break;
 999          //  case INPUT_COMP:  //target r102:4A,r105:04 r016:00
1000          //            //     ->     4A      00      00      
1001          //    r102 = 0x4E ;   // TW8836 EVB10 use Y3.
1002          //    r1E8 |= 0x20;   // disable YOUT. it shares pin with Y3.
1003          //    break;
1004          //  case INPUT_PC:  //target r102:4A r105:04 r106:00
1005          //    r102 = 0x4E ;   // TW8836 EVB10 use Y3.
1006          //    r1E8 |= 0x20;   // disable YOUT. it shares pin with Y3.
1007          //    break;
1008          //  case INPUT_DVI:     //target ? don't care
1009          //  case INPUT_HDMIPC:
1010          //  case INPUT_HDMITV:
1011          //  case INPUT_LVDS:
1012          //    //digital. don't care.
1013          //    r102 = 0x00;
1014          //    break;
1015          //  }
1016          //  if(r102) {  //need update?
1017          //    WriteTW88(REG102, r102 );
1018          //    WriteTW88(REG1E8, r1E8 );
1019          //    WriteTW88(REG106, r106 );
1020          //  }
1021          //}
1022          
1023          
1024          
1025          //=============================================================================
1026          //                                                       
1027          //=============================================================================
1028          //global
1029          
1030          
1031          /*
1032          //==========================
1033          // GPIO EXAMPLE
1034          //==========================
1035          //!GPIO_EN  Enable(active high)
1036          //!GPIO_OE  Output Enable(active high)
1037          //!GPIO_OD  Output Data
1038          //!GPIO_ID  Input Data
1039          //!
1040          //!   GPIO_EN GPIO_OE GPIO_OD GPIO_ID
1041          //!GPIO0  R080  R088  R090  R098
1042          //!GPIO1  R081  R089  R091  R099
1043          //!GPIO2  R082  R08A  R092  R09A
1044          //!GPIO3  R083  R08B  R093  R09B
1045          //!GPIO4  R084  R08C  R094  R09C
C51 COMPILER V9.56.0.0   SETTINGS                                                          08/24/2018 16:22:02 PAGE 18  

1046          //!GPIO6  R085  R08D  R095  R09D
1047          //!GPIO7  R086  R08E  R096  R09E
1048          //!
1049          //!bit readGpioInputData(BYTE gpio, BYTE b)
1050          //!{
1051          //! BYTE reg;
1052          //! reg = 0x98+gpio;
1053          //! value = ReadTW88(reg);
1054          //! if(value & (1<<b))  return 1;
1055          //! else        return 0;
1056          //!}
1057          //!bit readGpioOutputData(BYTE gpio, BYTE b)
1058          //!{
1059          //! BYTE reg;
1060          //! reg = 0x90+gpio;
1061          //! value = ReadTW88(reg);
1062          //! if(value & (1<<b))  return 1;
1063          //! else        return 0;
1064          //!}
1065          //!void writeGpioOutputData(BYTE gpio, BYTE b, BYTE fOnOff)
1066          //!{
1067          //! BYTE reg;
1068          //! reg = 0x90+gpio;
1069          //! value = ReadTW88(reg);
1070          //! if(fOnOff) value |= (1<<b);
1071          //! else       value &= ~(1<<b);
1072          //! WriteTW88(reg,value);
1073          //!}
1074          */
1075            
1076          
1077          
1078          //
1079          //BKFYI110909.
1080          //  We merge step0 and step1, and check the status only at step2.
1081          //  
1082          //  step0 check_status : OK
1083          //  step1 check_status : OK
1084          //  step2 check_status : OK
1085          //
1086          //  step0 & step1 check_status : fail 20%
1087          //  step2         check_status : OK
1088          //-------------------------------------- 
1089          
1090          
1091          
1092          
1093          
1094          //-----------------------------------------------------------------------------
1095          /**
1096          * enable Output pin
1097          *
1098          * DataOut need EnableOutputPin(ON,ON)
1099          * target R008 = 0x89
1100          */
1101          void OutputEnablePin(BYTE fFPDataPin, BYTE fOutputPin)
1102          {
1103   1        BYTE value;
1104   1      
1105   1        wPrintf("\n\rOutputPin:%s FP_Data:%s",fOutputPin ? "On" : "Off",fFPDataPin ? "On" : "Off");
1106   1      
1107   1        value = ReadTW88(REG008) & ~0x30;
C51 COMPILER V9.56.0.0   SETTINGS                                                          08/24/2018 16:22:02 PAGE 19  

1108   1        if(fFPDataPin==0)     value |= 0x20;
1109   1        if(fOutputPin==0)   value |= 0x10;
1110   1        WriteTW88(REG008,  value);
1111   1      }
1112          
1113          
1114          
1115          
1116          
1117          /* eOn SPI Flash
1118            minimum for Input Page  61.383MHz 1 23 00   
1119            maximum for Main Page 68.976MHz 1 47 00 
1120          */
C51 COMPILER V9.56.0.0   SETTINGS                                                          08/24/2018 16:22:02 PAGE 20  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com00A7 (BEGIN)
0000         L?0168:
0000 F582              MOV     DPL,A
0002 E4                CLR     A
0003 3500        E     ADDC    A,regTW88
0005 F583              MOV     DPH,A
0007 759300      E     MOV     DPX,#?C?XDATASEG
000A E0                MOVX    A,@DPTR
000B FF                MOV     R7,A
000C EB                MOV     A,R3
000D 4F                ORL     A,R7
000E FF                MOV     R7,A
000F EA                MOV     A,R2
0010 FE                MOV     R6,A
0011 E9                MOV     A,R1
0012 FD                MOV     R5,A
0013 E8                MOV     A,R0
0014 FC                MOV     R4,A
0015         L?0169:
0015 90000000    R     MOV     DPTR,#dFPLL
0019 110000      E     ACALL   ?C?LSTXDATA
001C 90000000    R     MOV     DPTR,#dFPLL
0020         L?0170:
0020 E0                MOVX    A,@DPTR
0021 FC                MOV     R4,A
0022 A3                INC     DPTR
0023 E0                MOVX    A,@DPTR
0024 FD                MOV     R5,A
0025 A3                INC     DPTR
0026 E0                MOVX    A,@DPTR
0027 FE                MOV     R6,A
0028 A3                INC     DPTR
0029 E0                MOVX    A,@DPTR
002A FF                MOV     R7,A
002B 22                RET     
002C         L?0171:
002C         L?0172:
002C 759300      E     MOV     DPX,#?C?XDATASEG
002F E500        E     MOV     A,regTW88+01H
0031 24F6              ADD     A,#0F6H
0033         L?0173:
0033 F582              MOV     DPL,A
0035 E4                CLR     A
0036 3500        E     ADDC    A,regTW88
0038 F583              MOV     DPH,A
003A 759300      E     MOV     DPX,#?C?XDATASEG
003D 22                RET     
003E         L?0174:
003E         L?0175:
003E 90000000    R     MOV     DPTR,#sspll
0042         L?0176:
0042 E4                CLR     A
0043 7F02              MOV     R7,#02H
0045 FE                MOV     R6,A
0046 FD                MOV     R5,A
0047 FC                MOV     R4,A
0048         L?0177:
0048 E0                MOVX    A,@DPTR
0049 F8                MOV     R0,A
C51 COMPILER V9.56.0.0   SETTINGS                                                          08/24/2018 16:22:02 PAGE 21  

004A A3                INC     DPTR
004B E0                MOVX    A,@DPTR
004C F9                MOV     R1,A
004D A3                INC     DPTR
004E E0                MOVX    A,@DPTR
004F FA                MOV     R2,A
0050 A3                INC     DPTR
0051 E0                MOVX    A,@DPTR
0052 FB                MOV     R3,A
0053 22                RET     
0054         L?0178:
0054         L?0179:
0054 759300      E     MOV     DPX,#?C?XDATASEG
0057 E500        E     MOV     A,regTW88+01H
0059 24E1              ADD     A,#0E1H
005B         L?0180:
005B F582              MOV     DPL,A
005D E500        E     MOV     A,regTW88
005F 3404              ADDC    A,#04H
0061 F583              MOV     DPH,A
0063 759300      E     MOV     DPX,#?C?XDATASEG
0066 22                RET     
0067         L?0181:
0067 AF06              MOV     R7,AR6
0069         L?0182:
0069 759300      E     MOV     DPX,#?C?XDATASEG
006C E500        E     MOV     A,regTW88+01H
006E 240D              ADD     A,#0DH
0070 F582              MOV     DPL,A
0072 E500        E     MOV     A,regTW88
0074 3402              ADDC    A,#02H
0076 F583              MOV     DPH,A
0078 759300      E     MOV     DPX,#?C?XDATASEG
007B 22                RET     
007C         L?0183:
007C E0                MOVX    A,@DPTR
007D FF                MOV     R7,A
007E EB                MOV     A,R3
007F 4F                ORL     A,R7
0080 FF                MOV     R7,A
0081 EA                MOV     A,R2
0082 FE                MOV     R6,A
0083 E9                MOV     A,R1
0084 FD                MOV     R5,A
0085 E8                MOV     A,R0
0086 FC                MOV     R4,A
0087         L?0184:
0087 90000000    R     MOV     DPTR,#dFPLL
008B 110000      E     ACALL   ?C?LSTXDATA
008E 90000000    R     MOV     DPTR,#dFPLL
0092 22                RET     
0093         L?0185:
0093 E4                CLR     A
0094         L?0186:
0094 FA                MOV     R2,A
0095 F9                MOV     R1,A
0096 F8                MOV     R0,A
0097         L?0187:
0097 110000      E     ACALL   ?C?ULDIV
009A 90000000    R     MOV     DPTR,#temp32
009E 22                RET     
009F         L?0188:
C51 COMPILER V9.56.0.0   SETTINGS                                                          08/24/2018 16:22:02 PAGE 22  

009F E4                CLR     A
00A0 F9                MOV     R1,A
00A1 F8                MOV     R0,A
00A2 110000      E     ACALL   ?C?ULDIV
00A5         L?0189:
00A5 90000000    R     MOV     DPTR,#fpll
00A9         L?0190:
00A9 110000      E     ACALL   ?C?LSTXDATA
00AC 90000000    R     MOV     DPTR,#fpll
00B0 22                RET     
00B1         L?0191:
00B1 110000      E     ACALL   ?C?ULSHR
00B4         L?0192:
00B4 90000000    R     MOV     DPTR,#freq
00B8         L?0193:
00B8 110000      E     ACALL   ?C?LSTXDATA
00BB 90000000    R     MOV     DPTR,#freq
00BF 22                RET     
00C0         L?0194:
00C0 7808              MOV     R0,#08H
00C2         L?0195:
00C2 110000      E     ACALL   ?C?ULSHR
00C5 759300      E     MOV     DPX,#?C?XDATASEG
00C8 E500        E     MOV     A,regTW88+01H
00CA 22                RET     
00CB         L?0196:
00CB 759300      E     MOV     DPX,#?C?XDATASEG
00CE E500        E     MOV     A,regTW88+01H
00D0 24C0              ADD     A,#0C0H
00D2 F582              MOV     DPL,A
00D4 E500        E     MOV     A,regTW88
00D6 3401              ADDC    A,#01H
00D8 F583              MOV     DPH,A
00DA 759300      E     MOV     DPX,#?C?XDATASEG
00DD E0                MOVX    A,@DPTR
00DE 22                RET     
00DF         L?0197:
00DF E4                CLR     A
00E0         L?0198:
00E0 FA                MOV     R2,A
00E1 F9                MOV     R1,A
00E2 F8                MOV     R0,A
00E3 90000000    R     MOV     DPTR,#spiclk
00E7 22                RET     
00E8         L?0199:
00E8         L?0200:
00E8 E4                CLR     A
00E9 7F02              MOV     R7,#02H
00EB FE                MOV     R6,A
00EC FD                MOV     R5,A
00ED FC                MOV     R4,A
00EE 90000000    R     MOV     DPTR,#spiclk
00F2 22                RET     
00F3         L?0201:
00F3 7808              MOV     R0,#08H
00F5 110000      E     ACALL   ?C?LSHL
00F8 90000000    R     MOV     DPTR,#dFPLL
00FC 110000      E     ACALL   ?C?LSTXDATA
00FF 90000000    R     MOV     DPTR,#dFPLL
0103 22                RET     
0104         L?0202:
0104 C4                SWAP    A
C51 COMPILER V9.56.0.0   SETTINGS                                                          08/24/2018 16:22:02 PAGE 23  

0105 33                RLC     A
0106 33                RLC     A
0107 54C0              ANL     A,#0C0H
0109 FF                MOV     R7,A
010A E0                MOVX    A,@DPTR
010B FE                MOV     R6,A
010C C4                SWAP    A
010D 54F0              ANL     A,#0F0H
010F 4F                ORL     A,R7
0110 FF                MOV     R7,A
0111 22                RET     
0112         L?0203:
0112 110000      E     ACALL   ?C?LSTXDATA
0115 7B40              MOV     R3,#040H
0117 7A42              MOV     R2,#042H
0119 790F              MOV     R1,#0FH
011B 7800              MOV     R0,#00H
011D 22                RET     
011E         L?0204:
011E 90000000    R     MOV     DPTR,#fpll
0122 110000      E     ACALL   ?C?LSTXDATA
0125 90000000    R     MOV     DPTR,#fpll
0129 22                RET     
012A         L?0205:
012A 90000000    R     MOV     DPTR,#fpll
012E 110000      E     ACALL   ?C?LSTXDATA
0131 90000000    R     MOV     DPTR,#fpll
0135 22                RET     
0136         L?0206:
0136         L?0207:
0136 759300      E     MOV     DPX,#?C?XDATASEG
0139 E500        E     MOV     A,regTW88+01H
013B 24E0              ADD     A,#0E0H
013D 22                RET     
013E         L?0208:
013E A3                INC     DPTR
013F A3                INC     DPTR
0140 A3                INC     DPTR
0141 E0                MOVX    A,@DPTR
0142 FF                MOV     R7,A
0143 759300      E     MOV     DPX,#?C?XDATASEG
0146 E500        E     MOV     A,regTW88+01H
0148 22                RET     
0149         L?0209:
0149 E4                CLR     A
014A 7F02              MOV     R7,#02H
014C FE                MOV     R6,A
014D FD                MOV     R5,A
014E FC                MOV     R4,A
014F 90000000    R     MOV     DPTR,#clkpll
0153 22                RET     
0154         L?0210:
0154         L?0211:
0154 110000      E     ACALL   ?C?LMUL
0157 E4                CLR     A
0158 7B07              MOV     R3,#07H
015A 22                RET     
             ; FUNCTION Com00A7 (END)

             ; FUNCTION _Sspll1PowerUp (BEGIN)
                                           ; SOURCE LINE # 70
;---- Variable 'fOn' assigned to Register 'R7' ----
C51 COMPILER V9.56.0.0   SETTINGS                                                          08/24/2018 16:22:02 PAGE 24  

                                           ; SOURCE LINE # 71
                                           ; SOURCE LINE # 72
0000 EF                MOV     A,R7
0001 600F              JZ      ?C0001
0003 759300      E     MOV     DPX,#?C?XDATASEG
0006 E500        E     MOV     A,regTW88+01H
0008 24FC              ADD     A,#0FCH
000A 110000      R     ACALL   L?0173
000D E0                MOVX    A,@DPTR
000E 547F              ANL     A,#07FH
0010 F0                MOVX    @DPTR,A
0011 22                RET     
0012         ?C0001:
                                           ; SOURCE LINE # 73
0012 759300      E     MOV     DPX,#?C?XDATASEG
0015 E500        E     MOV     A,regTW88+01H
0017 24FC              ADD     A,#0FCH
0019 110000      R     ACALL   L?0173
001C E0                MOVX    A,@DPTR
001D 4480              ORL     A,#080H
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 74
0020         ?C0003:
0020 22                RET     
             ; FUNCTION _Sspll1PowerUp (END)

             ; FUNCTION _Sspll2PowerUp (BEGIN)
                                           ; SOURCE LINE # 75
;---- Variable 'fOn' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 76
                                           ; SOURCE LINE # 77
0000 EF                MOV     A,R7
0001 600F              JZ      ?C0004
0003 759300      E     MOV     DPX,#?C?XDATASEG
0006 E500        E     MOV     A,regTW88+01H
0008 24EC              ADD     A,#0ECH
000A 110000      R     ACALL   L?0173
000D E0                MOVX    A,@DPTR
000E 547F              ANL     A,#07FH
0010 F0                MOVX    @DPTR,A
0011 22                RET     
0012         ?C0004:
                                           ; SOURCE LINE # 78
0012 759300      E     MOV     DPX,#?C?XDATASEG
0015 E500        E     MOV     A,regTW88+01H
0017 24EC              ADD     A,#0ECH
0019 110000      R     ACALL   L?0173
001C E0                MOVX    A,@DPTR
001D 4480              ORL     A,#080H
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 79
0020         ?C0006:
0020 22                RET     
             ; FUNCTION _Sspll2PowerUp (END)

             ; FUNCTION _Sspll1SetFreqReg (BEGIN)
                                           ; SOURCE LINE # 109
0000 90000000    R     MOV     DPTR,#fpll
0004 110000      E     ACALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 110
                                           ; SOURCE LINE # 111
0007 90000000    R     MOV     DPTR,#fpll
C51 COMPILER V9.56.0.0   SETTINGS                                                          08/24/2018 16:22:02 PAGE 25  

000B 110000      R     ACALL   L?0208
000E 24FA              ADD     A,#0FAH
0010 110000      R     ACALL   L?0173
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 112
0015 90000000    R     MOV     DPTR,#fpll
0019 110000      R     ACALL   L?0170
001C 110000      R     ACALL   L?0194
001F 24F9              ADD     A,#0F9H
0021 110000      R     ACALL   L?0173
0024 EF                MOV     A,R7
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 113
0026 90000000    R     MOV     DPTR,#fpll
002A 110000      R     ACALL   L?0170
002D 7810              MOV     R0,#010H
002F 110000      R     ACALL   L?0195
0032 24F8              ADD     A,#0F8H
0034 110000      R     ACALL   L?0173
0037 EF                MOV     A,R7
0038 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 114
0039 22                RET     
             ; FUNCTION _Sspll1SetFreqReg (END)

             ; FUNCTION _Sspll2SetFreqReg (BEGIN)
                                           ; SOURCE LINE # 123
0000 90000000    R     MOV     DPTR,#fpll
0004 110000      E     ACALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 124
                                           ; SOURCE LINE # 125
0007 90000000    R     MOV     DPTR,#fpll
000B 110000      R     ACALL   L?0208
000E 24EA              ADD     A,#0EAH
0010 110000      R     ACALL   L?0173
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 126
0015 90000000    R     MOV     DPTR,#fpll
0019 110000      R     ACALL   L?0170
001C 110000      R     ACALL   L?0194
001F 24E9              ADD     A,#0E9H
0021 110000      R     ACALL   L?0173
0024 EF                MOV     A,R7
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 127
0026 90000000    R     MOV     DPTR,#fpll
002A 110000      R     ACALL   L?0170
002D 7810              MOV     R0,#010H
002F 110000      R     ACALL   L?0195
0032 24E8              ADD     A,#0E8H
0034 110000      R     ACALL   L?0173
0037 EF                MOV     A,R7
0038 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 128
0039 22                RET     
             ; FUNCTION _Sspll2SetFreqReg (END)

             ; FUNCTION Sspll1GetFreqReg (BEGIN)
                                           ; SOURCE LINE # 130
                                           ; SOURCE LINE # 131
C51 COMPILER V9.56.0.0   SETTINGS                                                          08/24/2018 16:22:02 PAGE 26  

                                           ; SOURCE LINE # 134
0000 759300      E     MOV     DPX,#?C?XDATASEG
0003 E500        E     MOV     A,regTW88+01H
0005 24F8              ADD     A,#0F8H
0007 110000      R     ACALL   L?0173
000A E0                MOVX    A,@DPTR
000B 540F              ANL     A,#0FH
000D FF                MOV     R7,A
000E E4                CLR     A
000F FC                MOV     R4,A
0010 FD                MOV     R5,A
0011 FE                MOV     R6,A
                                           ; SOURCE LINE # 135
0012 110000      R     ACALL   L?0169
                                           ; SOURCE LINE # 136
0015 110000      R     ACALL   L?0201
0018 110000      R     ACALL   L?0177
001B 759300      E     MOV     DPX,#?C?XDATASEG
001E E500        E     MOV     A,regTW88+01H
0020 24F9              ADD     A,#0F9H
                                           ; SOURCE LINE # 137
0022 110000      R     ACALL   L?0168
                                           ; SOURCE LINE # 138
0025 110000      R     ACALL   L?0201
0028 110000      R     ACALL   L?0177
002B 759300      E     MOV     DPX,#?C?XDATASEG
002E E500        E     MOV     A,regTW88+01H
0030 24FA              ADD     A,#0FAH
                                           ; SOURCE LINE # 140
0032 110000      R     ACALL   L?0168
                                           ; SOURCE LINE # 141
0035         ?C0009:
0035 22                RET     
             ; FUNCTION Sspll1GetFreqReg (END)

             ; FUNCTION Sspll2GetFreqReg (BEGIN)
                                           ; SOURCE LINE # 143
                                           ; SOURCE LINE # 144
                                           ; SOURCE LINE # 147
0000 759300      E     MOV     DPX,#?C?XDATASEG
0003 E500        E     MOV     A,regTW88+01H
0005 24E8              ADD     A,#0E8H
0007 110000      R     ACALL   L?0173
000A E0                MOVX    A,@DPTR
000B 540F              ANL     A,#0FH
000D FF                MOV     R7,A
000E E4                CLR     A
000F FC                MOV     R4,A
0010 FD                MOV     R5,A
0011 FE                MOV     R6,A
                                           ; SOURCE LINE # 148
0012 110000      R     ACALL   L?0184
0015 110000      R     ACALL   L?0170
0018 7808              MOV     R0,#08H
001A 110000      E     ACALL   ?C?LSHL
                                           ; SOURCE LINE # 149
001D 110000      R     ACALL   L?0184
0020 110000      R     ACALL   L?0177
0023 759300      E     MOV     DPX,#?C?XDATASEG
0026 E500        E     MOV     A,regTW88+01H
0028 24E9              ADD     A,#0E9H
002A 110000      R     ACALL   L?0173
C51 COMPILER V9.56.0.0   SETTINGS                                                          08/24/2018 16:22:02 PAGE 27  

                                           ; SOURCE LINE # 150
002D 110000      R     ACALL   L?0183
0030 110000      R     ACALL   L?0170
0033 7808              MOV     R0,#08H
0035 110000      E     ACALL   ?C?LSHL
                                           ; SOURCE LINE # 151
0038 110000      R     ACALL   L?0184
003B 110000      R     ACALL   L?0177
003E 759300      E     MOV     DPX,#?C?XDATASEG
0041 E500        E     MOV     A,regTW88+01H
0043 24EA              ADD     A,#0EAH
0045 110000      R     ACALL   L?0173
                                           ; SOURCE LINE # 153
0048 110000      R     ACALL   L?0183
004B 110000      R     ACALL   L?0170
                                           ; SOURCE LINE # 154
004E         ?C0010:
004E 22                RET     
             ; FUNCTION Sspll2GetFreqReg (END)

             ; FUNCTION _Sspll1SetAnalogControl (BEGIN)
                                           ; SOURCE LINE # 165
;---- Variable 'value' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 166
                                           ; SOURCE LINE # 167
0000 759300      E     MOV     DPX,#?C?XDATASEG
0003 E500        E     MOV     A,regTW88+01H
0005 24FD              ADD     A,#0FDH
0007 110000      R     ACALL   L?0173
000A EF                MOV     A,R7
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 168
000C 22                RET     
             ; FUNCTION _Sspll1SetAnalogControl (END)

             ; FUNCTION _Sspll2SetAnalogControl (BEGIN)
                                           ; SOURCE LINE # 169
;---- Variable 'value' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 170
                                           ; SOURCE LINE # 171
0000 759300      E     MOV     DPX,#?C?XDATASEG
0003 E500        E     MOV     A,regTW88+01H
0005 24ED              ADD     A,#0EDH
0007 110000      R     ACALL   L?0173
000A EF                MOV     A,R7
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 172
000C 22                RET     
             ; FUNCTION _Sspll2SetAnalogControl (END)

             ; FUNCTION Sspll1GetPost (BEGIN)
                                           ; SOURCE LINE # 178
                                           ; SOURCE LINE # 179
                                           ; SOURCE LINE # 182
0000 759300      E     MOV     DPX,#?C?XDATASEG
0003 E500        E     MOV     A,regTW88+01H
0005 24FD              ADD     A,#0FDH
0007 110000      R     ACALL   L?0173
000A E0                MOVX    A,@DPTR
;---- Variable 'post' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 183
000B C4                SWAP    A
C51 COMPILER V9.56.0.0   SETTINGS                                                          08/24/2018 16:22:02 PAGE 28  

000C 13                RRC     A
000D 13                RRC     A
000E 5403              ANL     A,#03H
0010 FF                MOV     R7,A
                                           ; SOURCE LINE # 184
0011         ?C0013:
0011 22                RET     
             ; FUNCTION Sspll1GetPost (END)

             ; FUNCTION Sspll2GetPost (BEGIN)
                                           ; SOURCE LINE # 185
                                           ; SOURCE LINE # 186
                                           ; SOURCE LINE # 189
0000 759300      E     MOV     DPX,#?C?XDATASEG
0003 E500        E     MOV     A,regTW88+01H
0005 24ED              ADD     A,#0EDH
0007 110000      R     ACALL   L?0173
000A E0                MOVX    A,@DPTR
;---- Variable 'post' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 190
000B C4                SWAP    A
000C 13                RRC     A
000D 13                RRC     A
000E 5403              ANL     A,#03H
0010 FF                MOV     R7,A
                                           ; SOURCE LINE # 191
0011         ?C0014:
0011 22                RET     
             ; FUNCTION Sspll2GetPost (END)

             ; FUNCTION _SspllFREQ2FPLL (BEGIN)
                                           ; SOURCE LINE # 210
;---- Variable 'freq' assigned to Register 'R4/R5/R6/R7' ----
                                           ; SOURCE LINE # 211
                                           ; SOURCE LINE # 213
0000 7BE8              MOV     R3,#0E8H
0002 7A03              MOV     R2,#03H
                                           ; SOURCE LINE # 214
0004 110000      R     ACALL   L?0188
0007 110000      R     ACALL   L?0170
000A 90000000    R     MOV     DPTR,#post
000E E0                MOVX    A,@DPTR
000F F9                MOV     R1,A
0010 F8                MOV     R0,A
0011 110000      E     ACALL   ?C?LSHL
0014 A3                INC     DPTR
                                           ; SOURCE LINE # 215
0015 110000      R     ACALL   L?0190
0018 110000      R     ACALL   L?0170
001B 780C              MOV     R0,#0CH
001D 110000      E     ACALL   ?C?LSHL
                                           ; SOURCE LINE # 216
0020 110000      R     ACALL   L?0189
0023 110000      R     ACALL   L?0170
0026 7B2F              MOV     R3,#02FH
0028 7A0D              MOV     R2,#0DH
                                           ; SOURCE LINE # 217
002A 110000      R     ACALL   L?0188
002D 110000      R     ACALL   L?0170
                                           ; SOURCE LINE # 218
0030         ?C0015:
0030 22                RET     
C51 COMPILER V9.56.0.0   SETTINGS                                                          08/24/2018 16:22:02 PAGE 29  

             ; FUNCTION _SspllFREQ2FPLL (END)

             ; FUNCTION _Sspll1ConvertFreq2FPLL (BEGIN)
                                           ; SOURCE LINE # 243
0000 90000000    R     MOV     DPTR,#freq
0004 110000      E     ACALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 244
                                           ; SOURCE LINE # 246
0007 110000      R     ACALL   Sspll1GetPost
;---- Variable 'post' assigned to Register 'R3' ----
000A AB07              MOV     R3,AR7
                                           ; SOURCE LINE # 247
000C 90000000    R     MOV     DPTR,#freq
0010 110000      R     ACALL   L?0170
0013 90000000    R     MOV     DPTR,#?_SspllFREQ2FPLL?BYTE+04H
0017 EB                MOV     A,R3
0018 F0                MOVX    @DPTR,A
0019 110000      R     ACALL   _SspllFREQ2FPLL
                                           ; SOURCE LINE # 248
001C         ?C0016:
001C 22                RET     
             ; FUNCTION _Sspll1ConvertFreq2FPLL (END)

             ; FUNCTION _Sspll2ConvertFreq2FPLL (BEGIN)
                                           ; SOURCE LINE # 249
0000 90000000    R     MOV     DPTR,#freq
0004 110000      E     ACALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 250
                                           ; SOURCE LINE # 252
0007 110000      R     ACALL   Sspll2GetPost
;---- Variable 'post' assigned to Register 'R3' ----
000A AB07              MOV     R3,AR7
                                           ; SOURCE LINE # 253
000C 90000000    R     MOV     DPTR,#freq
0010 110000      R     ACALL   L?0170
0013 90000000    R     MOV     DPTR,#?_SspllFREQ2FPLL?BYTE+04H
0017 EB                MOV     A,R3
0018 F0                MOVX    @DPTR,A
0019 110000      R     ACALL   _SspllFREQ2FPLL
                                           ; SOURCE LINE # 254
001C         ?C0017:
001C 22                RET     
             ; FUNCTION _Sspll2ConvertFreq2FPLL (END)

             ; FUNCTION _SspllFPLL2FREQ (BEGIN)
                                           ; SOURCE LINE # 269
;---- Variable 'fpll' assigned to Register 'R4/R5/R6/R7' ----
                                           ; SOURCE LINE # 270
                                           ; SOURCE LINE # 272
0000 7806              MOV     R0,#06H
                                           ; SOURCE LINE # 273
0002 110000      R     ACALL   L?0191
0005 110000      R     ACALL   L?0170
0008 7BF3              MOV     R3,#0F3H
000A 7A6F              MOV     R2,#06FH
000C 7906              MOV     R1,#06H
000E 7800              MOV     R0,#00H
0010 110000      E     ACALL   ?C?LMUL
                                           ; SOURCE LINE # 274
0013 110000      R     ACALL   L?0192
0016 110000      R     ACALL   L?0170
0019 7803              MOV     R0,#03H
C51 COMPILER V9.56.0.0   SETTINGS                                                          08/24/2018 16:22:02 PAGE 30  

                                           ; SOURCE LINE # 275
001B 110000      R     ACALL   L?0191
001E 110000      R     ACALL   L?0170
0021 90000000    R     MOV     DPTR,#post
0025 E0                MOVX    A,@DPTR
0026 F9                MOV     R1,A
0027 F8                MOV     R0,A
0028 110000      E     ACALL   ?C?ULSHR
002B A3                INC     DPTR
                                           ; SOURCE LINE # 276
002C 110000      R     ACALL   L?0193
002F 110000      R     ACALL   L?0170
                                           ; SOURCE LINE # 277
0032         ?C0018:
0032 22                RET     
             ; FUNCTION _SspllFPLL2FREQ (END)

             ; FUNCTION _Sspll1ConvertFPLL2Freq (BEGIN)
                                           ; SOURCE LINE # 279
0000 90000000    R     MOV     DPTR,#fpll
0004 110000      E     ACALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 280
                                           ; SOURCE LINE # 283
0007 110000      R     ACALL   Sspll1GetPost
;---- Variable 'post' assigned to Register 'R3' ----
000A AB07              MOV     R3,AR7
                                           ; SOURCE LINE # 285
000C 90000000    R     MOV     DPTR,#fpll
0010 110000      R     ACALL   L?0170
0013 90000000    R     MOV     DPTR,#?_SspllFPLL2FREQ?BYTE+04H
0017 EB                MOV     A,R3
0018 F0                MOVX    @DPTR,A
0019 110000      R     ACALL   _SspllFPLL2FREQ
                                           ; SOURCE LINE # 286
001C         ?C0019:
001C 22                RET     
             ; FUNCTION _Sspll1ConvertFPLL2Freq (END)

             ; FUNCTION _Sspll2ConvertFPLL2Freq (BEGIN)
                                           ; SOURCE LINE # 288
0000 90000000    R     MOV     DPTR,#fpll
0004 110000      E     ACALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 289
                                           ; SOURCE LINE # 292
0007 110000      R     ACALL   Sspll2GetPost
;---- Variable 'post' assigned to Register 'R3' ----
000A AB07              MOV     R3,AR7
                                           ; SOURCE LINE # 294
000C 90000000    R     MOV     DPTR,#fpll
0010 110000      R     ACALL   L?0170
0013 90000000    R     MOV     DPTR,#?_SspllFPLL2FREQ?BYTE+04H
0017 EB                MOV     A,R3
0018 F0                MOVX    @DPTR,A
0019 110000      R     ACALL   _SspllFPLL2FREQ
                                           ; SOURCE LINE # 295
001C         ?C0020:
001C 22                RET     
             ; FUNCTION _Sspll2ConvertFPLL2Freq (END)

             ; FUNCTION _Sspll1SetFreq (BEGIN)
                                           ; SOURCE LINE # 306
0000 90000000    R     MOV     DPTR,#freq
C51 COMPILER V9.56.0.0   SETTINGS                                                          08/24/2018 16:22:02 PAGE 31  

                                           ; SOURCE LINE # 307
                                           ; SOURCE LINE # 313
0004 110000      R     ACALL   L?0203
0007 90000000    R     MOV     DPTR,#freq
000B 110000      R     ACALL   L?0170
000E 110000      E     ACALL   ?C?ULDIV
0011 90000000    R     MOV     DPTR,#freq1m
0015 EF                MOV     A,R7
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 314
0017 D3                SETB    C
0018 9496              SUBB    A,#096H
001A 4009              JC      ?C0021
                                           ; SOURCE LINE # 315
001C 7B00        R     MOV     R3,#MBYTE ?SC_0
001E 7A00        R     MOV     R2,#HIGH ?SC_0
0020 7900        R     MOV     R1,#LOW ?SC_0
0022 110000      E     ACALL   _Puts
0025         ?C0021:
                                           ; SOURCE LINE # 317
0025 90000000    R     MOV     DPTR,#fControl
0029 E0                MOVX    A,@DPTR
002A 7013              JNZ     ?C0022
                                           ; SOURCE LINE # 318
                                           ; SOURCE LINE # 319
002C 90000000    R     MOV     DPTR,#freq
0030 110000      R     ACALL   L?0170
0033 110000      R     ACALL   _Sspll1ConvertFreq2FPLL
                                           ; SOURCE LINE # 320
0036 110000      R     ACALL   L?0204
0039 110000      R     ACALL   L?0170
003C 010000      R     AJMP    _Sspll1SetFreqReg
                                           ; SOURCE LINE # 323
003F         ?C0022:
                                           ; SOURCE LINE # 326
003F 90000000    R     MOV     DPTR,#freq1m
0043 E0                MOVX    A,@DPTR
0044 FF                MOV     R7,A
0045 C3                CLR     C
0046 941B              SUBB    A,#01BH
0048 5016              JNC     ?C0024
                                           ; SOURCE LINE # 327
                                           ; SOURCE LINE # 328
004A 90000000    R     MOV     DPTR,#vco
004E 7402              MOV     A,#02H
0050 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 329
0051 E4                CLR     A
0052 90000000    R     MOV     DPTR,#curr
0056 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 330
0057 90000000    R     MOV     DPTR,#post
005B 7402              MOV     A,#02H
005D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 331
005E 8031              SJMP    ?C0025
0060         ?C0024:
                                           ; SOURCE LINE # 332
0060 EF                MOV     A,R7
0061 C3                CLR     C
0062 9436              SUBB    A,#036H
0064 500F              JNC     ?C0026
C51 COMPILER V9.56.0.0   SETTINGS                                                          08/24/2018 16:22:02 PAGE 32  

                                           ; SOURCE LINE # 333
                                           ; SOURCE LINE # 334
0066 90000000    R     MOV     DPTR,#vco
006A 7402              MOV     A,#02H
006C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 335
006D 90000000    R     MOV     DPTR,#curr
0071 14                DEC     A
0072 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 336
                                           ; SOURCE LINE # 337
0073 8017              SJMP    ?C0131
0075         ?C0026:
                                           ; SOURCE LINE # 338
0075 EF                MOV     A,R7
0076 C3                CLR     C
0077 946C              SUBB    A,#06CH
0079 90000000    R     MOV     DPTR,#vco
007D 5004              JNC     ?C0028
                                           ; SOURCE LINE # 339
                                           ; SOURCE LINE # 340
007F 7402              MOV     A,#02H
                                           ; SOURCE LINE # 341
                                           ; SOURCE LINE # 342
                                           ; SOURCE LINE # 343
0081 8002              SJMP    ?C0130
0083         ?C0028:
                                           ; SOURCE LINE # 345
                                           ; SOURCE LINE # 346
0083 7403              MOV     A,#03H
0085         ?C0130:
0085 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 347
0086 90000000    R     MOV     DPTR,#curr
008A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 348
008B E4                CLR     A
008C         ?C0131:
008C 90000000    R     MOV     DPTR,#post
0090 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 349
0091         ?C0025:
                                           ; SOURCE LINE # 351
0091 90000000    R     MOV     DPTR,#vco
0095 E0                MOVX    A,@DPTR
0096 04                INC     A
0097 90000000    R     MOV     DPTR,#curr
009B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 354
009C 90000000    R     MOV     DPTR,#freq
00A0 110000      R     ACALL   L?0170
00A3 90000000    R     MOV     DPTR,#post
00A7 E0                MOVX    A,@DPTR
00A8 90000000    R     MOV     DPTR,#?_SspllFREQ2FPLL?BYTE+04H
00AC F0                MOVX    @DPTR,A
00AD 110000      R     ACALL   _SspllFREQ2FPLL
                                           ; SOURCE LINE # 357
00B0 110000      R     ACALL   L?0204
00B3 110000      R     ACALL   L?0170
00B6 110000      R     ACALL   _Sspll1SetFreqReg
                                           ; SOURCE LINE # 358
00B9 90000000    R     MOV     DPTR,#post
C51 COMPILER V9.56.0.0   SETTINGS                                                          08/24/2018 16:22:02 PAGE 33  

00BD E0                MOVX    A,@DPTR
00BE 90000000    R     MOV     DPTR,#vco
00C2 110000      R     ACALL   L?0202
00C5 90000000    R     MOV     DPTR,#curr
00C9 E0                MOVX    A,@DPTR
00CA 4F                ORL     A,R7
00CB FF                MOV     R7,A
00CC 110000      R     ACALL   _Sspll1SetAnalogControl
                                           ; SOURCE LINE # 360
00CF         ?C0023:
00CF 22                RET     
             ; FUNCTION _Sspll1SetFreq (END)

             ; FUNCTION _Sspll2SetFreq (BEGIN)
                                           ; SOURCE LINE # 362
0000 90000000    R     MOV     DPTR,#freq
                                           ; SOURCE LINE # 363
                                           ; SOURCE LINE # 369
0004 110000      R     ACALL   L?0203
0007 90000000    R     MOV     DPTR,#freq
000B 110000      R     ACALL   L?0170
000E 110000      E     ACALL   ?C?ULDIV
0011 90000000    R     MOV     DPTR,#freq1m
0015 EF                MOV     A,R7
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 370
0017 D3                SETB    C
0018 9496              SUBB    A,#096H
001A 4009              JC      ?C0030
                                           ; SOURCE LINE # 371
001C 7B00        R     MOV     R3,#MBYTE ?SC_33
001E 7A00        R     MOV     R2,#HIGH ?SC_33
0020 7900        R     MOV     R1,#LOW ?SC_33
0022 110000      E     ACALL   _Puts
0025         ?C0030:
                                           ; SOURCE LINE # 373
0025 90000000    R     MOV     DPTR,#fControl
0029 E0                MOVX    A,@DPTR
002A 7013              JNZ     ?C0031
                                           ; SOURCE LINE # 374
002C 90000000    R     MOV     DPTR,#freq
0030 110000      R     ACALL   L?0170
0033 110000      R     ACALL   _Sspll2ConvertFreq2FPLL
                                           ; SOURCE LINE # 375
0036 110000      R     ACALL   L?0205
0039 110000      R     ACALL   L?0170
003C 010000      R     AJMP    _Sspll2SetFreqReg
                                           ; SOURCE LINE # 377
003F         ?C0031:
                                           ; SOURCE LINE # 381
003F 90000000    R     MOV     DPTR,#freq1m
0043 E0                MOVX    A,@DPTR
0044 FF                MOV     R7,A
0045 C3                CLR     C
0046 941B              SUBB    A,#01BH
0048 5016              JNC     ?C0033
004A 90000000    R     MOV     DPTR,#vco
004E 7402              MOV     A,#02H
0050 F0                MOVX    @DPTR,A
0051 E4                CLR     A
0052 90000000    R     MOV     DPTR,#curr
0056 F0                MOVX    @DPTR,A
C51 COMPILER V9.56.0.0   SETTINGS                                                          08/24/2018 16:22:02 PAGE 34  

0057 90000000    R     MOV     DPTR,#post
005B 7402              MOV     A,#02H
005D F0                MOVX    @DPTR,A
005E 8031              SJMP    ?C0034
0060         ?C0033:
                                           ; SOURCE LINE # 382
0060 EF                MOV     A,R7
0061 C3                CLR     C
0062 9436              SUBB    A,#036H
0064 500F              JNC     ?C0035
0066 90000000    R     MOV     DPTR,#vco
006A 7402              MOV     A,#02H
006C F0                MOVX    @DPTR,A
006D 90000000    R     MOV     DPTR,#curr
0071 14                DEC     A
0072 F0                MOVX    @DPTR,A
0073 8017              SJMP    ?C0133
0075         ?C0035:
                                           ; SOURCE LINE # 383
0075 EF                MOV     A,R7
0076 C3                CLR     C
0077 946C              SUBB    A,#06CH
0079 90000000    R     MOV     DPTR,#vco
007D 5004              JNC     ?C0037
007F 7402              MOV     A,#02H
0081 8002              SJMP    ?C0132
0083         ?C0037:
                                           ; SOURCE LINE # 384
0083 7403              MOV     A,#03H
0085         ?C0132:
0085 F0                MOVX    @DPTR,A
0086 90000000    R     MOV     DPTR,#curr
008A F0                MOVX    @DPTR,A
008B E4                CLR     A
008C         ?C0133:
008C 90000000    R     MOV     DPTR,#post
0090 F0                MOVX    @DPTR,A
0091         ?C0034:
                                           ; SOURCE LINE # 385
0091 90000000    R     MOV     DPTR,#vco
0095 E0                MOVX    A,@DPTR
0096 04                INC     A
0097 90000000    R     MOV     DPTR,#curr
009B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 388
009C 90000000    R     MOV     DPTR,#freq
00A0 110000      R     ACALL   L?0170
00A3 90000000    R     MOV     DPTR,#post
00A7 E0                MOVX    A,@DPTR
00A8 90000000    R     MOV     DPTR,#?_SspllFREQ2FPLL?BYTE+04H
00AC F0                MOVX    @DPTR,A
00AD 110000      R     ACALL   _SspllFREQ2FPLL
                                           ; SOURCE LINE # 391
00B0 110000      R     ACALL   L?0205
00B3 110000      R     ACALL   L?0170
00B6 110000      R     ACALL   _Sspll2SetFreqReg
                                           ; SOURCE LINE # 392
00B9 90000000    R     MOV     DPTR,#post
00BD E0                MOVX    A,@DPTR
00BE 90000000    R     MOV     DPTR,#vco
00C2 110000      R     ACALL   L?0202
00C5 90000000    R     MOV     DPTR,#curr
C51 COMPILER V9.56.0.0   SETTINGS                                                          08/24/2018 16:22:02 PAGE 35  

00C9 E0                MOVX    A,@DPTR
00CA 4F                ORL     A,R7
00CB FF                MOV     R7,A
00CC 110000      R     ACALL   _Sspll2SetAnalogControl
                                           ; SOURCE LINE # 396
00CF E4                CLR     A
00D0 FF                MOV     R7,A
00D1 110000      R     ACALL   _PclkSetDividerReg
                                           ; SOURCE LINE # 398
00D4 90000000    R     MOV     DPTR,#freq1m
00D8 E0                MOVX    A,@DPTR
00D9 D3                SETB    C
00DA 946C              SUBB    A,#06CH
00DC 4009              JC      ?C0032
                                           ; SOURCE LINE # 399
00DE 7B00        R     MOV     R3,#MBYTE ?SC_67
00E0 7A00        R     MOV     R2,#HIGH ?SC_67
00E2 7900        R     MOV     R1,#LOW ?SC_67
00E4 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 402
00E7         ?C0032:
00E7 22                RET     
             ; FUNCTION _Sspll2SetFreq (END)

             ; FUNCTION Sspll1GetFreq (BEGIN)
                                           ; SOURCE LINE # 415
                                           ; SOURCE LINE # 416
                                           ; SOURCE LINE # 420
0000 110000      R     ACALL   Sspll1GetFreqReg
;---- Variable 'fpll' assigned to Register 'R4/R5/R6/R7' ----
                                           ; SOURCE LINE # 422
0003 110000      R     ACALL   _Sspll1ConvertFPLL2Freq
;---- Variable 'freq' assigned to Register 'R4/R5/R6/R7' ----
                                           ; SOURCE LINE # 425
                                           ; SOURCE LINE # 426
0006         ?C0040:
0006 22                RET     
             ; FUNCTION Sspll1GetFreq (END)

             ; FUNCTION Sspll2GetFreq (BEGIN)
                                           ; SOURCE LINE # 428
                                           ; SOURCE LINE # 429
                                           ; SOURCE LINE # 433
0000 110000      R     ACALL   Sspll2GetFreqReg
;---- Variable 'fpll' assigned to Register 'R4/R5/R6/R7' ----
                                           ; SOURCE LINE # 435
0003 110000      R     ACALL   _Sspll2ConvertFPLL2Freq
;---- Variable 'freq' assigned to Register 'R4/R5/R6/R7' ----
                                           ; SOURCE LINE # 438
                                           ; SOURCE LINE # 439
0006         ?C0041:
0006 22                RET     
             ; FUNCTION Sspll2GetFreq (END)

             ; FUNCTION _PclkSetDividerReg (BEGIN)
                                           ; SOURCE LINE # 461
;---- Variable 'divider' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 462
                                           ; SOURCE LINE # 465
0000 110000      R     ACALL   L?0171
0003 E0                MOVX    A,@DPTR
0004 54E0              ANL     A,#0E0H
C51 COMPILER V9.56.0.0   SETTINGS                                                          08/24/2018 16:22:02 PAGE 36  

0006 FE                MOV     R6,A
;---- Variable 'bTemp' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 466
0007 EF                MOV     A,R7
0008 30E307            JNB     ACC.3,?C0042
                                           ; SOURCE LINE # 467
000B 5407              ANL     A,#07H
000D FF                MOV     R7,A
                                           ; SOURCE LINE # 468
000E EE                MOV     A,R6
000F 4410              ORL     A,#010H
0011 FE                MOV     R6,A
                                           ; SOURCE LINE # 469
0012         ?C0042:
                                           ; SOURCE LINE # 470
0012 EE                MOV     A,R6
0013 4F                ORL     A,R7
                                           ; SOURCE LINE # 471
0014 FF                MOV     R7,A
0015 110000      R     ACALL   L?0171
0018 EF                MOV     A,R7
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 472
001A 22                RET     
             ; FUNCTION _PclkSetDividerReg (END)

             ; FUNCTION _PclkGetFreq (BEGIN)
                                           ; SOURCE LINE # 493
0000 90000000    R     MOV     DPTR,#sspll
0004 110000      E     ACALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 494
                                           ; SOURCE LINE # 499
0007 110000      R     ACALL   L?0172
000A E0                MOVX    A,@DPTR
000B FF                MOV     R7,A
;---- Variable 'bTemp' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 500
000C 5403              ANL     A,#03H
000E FE                MOV     R6,A
;---- Variable 'divider' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 501
000F EF                MOV     A,R7
0010 30E404            JNB     ACC.4,?C0044
                                           ; SOURCE LINE # 502
0013 EE                MOV     A,R6
0014 4404              ORL     A,#04H
0016 FE                MOV     R6,A
0017         ?C0044:
                                           ; SOURCE LINE # 504
0017 EE                MOV     A,R6
0018 B40800            CJNE    A,#08H,?C0124
001B         ?C0124:
001B 4003              JC      $ + 5H
001D 010000      R     AJMP    ?C0045
0020 90000000    R     MOV     DPTR,#?C0125
0024 F8                MOV     R0,A
0025 28                ADD     A,R0
0026 28                ADD     A,R0
0027 73                JMP     @A+DPTR
0028         ?C0125:
0028 010000      R     AJMP    ?C0046
002B 010000      R     AJMP    ?C0047
C51 COMPILER V9.56.0.0   SETTINGS                                                          08/24/2018 16:22:02 PAGE 37  

002E 010000      R     AJMP    ?C0048
0031 010000      R     AJMP    ?C0049
0034 010000      R     AJMP    ?C0050
0037 010000      R     AJMP    ?C0051
003A 010000      R     AJMP    ?C0052
003D 010000      R     AJMP    ?C0053
                                           ; SOURCE LINE # 505
0040         ?C0046:
0040 90000000    R     MOV     DPTR,#sspll
0044 110000      R     ACALL   L?0170
0047 8040              SJMP    ?C0136
                                           ; SOURCE LINE # 506
0049         ?C0047:
0049 110000      R     ACALL   L?0174
004C 110000      E     ACALL   ?C?LMUL
004F E4                CLR     A
0050 7B03              MOV     R3,#03H
0052 8024              SJMP    ?C0137
                                           ; SOURCE LINE # 507
0054         ?C0048:
0054 90000000    R     MOV     DPTR,#sspll
0058 110000      R     ACALL   L?0170
005B 7801              MOV     R0,#01H
005D 110000      E     ACALL   ?C?ULSHR
0060         ?C0134:
0060 8027              SJMP    ?C0136
                                           ; SOURCE LINE # 508
0062         ?C0049:
0062 110000      R     ACALL   L?0174
0065 110000      E     ACALL   ?C?LMUL
0068 E4                CLR     A
0069 7B05              MOV     R3,#05H
006B         ?C0135:
006B 800B              SJMP    ?C0137
                                           ; SOURCE LINE # 509
006D         ?C0050:
006D E4                CLR     A
006E 7B03              MOV     R3,#03H
0070 801D              SJMP    ?C0138
                                           ; SOURCE LINE # 510
0072         ?C0051:
0072 110000      R     ACALL   L?0175
0075 110000      R     ACALL   L?0210
0078         ?C0137:
0078 FA                MOV     R2,A
0079 F9                MOV     R1,A
007A F8                MOV     R0,A
007B 801C              SJMP    ?C0139
                                           ; SOURCE LINE # 511
007D         ?C0052:
007D 90000000    R     MOV     DPTR,#sspll
0081 110000      R     ACALL   L?0170
0084 7802              MOV     R0,#02H
0086 110000      E     ACALL   ?C?ULSHR
0089         ?C0136:
0089 A3                INC     DPTR
008A 8014              SJMP    ?C0140
                                           ; SOURCE LINE # 512
008C         ?C0053:
008C E4                CLR     A
008D 7B05              MOV     R3,#05H
008F         ?C0138:
C51 COMPILER V9.56.0.0   SETTINGS                                                          08/24/2018 16:22:02 PAGE 38  

008F FA                MOV     R2,A
0090 F9                MOV     R1,A
0091 F8                MOV     R0,A
0092 90000000    R     MOV     DPTR,#sspll
0096 110000      R     ACALL   L?0170
0099         ?C0139:
0099 110000      E     ACALL   ?C?ULDIV
009C 90000000    R     MOV     DPTR,#temp32
00A0         ?C0140:
00A0 110000      E     ACALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 513
00A3         ?C0045:
                                           ; SOURCE LINE # 514
00A3 90000000    R     MOV     DPTR,#temp32
00A7 110000      R     ACALL   L?0170
                                           ; SOURCE LINE # 515
00AA         ?C0054:
00AA 22                RET     
             ; FUNCTION _PclkGetFreq (END)

             ; FUNCTION _PclkoGetFreq (BEGIN)
                                           ; SOURCE LINE # 521
0000 90000000    R     MOV     DPTR,#pclk
0004 110000      E     ACALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 522
                                           ; SOURCE LINE # 527
0007 110000      R     ACALL   L?0182
000A E0                MOVX    A,@DPTR
000B 90000000    R     MOV     DPTR,#bTemp
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 528
0010 E0                MOVX    A,@DPTR
0011 5403              ANL     A,#03H
0013 90000000    R     MOV     DPTR,#divider
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 530
0018 E0                MOVX    A,@DPTR
0019 04                INC     A
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 531
001B E0                MOVX    A,@DPTR
001C FB                MOV     R3,A
001D E4                CLR     A
001E FA                MOV     R2,A
001F F9                MOV     R1,A
0020 F8                MOV     R0,A
0021 90000000    R     MOV     DPTR,#pclk
0025 110000      R     ACALL   L?0170
0028 110000      E     ACALL   ?C?ULDIV
002B 90000000    R     MOV     DPTR,#temp32
002F 110000      E     ACALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 532
0032 90000000    R     MOV     DPTR,#divider
0036 E0                MOVX    A,@DPTR
0037 B4031B            CJNE    A,#03H,?C0055
                                           ; SOURCE LINE # 533
003A 90000000    R     MOV     DPTR,#bTemp
003E E0                MOVX    A,@DPTR
003F 30E513            JNB     ACC.5,?C0055
                                           ; SOURCE LINE # 534
0042 90000000    R     MOV     DPTR,#temp32
0046 110000      R     ACALL   L?0170
C51 COMPILER V9.56.0.0   SETTINGS                                                          08/24/2018 16:22:02 PAGE 39  

0049 7801              MOV     R0,#01H
004B 110000      E     ACALL   ?C?LSHL
004E 90000000    R     MOV     DPTR,#temp32
0052 110000      E     ACALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 535
0055         ?C0055:
                                           ; SOURCE LINE # 536
0055 90000000    R     MOV     DPTR,#temp32
0059 110000      R     ACALL   L?0170
                                           ; SOURCE LINE # 537
005C         ?C0057:
005C 22                RET     
             ; FUNCTION _PclkoGetFreq (END)

             ; FUNCTION CheckPclko_polarity (BEGIN)
                                           ; SOURCE LINE # 546
                                           ; SOURCE LINE # 547
                                           ; SOURCE LINE # 549
0000 110000      R     ACALL   PclkoReadDiv
;---- Variable 'pclko_div' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 550
0003 EF                MOV     A,R7
0004 90000000    R     MOV     DPTR,#pclok_pol_table
0008 93                MOVC    A,@A+DPTR
0009 FF                MOV     R7,A
                                           ; SOURCE LINE # 551
000A         ?C0058:
000A 22                RET     
             ; FUNCTION CheckPclko_polarity (END)

             ; FUNCTION _PclkoSetPolarity (BEGIN)
                                           ; SOURCE LINE # 562
;---- Variable 'pol' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 563
                                           ; SOURCE LINE # 565
0000 110000      R     ACALL   L?0182
0003 E0                MOVX    A,@DPTR
0004 FE                MOV     R6,A
;---- Variable 'value' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 566
0005 EF                MOV     A,R7
0006 6006              JZ      ?C0059
0008 EE                MOV     A,R6
0009 4410              ORL     A,#010H
000B FE                MOV     R6,A
000C 8004              SJMP    ?C0060
000E         ?C0059:
                                           ; SOURCE LINE # 567
000E EE                MOV     A,R6
000F 54EF              ANL     A,#0EFH
0011 FE                MOV     R6,A
0012         ?C0060:
                                           ; SOURCE LINE # 568
0012 110000      R     ACALL   L?0181
0015 EF                MOV     A,R7
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 569
0017 22                RET     
             ; FUNCTION _PclkoSetPolarity (END)

             ; FUNCTION _PclkoSetDiv (BEGIN)
                                           ; SOURCE LINE # 584
C51 COMPILER V9.56.0.0   SETTINGS                                                          08/24/2018 16:22:02 PAGE 40  

;---- Variable 'div' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 585
                                           ; SOURCE LINE # 587
0000 110000      R     ACALL   L?0182
0003 E0                MOVX    A,@DPTR
0004 54DC              ANL     A,#0DCH
0006 FE                MOV     R6,A
;---- Variable 'value' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 588
0007 EF                MOV     A,R7
0008 B40604            CJNE    A,#06H,?C0062
                                           ; SOURCE LINE # 589
000B EE                MOV     A,R6
000C 4420              ORL     A,#020H
000E FE                MOV     R6,A
000F         ?C0062:
                                           ; SOURCE LINE # 590
000F EF                MOV     A,R7
0010 5403              ANL     A,#03H
                                           ; SOURCE LINE # 591
0012 4E                ORL     A,R6
                                           ; SOURCE LINE # 593
0013 FF                MOV     R7,A
0014 110000      R     ACALL   L?0182
0017 EF                MOV     A,R7
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 594
0019 22                RET     
             ; FUNCTION _PclkoSetDiv (END)

             ; FUNCTION _PclkoSetDiv_with_pol (BEGIN)
                                           ; SOURCE LINE # 596
;---- Variable 'div' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 597
                                           ; SOURCE LINE # 601
0000 110000      R     ACALL   L?0182
0003 E0                MOVX    A,@DPTR
0004 54CC              ANL     A,#0CCH
0006 FE                MOV     R6,A
;---- Variable 'value' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 602
0007 EF                MOV     A,R7
0008 B40604            CJNE    A,#06H,?C0064
                                           ; SOURCE LINE # 603
000B EE                MOV     A,R6
000C 4420              ORL     A,#020H
000E FE                MOV     R6,A
000F         ?C0064:
                                           ; SOURCE LINE # 604
000F EF                MOV     A,R7
0010 5403              ANL     A,#03H
0012 FF                MOV     R7,A
                                           ; SOURCE LINE # 605
0013 4E                ORL     A,R6
0014 FE                MOV     R6,A
                                           ; SOURCE LINE # 607
0015 EF                MOV     A,R7
0016 90000000    R     MOV     DPTR,#pclok_pol_table
001A 93                MOVC    A,@A+DPTR
;---- Variable 'pol' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 608
001B 6004              JZ      ?C0065
C51 COMPILER V9.56.0.0   SETTINGS                                                          08/24/2018 16:22:02 PAGE 41  

                                           ; SOURCE LINE # 609
001D EE                MOV     A,R6
001E 4410              ORL     A,#010H
0020 FE                MOV     R6,A
0021         ?C0065:
                                           ; SOURCE LINE # 610
0021 110000      R     ACALL   L?0181
0024 EF                MOV     A,R7
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 611
0026 22                RET     
             ; FUNCTION _PclkoSetDiv_with_pol (END)

             ; FUNCTION PclkoReadDiv (BEGIN)
                                           ; SOURCE LINE # 614
                                           ; SOURCE LINE # 615
                                           ; SOURCE LINE # 617
0000 110000      R     ACALL   L?0182
0003 E0                MOVX    A,@DPTR
0004 5423              ANL     A,#023H
0006 FF                MOV     R7,A
;---- Variable 'value' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 618
0007 30E503            JNB     ACC.5,?C0067
000A 4404              ORL     A,#04H
000C FF                MOV     R7,A
000D         ?C0067:
                                           ; SOURCE LINE # 619
000D EF                MOV     A,R7
000E 5407              ANL     A,#07H
0010 FF                MOV     R7,A
                                           ; SOURCE LINE # 621
                                           ; SOURCE LINE # 622
0011         ?C0068:
0011 22                RET     
             ; FUNCTION PclkoReadDiv (END)

             ; FUNCTION _PclkoPrintDiv (BEGIN)
                                           ; SOURCE LINE # 624
;---- Variable 'div' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 625
                                           ; SOURCE LINE # 626
0000 EF                MOV     A,R7
0001 14                DEC     A
0002 6019              JZ      ?C0073
0004 14                DEC     A
0005 601E              JZ      ?C0074
0007 24FE              ADD     A,#0FEH
0009 600A              JZ      ?C0071
000B 14                DEC     A
000C 600F              JZ      ?C0073
000E 14                DEC     A
000F 601C              JZ      ?C0075
0011 2406              ADD     A,#06H
0013 7020              JNZ     ?C0076
                                           ; SOURCE LINE # 627
                                           ; SOURCE LINE # 628
0015         ?C0071:
0015 7B00        R     MOV     R3,#MBYTE ?SC_99
0017 7A00        R     MOV     R2,#HIGH ?SC_99
0019 7900        R     MOV     R1,#LOW ?SC_99
001B 801E              SJMP    ?C0144
C51 COMPILER V9.56.0.0   SETTINGS                                                          08/24/2018 16:22:02 PAGE 42  

                                           ; SOURCE LINE # 629
                                           ; SOURCE LINE # 630
001D         ?C0073:
001D 7B00        R     MOV     R3,#MBYTE ?SC_104
001F 7A00        R     MOV     R2,#HIGH ?SC_104
0021 7900        R     MOV     R1,#LOW ?SC_104
0023         ?C0141:
0023 8016              SJMP    ?C0144
                                           ; SOURCE LINE # 631
0025         ?C0074:
0025 7B00        R     MOV     R3,#MBYTE ?SC_109
0027 7A00        R     MOV     R2,#HIGH ?SC_109
0029 7900        R     MOV     R1,#LOW ?SC_109
002B         ?C0142:
002B 800E              SJMP    ?C0144
                                           ; SOURCE LINE # 632
002D         ?C0075:
002D 7B00        R     MOV     R3,#MBYTE ?SC_114
002F 7A00        R     MOV     R2,#HIGH ?SC_114
0031 7900        R     MOV     R1,#LOW ?SC_114
0033         ?C0143:
0033 8006              SJMP    ?C0144
                                           ; SOURCE LINE # 633
0035         ?C0076:
0035 7B00        R     MOV     R3,#MBYTE ?SC_121
0037 7A00        R     MOV     R2,#HIGH ?SC_121
0039 7900        R     MOV     R1,#LOW ?SC_121
003B         ?C0144:
003B 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 634
                                           ; SOURCE LINE # 635
003E         ?C0077:
003E 22                RET     
             ; FUNCTION _PclkoPrintDiv (END)

             ; FUNCTION _PllClkSetSource (BEGIN)
                                           ; SOURCE LINE # 652
;---- Variable 'fPLL108' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 653
                                           ; SOURCE LINE # 656
0000 110000      R     ACALL   L?0206
0003 110000      R     ACALL   L?0180
0006 E0                MOVX    A,@DPTR
0007 FE                MOV     R6,A
;---- Variable 'bTemp' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 658
0008 EF                MOV     A,R7
0009 6006              JZ      ?C0078
                                           ; SOURCE LINE # 659
000B EE                MOV     A,R6
000C 4401              ORL     A,#01H
000E FE                MOV     R6,A
000F 8004              SJMP    ?C0079
0011         ?C0078:
                                           ; SOURCE LINE # 661
0011 EE                MOV     A,R6
0012 54FE              ANL     A,#0FEH
0014 FE                MOV     R6,A
0015         ?C0079:
                                           ; SOURCE LINE # 663
0015 AF06              MOV     R7,AR6
0017 110000      R     ACALL   L?0206
C51 COMPILER V9.56.0.0   SETTINGS                                                          08/24/2018 16:22:02 PAGE 43  

001A 110000      R     ACALL   L?0180
001D EF                MOV     A,R7
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 664
001F 22                RET     
             ; FUNCTION _PllClkSetSource (END)

             ; FUNCTION PllClkGetSource (BEGIN)
                                           ; SOURCE LINE # 666
                                           ; SOURCE LINE # 667
                                           ; SOURCE LINE # 670
0000 110000      R     ACALL   L?0207
0003 110000      R     ACALL   L?0180
0006 E0                MOVX    A,@DPTR
;---- Variable 'bTemp' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 672
0007 5401              ANL     A,#01H
0009 FF                MOV     R7,A
                                           ; SOURCE LINE # 673
000A         ?C0081:
000A 22                RET     
             ; FUNCTION PllClkGetSource (END)

             ; FUNCTION _PllClkSetDividerReg (BEGIN)
                                           ; SOURCE LINE # 683
;---- Variable 'divider' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 684
                                           ; SOURCE LINE # 685
0000 110000      R     ACALL   L?0178
0003 E0                MOVX    A,@DPTR
0004 54F0              ANL     A,#0F0H
0006 4F                ORL     A,R7
0007 FF                MOV     R7,A
0008 110000      R     ACALL   L?0178
000B EF                MOV     A,R7
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 686
000D 22                RET     
             ; FUNCTION _PllClkSetDividerReg (END)

             ; FUNCTION PllClkGetFreq (BEGIN)
                                           ; SOURCE LINE # 730
                                           ; SOURCE LINE # 731
                                           ; SOURCE LINE # 737
0000 110000      R     ACALL   PllClkGetSource
0003 90000000    R     MOV     DPTR,#temp8
0007 EF                MOV     A,R7
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 738
0009 600B              JZ      ?C0083
                                           ; SOURCE LINE # 739
000B 7F00              MOV     R7,#00H
000D 7EF3              MOV     R6,#0F3H
000F 7D6F              MOV     R5,#06FH
0011 7C06              MOV     R4,#06H
0013 A3                INC     DPTR
0014 801A              SJMP    ?C0146
0016         ?C0083:
                                           ; SOURCE LINE # 741
                                           ; SOURCE LINE # 742
0016 759300      E     MOV     DPX,#?C?XDATASEG
0019 E500        E     MOV     A,regTW88+01H
C51 COMPILER V9.56.0.0   SETTINGS                                                          08/24/2018 16:22:02 PAGE 44  

001B 244B              ADD     A,#04BH
001D 110000      R     ACALL   L?0173
0020 E0                MOVX    A,@DPTR
0021 30E505            JNB     ACC.5,?C0085
                                           ; SOURCE LINE # 743
0024 110000      R     ACALL   Sspll2GetFreq
0027 8003              SJMP    ?C0145
0029         ?C0085:
                                           ; SOURCE LINE # 745
0029 110000      R     ACALL   Sspll1GetFreq
002C         ?C0145:
002C 90000000    R     MOV     DPTR,#clkpll
0030         ?C0146:
0030 110000      E     ACALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 746
0033         ?C0084:
                                           ; SOURCE LINE # 749
0033 110000      R     ACALL   L?0179
0036 E0                MOVX    A,@DPTR
0037 540F              ANL     A,#0FH
0039 90000000    R     MOV     DPTR,#temp8
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 751
003E E0                MOVX    A,@DPTR
003F B40A00            CJNE    A,#0AH,?C0126
0042         ?C0126:
0042 4003              JC      $ + 5H
0044 010000      R     AJMP    ?C0098
0047 90000000    R     MOV     DPTR,#?C0127
004B F8                MOV     R0,A
004C 28                ADD     A,R0
004D 28                ADD     A,R0
004E 73                JMP     @A+DPTR
004F         ?C0127:
004F 010000      R     AJMP    ?C0088
0052 010000      R     AJMP    ?C0089
0055 010000      R     AJMP    ?C0090
0058 010000      R     AJMP    ?C0091
005B 010000      R     AJMP    ?C0092
005E 010000      R     AJMP    ?C0093
0061 010000      R     AJMP    ?C0094
0064 010000      R     AJMP    ?C0095
0067 010000      R     AJMP    ?C0096
006A 010000      R     AJMP    ?C0097
                                           ; SOURCE LINE # 752
                                           ; SOURCE LINE # 753
006D         ?C0088:
006D 90000000    R     MOV     DPTR,#clkpll
0071 110000      R     ACALL   L?0170
0074 806E              SJMP    ?C0153
                                           ; SOURCE LINE # 754
0076         ?C0089:
0076 90000000    R     MOV     DPTR,#clkpll
007A 110000      R     ACALL   L?0176
007D 110000      E     ACALL   ?C?LMUL
0080 E4                CLR     A
0081 7B03              MOV     R3,#03H
0083 802A              SJMP    ?C0150
                                           ; SOURCE LINE # 755
0085         ?C0090:
0085 90000000    R     MOV     DPTR,#clkpll
0089 110000      R     ACALL   L?0170
C51 COMPILER V9.56.0.0   SETTINGS                                                          08/24/2018 16:22:02 PAGE 45  

008C 7801              MOV     R0,#01H
008E 110000      E     ACALL   ?C?ULSHR
0091         ?C0147:
0091 8051              SJMP    ?C0153
                                           ; SOURCE LINE # 756
0093         ?C0091:
0093 110000      R     ACALL   L?0209
0096 110000      R     ACALL   L?0177
0099 110000      E     ACALL   ?C?LMUL
009C E4                CLR     A
009D 7B05              MOV     R3,#05H
009F         ?C0148:
009F 800E              SJMP    ?C0150
                                           ; SOURCE LINE # 757
00A1         ?C0092:
00A1 E4                CLR     A
00A2 7B03              MOV     R3,#03H
00A4 801F              SJMP    ?C0151
                                           ; SOURCE LINE # 758
00A6         ?C0093:
00A6 110000      R     ACALL   L?0209
00A9 110000      R     ACALL   L?0177
00AC 110000      R     ACALL   L?0210
00AF         ?C0150:
00AF FA                MOV     R2,A
00B0 F9                MOV     R1,A
00B1 F8                MOV     R0,A
00B2 801B              SJMP    ?C0152
                                           ; SOURCE LINE # 759
00B4         ?C0094:
00B4 90000000    R     MOV     DPTR,#clkpll
00B8 110000      R     ACALL   L?0170
00BB 7802              MOV     R0,#02H
00BD 110000      E     ACALL   ?C?ULSHR
00C0         ?C0149:
00C0 8022              SJMP    ?C0153
                                           ; SOURCE LINE # 760
00C2         ?C0095:
00C2 E4                CLR     A
00C3 7B05              MOV     R3,#05H
00C5         ?C0151:
00C5 FA                MOV     R2,A
00C6 F9                MOV     R1,A
00C7 F8                MOV     R0,A
00C8 90000000    R     MOV     DPTR,#clkpll
00CC 110000      R     ACALL   L?0170
00CF         ?C0152:
00CF 110000      E     ACALL   ?C?ULDIV
00D2 90000000    R     MOV     DPTR,#temp32
00D6 802B              SJMP    ?C0156
                                           ; SOURCE LINE # 761
00D8         ?C0096:
00D8 90000000    R     MOV     DPTR,#clkpll
00DC 110000      R     ACALL   L?0170
00DF 7803              MOV     R0,#03H
00E1 110000      E     ACALL   ?C?ULSHR
00E4         ?C0153:
00E4 A3                INC     DPTR
00E5         ?C0154:
00E5 801C              SJMP    ?C0156
                                           ; SOURCE LINE # 762
00E7         ?C0097:
C51 COMPILER V9.56.0.0   SETTINGS                                                          08/24/2018 16:22:02 PAGE 46  

00E7 90000000    R     MOV     DPTR,#clkpll
00EB 110000      R     ACALL   L?0170
00EE 7804              MOV     R0,#04H
00F0 110000      E     ACALL   ?C?ULSHR
00F3 A3                INC     DPTR
00F4         ?C0155:
00F4 800D              SJMP    ?C0156
                                           ; SOURCE LINE # 763
00F6         ?C0098:
00F6 90000000    R     MOV     DPTR,#clkpll
00FA 110000      R     ACALL   L?0170
00FD 7805              MOV     R0,#05H
00FF 110000      E     ACALL   ?C?ULSHR
0102 A3                INC     DPTR
0103         ?C0156:
0103 110000      E     ACALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 764
0106         ?C0087:
                                           ; SOURCE LINE # 766
0106 90000000    R     MOV     DPTR,#temp32
010A 110000      R     ACALL   L?0170
                                           ; SOURCE LINE # 767
010D         ?C0099:
010D 22                RET     
             ; FUNCTION PllClkGetFreq (END)

             ; FUNCTION SpiClkReadSource (BEGIN)
                                           ; SOURCE LINE # 828
                                           ; SOURCE LINE # 829
                                           ; SOURCE LINE # 831
0000 110000      R     ACALL   L?0179
0003 E0                MOVX    A,@DPTR
0004 5430              ANL     A,#030H
;---- Variable 'value' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 832
0006 C4                SWAP    A
0007 540F              ANL     A,#0FH
0009 FF                MOV     R7,A
                                           ; SOURCE LINE # 833
000A         ?C0100:
000A 22                RET     
             ; FUNCTION SpiClkReadSource (END)

             ; FUNCTION _SpiClkSetSource (BEGIN)
                                           ; SOURCE LINE # 834
;---- Variable 'mode' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 835
                                           ; SOURCE LINE # 839
0000 110000      R     ACALL   L?0179
0003 E0                MOVX    A,@DPTR
0004 54CF              ANL     A,#0CFH
;---- Variable 'value' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 840
0006 4F                ORL     A,R7
0007 FE                MOV     R6,A
                                           ; SOURCE LINE # 841
;---- Variable 'cache' assigned to Register 'R7' ----
0008 AF9C              MOV     R7,SFR_CACHE_EN
                                           ; SOURCE LINE # 842
000A C2AF              CLR     SFRB_EA
                                           ; SOURCE LINE # 843
000C E4                CLR     A
C51 COMPILER V9.56.0.0   SETTINGS                                                          08/24/2018 16:22:02 PAGE 47  

000D F59C              MOV     SFR_CACHE_EN,A
                                           ; SOURCE LINE # 844
000F 110000      R     ACALL   L?0179
0012 EE                MOV     A,R6
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 845
0014 8F9C              MOV     SFR_CACHE_EN,R7
                                           ; SOURCE LINE # 846
0016 D2AF              SETB    SFRB_EA
                                           ; SOURCE LINE # 847
0018 22                RET     
             ; FUNCTION _SpiClkSetSource (END)

             ; FUNCTION SpiClkGetFreq (BEGIN)
                                           ; SOURCE LINE # 883
                                           ; SOURCE LINE # 884
                                           ; SOURCE LINE # 888
0000 110000      R     ACALL   L?0179
0003 E0                MOVX    A,@DPTR
0004 C4                SWAP    A
0005 540F              ANL     A,#0FH
;---- Variable 'temp8' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 889
0007 5403              ANL     A,#03H
0009 FF                MOV     R7,A
                                           ; SOURCE LINE # 891
000A 14                DEC     A
000B 6007              JZ      ?C0104
000D 14                DEC     A
000E 600C              JZ      ?C0105
0010 2402              ADD     A,#02H
                                           ; SOURCE LINE # 892
                                           ; SOURCE LINE # 893
0012         ?C0103:
0012 800D              SJMP    ?C0157
                                           ; SOURCE LINE # 894
0014         ?C0104:
0014 E4                CLR     A
0015 FF                MOV     R7,A
0016 7E7D              MOV     R6,#07DH
0018 FD                MOV     R5,A
0019 FC                MOV     R4,A
001A 800D              SJMP    ?C0159
                                           ; SOURCE LINE # 895
001C         ?C0105:
001C 110000      R     ACALL   PllClkGetFreq
001F         ?C0158:
001F 8008              SJMP    ?C0159
                                           ; SOURCE LINE # 896
0021         ?C0157:
0021 7FC0              MOV     R7,#0C0H
0023 7EFC              MOV     R6,#0FCH
0025 7D9B              MOV     R5,#09BH
0027 7C01              MOV     R4,#01H
0029         ?C0159:
0029 90000000    R     MOV     DPTR,#temp32
002D 110000      E     ACALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 897
0030         ?C0102:
                                           ; SOURCE LINE # 899
0030 90000000    R     MOV     DPTR,#temp32
0034 110000      R     ACALL   L?0170
C51 COMPILER V9.56.0.0   SETTINGS                                                          08/24/2018 16:22:02 PAGE 48  

                                           ; SOURCE LINE # 900
0037         ?C0107:
0037 22                RET     
             ; FUNCTION SpiClkGetFreq (END)

             ; FUNCTION _McuClkGetFreq (BEGIN)
                                           ; SOURCE LINE # 906
0000 90000000    R     MOV     DPTR,#spiclk
0004 110000      E     ACALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 907
                                           ; SOURCE LINE # 911
0007 759300      E     MOV     DPX,#?C?XDATASEG
000A E500        E     MOV     A,regTW88+01H
000C 24F0              ADD     A,#0F0H
000E 110000      R     ACALL   L?0180
0011 E0                MOVX    A,@DPTR
0012 C4                SWAP    A
0013 540F              ANL     A,#0FH
0015 FF                MOV     R7,A
;---- Variable 'temp' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 912
0016 B40800            CJNE    A,#08H,?C0128
0019         ?C0128:
0019 4003              JC      $ + 5H
001B 010000      R     AJMP    ?C0108
001E 90000000    R     MOV     DPTR,#?C0129
0022 F8                MOV     R0,A
0023 28                ADD     A,R0
0024 28                ADD     A,R0
0025 73                JMP     @A+DPTR
0026         ?C0129:
0026 010000      R     AJMP    ?C0109
0029 010000      R     AJMP    ?C0110
002C 010000      R     AJMP    ?C0111
002F 010000      R     AJMP    ?C0112
0032 010000      R     AJMP    ?C0113
0035 010000      R     AJMP    ?C0114
0038 010000      R     AJMP    ?C0115
003B 010000      R     AJMP    ?C0116
                                           ; SOURCE LINE # 913
                                           ; SOURCE LINE # 914
003E         ?C0109:
003E 90000000    R     MOV     DPTR,#spiclk
0042 110000      R     ACALL   L?0170
0045 A3                INC     DPTR
0046 8062              SJMP    ?C0166
                                           ; SOURCE LINE # 915
0048         ?C0110:
0048 110000      R     ACALL   L?0199
004B 110000      R     ACALL   L?0177
004E 110000      E     ACALL   ?C?LMUL
0051 7B03              MOV     R3,#03H
0053 110000      R     ACALL   L?0185
0056         ?C0160:
0056 8052              SJMP    ?C0166
                                           ; SOURCE LINE # 916
0058         ?C0111:
0058 7B02              MOV     R3,#02H
005A 110000      R     ACALL   L?0197
005D 110000      R     ACALL   L?0170
0060 110000      R     ACALL   L?0187
0063         ?C0161:
C51 COMPILER V9.56.0.0   SETTINGS                                                          08/24/2018 16:22:02 PAGE 49  

0063 8045              SJMP    ?C0166
                                           ; SOURCE LINE # 917
0065         ?C0112:
0065 110000      R     ACALL   L?0199
0068 110000      R     ACALL   L?0177
006B 110000      E     ACALL   ?C?LMUL
006E 7B05              MOV     R3,#05H
0070 110000      R     ACALL   L?0185
0073         ?C0162:
0073 8035              SJMP    ?C0166
                                           ; SOURCE LINE # 918
0075         ?C0113:
0075 7B03              MOV     R3,#03H
0077 110000      R     ACALL   L?0197
007A 110000      R     ACALL   L?0170
007D 110000      R     ACALL   L?0187
0080         ?C0163:
0080 8028              SJMP    ?C0166
                                           ; SOURCE LINE # 919
0082         ?C0114:
0082 110000      R     ACALL   L?0200
0085 110000      R     ACALL   L?0177
0088 110000      R     ACALL   L?0211
008B 110000      R     ACALL   L?0186
008E         ?C0164:
008E 801A              SJMP    ?C0166
                                           ; SOURCE LINE # 920
0090         ?C0115:
0090 E4                CLR     A
0091 7B04              MOV     R3,#04H
0093 110000      R     ACALL   L?0198
0096 110000      R     ACALL   L?0170
0099 110000      R     ACALL   L?0187
009C         ?C0165:
009C 800C              SJMP    ?C0166
                                           ; SOURCE LINE # 921
009E         ?C0116:
009E E4                CLR     A
009F 7B05              MOV     R3,#05H
00A1 110000      R     ACALL   L?0198
00A4 110000      R     ACALL   L?0170
00A7 110000      R     ACALL   L?0187
00AA         ?C0166:
00AA 110000      E     ACALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 922
00AD         ?C0108:
                                           ; SOURCE LINE # 924
00AD 90000000    R     MOV     DPTR,#temp32
00B1 110000      R     ACALL   L?0170
                                           ; SOURCE LINE # 925
00B4         ?C0117:
00B4 22                RET     
             ; FUNCTION _McuClkGetFreq (END)

             ; FUNCTION _aRGBSetClockSource (BEGIN)
                                           ; SOURCE LINE # 940
;---- Variable 'use_27M' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 941
                                           ; SOURCE LINE # 942
0000 EF                MOV     A,R7
0001 6007              JZ      ?C0118
                                           ; SOURCE LINE # 943
C51 COMPILER V9.56.0.0   SETTINGS                                                          08/24/2018 16:22:02 PAGE 50  

0003 110000      R     ACALL   L?0196
0006 4401              ORL     A,#01H
0008 F0                MOVX    @DPTR,A
0009 22                RET     
000A         ?C0118:
                                           ; SOURCE LINE # 945
000A 110000      R     ACALL   L?0196
000D 54FE              ANL     A,#0FEH
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 946
0010         ?C0120:
0010 22                RET     
             ; FUNCTION _aRGBSetClockSource (END)

             ; FUNCTION _OutputEnablePin (BEGIN)
                                           ; SOURCE LINE # 1101
;---- Variable 'fOutputPin' assigned to Register 'R5' ----
;---- Variable 'fFPDataPin' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1102
                                           ; SOURCE LINE # 1107
0000 759300      E     MOV     DPX,#?C?XDATASEG
0003 E500        E     MOV     A,regTW88+01H
0005 2408              ADD     A,#08H
0007 110000      R     ACALL   L?0173
000A E0                MOVX    A,@DPTR
000B 54CF              ANL     A,#0CFH
000D FE                MOV     R6,A
;---- Variable 'value' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 1108
000E EF                MOV     A,R7
000F 7004              JNZ     ?C0121
0011 EE                MOV     A,R6
0012 4420              ORL     A,#020H
0014 FE                MOV     R6,A
0015         ?C0121:
                                           ; SOURCE LINE # 1109
0015 ED                MOV     A,R5
0016 7004              JNZ     ?C0122
0018 EE                MOV     A,R6
0019 4410              ORL     A,#010H
001B FE                MOV     R6,A
001C         ?C0122:
                                           ; SOURCE LINE # 1110
001C AF06              MOV     R7,AR6
001E 759300      E     MOV     DPX,#?C?XDATASEG
0021 E500        E     MOV     A,regTW88+01H
0023 2408              ADD     A,#08H
0025 110000      R     ACALL   L?0173
0028 EF                MOV     A,R7
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1111
002A 22                RET     
             ; FUNCTION _OutputEnablePin (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2526    ----
   CONSTANT SIZE    =    134    ----
   XDATA SIZE       =   ----     115
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
C51 COMPILER V9.56.0.0   SETTINGS                                                          08/24/2018 16:22:02 PAGE 51  

   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
