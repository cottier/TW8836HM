C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE MONITOR
OBJECT MODULE PLACED IN .\Output\monitor.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE source36\monitor.c LARGE OMF2 ROM(D512K) OPTIMIZE(9,SPEED) REGFILE(.\Out
                    -put\TW8836B_EVB11.ORC) BROWSE INCDIR(SiI-SW;SiI-SW\HAL;SiI-SW\DEBUG;SiI-SW\CEC;.\Source36\LIB) DEFINE(EVB_11,nullFn=//) 
                    -DEBUG CODE PRINT(.\List\monitor.lst) TABS(2) OBJECT(.\Output\monitor.obj)

line level    source

   1          /**
   2           * @file
   3           * Monitor.c 
   4           * @author Harry Han
   5           * @author YoungHwan Bae
   6           * @author Brian Kang
   7           * @version 1.0
   8           * @section LICENSE
   9           *  Copyright (C) 2011~2012 Intersil Corporation
  10           * @section DESCRIPTION
  11           *  Interface between TW_Terminal2 and Firmware.
  12          */
  13          /*
  14          Disclaimer: THIS INFORMATION IS PROVIDED 'AS-IS' FOR EVALUATION PURPOSES ONLY.  
  15          INTERSIL CORPORATION AND ITS SUBSIDIARIES ('INTERSIL') DISCLAIM ALL WARRANTIES, 
  16          INCLUDING WITHOUT LIMITATION FITNESS FOR A PARTICULAR PURPOSE AND MERCHANTABILITY.  
  17          Intersil provides evaluation platforms to help our customers to develop products. 
  18          However, factors beyond Intersil's control could significantly affect Intersil 
  19          product performance. 
  20          It remains the customers' responsibility to verify the actual system performance.
  21          */
  22          
  23          /*  TW-Dongle2 LED.
  24              D2 D3   mode   D4:Command  D5-Connect
  25              1  0    I2C
  26              0  1    UART
  27              1  1    SPI
  28          */
  29          
  30          //*****************************************************************************
  31          //
  32          //                Monitor.c
  33          //
  34          //*****************************************************************************
  35          //                                
  36          //
  37          //#include <intrins.h>
  38          
  39          #include "config.h"
  40          #include "reg.h"
  41          #include "typedefs.h"
  42          #include "TW8836.h"
  43          
  44          #include "global.h"
  45          #include "cpu.h"
  46          #include "printf.h" 
  47          #include "util.h"
  48          #include "monitor.h"
  49          #include "monitor_MCU.h"
  50          #include "monitor_SPI.h"
  51          #include "monitor_MENU.h"
  52          #include "monitor_ChipTest.h"
  53                
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 2   

  54          #include "i2c.h"
  55          #include "spi.h"
  56          #include "I2cSpi.h"
  57          
  58          #include "main.h"
  59          #include "SOsd.h"
  60          #include "FOsd.h"
  61          #include "Measure.h"
  62          #include "Settings.h"
  63          #include "Remo.h"
  64          #include "scaler.h"
  65          #ifdef SUPPORT_DELTA_RGB
              #include "DeltaRGB.h"
              #endif
  68          #include "InputCtrl.h"
  69          #include "ImageCtrl.h"
  70          #include "TouchKey.h"
  71          #include "measure.h"
  72          #include "HDMI_EP9351.h"
  73          #include "HDMI_EP9553.h"
  74          
  75          #include "Decoder.h"
  76          #include "aRGB.h"
  77          #include "DTV.h"
  78          #include "EEPROM.H"
  79          
  80          #include "SOsdMenu.h"
  81          #include "DebugMsg.h"
  82          
  83          #include "HDMI_EP907M.h"
  84          #include "BT656.h"
  85          #include "Demo.h"
  86          
  87          
  88              BYTE  DebugLevel;
  89          XDATA BYTE  MonAddress = TW88I2CAddress;  
  90          XDATA WORD  MonIndex;
  91          XDATA BYTE  MonIndexLen;
  92          XDATA DWORD MonWdata;
  93          XDATA BYTE  MonDataLen;
  94          XDATA BYTE  monstr[50];       // buffer for input string
  95          XDATA BYTE  *argv[12];
  96          XDATA BYTE  argc=0;
  97              bit   echo=1;
  98              bit   g_access=1;
  99          XDATA BYTE  SW_key;
 100          
 101          #ifdef SUPPORT_UART1
              XDATA WORD  Mon1Index;
              XDATA BYTE  Mon1IndexLen;
              XDATA DWORD Mon1Wdata;
              XDATA BYTE  Mon1DataLen;
              XDATA BYTE  mon1str[40];      // buffer for input string
              XDATA BYTE  *argv1[10];
              XDATA BYTE  argc1=0;
              #endif
 110          
 111          // function declear
 112          void Test_Checkclock2(void);
 113          void Test_Checkclock(void);
 114          void Test_McuSpeed(WORD count);
 115          
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 3   

 116          #ifdef SUPPORT_DELTA_RGB
              static void monitor_auo(void)
              {
                  if( argc==1 ) Puts( "\r\nIncorrect commad - AUO r ii or AUO w ii ddd" );
                  else {
                    
                    if( !stricmp( argv[1], "w" ) ) {
              
                      WORD val;
                      val= a2h(argv[3]);
                      Printf("\r\n SPI Write: Addr:%2x  Data:%4x", (WORD)a2h(argv[2]), val);
                      WriteAUO(a2h(argv[2]), val );
                    }
                    else if( !stricmp( argv[1], "r" ) ) {
                      WORD val;
                      val = ReadAUO(a2h(argv[2]));
                      Printf("\r\n SPI Read: Addr:%2x  Data:%4x", (WORD)a2h(argv[2]), val);
                    }
                  }
              }
              static void monitor_auo1(void)
              {
                  if( argc==1 ) Puts( "\r\nIncorrect commad - AUO2 r ii or AUO2 w ii ddd" );
                  else {
                    
                    BYTE val, addr;
                    if( !stricmp( argv[1], "w" ) ) {
              
                      addr = a2h( argv[2] );
                      val= a2h( argv[3] );
                      Printf("\r\n SPI Write: Addr:%02bx  Data:%02bx", addr, val);
                      WriteAUO2( addr, val );
                    }
                    else if( !stricmp( argv[1], "r" ) ) {
                      addr = a2h( argv[2] );
                      val = ReadAUO2( addr );
                      Printf("\r\n SPI Read: Addr:%02bx  Data:%02bx", addr, val);
                    }
                  }
              }
              #endif
 157          
 158          //==============================================
 159          // BT656 TEST routine
 160          //==============================================
 161          #if defined(SUPPORT_BT656)
 162          static void monitor_bt656(void)
 163          {
 164   1        if(argc < 2) {
 165   2          Printf("\n\rusage: BT656 {off|dec|argb|dtv|lvds|panel|loop}");
 166   2          Printf("\n\r\tBT656 off   ; off");
 167   2          Printf("\n\r\tBT656 dec   ; decoder, svideo");
 168   2          Printf("\n\r\tBT656 argb    ; component, PC");
 169   2          Printf("\n\r\tBT656 dtv   ; hdmi");
 170   2          Printf("\n\r\tBT656 lvds      ; lvds");
 171   2          Printf("\n\r\tBT656 panel     ; panel");
 172   2          Printf("\n\r\tBT656 loop      ; loopback if available");
 173   2          Printf("\n\r\tBT656 ?         ; current info");
 174   2          return;
 175   2        }
 176   1        if( !stricmp( argv[1], "?" ) ) {
 177   2          Printf("\n\rDo you need BT656 Info ?..");
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 4   

 178   2          BT656Enc_Info();
 179   2        }
 180   1        else if( !stricmp( argv[1], "off" ) )
 181   1          BT656Enc_Enable(OFF);
 182   1        else if(!stricmp( argv[1], "dec" ))
 183   1          BT656Enc_Setup(BT656ENC_SRC_DEC);
 184   1        else if (!stricmp( argv[1], "aRGB" ))
 185   1          BT656Enc_Setup(BT656ENC_SRC_ARGB);
 186   1        else if (!stricmp( argv[1], "dtv" )) 
 187   1          BT656Enc_Setup(BT656ENC_SRC_DTV);
 188   1        else if (!stricmp( argv[1], "lvds" ))
 189   1          BT656Enc_Setup(BT656ENC_SRC_LVDS);
 190   1        else if (!stricmp( argv[1], "panel" ))
 191   1          BT656Enc_Setup(BT656ENC_SRC_PANEL);
 192   1        else if (!stricmp( argv[1], "loop" ))
 193   1          ChangeBT656__MAIN(BT656ENC_SRC_AUTO);
 194   1        else {
 195   2          Printf("\n\r invalid...");
 196   2        }
 197   1      }
 198          #endif
 199          
 200          static void monitor_bt656e(void)
 201          {
 202   1        BYTE mode;
 203   1        if(argc < 2) mode = 0;
 204   1        else     mode = a2i( argv[1] );
 205   1        if(mode > 5)
 206   1          mode = 0;
 207   1        BT656_InitExtEncoder(mode);
 208   1      }
 209          
 210          static void monitor_checkandset()
 211          {
 212   1        BYTE ret;
 213   1      
 214   1        switch(InputMain) {
 215   2        case INPUT_CVBS:  
 216   2      #if defined(SUPPORT_FAST_INPUT_TOGGLE)
                  g_cvbs_checked = 0;
              #endif
 219   2        case INPUT_SVIDEO:  ret=CheckAndSetDecoderScaler(); break;
 220   2      #ifdef SUPPORT_COMPONENT
 221   2        case INPUT_COMP:  ret=CheckAndSetComponent();   break;
 222   2      #endif
 223   2      #ifdef SUPPORT_PC
 224   2        case INPUT_PC:    ret=CheckAndSetPC();      break;
 225   2      #endif
 226   2      #ifdef SUPPORT_DVI
                case INPUT_DVI:   ret=CheckAndSetDVI();     break;
              #endif
 229   2      #if defined(SUPPORT_HDMI)
 230   2        case INPUT_HDMIPC:
 231   2        case INPUT_HDMITV:
 232   2      #if defined(SUPPORT_FAST_INPUT_TOGGLE)
                          g_hdmi_checked = 0;
              #endif
 235   2                  ret= CheckAndSetHDMI();     break;
 236   2      #endif
 237   2      #ifdef SUPPORT_BT656_LOOP
 238   2        case INPUT_BT656: ret = CheckAndSetBT656Loop();   break;
 239   2      #endif
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 5   

 240   2      #ifdef SUPPORT_LVDSRX
 241   2        case INPUT_LVDS:  ret = CheckAndSetLVDSRx();  break;
 242   2      #endif
 243   2        default:      ret = CheckAndSetUnknown();   break;
 244   2        }
 245   1        if(ret==ERR_SUCCESS) {
 246   2          //success
 247   2          VInput_enableOutput(0);
 248   2          Puts("\n\r==>SUCCESS");
 249   2        } else {
 250   2          //------------------
 251   2          // NO SIGNAL
 252   2          // Prepare NoSignal Task...
 253   2          VInput_gotoFreerun(0);
 254   2          Puts("\n\r==>FAIL");
 255   2        }
 256   1      }
 257          static void monitor_checkspeed(void)
 258          {
 259   1          WORD count;
 260   1          if(argc < 2)  count = 100;
 261   1          else      count = a2h( argv[1] );
 262   1          Test_McuSpeed(count);
 263   1      }
 264          static void monitor_check(void)
 265          {
 266   1        if(argc < 2) {
 267   2          Puts("\n\r pclk sclk clock meas");
 268   2      #ifdef SUPPORT_PC
 269   2          Puts("\n\r Phase|Color");
 270   2      #endif
 271   2        }
 272   1        else if ( !stricmp( argv[1], "pclk" ))
 273   1          AdjustSSPLL_with_HTotal();
 274   1        else if ( !stricmp( argv[1], "sclk" )) {
 275   2          BYTE count;
 276   2          if(argc < 3) count = 32;
 277   2          else     count = a2i(argv[2]);
 278   2          if(count < 8)
 279   2            count = 8;
 280   2          CheckSpiClock(count);
 281   2        }
 282   1      #ifdef SUPPORT_PC
 283   1        else if ( !stricmp( argv[1], "PHASE" )|| !stricmp( argv[1], "PH" ))
 284   1          AutoTunePhase();
 285   1        else if ( !stricmp( argv[1], "COLOR" ))
 286   1          AutoTuneColor();
 287   1      #endif  
 288   1        else if ( !stricmp( argv[1], "clock" ))
 289   1          DumpClock();
 290   1        else if ( !stricmp( argv[1], "clock1" )) 
 291   1          Test_Checkclock();
 292   1        else if ( !stricmp( argv[1], "clock2" )) 
 293   1          Test_Checkclock2();
 294   1        else if ( !stricmp( argv[1], "speed" )) 
 295   1          monitor_checkspeed();
 296   1        else if ( !stricmp( argv[1], "meas" )) 
 297   1          Measure_VideoTiming();
 298   1      }
 299          
 300          
 301          
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 6   

 302          //----------------------------------------------------
 303          //make compiler happy.
 304          //Please, !!!DO NOT EXECUTE!!!
 305          //----------------------------------------------------  
 306          
 307          static void monitor_compiler(void)
 308          {
 309   1          extern void dummy_i2c_code(void);
 310   1          extern void dummy_remo_code(void);
 311   1          extern void dummy_misc_code(void) ;
 312   1          extern void dummy_argb_code(void) ;
 313   1          extern void dummy_osdspi_code(void) ;
 314   1      #ifndef SUPPORT_FOSD_MENU
 315   1          extern void Dummy_FosdMenu_func(void);
 316   1          extern void Dummy_FosdInitTable_func(void);
 317   1          extern void Dummy_FosdDispInfo_func(void);
 318   1          extern void Dummy_FosdString_func(void);
 319   1      #endif
 320   1      #ifdef SUPPORT_FOSD_MENU
                  extern BYTE CheckAndClearFOsd(void);
              #endif
 323   1      #if !defined(SUPPORT_DVI) 
 324   1          extern void Dummy_DTV_func(void);
 325   1      #endif
 326   1          WORD wTemp;
 327   1          BYTE bTemp;
 328   1      
 329   1          //add dummp code
 330   1          dummy_i2c_code();
 331   1          dummy_remo_code();
 332   1          dummy_misc_code(); 
 333   1          dummy_argb_code(); 
 334   1          dummy_osdspi_code(); 
 335   1      //#ifdef USE_SFLASH_EEPROM
 336   1      //    E3P_SetBanks(4);
 337   1      //    E3P_SetBufferSize(SPI_BUFFER_SIZE);     //128
 338   1      //    E3P_SetSize(EE_INDEX_PER_BLOCK,EE_BLOCKS);  //512 bytes 64 * 8.
 339   1      //#endif
 340   1      //    MonitorChipTest();
 341   1          wPuts("\n\rwPuts");
 342   1          delay1s(1, __LINE__);
 343   1          //----------------------
 344   1          // util.c
 345   1          //----------------------
 346   1          TWmemset((BYTE *)&wTemp, 0, 0);
 347   1          TWmemcmp(&bTemp,&bTemp,0);
 348   1      
 349   1          //----------------------
 350   1          // main.c
 351   1          //----------------------
 352   1          //----------------------
 353   1          // host.c
 354   1          //----------------------
 355   1      
 356   1          //----------------------
 357   1          // I2C
 358   1          //--------------------
 359   1      #if defined(SUPPORT_I2C_MASTER)
 360   1          CheckI2C(0x8A);
 361   1      //    WriteI2CS(0x8A, 0, &bTemp, 0);
 362   1          ReadI2CS(0x8A, 0, &bTemp, 0);
 363   1      //    WriteI2CSI16(0x78, 0, &bTemp, 0);
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 7   

 364   1      
 365   1          ReadI2CS_multi(0x78, 0x21, 0, &bTemp, 0);
 366   1          WriteI2CS_multi(0x78, 0x21, 0, &bTemp,0);
 367   1      #endif
 368   1      
 369   1          //--------------------
 370   1          // Scaler
 371   1          //--------------------
 372   1      //    ScalerSetHScaleWithRatio(0,0);  
 373   1      //    ScalerSetVScaleWithRatio(0,0);
 374   1          ScalerReadOutputWidth();
 375   1      #if defined(SUPPORT_PC) || defined(SUPPORT_DVI) || defined(SUPPORT_HDMI)
 376   1            ScalerReadXDownReg();
 377   1      #endif
 378   1      
 379   1          //--------------------
 380   1          // Setting
 381   1          //--------------------
 382   1          PclkoSetDiv(1);
 383   1          Sspll1SetFreq(108000000L, 0);
 384   1          SpiClk_overclocking(0);
 385   1          SpiClk_SetSync();
 386   1          PllClkGetSource();
 387   1          SpiClk_GetMinAsyncWaitValue(2);
 388   1          SpiClk_SetAsync(2,3, ON,ON);
 389   1          SpiClkReadSource();
 390   1          SpiClkSetSource(0);
 391   1      
 392   1          //--------------------
 393   1          // Measure
 394   1          //--------------------
 395   1          MeasSetErrTolerance(0);
 396   1          MeasEnableChangedDetection(0);
 397   1      //    MeasEnableDeMeasure(0);
 398   1      //    MeasSetThreshold(0);
 399   1          MeasGetVPeriod();
 400   1          MeasGetHTotal(1);
 401   1          MeasGetHSyncRiseToFallWidth();
 402   1          MeasGetHSyncRiseToHActiveEnd();
 403   1          MeasGetVSyncRiseToFallWidth();
 404   1          MeasGetVsyncRisePos();
 405   1          MeasGetHActive(&wTemp);
 406   1          
 407   1          MeasGetVActive(&wTemp);
 408   1      #if defined(SUPPORT_COMPONENT) || defined(SUPPORT_PC) || defined(SUPPORT_DVI) 
 409   1          MeasGetVPeriod27();
 410   1      #endif
 411   1      #if defined(SUPPORT_DVI)
                  CheckMeasure();
              #endif
 414   1          // 
 415   1          //--------------------
 416   1      #if !defined(SUPPORT_COMPONENT) && !defined(SUPPORT_PC)
              //    Dummy_ARGB_func();
              #endif
 419   1      #if !defined(SUPPORT_DVI) && !defined(SUPPORT_HDMI)
                  Dummy_DTV_func();
              #endif
 422   1      #ifndef SUPPORT_HDMI_EP907M
                  Dummy_HDMI_EP907M_func();
              #endif
 425   1      
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 8   

 426   1      
 427   1          //----------------------------
 428   1          //Trick for Bank Code Segment
 429   1          //----------------------------
 430   1      #ifndef SUPPORT_FOSD_MENU
 431   1          Dummy_FosdMenu_func();
 432   1          Dummy_FosdInitTable_func();
 433   1          Dummy_FosdDispInfo_func();
 434   1          Dummy_FosdString_func();
 435   1      #endif
 436   1      #ifdef SUPPORT_FOSD_MENU
                  CheckAndClearFOsd();
              #endif
 439   1      
 440   1      
 441   1      #if defined(SUPPORT_HDMI_EP907M)
 442   1      #else
                Dummy_DebugMsg_func();
              #endif
 445   1      
 446   1      
 447   1          //SpiFlash_wait_cmddone(0, 0,0);
 448   1          //SpiFlash_DmaCmd(0, 0, 0, 0,0);
 449   1          SpiFlash_4B_DmaCmd(0);
 450   1      
 451   1          //SpiFlash_DmaCmd_ChipReg(0, 0, 0, 0, 0);
 452   1          //SpiFlash_DmaCmd_Xmem(0, 0, 0, 0, 0, 0);
 453   1      
 454   1          SpiFlash_SectorErase(0);
 455   1          SpiFlash_BlockErase(0);
 456   1          SpiFlash_PageProgram_XMem(0,0, 0);
 457   1          SpiFlash_PageProgram_ChipReg(0, &bTemp, 0);
 458   1          SpiFlash_FastRead_ChipReg(0,0);
 459   1          SpiFlash_FastRead_Fixed_ChipReg(0,0);
 460   1          SpiFlash_Read_XMem(0, 0, 0); 
 461   1          
 462   1          SpiFlash_Read_FOsd(0, 0, 0); 
 463   1          SpiFlash_Read_SOsd(0, 0, 0);
 464   1      
 465   1      
 466   1      }
 467          
 468          
 469          #ifdef SUPPORT_DELTA_RGB
              static void monitor_delta(void)
              {
                extern  BYTE  SPI_ID;
                if( argc==1 ) DeltaRGBPanelInit();
                else {
                  
                  if( !stricmp( argv[2], "w" ) ) {
              
                    WORD val;
                    //val= Asc2Bin(argv[4])<<8 | Asc2Bin(argv[5]);
                    val= a2h(argv[4]);
                    Printf("\r\n SPI Write: Addr:%2x  Data:%4x", (WORD)a2h(argv[2]), val);
                    WriteSPI(a2h(argv[3]), val );
                  }
                  else if( !stricmp( argv[2], "r" ) ) {
                    WORD val;
                    val = ReadSPI(a2h(argv[3]));
                    Printf("\r\n SPI Read: Addr:%2x  Data:%4x", (WORD)a2h(argv[3]), val);
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 9   

                  }
                  else if( !stricmp( argv[2], "c" ) ) {
                    if ( argc == 4 ) 
                      SPI_ID = a2h(argv[3]) & 0xfc;
                    Printf("\r\n SPI Device ID:%2bx", SPI_ID);
                  }
                }
              }
              #endif
 497          
 498          static void monitor_fosd(void)
 499          {
 500   1        if(argc < 2) {
 501   2        }
 502   1      #if 0
                else if ( !stricmp( argv[1], "LUT0" )) {
                  BYTE  page, i;
              
                  // Win4 enable and OSD RAM set
                  WriteTW88(REG305, 0 );
                  WriteTW88(REG30B, 0 );
                  WriteTW88(REG30C, 0x3f );
                  WriteTW88(REG340, 0xcb );
                  WriteTW88(REG345, 0x01 );
                  WriteTW88(REG346, 0x10 );
              
              
                  // Enable OSD RAM
                  WriteTW88(REG300, 0x11 );
                  WriteTW88(REG305, 0 );
                  WriteTW88(REG306, 0 );
                  WriteTW88(REG304, 0 );
                  WriteTW88(REG307, 0 );
                  for ( i=0; i<16; i++ ) {
                    FOsdRamSetAddress((WORD)i); //WriteTW88(REG306, i );
                    WriteTW88(REG307, 0 );
                    WriteTW88(REG308, i );
                    delay1ms(10);
                  }
              
              #if 0
                  // download Font
                  WriteTW88(REG300, 0x11 );
                  WriteTW88(REG304, 0x0d );
                  WriteTW88(REG_FOSD_CHEIGHT, 0x0d /* 26/2 */ );
                  WriteTW88(REG_FOSD_MUL_CON, 0x34 );
                  WriteTW88(REG309, 0x00 );
              
                  for ( i=0; i<13; i++ ) {
                    WriteTW88(REG30A, 0x00 );
                    WriteTW88(REG30A, 0x00 );
                    WriteTW88(REG30A, 0xff );
                    WriteTW88(REG30A, 0xff );
                  }
                  for ( i=0; i<13; i++ ) {
                    WriteTW88(REG30A, 0x00 );
                    WriteTW88(REG30A, 0xff );
                    WriteTW88(REG30A, 0x00 );
                    WriteTW88(REG30A, 0xff );
                  }
                  
                  color = 0;
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 10  

                  for ( i=0; i<64; i++ ) {
                    WriteTW88(REG30c, i );
                    WriteTW88(REG30D, color>>8 );
                    WriteTW88(REG30E, color );
              
                  }
              #endif
                }
                else if ( !stricmp( argv[1], "LUTB" )) {   // blue
                  BYTE  page, i;
                  WORD  color;
              
                  color = 0;
                  for ( i=0; i<64; i++ ) {
                    WriteTW88(REG30c, i );
                    WriteTW88(REG30d, color>>8 );
                    WriteTW88(REG30e, color );
                    if ( i%2 ) color ++;
                  }
                }
                else if ( !stricmp( argv[1], "LUTC" )) {   // clear = black
                  BYTE  page, i;
                  WORD  color;
              
                  color = 0;
                  for ( i=0; i<64; i++ ) {
                    WriteTW88(REG30c, i );
                    WriteTW88(REG30d, color>>8 );
                    WriteTW88(REG30e, color );
                  }
                } 
                else if ( !stricmp( argv[1], "LUTF" )) {   // font download
                  BYTE  page, i;
              
                  // download Font
                  WriteTW88(REG300, 0x11 );
                  WriteTW88(REG304, 0x0d );
                  WriteTW88(REG305, 0x00 );
                  WriteTW88(REG309, 0x00 );
                  WriteTW88(REG30B, 0x00 );
                  WriteTW88(REG_FOSD_CHEIGHT, (0x1a >> 1) );   //?? 0x1A=26 
                  WriteTW88(REG_FOSD_MUL_CON, 0x34 );
                  WriteTW88(REG_FOSD_MADD3, 0x00 );
                  WriteTW88(REG_FOSD_MADD4, 0x00 );
              
                  for ( i=0; i<13; i++ ) {
                    WriteTW88(REG30a, 0x00 );
                    WriteTW88(REG30a, 0x00 );
                    WriteTW88(REG30a, 0xff );
                    WriteTW88(REG30a, 0xff );
                    delay1ms( 10 );
                  }
                  for ( i=0; i<13; i++ ) {
                    WriteTW88(REG30a, 0x00 );
                    WriteTW88(REG30a, 0xff );
                    WriteTW88(REG30a, 0x00 );
                    WriteTW88(REG30a, 0xff );
                    delay1ms( 10 );
                  }
                  for ( i=0; i<52; i++ ) {
                    WriteTW88(REG30a, 0x33 );
                    delay1ms( 2 );
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 11  

                  }
                }
                else if ( !stricmp( argv[1], "LUTG" )) {   // blue
                  BYTE  page, i;
                  WORD  color;
              
              
                  color = 0;
                  for ( i=0; i<64; i++ ) {
                    WriteTW88(REG30c, i );
                    WriteTW88(REG30d, color>>8 );
                    WriteTW88(REG30e, color );
                    color += 0x20;
                  }
                }
                else if ( !stricmp( argv[1], "LUTR" )) {   // red
                  BYTE  page, i;
                  WORD  color;
              
                  color = 0;
                  for ( i=0; i<64; i++ ) {
                    WriteTW88(REG30c, i );
                    WriteTW88(REG30d, color>>8 );
                    WriteTW88(REG30e, color );
                    if ( i%2 ) color += 0x800;
                  }
                }
                else if ( !stricmp( argv[1], "LUTW" )) {   // white
                  BYTE  i;
                  WORD  color;
              
                  color = 0;
                  for ( i=0; i<64; i++ ) {
                    WriteTW88(REG30c, i );
                    WriteTW88(REG30d, color>>8 );
                    WriteTW88(REG30e, color );
                    color += 0x20;
                    if ( i%2 ) color += 0x801;
                  }
                }
                else if ( !stricmp( argv[1], "RAMFONT" )) {
                    FOsdDownloadFontCode();
                }
              #endif  
 656   1        else if( !stricmp( argv[1], "testfont" ) )   {
 657   2          extern void TestInitFontRam(WORD start);
 658   2          WORD start;
 659   2          start = a2h( argv[2] );
 660   2          TestInitFontRam(start);
 661   2        } 
 662   1      }
 663          
 664          
 665          #if 0
              static void monitor_grid(void)
              {
                if( !stricmp( argv[1], "ttest" ) ) {
                  extern void TestDParkGridAction(void);
                  TestDParkGridAction();
                }
                else if( !stricmp( argv[1], "auto" ) ) {
                  extern void TestAutoDParkGridAction(BYTE positionX, BYTE positionY);
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 12  

                  BYTE positionX, positionY;
              
                  if(argc==4) {
                    positionX = a2h(argv[2]);
                    positionY = a2h(argv[3]);
                  }
                  else {
                    positionX = 22;
                    positionY = 5;
                  }
                  TestAutoDParkGridAction(positionX, positionY);
                }
                else if( !stricmp( argv[1], "step" ) ) {
                  extern void TestStepDParkGridAction(BYTE positionX, BYTE positionY);
                  BYTE positionX, positionY;
              
                  if(argc==4) {
                    positionX = a2h(argv[2]);
                    positionY = a2h(argv[3]);
                  }
                  else {
                    positionX = 22;
                    positionY = 5;
                  }
                  TestStepDParkGridAction(positionX, positionY);
                }
              
              }
              #endif
 703          
 704          
 705          static void monitor_hdmi(void)
 706          {
 707   1          //BYTE val[20];
 708   1          //BYTE cnt = 1, i;
 709   1          //if ( argc > 2 )
 710   1          //  cnt = a2h(argv[2]);
 711   1          //if ( cnt > 20 )
 712   1          //  cnt = 20;
 713   1          //ReadI2C(I2CID_EP9351, a2h(argv[1]), val, cnt);
 714   1          //for (i=0; i<cnt; i++) 
 715   1          //  Printf("\n\r%3bd %02bx", i, val[i]);
 716   1          if(argc < 2) {
 717   2            Printf(" init start avi timereg dnedid dnhdcp");
 718   2          }
 719   1      
 720   1        //init
 721   1        //info
 722   1      //  else if( !stricmp( argv[0], "HDINFO" ) ) {
 723   1      //    BYTE val[13];
 724   1      //    WORD tmp;
 725   1      //    ReadI2C(I2CID_EP9351, 0x3B, val, 13);
 726   1      //    if ( val[12] & 0x80 ) 
 727   1      //      Puts("\n\rInterlace Video Signal");
 728   1      //    else
 729   1      //      Puts("\n\rNON-Interlace Video Signal");
 730   1      //    tmp = val[1];     tmp <<= 8;    tmp += val[0];
 731   1      //    Printf("\n\rActive Pixels Per Line = %d", tmp ); 
 732   1      //    tmp = val[3];     tmp <<= 8;    tmp += val[2];
 733   1      //    Printf("\n\rHorizontal Front Porch = %d", tmp ); 
 734   1      //    tmp = val[5];     tmp <<= 8;    tmp += val[4];
 735   1      //    Printf("\n\rHorizontal Back Porch  = %d", tmp ); 
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 13  

 736   1      //    tmp = val[7];     tmp <<= 8;    tmp += val[6];
 737   1      //    Printf("\n\rHorizontal Pulse Width = %d", tmp ); 
 738   1      //    tmp = val[9];     tmp <<= 8;    tmp += val[8];
 739   1      //    Printf("\n\rActive Lines Per Frame = %d", tmp ); 
 740   1      //    Printf("\n\rVertical Front Porch   = %bd", val[10] ); 
 741   1      //    Printf("\n\rVertical Back Porch    = %bd", val[11] ); 
 742   1      //    Printf("\n\rVertical Pulse Width   = %bd", val[12]&0x7f ); 
 743   1      //  }
 744   1      }
 745          
 746          
 747          #if defined(SUPPORT_I2C_MASTER)
 748          /*
 749          TW8836 recommends to use below step to read a byte data.
 750            [S] 8A <index> [S] 8B <read data> [P]
 751          But, linux or most the other programs using below two steps.
 752            [S] 8A <index> [P]
 753            [S] 8B <read data> [P]
 754          This routine is to validate i2c_smbus_write_byte and i2c_smbus_read_byte.
 755          
 756          TW8836 has a Page, that can support 12bit index.
 757          To read the Page value, 
 758            i2c w 8a ff
 759            i2c r 8a
 760          To set the Page as 4,
 761            i2c w 8f ff 04
 762          
 763          So, to read the REG000 value(Page 0, index 0x00) that has 0x36 Device ID value,
 764          use below commands.
 765          
 766            i2c w 8a ff 00
 767            i2c w 8a 00
 768            i2c r 8a
 769          
 770          If you want to read the other index value on the same page, 
 771          you donot need to write the Page again
 772          If you want to read index 0x01 register on the same Page,
 773          use below commands.
 774            i2c w 8a 01
 775            i2c r 8a
 776          */
 777          /* BK150602 
 778          To validate some mixed combination, I used below steps.
 779          I2C ID 0x40 is a GPIO Expender chip.
 780          This routine show, it can add the other i2c command between two read steps. 
 781            i2c w 8a ff 00
 782            i2c w 8a 00
 783            i2c w 40 07 AB
 784            i2c r 8a
 785          */
 786          static void monitor_i2c(void)
 787          {
 788   1        if(argc==1) {
 789   2          Printf("\n\rI2C {check|delay|BUS|search}");
 790   2          Printf("\n\rI2C w <i2cid> <index> [<data>...]");
 791   2          Printf("\n\rI2C r <i2cid>");
 792   2          Printf("\n\rI2C rn <i2cid> <number>");
 793   2          return;
 794   2        }
 795   1        if(!stricmp(argv[1],"check")) {
 796   2          BYTE id,temp;
 797   2          if(argc < 3) {
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 14  

 798   3            Printf("\n\rI2C check devid");
 799   3            return;
 800   3          }
 801   2          id = (BYTE)a2h( argv[2] );
 802   2          temp=CheckI2C(id);
 803   2          //Printf("\n\rresult:%bx",temp);
 804   2          Puts("\n\rresult: ");
 805   2          if(temp==0) Puts("Pass");
 806   2          else        Puts("Fail");
 807   2          Printf("  I2C_delay_base:%bd", I2C_delay_base); 
 808   2        }
 809   1        else if(!stricmp(argv[1],"bus")) {
 810   2        }
 811   1        //else if(!stricmp(argv[1],"delay")) {
 812   1        //  BYTE temp;
 813   1        //  if(argc < 4) {
 814   1        //    Printf("\n\ri2c delay start:%d",i2c_delay_start);
 815   1        //    Printf("\n\r          restart:%d",i2c_delay_restart);
 816   1        //    Printf("\n\r          datasetup:%d",i2c_delay_datasetup);
 817   1        //    Printf("\n\r          clockhigh:%d",i2c_delay_clockhigh);
 818   1        //    Printf("\n\r          datahold:%d",i2c_delay_datahold);
 819   1        //    return;
 820   1        //  }
 821   1        //  temp = (BYTE)a2h( argv[3] );
 822   1        //  if(!stricmp(argv[2],"start"))
 823   1        //    i2c_delay_start = temp;
 824   1        //  else if(!stricmp(argv[2],"restart"))
 825   1        //    i2c_delay_restart = temp;
 826   1        //  else if(!stricmp(argv[2],"datasetup"))
 827   1        //    i2c_delay_datasetup = temp;
 828   1        //  else if(!stricmp(argv[2],"clockhigh"))
 829   1        //    i2c_delay_clockhigh = temp;
 830   1        //  else if(!stricmp(argv[2],"datahold"))
 831   1        //    i2c_delay_datahold = temp;
 832   1        //  else 
 833   1        //    Printf("\n\rubkbown");
 834   1        //}
 835   1        else if(!stricmp(argv[1],"w")) { /* wirte command */
 836   2          BYTE i2cid,value;
 837   2          BYTE cnt,i;
 838   2          if(argc < 4) {
 839   3            Printf("\n\rI2C w devid index(or data)...");
 840   3            return;
 841   3          }
 842   2          i2cid = (BYTE)a2h( argv[2] );
 843   2          value = (BYTE)a2h( argv[3] );  /* index or data */
 844   2          cnt = argc - 4;
 845   2          for(i=0;i<cnt;i++)
 846   2                  SPI_Buffer[i]=(BYTE)a2h( argv[i+4] );
 847   2              WriteI2CS(i2cid, value, SPI_Buffer, cnt);
 848   2        }
 849   1        else if(!stricmp(argv[1],"r")) { /* read command */
 850   2          BYTE i2cid,value;
 851   2          if(argc < 3) {
 852   3            Printf("\n\rI2C r devid");
 853   3            return;
 854   3          }
 855   2          i2cid = (BYTE)a2h( argv[2] );
 856   2              value=ReadI2C_Only(i2cid);
 857   2          Printf("=>%02bx", value);
 858   2        }
 859   1        else if(!stricmp(argv[1],"rn")) { /* sequecial read command */
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 15  

 860   2          BYTE i2cid; //,value;
 861   2          WORD i,n;
 862   2      
 863   2          if(argc < 4) {
 864   3            Printf("\n\rI2C rn devid hex_number");
 865   3            return;
 866   3          }
 867   2          i2cid = (BYTE)a2h( argv[2] );
 868   2          n = (BYTE)a2h( argv[3] );
 869   2              /* we only have 128byte. If you use bigger, it will be crashed */
 870   2              /* I just want to show you how it works */
 871   2              ReadI2CS_Only(i2cid, SPI_Buffer, n);
 872   2              for(i=0; i < n; i++) {
 873   3            Printf(" %02bx", SPI_Buffer);
 874   3              }
 875   2        }
 876   1        else if(!stricmp(argv[1],"search")) {
 877   2          BYTE id,temp;
 878   2          for(id=2; id != 0x00; id+=2) {  //0x100 means 0x00 on BYTE.
 879   3            temp=CheckI2C(id);
 880   3            if(temp==0)
 881   3              Printf("\n\rFind device at %02bx",id);
 882   3          }
 883   2        }  
 884   1      }
 885          #endif
 886          
 887          #if 0
              void i2cspi_readstatus(WORD wait)
              {
                volatile BYTE vdata;
                BYTE i,j;
              
                WriteI2C_8A(0xFF,0x04);
                WriteI2C_8A(I2C8REG4F3, 0x40 | 0x01); //cmd len:1 + target:Reg4D0
              
                WriteI2C_8A(I2C8REG4F6, 0x04);  //Buff 0x4D0
                WriteI2C_8A(I2C8REG4F7, 0xD0);  
              
                WriteI2C_8A(I2C8REG4F5, 0);   //length high
                WriteI2C_8A(I2C8REG4F8, 0);   //length middle
                WriteI2C_8A(I2C8REG4F9, 1);   //length low
                WriteI2C_8A(I2C8REG4FA, SPICMD_RDSR);
                for(i=0; i<100;i++) {
                  WriteI2C_8A(I2C8REG4F4, 0x01 | SPI_CMD_OPT_NONE);
                  for(j=0; j<100;j++) {
                    vdata = ReadI2C_8A(I2C8REG4F4) & 0x07;
                    if((vdata & 0x01)==0) {
                      /* */
                      Printf("==>Success i:%bd,j:%bd ",i,j);
                      /* read 4D0 */
                      vdata = ReadI2C_8A(0xD0); 
              
                      if((vdata & 0x01)==0) {
                        Printf("Done\n");
                        return;
                      }
                      else {
                        Printf("Busy\n");
                        break;
                      }
                    }
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 16  

                  }
                  if(wait)
                    delay1ms(wait);
                }
                Puts("Fail\n");
                return; 
              }
              #endif 
 930          
 931          
 932          
 933          
 934          /*
 935          To download a image from CPU to Spiflash on TW8836 EVB, follow up below steps.
 936          1. erase spiflash
 937            use sector erase or block erase
 938            for example: i2cspi se 60000
 939          2. send data from CPU to XMEM(max 2048Bytes)
 940             CPU have to generate CRC to compare it later.
 941            I generate some pattern to prepare the data.
 942            for example: i2cspi xmem 0F 0 100
 943          3. write data from xmem to spiflash
 944            for example: i2cspi xw 60000 100
 945          4. generate CRC with a fixed read command, and then read CRC value.
 946            for example: i2cspi crc 60000 100
 947          5. compare CRC of wrote data with this read back CRC.
 948            if these are same, the programmed data should be correct.
 949          
 950          To validate these i2cspi command, I am using two TW8836B EVB boards.
 951          Slave board does not have I2C Master.
 952          Master board using EXT_MCU_SCLK and EXT_MCU_SDAT to download its firmware.
 953          So, remove R26,R29, and install R27,R30 on TW8836EVB REV1.1.
 954          And, connect TW-Dongle's I2C at J21 on Master board.
 955          Connect Slave's I2C at J20 to Master's I2C at J20.
 956          Turn on Slave first, and then turn on Master.
 957          */
 958          static void monitor_i2cspi(void)
 959          {
 960   1        BYTE bTemp;
 961   1      
 962   1        if(argc==1) {
 963   2          Puts("\n\ri2cspi uses EXT_MCU_SCLK(SDAT) for master, SCLK(SDAT) for slave");
 964   2          Puts("\n\r");
 965   2          Puts("\n\ri2cspi mcu [halt|rerun]");
 966   2          Puts("\n\ri2cspi xmem [on|off]");
 967   2          Puts("\n\ri2cspi xmem d start length");
 968   2          Puts("\n\ri2cspi xmem 00 start length");
 969   2          Puts("\n\ri2cspi xmem 0F start length");
 970   2          Puts("\n\ri2cspi xmem AB start length");
 971   2          Puts("\n\ri2cspi xr spiaddr length");
 972   2          Puts("\n\ri2cspi xw spiaddr length");
 973   2          Puts("\n\ri2cspi crc [spiaddr length]");
 974   2          Puts("\n\ri2cspi se spiaddr");
 975   2          Puts("\n\ri2cspi upload src_at_master dest_at_slave size");
 976   2          Puts("\n\r   example: i2cspi upload 60000 0 107E1");
 977   2      
 978   2          return;
 979   2        }
 980   1        if(!stricmp(argv[1],"mcu")) {
 981   2          if(argc <= 2) {
 982   3            WriteI2C_8A(0xFF,0x04);
 983   3            bTemp = ReadI2C_8A(0xC4);
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 17  

 984   3            if((bTemp & 0x80)==0) Puts("=>Halted");
 985   3            else                  Puts("=>Runing");
 986   3          }
 987   2          else if(!stricmp(argv[2],"halt")) {
 988   3            BYTE bTemp;
 989   3            WORD i;
 990   3            WriteI2C_8A(0xFF,0x04);
 991   3            WriteI2C_8A(0xED,0x55);
 992   3            WriteI2C_8A(0xED,0xAA);
 993   3            WriteI2C_8A(0xEC,0x00);
 994   3            //delay1ms(500);
 995   3            //delay1ms(500);
 996   3            for(i=0; i<100; i++) {
 997   4              bTemp = ReadI2C_8A(0xC4);
 998   4              if((bTemp & 0x80)==0) 
 999   4                Printf("=>Success @%d",i);
1000   4            }
1001   3          }
1002   2          else if(!stricmp(argv[2],"rerun")) {
1003   3            BYTE bTemp;
1004   3            WORD i;
1005   3            WriteI2C_8A(0xFF,0x04);
1006   3            WriteI2C_8A(0xED,0x55);
1007   3            WriteI2C_8A(0xED,0xAA);
1008   3            WriteI2C_8A(0xEC,0x01);
1009   3            for(i=0; i<100;i++) {
1010   4              bTemp = ReadI2C_8A(0xC4);
1011   4              if((bTemp & 0x80)) 
1012   4                Printf("=>Success @%d",i);
1013   4            }
1014   3          }
1015   2          else {
1016   3            Printf("\n\runknown [%s] command",argv[2]);
1017   3          }
1018   2        }
1019   1        else if(!stricmp(argv[1],"xmem")) {
1020   2          if(argc <= 2) {
1021   3            WriteI2C_8A(0xFF,0x04);
1022   3            bTemp = ReadI2C_8A(0xC2);
1023   3            if((bTemp & 0x02)==0)   Puts("=>Disabled");
1024   3            else          Puts("=>Enabled");
1025   3          }
1026   2          else if(!stricmp(argv[2],"on")) {
1027   3            WriteI2C_8A(0xFF,0x04);
1028   3            bTemp = ReadI2C_8A(0xC2);
1029   3            WriteI2C_8A(0xC2, bTemp | 0x01);
1030   3          }
1031   2          else if(!stricmp(argv[2],"off")) {
1032   3            WriteI2C_8A(0xFF,0x04);
1033   3            bTemp = ReadI2C_8A(0xC2);
1034   3            WriteI2C_8A(0xC2, bTemp & ~0x01);
1035   3          }
1036   2          else if(!stricmp(argv[2],"d")) {
1037   3            WORD wTemp,i;
1038   3            if(argc <=4 ) {
1039   4              Puts("\n\ri2cspi xmem d command needs start and length");
1040   4              return;
1041   4            }
1042   3            WriteI2C_8A(0xFF,0x04);
1043   3            bTemp = ReadI2C_8A(0xC2);
1044   3            if((bTemp & 0x02)==0) {
1045   4              WriteI2C_8A(0xC2, bTemp | 0x01);
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 18  

1046   4              for(i=0; i < 100; i++) {
1047   5                bTemp = ReadI2C_8A(0xC2);  //need volatile
1048   5                if(bTemp & 0x02)
1049   5                  break;
1050   5                delay1ms(10);
1051   5              }
1052   4              if(i==100) {
1053   5                Puts(" !!status error!!");
1054   5                return;
1055   5              }
1056   4            }
1057   3      
1058   3            wTemp = a2h(argv[3]); //start 12bit
1059   3            WriteI2C_8A(0xFF,0x04);
1060   3            WriteI2C_8A(0xDB,(BYTE)(wTemp>>8));
1061   3            WriteI2C_8A(0xDC,(BYTE)wTemp);
1062   3            Printf("\n\rdump start:0x%x",wTemp);
1063   3            wTemp = a2h(argv[4]); //length Max 2KByte
1064   3            Printf(" length:0x%x",wTemp);
1065   3            for(i=0; i<wTemp;i++) {
1066   4              if((i % 16)==0) Printf("\n\r%03X:",i);
1067   4              bTemp=ReadI2C_8A(0xDD);
1068   4              Printf("%02bx ",bTemp);
1069   4            }
1070   3            //disable XMEM access
1071   3            WriteI2C_8A(0xFF,0x04);
1072   3            bTemp = ReadI2C_8A(0xC2);
1073   3            WriteI2C_8A(0xC2, bTemp & ~0x01);
1074   3          }
1075   2          else if(!stricmp(argv[2],"00")
1076   2             || !stricmp(argv[2],"0F")
1077   2               || !stricmp(argv[2],"FF")) {
1078   3            WORD wTemp,i;
1079   3            BYTE pattern;
1080   3            if(argc <=4 ) {
1081   4              Puts("\n\ri2cspi xmem [00|FF] command needs start and length");
1082   4              return;
1083   4            }
1084   3            pattern = a2h(argv[2]);
1085   3      
1086   3            WriteI2C_8A(0xFF,0x04);
1087   3            bTemp = ReadI2C_8A(0xC2);
1088   3            if((bTemp & 0x02)==0) {
1089   4              WriteI2C_8A(0xC2, bTemp | 0x01);
1090   4              for(i=0; i < 100; i++) {
1091   5                bTemp = ReadI2C_8A(0xC2);  //need volatile
1092   5                if(bTemp & 0x02)
1093   5                  break;
1094   5                delay1ms(10);
1095   5              }
1096   4              if(i==100) {
1097   5                Puts(" !!status error!!");
1098   5                return;
1099   5              }
1100   4            }
1101   3      
1102   3            wTemp = a2h(argv[3]); //start 12bit
1103   3            WriteI2C_8A(0xFF,0x04);
1104   3            WriteI2C_8A(0xDB,(BYTE)(wTemp>>8));
1105   3            WriteI2C_8A(0xDC,(BYTE)wTemp);
1106   3            Printf("\n\rset start:0x%x",wTemp);
1107   3            wTemp = a2h(argv[4]); //length Max 2KByte
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 19  

1108   3            Printf(" length:0x%x",wTemp);
1109   3            if(pattern==0x0F) {
1110   4              Printf(" pattern:increase");
1111   4              for(i=0; i<wTemp;i++) {
1112   5                WriteI2C_8A(0xDD,(BYTE)i);
1113   5              }
1114   4            }
1115   3            else {
1116   4              Printf(" pattern:%02bx",pattern);
1117   4              for(i=0; i<wTemp;i++) {
1118   5                WriteI2C_8A(0xDD,pattern);
1119   5              }
1120   4            }
1121   3            //disable XMEM access
1122   3            WriteI2C_8A(0xFF,0x04);
1123   3            bTemp = ReadI2C_8A(0xC2);
1124   3            WriteI2C_8A(0xC2, bTemp & ~0x01);
1125   3          }
1126   2        }
1127   1        else if(!stricmp(argv[1],"xr")) {
1128   2          DWORD spiaddr;
1129   2          WORD length;
1130   2          BYTE ret;
1131   2          //BYTE i;
1132   2      
1133   2          if(argc <=3 ) {
1134   3            Puts("\n\ri2cspi xr command needs start and length");
1135   3            return;
1136   3          }
1137   2          //check xmem access
1138   2          WriteI2C_8A(0xFF,0x04);
1139   2          bTemp = ReadI2C_8A(0xC2);
1140   2          if(bTemp & 0x02)
1141   2            Puts("\nPlease turn off Xmem access.");
1142   2      
1143   2          spiaddr = a2h(argv[2]);
1144   2          length = a2h(argv[3]);
1145   2          if(length > 2048) {
1146   3            Puts(" max length is 0x800");
1147   3            length = 2048;
1148   3          }
1149   2          //use single read
1150   2          Printf("\nREAD %06lx %x",spiaddr, length);
1151   2          WriteI2C_8A(0xFF,0x04);
1152   2          WriteI2C_8A(I2C8REG4F3, 0xC4);  //XMEM,Increase,len:1+3
1153   2          WriteI2C_8A(I2C8REG4F6, 0x00);  //XMEM start 0
1154   2          WriteI2C_8A(I2C8REG4F7, 0x00);
1155   2          WriteI2C_8A(I2C8REG4F5, (BYTE)(length>>16));
1156   2          WriteI2C_8A(I2C8REG4F8, (BYTE)(length>>8));
1157   2          WriteI2C_8A(I2C8REG4F9, (BYTE)length);
1158   2          WriteI2C_8A(I2C8REG4FA, SPICMD_READ_SLOW);
1159   2          WriteI2C_8A(I2C8REG4FB, (BYTE)(spiaddr>>16));
1160   2          WriteI2C_8A(I2C8REG4FC, (BYTE)(spiaddr>>8));
1161   2          WriteI2C_8A(I2C8REG4FD, (BYTE)spiaddr);
1162   2          WriteI2C_8A(I2C8REG4F4, 0x01 | SPI_CMD_OPT_BUSY);
1163   2          ret=I2cSpiFlashDmaWait(200);
1164   2          if(ret) Puts("=>Fail");
1165   2          else    Puts("=>Done");
1166   2      
1167   2          Printf("\nTo check, use i2cspi xmem d 0 %x",length);
1168   2        }
1169   1        else if(!stricmp(argv[1],"xw")) {
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 20  

1170   2          /*
1171   2            program data from xmem to spiflash
1172   2            before you execute a program, the spiflash must be erased.
1173   2            example: program xmem to spiflash 0x60000 length 0x100
1174   2              >i2cspi xw 60000 100              
1175   2          */
1176   2          DWORD spiaddr;
1177   2          WORD length;
1178   2          BYTE ret;
1179   2      
1180   2          if(argc <=3 ) {
1181   3            Puts("\n\ri2cspi xw command needs start and length");
1182   3            return;
1183   3          }
1184   2          //check xmem access
1185   2          WriteI2C_8A(0xFF,0x04);
1186   2          bTemp = ReadI2C_8A(0xC2);
1187   2          if(bTemp & 0x02)
1188   2            Puts("\nPlease turn off Xmem access.");
1189   2      
1190   2          spiaddr = a2h(argv[2]);
1191   2          length = a2h(argv[3]);
1192   2          if(length > 2048) {
1193   3            Puts(" max length is 0x800");
1194   3            length = 2048;
1195   3          }
1196   2          //Do write_enable
1197   2          WriteI2C_8A(0xFF,0x04);
1198   2          WriteI2C_8A(I2C8REG4F3, 0x01);  //len:1
1199   2          WriteI2C_8A(I2C8REG4F5, 0); //length high
1200   2          WriteI2C_8A(I2C8REG4F8, 0); //length middle
1201   2          WriteI2C_8A(I2C8REG4F9, 0); //length low
1202   2          WriteI2C_8A(I2C8REG4FA, SPICMD_WREN);
1203   2          WriteI2C_8A(I2C8REG4F4, 0x01 | SPI_CMD_OPT_NONE); 
1204   2          ret=I2cSpiFlashDmaWait(200);
1205   2          if(ret) {
1206   3            Puts("\nWREN fail");
1207   3            return;
1208   3          }
1209   2          //Write uses PP
1210   2          Printf("\nPP %06lx %x",spiaddr, length);
1211   2          WriteI2C_8A(0xFF,0x04);
1212   2          WriteI2C_8A(I2C8REG4F3, 0xC4);  //XMEM,Increase,len:1+3
1213   2          WriteI2C_8A(I2C8REG4F6, 0x00);  //XMEM start 0
1214   2          WriteI2C_8A(I2C8REG4F7, 0x00);
1215   2          WriteI2C_8A(I2C8REG4F5, (BYTE)(length>>16));
1216   2          WriteI2C_8A(I2C8REG4F8, (BYTE)(length>>8));
1217   2          WriteI2C_8A(I2C8REG4F9, (BYTE)length);
1218   2          WriteI2C_8A(I2C8REG4FA, SPICMD_PP);
1219   2          WriteI2C_8A(I2C8REG4FB, (BYTE)(spiaddr>>16));
1220   2          WriteI2C_8A(I2C8REG4FC, (BYTE)(spiaddr>>8));
1221   2          WriteI2C_8A(I2C8REG4FD, (BYTE)spiaddr);
1222   2          WriteI2C_8A(I2C8REG4F4, 0x01 | SPI_CMD_OPT_WRITE_BUSY);
1223   2          ret=I2cSpiFlashDmaWait(300);
1224   2          if(ret) Puts("=>Fail");
1225   2          else    Puts("=>Done");
1226   2      
1227   2        }
1228   1        else if(!stricmp(argv[1],"crc")) {
1229   2          /*  example:
1230   2            read current CRC register:
1231   2              >i2cspi crc
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 21  

1232   2            read CRC from spiaddr 0x60000 length:0x100
1233   2              >i2cspi crc 60000 100 
1234   2          */
1235   2          DWORD start,length;
1236   2          BYTE i, loop;
1237   2          BYTE ret;
1238   2          if(argc <= 3) {
1239   3            //read current value
1240   3            WriteI2C_8A(0xFF,0x04);
1241   3            Puts("\n\rCRC:");
1242   3            bTemp = ReadI2C_8A(0xEE);
1243   3            Printf("%02bx",bTemp);
1244   3            ret = ReadI2C_8A(0xEF);
1245   3            Printf("%02bx",ret);
1246   3            return;
1247   3          }
1248   2          start = a2h(argv[2]);
1249   2          length = a2h(argv[3]);
1250   2          Printf("\n\rCRC %06lx %lx ",start,length);
1251   2          WriteI2C_8A(0xFF,0x04);
1252   2          WriteI2C_8A(I2C8REG4F3, 0x64);  //Reg,Fix,len:1+3
1253   2          WriteI2C_8A(I2C8REG4F6, 0x04);  //Reg Buffer
1254   2          WriteI2C_8A(I2C8REG4F7, 0xD0);
1255   2          WriteI2C_8A(I2C8REG4F5, (BYTE)(length>>16));
1256   2          WriteI2C_8A(I2C8REG4F8, (BYTE)(length>>8));
1257   2          WriteI2C_8A(I2C8REG4F9, (BYTE)length);
1258   2          WriteI2C_8A(I2C8REG4FA, SPICMD_READ_SLOW);
1259   2          WriteI2C_8A(I2C8REG4FB, (BYTE)(start>>16));
1260   2          WriteI2C_8A(I2C8REG4FC, (BYTE)(start>>8));
1261   2          WriteI2C_8A(I2C8REG4FD, (BYTE)start);
1262   2          WriteI2C_8A(I2C8REG4F4, 0x01 | SPI_CMD_OPT_BUSY);
1263   2      
1264   2          ret=0;
1265   2          loop = (BYTE)(length>>12);/* max 1MByte */  
1266   2          loop++;
1267   2          for(i=0; i < loop; i++) {
1268   3            ret=I2cSpiFlashDmaWait(200);
1269   3            if(ret==0)
1270   3              break;
1271   3          }
1272   2          if(ret) {
1273   3            Puts("=>Fail");
1274   3            return;
1275   3          }
1276   2          //ret=I2cSpiFlashDmaWait(200);
1277   2          //if(ret) {
1278   2          //  Puts("=>Fail");
1279   2          //  return;
1280   2          //}
1281   2      
1282   2          //Read CRC value
1283   2          WriteI2C_8A(0xFF,0x04);
1284   2          Puts("\n\rCRC:");
1285   2          bTemp = ReadI2C_8A(0xEE);
1286   2          Printf("%02bx",bTemp);
1287   2          ret = ReadI2C_8A(0xEF);
1288   2          Printf("%02bx",ret);
1289   2          return;
1290   2        }
1291   1        else if(!stricmp(argv[1],"se")) {
1292   2          DWORD spiaddr;
1293   2      
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 22  

1294   2          if(argc <=2 ) {
1295   3            Puts("\n\ri2cspi se command needs start_address");
1296   3            return;
1297   3          }
1298   2          //check xmem access
1299   2          WriteI2C_8A(0xFF,0x04);
1300   2          bTemp = ReadI2C_8A(0xC2);
1301   2          if(bTemp & 0x02) {
1302   3            Puts("\nPlease turn off Xmem access.");
1303   3            return; 
1304   3          }
1305   2      
1306   2          spiaddr = a2h(argv[2]);
1307   2          Printf("\nSE %06lx", spiaddr); 
1308   2      
1309   2          I2CSPI_sector_erase(spiaddr);
1310   2        }
1311   1        else if(!stricmp(argv[1],"bese")) {
1312   2          /*
1313   2            customer complains WriteEnable can not clear REG4F4[0] between BE and SE.
1314   2          */
1315   2          BYTE ret;
1316   2          DWORD spiaddr;
1317   2          //DWORD UsedTime;
1318   2      
1319   2          if(argc <=2 ) {
1320   3            Puts("\n\ri2cspi be/se command needs start_address");
1321   3            return;
1322   3          }
1323   2          
1324   2      
1325   2          //check xmem access
1326   2          WriteI2C_8A(0xFF,0x04);
1327   2          bTemp = ReadI2C_8A(0xC2);
1328   2          if(bTemp & 0x02)
1329   2            Puts("\nPlease turn off Xmem access.");
1330   2      
1331   2          spiaddr = a2h(argv[2]);
1332   2          Printf("\nBE:%06lx SE:%06lx", spiaddr, spiaddr+0x10000); 
1333   2      
1334   2          //Do write_enable
1335   2          WriteI2C_8A(0xFF,0x04);
1336   2          WriteI2C_8A(I2C8REG4F3, (DMA_DEST_CHIPREG << 6) +1);  //len:1
1337   2          WriteI2C_8A(I2C8REG4F5, 0); //length high
1338   2          WriteI2C_8A(I2C8REG4F8, 0); //length middle
1339   2          WriteI2C_8A(I2C8REG4F9, 0); //length low
1340   2          WriteI2C_8A(I2C8REG4FA, SPICMD_WREN);
1341   2          WriteI2C_8A(I2C8REG4F4, 0x01 | SPI_CMD_OPT_NONE); 
1342   2          ret=I2cSpiFlashDmaWait(2); //20ms
1343   2          if(ret) {
1344   3            Puts("\nWREN fail before BE");
1345   3            return;
1346   3          }
1347   2          //BE
1348   2          //Printf("\nBE %06lx %x",spiaddr);
1349   2          WriteI2C_8A(0xFF,0x04);
1350   2          WriteI2C_8A(I2C8REG4F3, (DMA_DEST_CHIPREG << 6) + 1+3); //Reg,Increase,len:1+3
1351   2          WriteI2C_8A(I2C8REG4F6, 0x04);  //Reg start 0
1352   2          WriteI2C_8A(I2C8REG4F7, 0xD0);
1353   2          WriteI2C_8A(I2C8REG4F5, 0); //length high
1354   2          WriteI2C_8A(I2C8REG4F8, 0); //length middle
1355   2          WriteI2C_8A(I2C8REG4F9, 0); //length low
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 23  

1356   2          WriteI2C_8A(I2C8REG4FA, SPICMD_BE);
1357   2          WriteI2C_8A(I2C8REG4FB, (BYTE)(spiaddr>>16));
1358   2          WriteI2C_8A(I2C8REG4FC, (BYTE)(spiaddr>>8));
1359   2          WriteI2C_8A(I2C8REG4FD, (BYTE)spiaddr);
1360   2      
1361   2      //    SFRB_ET0 = 0;
1362   2      //    UsedTime = SystemClock;
1363   2      //    SFRB_ET0 = 1;
1364   2      
1365   2      
1366   2          //check how long it take.
1367   2          WriteI2C_8A(I2C8REG4F4, 0x01 | SPI_CMD_OPT_WRITE_BUSY);
1368   2          ret = I2cSpiFlashDmaWait_loop(SPI_CMD_OPT_WRITE_BUSY, 200);
1369   2          if(ret==200) {
1370   3            Puts("\nBE fail");
1371   3            return;
1372   3          }
1373   2          else {
1374   3            Printf("\nBE success at %bd", ret);
1375   3            bTemp = ReadI2C_8A(I2C8REG4F4);
1376   3            Printf(" R4F4:%bx", bTemp);
1377   3          }
1378   2      
1379   2      //    SFRB_ET0 = 0;
1380   2      //    UsedTime = SystemClock - UsedTime;
1381   2      //    SFRB_ET0 = 1;
1382   2      //    Printf("\n\rUsedTime:%ld.%ldsec", UsedTime/100, UsedTime%100 );
1383   2      
1384   2      
1385   2          WriteI2C_8A(I2C8REG4F3, (DMA_DEST_CHIPREG << 6) + 1); //Reg,Increase,len:1+3
1386   2          WriteI2C_8A(I2C8REG4FA, SPICMD_RDSR);
1387   2          WriteI2C_8A(I2C8REG4F9, 1); //length low
1388   2          WriteI2C_8A(I2C8REG4F4, 0x01 | SPI_CMD_OPT_NONE);
1389   2          ret = I2cSpiFlashDmaWait_loop(SPI_CMD_OPT_NONE, 200);
1390   2          if(ret==200) {
1391   3            Puts("  RDSR =>Fail");
1392   3          }
1393   2          else {
1394   3            Printf("\nRDSR success at %bd", ret);
1395   3            bTemp = ReadI2C_8A(I2C8REG4F4);
1396   3            Printf(" R4F4:%bx", bTemp);
1397   3          }
1398   2          bTemp = ReadI2C_8A(0xD0);
1399   2          Printf("\nRDSR:%bx",bTemp);
1400   2      
1401   2      
1402   2          spiaddr += 0x10000;
1403   2          //Printf("\nSE %06lx", spiaddr); 
1404   2      
1405   2          //Do write_enable
1406   2          WriteI2C_8A(0xFF,0x04);
1407   2          WriteI2C_8A(I2C8REG4F3, (DMA_DEST_CHIPREG << 6) +1);  //len:1
1408   2          WriteI2C_8A(I2C8REG4F5, 0); //length high
1409   2          WriteI2C_8A(I2C8REG4F8, 0); //length middle
1410   2          WriteI2C_8A(I2C8REG4F9, 0); //length low
1411   2          WriteI2C_8A(I2C8REG4FA, SPICMD_WREN);
1412   2          WriteI2C_8A(I2C8REG4F4, 0x01 | SPI_CMD_OPT_NONE); 
1413   2      
1414   2          //check how long it take.
1415   2          ret = I2cSpiFlashDmaWait_loop(SPI_CMD_OPT_NONE, 200);
1416   2          if(ret==200) {
1417   3            Puts("\nWREN fail before SE");
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 24  

1418   3            return;
1419   3          }
1420   2          else {
1421   3            Printf("\nSE WREN success at %bd", ret);
1422   3            bTemp = ReadI2C_8A(I2C8REG4F4);
1423   3            Printf(" R4F4:%bx", bTemp);
1424   3          }
1425   2      
1426   2          //SE
1427   2          Printf("\nSE %06lx %x",spiaddr);
1428   2          WriteI2C_8A(0xFF,0x04);
1429   2          WriteI2C_8A(I2C8REG4F3, (DMA_DEST_CHIPREG << 6) +4);  //Reg,Increase,len:1+3
1430   2          WriteI2C_8A(I2C8REG4F6, 0x04);  //Reg start 0
1431   2          WriteI2C_8A(I2C8REG4F7, 0xD0);
1432   2          WriteI2C_8A(I2C8REG4F5, 0); //length high
1433   2          WriteI2C_8A(I2C8REG4F8, 0); //length middle
1434   2          WriteI2C_8A(I2C8REG4F9, 0); //length low
1435   2          WriteI2C_8A(I2C8REG4FA, SPICMD_SE);
1436   2          WriteI2C_8A(I2C8REG4FB, (BYTE)(spiaddr>>16));
1437   2          WriteI2C_8A(I2C8REG4FC, (BYTE)(spiaddr>>8));
1438   2          WriteI2C_8A(I2C8REG4FD, (BYTE)spiaddr);
1439   2          WriteI2C_8A(I2C8REG4F4, 0x01 | SPI_CMD_OPT_WRITE_BUSY);
1440   2          ret=I2cSpiFlashDmaWait(200);
1441   2          if(ret) Puts("  SE =>Fail");
1442   2          else    Puts("  BE_SE=>Done");
1443   2        }
1444   1        else if(!stricmp(argv[1],"cese")) {
1445   2          /*
1446   2          harman complains WriteEnable can not clear REG4F4[0] between BE and SE.
1447   2          */
1448   2          BYTE ret;
1449   2          DWORD spiaddr;
1450   2          DWORD UsedTime;
1451   2      
1452   2          if(argc <=2 ) {
1453   3            Puts("\n\ri2cspi ce/se command needs start_address");
1454   3            return;
1455   3          }
1456   2          
1457   2      
1458   2          //check xmem access
1459   2          WriteI2C_8A(0xFF,0x04);
1460   2          bTemp = ReadI2C_8A(0xC2);
1461   2          if(bTemp & 0x02)
1462   2            Puts("\nPlease turn off Xmem access.");
1463   2      
1464   2          spiaddr = a2h(argv[2]);
1465   2          Printf("\nCE: SE:%06lx", spiaddr); 
1466   2      
1467   2          //Do write_enable
1468   2          WriteI2C_8A(0xFF,0x04);
1469   2          WriteI2C_8A(I2C8REG4F3, (DMA_DEST_CHIPREG << 6) +1);  //len:1
1470   2          WriteI2C_8A(I2C8REG4F5, 0); //length high
1471   2          WriteI2C_8A(I2C8REG4F8, 0); //length middle
1472   2          WriteI2C_8A(I2C8REG4F9, 0); //length low
1473   2          WriteI2C_8A(I2C8REG4FA, SPICMD_WREN);
1474   2          WriteI2C_8A(I2C8REG4F4, 0x01 | SPI_CMD_OPT_NONE); 
1475   2          ret=I2cSpiFlashDmaWait(2); //20ms
1476   2          if(ret) {
1477   3            Puts("\nWREN fail before BE");
1478   3            return;
1479   3          }
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 25  

1480   2          //BE
1481   2          //Printf("\nBE %06lx %x",spiaddr);
1482   2          WriteI2C_8A(0xFF,0x04);
1483   2      
1484   2      
1485   2      
1486   2          WriteI2C_8A(I2C8REG4F3, (DMA_DEST_CHIPREG << 6) + 1); //Reg,Increase,len:1+3
1487   2          WriteI2C_8A(I2C8REG4F6, 0x04);  //Reg start 0
1488   2          WriteI2C_8A(I2C8REG4F7, 0xD0);
1489   2          WriteI2C_8A(I2C8REG4F5, 0); //length high
1490   2          WriteI2C_8A(I2C8REG4F8, 0); //length middle
1491   2          WriteI2C_8A(I2C8REG4F9, 0); //length low
1492   2          WriteI2C_8A(I2C8REG4FA, SPICMD_CE);
1493   2          //WriteI2C_8A(I2C8REG4FB, (BYTE)(spiaddr>>16));
1494   2          //WriteI2C_8A(I2C8REG4FC, (BYTE)(spiaddr>>8));
1495   2          //WriteI2C_8A(I2C8REG4FD, (BYTE)spiaddr);
1496   2      
1497   2          SFRB_ET0 = 0;
1498   2          UsedTime = SystemClock;
1499   2          SFRB_ET0 = 1;
1500   2      
1501   2      
1502   2          //check how long it take.
1503   2          WriteI2C_8A(I2C8REG4F4, 0x01 | SPI_CMD_OPT_WRITE_BUSY_AUTO);
1504   2      
1505   2          ret = I2cSpiFlashDmaWait_loop(SPI_CMD_OPT_WRITE_BUSY_AUTO, 200);
1506   2          if(ret==200) {
1507   3            Puts("\nBE fail");
1508   3            return;
1509   3          }
1510   2          else {
1511   3            Printf("\nBE success at %bd", ret);
1512   3            bTemp = ReadI2C_8A(I2C8REG4F4);
1513   3            Printf(" R4F4:%bx", bTemp);
1514   3          }
1515   2          SFRB_ET0 = 0;
1516   2          UsedTime = SystemClock - UsedTime;
1517   2          SFRB_ET0 = 1;
1518   2          Printf("\n\rUsedTime:%ld.%ldsec", UsedTime/100, UsedTime%100 );
1519   2      
1520   2      
1521   2      
1522   2          //spiaddr += 0x10000;
1523   2          //Printf("\nSE %06lx", spiaddr); 
1524   2      
1525   2          //Do write_enable
1526   2          WriteI2C_8A(0xFF,0x04);
1527   2          WriteI2C_8A(I2C8REG4F3, (DMA_DEST_CHIPREG << 6) +1);  //len:1
1528   2          WriteI2C_8A(I2C8REG4F5, 0); //length high
1529   2          WriteI2C_8A(I2C8REG4F8, 0); //length middle
1530   2          WriteI2C_8A(I2C8REG4F9, 0); //length low
1531   2          WriteI2C_8A(I2C8REG4FA, SPICMD_WREN);
1532   2          WriteI2C_8A(I2C8REG4F4, 0x01 | SPI_CMD_OPT_NONE); 
1533   2      
1534   2          //check how long it take.
1535   2          ret = I2cSpiFlashDmaWait_loop(SPI_CMD_OPT_NONE, 200);
1536   2          if(ret==200) {
1537   3            Puts("\nWREN fail before SE");
1538   3            return;
1539   3          }
1540   2          else {
1541   3            Printf("\nSE WREN success at %bd", ret);
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 26  

1542   3            bTemp = ReadI2C_8A(I2C8REG4F4);
1543   3            Printf(" R4F4:%bx", bTemp);
1544   3          }
1545   2      
1546   2          //SE
1547   2          Printf("\nSE %06lx %x",spiaddr);
1548   2          WriteI2C_8A(0xFF,0x04);
1549   2          WriteI2C_8A(I2C8REG4F3, (DMA_DEST_CHIPREG << 6) +4);  //Reg,Increase,len:1+3
1550   2          WriteI2C_8A(I2C8REG4F6, 0x04);  //Reg start 0
1551   2          WriteI2C_8A(I2C8REG4F7, 0xD0);
1552   2          WriteI2C_8A(I2C8REG4F5, 0); //length high
1553   2          WriteI2C_8A(I2C8REG4F8, 0); //length middle
1554   2          WriteI2C_8A(I2C8REG4F9, 0); //length low
1555   2          WriteI2C_8A(I2C8REG4FA, SPICMD_SE);
1556   2          WriteI2C_8A(I2C8REG4FB, (BYTE)(spiaddr>>16));
1557   2          WriteI2C_8A(I2C8REG4FC, (BYTE)(spiaddr>>8));
1558   2          WriteI2C_8A(I2C8REG4FD, (BYTE)spiaddr);
1559   2          WriteI2C_8A(I2C8REG4F4, 0x01 | SPI_CMD_OPT_WRITE_BUSY);
1560   2          ret=I2cSpiFlashDmaWait(200);
1561   2          if(ret) Puts("  SE =>Fail");
1562   2          else    Puts("  BE_SE=>Done");
1563   2        }
1564   1        else if(!stricmp(argv[1],"upload")) {
1565   2          DWORD src_addr,dest_addr,upload_len;
1566   2          BYTE ret;
1567   2      
1568   2          if(argc <= 4) {
1569   3            Puts("\nUsage:i2cspi upload src dest len");
1570   3            return;
1571   3          }
1572   2          src_addr = a2h(argv[2]);
1573   2          dest_addr = a2h(argv[3]);
1574   2          upload_len = a2h(argv[4]);
1575   2      
1576   2          ret = I2CSPI_upload(src_addr, dest_addr, upload_len);
1577   2          if(ret) Puts("==>FAIL");
1578   2          else  Puts("==>SUCCESS");
1579   2        }
1580   1        else if(!stricmp(argv[1],"upload2")) {
1581   2          DWORD src_addr,dest_addr,upload_len;
1582   2          BYTE ret;
1583   2      
1584   2          if(argc <= 4) {
1585   3            Puts("\nUsage:i2cspi upload src dest len");
1586   3            return;
1587   3          }
1588   2          src_addr = a2h(argv[2]);
1589   2          dest_addr = a2h(argv[3]);
1590   2          upload_len = a2h(argv[4]);
1591   2      
1592   2          ret = I2CSPI_upload_faster(src_addr, dest_addr, upload_len);
1593   2          if(ret) Puts("==>FAIL");
1594   2          else  Puts("==>SUCCESS");
1595   2        }
1596   1      }
1597          
1598          
1599          static void monitor_i2cspic(void)
1600          {
1601   1        volatile BYTE cmd;
1602   1        BYTE dat0;
1603   1        BYTE i;
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 27  

1604   1        BYTE cnt;
1605   1        DWORD spiaddr;
1606   1        BYTE ret;
1607   1        BYTE index;
1608   1        BYTE read_byte;
1609   1      
1610   1        if(argc < 2) {
1611   2          Puts("\n\rsee spic");
1612   2          return;
1613   2        }
1614   1      
1615   1        index = 0;
1616   1        read_byte = 0;
1617   1        if(argv[1][0]=='r') {
1618   2          read_byte = argv[1][1] - 0x30;
1619   2          if(read_byte > 8) {
1620   3            //invalid read option
1621   3            //HelpMonitorSPIC();
1622   3            Puts("\n current max is 8.  TODO increase to 256");
1623   3            return;
1624   3          }
1625   2          index = 1;
1626   2        }
1627   1      
1628   1      
1629   1        cmd = a2h( argv[index+1] );
1630   1      
1631   1        if(cmd == SPICMD_RDID) {  /* spic r3 9F */
1632   2          if(read_byte != 3) {
1633   3            Puts("\nuse i2cspic r3 9f");
1634   3            return;
1635   3          }
1636   2          Printf("\n\rRDID(JEDEC) ");
1637   2          SpiFlash_DmaCmd(SPICMD_RDID, DMA_TARGET_CHIP, 0x4D0, 3, DMA_OPT_NONE);
1638   2          ret=SpiFlash_wait_done(10,10);
1639   2          if(!ret) {
1640   3            WriteI2C_8A(0xFF,0x04);
1641   3            //--fast--------------------------
1642   3            //ReadI2CS_8A(0xD0, 3, SPI_CmdBuffer);
1643   3            //--------------------------------
1644   3            SPI_CmdBuffer[0] = ReadI2C_8A(0xD0);
1645   3            SPI_CmdBuffer[1] = ReadI2C_8A(0xD1);
1646   3            SPI_CmdBuffer[2] = ReadI2C_8A(0xD2);
1647   3      
1648   3            Printf(" %02bx %02bx %02bx ", SPI_CmdBuffer[0], SPI_CmdBuffer[1],SPI_CmdBuffer[2]);
1649   3            if     (SPI_CmdBuffer[0]==SPIFLASH_MID_MX) {
1650   4              Puts("Macronix");   
1651   4              //print_spiflash_status_register = &print_spiflash_status_register_macronix;
1652   4            }
1653   3            else if(SPI_CmdBuffer[0]==SPIFLASH_MID_EON) {
1654   4              Puts("EOn");
1655   4              //print_spiflash_status_register = &print_spiflash_status_register_eon_256;
1656   4            }
1657   3            else if(SPI_CmdBuffer[0]==SPIFLASH_MID_WB) {
1658   4              Puts("Winbond");
1659   4              //print_spiflash_status_register = &print_spiflash_status_register_winbond;
1660   4            }
1661   3            else if(SPI_CmdBuffer[0]==SPIFLASH_MID_MICRON) {
1662   4              Puts("Micron");
1663   4              //print_spiflash_status_register = &print_spiflash_status_register_micron;
1664   4            }
1665   3            else if(SPI_CmdBuffer[0]==SPIFLASH_MID_SPANSION)  Puts("Spansion");
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 28  

1666   3            else if(SPI_CmdBuffer[0]==SPIFLASH_MID_GIGA)    Puts("Giga");
1667   3            else                        Puts("Unknown");
1668   3          }
1669   2        }
1670   1        else if(cmd == SPICMD_WREN    /*spic 6 */
1671   1             || cmd == SPICMD_WRDI) { /*spic 4 */
1672   2          if(cmd == SPICMD_WRDI) Puts("\n\rWRDI ");
1673   2          else           Puts("\n\rWREN ");
1674   2          SpiFlash_DmaCmd(cmd, DMA_TARGET_CHIP, 0, 0, DMA_OPT_NONE);
1675   2          ret=SpiFlash_wait_done(10,10);
1676   2        }
1677   1        else if(cmd == SPICMD_RDSR) {
1678   2          if(read_byte ==0) {
1679   3            Puts("\nuse spic r1 5");
1680   3            return;
1681   3          }
1682   2          ret = I2cSpiFlashChipRegCmd(cmd,0, read_byte, SPI_CMD_OPT_NONE, 200);
1683   2          WriteI2C_8A(0xFF,0x04);
1684   2          for(i=0; i < read_byte; i++)
1685   2            Printf(" %02bx", ReadI2C_8A(0xD0+i)); 
1686   2        }
1687   1        else if(cmd == SPICMD_WRSR) {
1688   2          if( argc< (index+4) ) {
1689   3            Printf("\n\rMissing Parameters !!!" );
1690   3            return;
1691   3          }
1692   2          SPI_CmdBuffer[0] = a2h(argv[index+2]);
1693   2          SPI_CmdBuffer[1] = a2h(argv[index+3]);
1694   2          ret = I2cSpiFlashChipRegCmd(cmd,2,  0, SPI_CMD_OPT_BUSY, 200);
1695   2        }
1696   1        else if(cmd == SPICMD_PP) {
1697   2          if( argc< (index+4) ) {
1698   3            Printf("\n\rMissing Parameters !!!" );
1699   3            return;
1700   3          }
1701   2          if( argc > (index+11) ) {
1702   3            Printf("\n\ronly support 8 bytes !!!" );
1703   3            argc = 11;
1704   3          }
1705   2          spiaddr = a2h( argv[index+2] );
1706   2          Printf("\n\rPP ");
1707   2          Printf(" %06lx", spiaddr);  //PrintSpiAddr(spiaddr);
1708   2      
1709   2          I2cSpiFlashSetAddress2CmdBuffer(spiaddr); //SPI_CmdBuffer[0]~[2] or [0]~[3]
1710   2      
1711   2      
1712   2          //BKFYI140819. PP with QuadIO has a problem on REG4D0.
1713   2          //use XMEM
1714   2          for(i=3,cnt=0; i <argc; i++,cnt++) {
1715   3            dat0 = a2h(argv[index+i]);
1716   3            SPI_Buffer[cnt]=dat0;
1717   3          }
1718   2          //if(is_micron_512()) {
1719   2          //  SpiFlashSetupBusyCheck(SPICMD_RDFREG,0x06); //pol:low,bit:7.  try bit6
1720   2          //}
1721   2          //note:I am using vblank check
1722   2          ret = I2cSpiFlashChipRegCmd(cmd, 3, cnt, /*1,*/ SPI_CMD_OPT_WRITE, 200);
1723   2          //if(is_micron_512()) {
1724   2          //  SpiFlashSetupBusyCheck(SPICMD_RDSR,0x08);
1725   2          //  SpiFlashChipRegCmd(SPICMD_RDFREG,0,1, SPI_CMD_OPT_NONE, 200);
1726   2          //}
1727   2        }
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 29  

1728   1        else if(cmd == SPICMD_SE || cmd == SPICMD_BE) {
1729   2          if( argc< (index+3) ) {
1730   3            Printf("\n\rMissing Parameters !!!" );
1731   3            return;
1732   3          }
1733   2          spiaddr = a2h( argv[index+2] );
1734   2          if(cmd==cmd == SPICMD_BE) Puts("\n\rBE ");
1735   2          else            Puts("\n\rSE ");
1736   2          Printf(" %06lx", spiaddr);  //PrintSpiAddr(spiaddr);
1737   2      
1738   2          I2cSpiFlashSetAddress2CmdBuffer(spiaddr); //SPI_CmdBuffer[0]~[2] or [0]~[3]
1739   2      
1740   2          ret = I2cSpiFlashChipRegCmd(cmd,3,0, SPI_CMD_OPT_WRITE_BUSY, 200);
1741   2          if(ret) 
1742   2            Puts("=>fail");
1743   2        }
1744   1        else if(cmd == SPICMD_READ_SLOW 
1745   1             || cmd == SPICMD_READ_FAST
1746   1           || cmd == SPICMD_READ_DUAL_O
1747   1           || cmd == SPICMD_READ_QUAD_O 
1748   1           || cmd == SPICMD_READ_DUAL_IO 
1749   1           || cmd == SPICMD_READ_QUAD_IO ) {
1750   2          BYTE w_len;
1751   2          BYTE SPI_mode;
1752   2          BYTE SPI_mode_Reg;
1753   2      
1754   2          if( argc < 4 ) {
1755   3            Printf("\n\rMissing Parameters !!!" );
1756   3            return;
1757   3          }
1758   2          if(read_byte==0) {
1759   3            Printf("\n\rMissing read length !!!" ); //HelpMonitorSPIC();
1760   3            return;
1761   3          }
1762   2          //change SPI_mode
1763   2          WriteI2C_8A(0xFF,0x04);
1764   2          SPI_mode_Reg = ReadI2C_8A(I2C8REG4F0);
1765   2          if(cmd==SPICMD_READ_SLOW) {
1766   3            SPI_mode=0;
1767   3            w_len = 3;
1768   3            if((ReadI2C_8A(0xE1) & 0xC0)==0xC0) {
1769   4              Printf("\n\rEDGE CYCLE error. GiveUp!!");
1770   4              return;
1771   4            }   
1772   3          }
1773   2          else if(cmd==SPICMD_READ_FAST) {
1774   3            SPI_mode=1;
1775   3            w_len = 4;    
1776   3          }
1777   2          else if(cmd==SPICMD_READ_DUAL_O) {
1778   3            SPI_mode=2;
1779   3            w_len = 4;    
1780   3          }
1781   2          else if(cmd==SPICMD_READ_QUAD_O) {
1782   3            SPI_mode=3;
1783   3            w_len = 4;    
1784   3          }
1785   2          else if(cmd==SPICMD_READ_DUAL_IO) {
1786   3            SPI_mode=4;
1787   3            w_len = 4;    
1788   3          }
1789   2          else {
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 30  

1790   3            //Printf("\n\rDualIO & QuadIO can read only 1 byte...");
1791   3            SPI_mode = 5;
1792   3            w_len = 6;    
1793   3          }
1794   2      
1795   2          spiaddr = a2h( argv[index+2] );
1796   2          Printf(" %06lx", spiaddr);  //PrintSpiAddr(spiaddr);
1797   2      
1798   2          //if(argc >= 4)
1799   2          //  cnt = a2h(argv[index+3]);
1800   2          //else cnt = 8;
1801   2      
1802   2          I2cSpiFlashSetAddress2CmdBuffer(spiaddr); //SPI_CmdBuffer[0]~[2] or [0]~[3]
1803   2      
1804   2          WriteI2C_8A(I2C8REG4F0, (SPI_mode_Reg & ~0x07) | SPI_mode);
1805   2          ret = I2cSpiFlashChipRegCmd(cmd, w_len, read_byte, SPI_CMD_OPT_BUSY, 200);
1806   2          if(!ret) {
1807   3            if(cmd == SPICMD_READ_DUAL_O
1808   3            || cmd == SPICMD_READ_QUAD_O
1809   3            || cmd == SPICMD_READ_DUAL_IO
1810   3            || cmd == SPICMD_READ_QUAD_IO) {
1811   4              for(i=0; i < read_byte; i++)
1812   4                Printf(" %02bx", SPI_Buffer[i]);
1813   4            }
1814   3            else {
1815   4              for(i=0; i < read_byte; i++)
1816   4                Printf(" %02bx", SPI_CmdBuffer[i]);
1817   4            }
1818   3          }
1819   2          //restore SPI_Mode
1820   2          //WriteTW88(REG4C0, SPI_mode_Reg);
1821   2        }
1822   1        else {
1823   2          BYTE w_len;
1824   2          if(read_byte) w_len = 0; //read mode
1825   2          else {  
1826   3            w_len = argc - 2; 
1827   3          }
1828   2          for(i=0; i < w_len; i++)
1829   2            SPI_CmdBuffer[i] = a2h(argv[index+2]);
1830   2          
1831   2          ret = I2cSpiFlashChipRegCmd(cmd, w_len, read_byte, SPI_CMD_OPT_NONE, 200);
1832   2          if(!ret) {
1833   3            for(i=0; i < read_byte; i++)
1834   3              Printf(" %02bx",SPI_CmdBuffer[i]);
1835   3          }
1836   2        }
1837   1      }
1838          
1839          
1840          
1841          #if defined(SUPPORT_BT656)
1842          static void monitor_ibt656(void)
1843          {
1844   1        if(argc < 2) {
1845   2          //print current value
1846   2          Printf("\n\rInputBT656:");
1847   2      #if defined(DEBUG_BT656)
                  PrintfBT656Input(InputBT656,1);
                  Printf("\t\tInputBT656EE:");
                  PrintfBT656Input(GetInputBT656EE(),1);
              #endif
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 31  

1852   2          Printf("\n\rusage: iBT656 {DEC|ARGB|DTV|LVDS|PANEL|OFF|AUTO}");
1853   2          //Printf("\n\rusage: iBT656 {OFF|AUTO|PANEL|...}");
1854   2        }
1855   1        else {
1856   2          //if you directly select BT656Enc input,
1857   2          //InputMain have to be a correct setting.
1858   2      
1859   2      
1860   2               if( !stricmp( argv[1], "OFF" ))    InputBT656 = BT656ENC_SRC_OFF;
1861   2          else if( !stricmp( argv[1], "DEC" ))    InputBT656 = BT656ENC_SRC_DEC;
1862   2          else if( !stricmp( argv[1], "ARGB" ))   InputBT656 = BT656ENC_SRC_ARGB;
1863   2          else if( !stricmp( argv[1], "DTV" ))    InputBT656 = BT656ENC_SRC_DTV;
1864   2          else if( !stricmp( argv[1], "LVDS" ))   InputBT656 = BT656ENC_SRC_LVDS;
1865   2          else if( !stricmp( argv[1], "PANEL" ))  InputBT656 = BT656ENC_SRC_PANEL;
1866   2          else if( !stricmp( argv[1], "LOOP" )) {
1867   3            //loopback mode.
1868   3            if(InputMain == INPUT_CVBS
1869   3            || InputMain == INPUT_SVIDEO
1870   3            || InputMain == INPUT_COMP
1871   3            || InputMain == INPUT_PC
1872   3            || InputMain == INPUT_LVDS) {
1873   4              switch(InputMain) {
1874   5              case INPUT_COMP:
1875   5              case INPUT_PC:  
1876   5                InputBT656 = BT656ENC_SRC_ARGB; 
1877   5                break;  
1878   5              case INPUT_LVDS:  
1879   5                InputBT656 = BT656ENC_SRC_LVDS;   
1880   5                break;
1881   5              default:    
1882   5                InputBT656 = BT656ENC_SRC_DEC;    
1883   5                break;
1884   5              }
1885   4              //passthru. or
1886   4              //ChangeBT656Module(InputBT656);
1887   4              //CheckAndSetBT656Loop();
1888   4              //ChangeBT656Input(InputBT656);
1889   4              //CheckAndSetBT656DecOnLoop(InputBT656);
1890   4              //return;
1891   4            }
1892   3            else {
1893   4              Printf("\n\riBT656 loop supports CVBS,SVideo,Component,PC,LVDS only");
1894   4              Printf("\n\ruse imain command first."); 
1895   4            }
1896   3          }
1897   2          else {
1898   3            Printf("\n\rInvalid command...");
1899   3            Prompt();
1900   3            return;                                    
1901   3          }
1902   2          if(GetInputBT656EE() != InputBT656)   
1903   2            SaveInputBT656EE( InputBT656 );
1904   2      
1905   2          //-------------------------------
1906   2          //NOTE: InputMain has a high priority when InputBT656 has a conflict.
1907   2          ChangeBT656__MAIN(InputBT656);
1908   2        }
1909   1      }
1910          #endif
1911          static void monitor_imain(void)
1912          {
1913   1        if(argc < 2) {
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 32  

1914   2          //print current value
1915   2          Printf("\n\rInputMain:");
1916   2          PrintfInput(InputMain,1);
1917   2          Printf("\t\tInputMainEE:");
1918   2          PrintfInput(GetInputMainEE(),1);
1919   2      
1920   2          Printf("\n\rusage: imain {CVBS|SVIDEO|COMP|PC|HDMI|BT656|LVDS}");
1921   2        }
1922   1        else {
1923   2          BYTE new_InputMain;
1924   2          if     ( !stricmp( argv[1], "CVBS" ))   InputMain = INPUT_CVBS;
1925   2          else if( !stricmp( argv[1], "SVIDEO" )) InputMain = INPUT_SVIDEO;
1926   2          else if( !stricmp( argv[1], "COMP" ))   InputMain = INPUT_COMP;
1927   2          else if( !stricmp( argv[1], "PC" ))     InputMain = INPUT_PC;
1928   2          else if( !stricmp( argv[1], "DVI" ))    InputMain = INPUT_DVI;
1929   2          else if( !stricmp( argv[1], "HDMI" )) {
1930   3            if(GetHdmiModeEE())         InputMain = INPUT_HDMITV;
1931   3            else                InputMain = INPUT_HDMIPC;
1932   3          }
1933   2          else if( !stricmp( argv[1], "BT656" ))  InputMain = INPUT_BT656;
1934   2          else if( !stricmp( argv[1], "LVDS" ))   InputMain = INPUT_LVDS;
1935   2          else                                    InputMain = INPUT_CVBS;
1936   2          InputSubMode = 7; //N/A
1937   2      
1938   2          LinkCheckAndSetInput();
1939   2        
1940   2          if(GetInputMainEE() != InputMain)   
1941   2            SaveInputMainEE( InputMain );
1942   2      
1943   2          new_InputMain = InputMain;
1944   2          InputMain = 0xff;
1945   2          ChangeInput( new_InputMain ); 
1946   2        }
1947   1      }
1948          
1949          static void HelpMonitorInit(void)
1950          {
1951   1        Puts("\n\rInit {?|core|fpga|NTSC|panel|sspll|clock {H|L}|logo {on|off}|default}");
1952   1      
1953   1        Puts("\n\r\nExample:BootUp");
1954   1        Puts("\n\r init core");
1955   1        Puts("\n\r init | init NTSC");
1956   1        Puts("\n\r      | init panel");
1957   1        Puts("\n\r m");
1958   1        Puts("\n\r init logo");
1959   1        Puts("\n\r\nExample:change input");
1960   1        Puts("\n\r m [CVBS|SVIDEO|COMP|PC|DVI|HDMI|BT656]");
1961   1        Puts("\n\r or");
1962   1        Puts("\n\r input [CVBS|SVIDEO|COMP|PC|DVI|HDMI|BT656]");
1963   1        Puts("\n\r init default");
1964   1        Puts("\n\r checkandset");
1965   1      }
1966          
1967          static void monitor_init(void)
1968          {
1969   1        if(argc < 2) {
1970   2          //InitWithNTSC();
1971   2          Init8836AsDefault(InputMain, 1);
1972   2      
1973   2          InitGpioDefault();
1974   2          Sspll1PowerUp(ON);
1975   2          //DCDC needs 100ms, but we have enough delay on...
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 33  

1976   2          FrontPanel_StartUP();
1977   2      
1978   2          ScalerSetMuteManual(OFF);
1979   2          PowerUpLedBackLight();
1980   2        }
1981   1        else {
1982   2          if( !stricmp( argv[1], "?") || !stricmp( argv[1], "help") ) {
1983   3            HelpMonitorInit();
1984   3          }
1985   2          else if( !stricmp( argv[1], "fpga" ) ) {  
1986   3            InitCore(1);
1987   3            /*ee_mode = */ CheckEEPROM();
1988   3            Init8836AsDefault(InputMain, 1);
1989   3            //InitWithNTSC();
1990   3            FrontPanel_StartUP();
1991   3            ScalerSetMuteManual(OFF);
1992   3            PowerUpLedBackLight();
1993   3            PllClkSetDividerReg(PLLCLK_DIV_1P5);
1994   3            SpiOsdEnable(ON);
1995   3            SpiOsdSetDeValue();
1996   3            DebugLevel = 0;
1997   3          } 
1998   2          else if( !stricmp( argv[1], "core" ) ) {  
1999   3            InitCore(1);
2000   3          }
2001   2          else if( !stricmp( argv[1], "NTSC" ) ) {
2002   3            Init8836AsDefault(0/*InputMain*/, 1);
2003   3            InitGpioDefault();
2004   3      
2005   3            Puts("\nEnable OutputPin");
2006   3            OutputEnablePin(OFF,ON);    //Output enable. FP data: not yet
2007   3            Sspll1PowerUp(ON);
2008   3            SOsd_init();
2009   3            //Init8836AsDefault(0,0);
2010   3            //ChangeDecoder(0);
2011   3            InputMain = INPUT_CVBS;
2012   3            InitInputAsDefault();
2013   3            CheckAndSetDecoderScaler();
2014   3            ScalerSetFreerunAutoManual(ON,OFF);
2015   3            ScalerSetMuteAutoManual(ON,OFF);
2016   3          }
2017   2          else if( !stricmp( argv[1], "system" ) ) {
2018   3            BYTE old_access;
2019   3      
2020   3            old_access = g_access;
2021   3            g_access = 1;
2022   3            InitSystem(1);
2023   3            g_access = old_access;
2024   3          }
2025   2          else if( !stricmp( argv[1], "panel" ) ) {
2026   3            FrontPanel_StartUP();
2027   3            ScalerSetMuteManual(OFF);
2028   3            PowerUpLedBackLight();
2029   3          }
2030   2          else if( !stricmp( argv[1], "ee" ) ) {
2031   3            Printf("\n\rFind EEPROM variables...");
2032   3            //E3P_Init();
2033   3            E3P_Configure();
2034   3          }
2035   2          else if( !stricmp( argv[1], "sspll" ) ) {
2036   3            SpiClkRecover27MSource();  //with debug message
2037   3      //BKTODO..130927
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 34  

2038   3      #if defined(PANEL_AUO_B133EW01)
                    //SspllSetFreqAndPll(150000000L);
                    Sspll2SetFreq(110000000L, ON);
                    //BUGGY_PclkSetFunc(110000000L);
              #elif defined(PANEL_1024X600)
                    Sspll2SetFreq(81000000L, ON);
                    //BUGGY_PclkSetFunc(81000000L);
              #else
2046   3            Sspll2SetFreq(108000000L, ON);
2047   3            //BUGGY_PclkSetFunc(108000000L);
2048   3      #endif
2049   3      //      if(SpiFlashVendor==SFLASH_VENDOR_MX)
2050   3      //        PllClkSetSelDiv(PLLCLK_PLL108,PLLCLK_DIV_2P0);
2051   3      //      else
2052   3      //        PllClkSetSelDiv(PLLCLK_PLL108,PLLCLK_DIV_1P5);
2053   3          }
2054   2      //    else if( !stricmp( argv[1], "clock" ) ) {
2055   2      //      if( argc>=3 ) {
2056   2      //        if     ( toupper(argv[2][0])=='H' ) ClockHigh();
2057   2      //        else if( toupper(argv[2][0])=='L' ) ClockLow();
2058   2      //        else                                Clock27();
2059   2      //      }
2060   2      //      else
2061   2      //        Clock27();
2062   2      //    }
2063   2          else if( !stricmp( argv[1], "logo" ) ) {
2064   3            if( argc>=3 ) {
2065   4              if( !stricmp( argv[2], "on" ) )
2066   4                InitLogo1();
2067   4              else if( !stricmp( argv[2], "off" ) )
2068   4                RemoveLogoWithWait(1);
2069   4              else
2070   4                Printf("\n\rInvalid command...");
2071   4            }
2072   3            else {
2073   4              //auto
2074   4              InitLogo1();
2075   4              if(1) {
2076   5                RemoveLogoWithWait(1);
2077   5              }
2078   4            }
2079   3          }
2080   2          else if( !stricmp( argv[1], "default" ) ) {
2081   3            InitInputAsDefault();
2082   3          } 
2083   2        }
2084   1      }
2085          
2086          static void monitor_isr(void)
2087          {
2088   1        if(argc < 2) {
2089   2          Printf("\n\rISR status:");
2090   2          if(SFRB_EX0) Printf("EX0 ");            // ext0
2091   2          if(SFRB_ET1) Printf("ET1 ");            // timer1 - touch
2092   2          if(SFRB_ET2) Printf("ET2 ");            // timer2 - Remo
2093   2          if(SFR_E2IE) Printf("E2IE:%02bx ",SFR_E2IE);  // E2IE[4] - Remo       
2094   2        }
2095   1        else if(!stricmp( argv[1], "ON" )) {
2096   2          if(SFRB_EX0) Printf("-->Skip");
2097   2          else {
2098   3            SFRB_EX0 = 1;
2099   3      #ifdef SUPPORT_TOUCH
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 35  

2100   3            SFRB_ET1 = 1;
2101   3      #endif
2102   3            SFR_E2IE |= 0x04;
2103   3          }
2104   2        } 
2105   1        else if(!stricmp( argv[1], "OFF" )) {
2106   2          if(SFRB_EX0 == 0) Printf("-->Skip");
2107   2          else {
2108   3            SFRB_EX0 = 0;
2109   3            SFRB_ET1 = 0;
2110   3            SFR_E2IE = 0;
2111   3          }
2112   2        }
2113   1      }
2114          //---------------- pclk -------------------------
2115          //  pclk 1080 means 108MHz
2116          //  pclk 27 means 27MHz
2117          #if 0
              static void monitor_pclk(void)
              {
                  if(argc >= 2) {
                    dValue = a2i( argv[1] );
                    dValue *= 100000L;
                    Sspll1SetFreq(dValue, ON);
                  }
                  //print current pclk info
                  Printf("\n\rsspll2:%ld",Sspll2GetFreq());
              }
              #endif
2129          
2130          
2131          #if defined(REMO_RC5) && defined(DEBUG_REMO)
              static void monitor_remo(void)
              {
                if(!stricmp( argv[1], "ddremo")) {
                  PrintRemoCapture();
                }
              }
              #endif
2139          
2140          //----------------------------------------------------  
2141          // read pixel
2142          //----------------------------------------------------  
2143          static void monitor_rpixel(void)
2144          {
2145   1          WORD x0,x1, y0,y1;
2146   1          if(argc < 5) {
2147   2            Printf("\n\rusage rpixel x0 y0 x1 y1");
2148   2            Prompt();
2149   2            return;
2150   2          }
2151   1          x0 = a2i(argv[1]);
2152   1          y0 = a2i(argv[2]);
2153   1          x1 = a2i(argv[3]);
2154   1          y1 = a2i(argv[4]);
2155   1          ReadOutputPixel(x0,y0,x1,y1);
2156   1      }
2157          
2158          //----------------------------------------------------
2159          // scaler test
2160          //
2161          // 0: old
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 36  

2162          // 1: new
2163          // 2: target:720x480P
2164          //----------------------------------------------------
2165          static void monitor_scaler(void)
2166          {
2167   1        //  BYTE mode;
2168   1        //  if(argc < 2) 
2169   1        //    mode = 0;
2170   1        //  else {
2171   1        //    mode = a2h(argv[1]);
2172   1        //  }
2173   1        //  ScalerTest(mode);
2174   1      }
2175          
2176          
2177          static void monitor_sosd(void)
2178          {
2179   1        if(argc < 2) {
2180   2          Puts("lutgrid\n");
2181   2      #if 0
                  Puts("SLUT0\n");
                  Puts("SLUT1\n");
                  Puts("SLUT2\n");
              #endif    
2186   2        }
2187   1        else if ( !stricmp( argv[1], "lutgrid" )) {
2188   2          DWORD addr;
2189   2          WORD offset;
2190   2      
2191   2          if ( argc == 3 )  offset = a2i(argv[2]);
2192   2          else        offset = 0;
2193   2      
2194   2          addr = offset * 0x400;
2195   2          addr += 0x100000;
2196   2      
2197   2          //SpiOsdLoadLUT(1, 0, 0, 0x400, addr, 0xFF); 
2198   2          SOsd_SetLut(1, 0, 0, 0x400, addr, 0xFF);
2199   2          SOsd_UpdateLut(1, 0); 
2200   2        }
2201   1      #if 0
                else if ( !stricmp( argv[1], "SLUT0" )) {  // white
                  WaitVBlank(1);
                  //SpiOsdLoadLUT(3, 1, 0, 1024, 0xb0000, 0xFF);   //winno ?3
                  SOsd_SetLut(3, 1, 0, 1024, 0xb0000, 0xFF);
                  SOsd_UpdateLut(3, 0); 
                }
                else if ( !stricmp( argv[1], "SLUT1" )) {  // white
                  WaitVBlank(1);
                  //SpiOsdLoadLUT( 3, 1, 256, 1024, 0xb0400, 0xFF); //winno ?3
                  SOsd_SetLut(3, 1, 256, 1024, 0xb0400, 0xFF);
                  SOsd_UpdateLut(3, 0); 
                }
                else if ( !stricmp( argv[0], "SLUT2" )) {  // white
                  BYTE i;
              
                  i = 0;
                  while ( !RS_ready() ) {
                    #if 0
                    WaitVBlank(1);
                    //SpiOsdLoadLUT( 3, 1, 128, 512, 0xb0800, 0xFF); //winno ?3
                    SOsd_SetLut(3, 1, 128, 512, 0xb0800, 0xFF);
                    SOsd_UpdateLut(3, 0); 
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 37  

                    delay1ms(100);
                    
                    WaitVBlank(1);
                    //SpiOsdLoadLUT(3,  1, 128, 512, 0xb0a00, 0xFF); //winno ?3
                    SOsd_SetLut(3,  1, 128, 512, 0xb0a00, 0xFF);
                    SOsd_UpdateLut(3, 0); 
                    delay1ms(100);
                    #endif
                    WaitVBlank(1);
                    //SpiOsdLoadLUT(3,  1, 128+i++, 512, 0xb0c00, 0xFF);  //winno ? 3
                    SOsd_SetLut(3,  1, 128+i++, 512, 0xb0c00, 0xFF);
                    SOsd_UpdateLut(3, 0); 
                    //WaitVBlank(1);
                    //SpiOsdLoadLUT( 1, 128+i++, 512, 0xb0e00);
                    i %= 128;
                  }
                }
              #endif  
2242   1          
2243   1      }
2244          
2245          
2246          
2247          static void monitor_task(void)
2248          {
2249   1        if(argc < 2) {
2250   2          Puts("\ntask [on|off]");
2251   2          Printf(" curr:%bx", TaskNoSignal_getCmd());
2252   2          Prompt();
2253   2          return;
2254   2        }
2255   1      
2256   1        if( !stricmp( argv[1], "on") ) {
2257   2          tic_task = 10*100;  // NOSIGNAL_TIME_INTERVAL
2258   2          TaskNoSignal_setCmd(TASK_CMD_RUN);
2259   2        }
2260   1        else {
2261   2          TaskSetGrid(0);
2262   2      
2263   2          TaskNoSignal_setCmd(TASK_CMD_DONE);
2264   2          //WriteTW88(REG003, 0xFF ); // disable all INTR
2265   2        } 
2266   1      }
2267          
2268          
2269          
2270          static void monitor_time(void)
2271          {
2272   1        DWORD time;
2273   1        BYTE hour,min,sec,ms;
2274   1      
2275   1        SFRB_ET0=0;
2276   1        time = SystemClock;
2277   1        SFRB_ET0=1;
2278   1        Printf("\n\rSystem Clock %ld tic:%bd", time, tic01);
2279   1        ms = (BYTE)(time%100);
2280   1        time = time/100;
2281   1        if(time==0) {
2282   2          sec = 0;
2283   2          min = 0;
2284   2          hour = 0;
2285   2        }
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 38  

2286   1        else {
2287   2          sec = (BYTE)(time % 60);
2288   2          time = time / 60;
2289   2          if(time==0) {
2290   3            min = 0;
2291   3            hour = 0;
2292   3          }
2293   2          else {
2294   3            min = (BYTE)(time%60);
2295   3            hour = time / 60;
2296   3          }
2297   2        }
2298   1        Printf("\t%bd:%02bd:%02bd,%02bd", hour,min,sec ,ms);
2299   1      }
2300          
2301          #ifdef SUPPORT_TOUCH
2302          static void monitor_touch(void)
2303          {
2304   1        //---------------- Touch Calibration -------------------------
2305   1        if( !stricmp( argv[1], "CALIB" ) ) {
2306   2          BYTE  n;
2307   2          if ( argc == 2 ) {
2308   3            n = a2h(argv[2]);
2309   3            if ( n > 4 ) n = 4;
2310   3            CalibTouch(n);
2311   3          }
2312   2        }
2313   1        else if(!stricmp( argv[1], "TCOUNT" ) ) {
2314   2          CpuTouchSkipCount = 100;
2315   2          if ( argc == 3 ) {
2316   3            CpuTouchSkipCount = a2i(argv[2]);
2317   3          }
2318   2        }
2319   1        else if( !stricmp( argv[1], "TDUMP" ) ) {
2320   2          Puts("\r\nTouch Dump");
2321   2          TouchDump();
2322   2        }
2323   1      
2324   1        else if( !stricmp( argv[1], "TOUCH" ) ) {
2325   2          if ( argc == 2 ) {
2326   3            if ( !stricmp( argv[2], "ON" ) ) {
2327   4              SFRB_ET1 = 1; //BK110531
2328   4              SetTouchAuto(1);
2329   4              Puts("\r\nTurn ON Touch Sense");
2330   4            }
2331   3      #ifdef DEBUG_TOUCH_SW
                    else if ( !stricmp( argv[2], "DATA" ) ) {
                      PrintCalibData();
                    }
              #endif
2336   3            else {
2337   4              SetTouchAuto(0);
2338   4              SFRB_ET1 = 0; //BK110531
2339   4              Puts("\r\nTurn OFF Touch Sense");
2340   4            }
2341   3          }
2342   2          else {
2343   3            GetTouch2();
2344   3          }
2345   2        }
2346   1      
2347   1      
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 39  

2348   1        else if( !stricmp( argv[1], "TRACE" ) ) {
2349   2          if ( argc == 3 ) {
2350   3            if ( !stricmp( argv[2], "ON" ) ) {
2351   4              Puts("\r\nTurn ON Touch Trace");
2352   4              SFRB_ET1 = 0; //BK110531
2353   4              SetTraceAuto(1);
2354   4            }
2355   3            else {
2356   4              Puts("\r\nTurn OFF Touch Trace");
2357   4              SFRB_ET1 = 1; //BK110531
2358   4              SetTraceAuto(0);
2359   4            }
2360   3          }
2361   2          else {
2362   3      //      TraceTouch();
2363   3      //      extern  bit FLAG_TOUCH;
2364   3            extern  WORD  TouchX, TouchY, TouchZ1; //, AUX[4];
2365   3            //extern  BYTE  /*CpuTouchChanged,*/ AUX_Changed[4];
2366   3            BYTE  temp, atemp[4], i;
2367   3            temp = CpuTouchChanged;
2368   3            atemp[0] = CpuAUX0_Changed;
2369   3            atemp[1] = CpuAUX1_Changed;
2370   3            atemp[2] = CpuAUX2_Changed;
2371   3            atemp[3] = CpuAUX3_Changed;
2372   3            while ( !RS_ready() ) {
2373   4              delay1ms(500);
2374   4              if ( CpuTouchPressed ) {
2375   5                if (CpuTouchChanged != temp) {
2376   6                  Printf("\n\rTouchX: 0x%04x, TouchY: 0x%04x, Z1: 0x%04x", TouchX, TouchY, TouchZ1);
2377   6                  temp = CpuTouchChanged;
2378   6                }
2379   5              }
2380   4              if ( atemp[0] != CpuAUX0_Changed ) {
2381   5                Printf("\n\r0x%02bx - AUX[0]: 0x%04x",atemp[i], CpuAUX0);
2382   5                atemp[0] = CpuAUX0_Changed;
2383   5              }
2384   4              if ( atemp[1] != CpuAUX1_Changed ) {
2385   5                Printf("\n\r0x%02bx - AUX[1]: 0x%04x",atemp[i], CpuAUX1);
2386   5                atemp[1] = CpuAUX1_Changed;
2387   5              }
2388   4              if ( atemp[2] != CpuAUX2_Changed ) {
2389   5                Printf("\n\r0x%02bx - AUX[2]: 0x%04x",atemp[i], CpuAUX2);
2390   5                atemp[2] = CpuAUX2_Changed;
2391   5              }
2392   4              if ( atemp[3] != CpuAUX3_Changed ) {
2393   5                Printf("\n\r0x%02bx - AUX[3]: 0x%04x",atemp[i], CpuAUX3);
2394   5                atemp[3] = CpuAUX3_Changed;
2395   5              }
2396   4            }
2397   3          }
2398   2        }
2399   1      
2400   1        else if( !stricmp( argv[1], "TSC_DEBUG" ) ) {
2401   2          tsc_debug = 0;
2402   2          if ( argc == 2 ) {
2403   3            if ( !stricmp( argv[2], "ON" ) )
2404   3              tsc_debug = 1;
2405   3          }
2406   2          if(tsc_debug) {
2407   3            SFRB_ET1 = 0; //disable touch timer
2408   3          }
2409   2          else {
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 40  

2410   3            InitAuxADC();
2411   3          }
2412   2        }
2413   1        
2414   1      }
2415          #endif
2416          
2417          #ifdef DEBUG_UART
              //---------------- UART TEST  ------
              // to check the UART FIFO.
              //  "mcu uart"
              //  "uartdump" and hold "a" key for 5 sec and then press "x".
              //  type "mcu uart" and, check the UART0 Max value.
              //----------------------------------
              static void monitor_uart(void)
              {
                if(!stricmp( argv[1], "DUMP")) {
                  BYTE  ch;
              
                  do {
                    SFR_ES = 0;     //disable SFR_ES 
                    delay1ms(100);
                    delay1ms(100);
                    SFR_ES = 1;     //enable SFR_ES
                    delay1ms(100);
              
                    if( !RS_ready() ) continue;
                    ch = RS_rx();
                    Printf("%02bx ", ch );
                  } while ( ch != 'x' );
                }
              }
              #endif
2443          
2444          
2445          
2446          
2447          
2448          //=============================================================================
2449          //
2450          //=============================================================================
2451          /**
2452          * print prompt
2453          */
2454          void Prompt(void)
2455          {
2456   1      #ifdef BANKING
                if ( MonAddress == TW88I2CAddress )
                  Printf("\n\r[B%02bx]MCU_I2C[%02bx]>", BANKREG, MonAddress);
                else
              #else
2461   1        if ( MonAddress == TW88I2CAddress )
2462   1          Printf("\n\rMCU_I2C[%02bx]>", MonAddress);
2463   1        else
2464   1      #endif
2465   1          Printf("\n\rI2C[%02bx]>", MonAddress);
2466   1      }
2467          #ifdef SUPPORT_UART1
              void Prompt1(void)
              {
                if ( MonAddress == TW88I2CAddress )
                  Printf1("\n\riAP>");
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 41  

                else
                Printf1("\n\rRS1_I2C[%02bx]>", MonAddress);
              }
              #endif
2476          
2477          #if 0
              void WaitUserInput(void)
              {
                Printf("\n\rPress any key...");
                while ( !RS_ready() );
                Puts("\n\r");
              }
              #endif
2485          
2486          void Mon_tx(BYTE ch)
2487          {
2488   1        RS_tx(ch);
2489   1      }
2490          #ifdef SUPPORT_UART1
              void Mon1_tx(BYTE ch)
              {
                RS1_tx(ch);
              }
              #endif
2496          //=============================================================================
2497          //
2498          //=============================================================================
2499          /*
2500            format                description     function
2501            ------                -----------     ---------
2502            c i2cid               set I2C device ID.  SetMonAddress
2503            r idx               read data     MonReadI2CByte
2504            w idx data              write data      MonWriteI2CByte
2505            ,                 decrease 1      MonIncDecI2C
2506            <                 decrease 10
2507            .                 increase 1
2508            >                 increase 10
2509            d [idx_from] [idx_to]       dump        MonDumpI2C
2510          
2511            ( i2cid index           read        MonNewReadI2CByte
2512            ) i2cid idx data          write       MonNewWriteI2CByte
2513            & i2cid idx_from idx_to dump    dump        MonNewDumpI2C
2514            b i2cid index startbit|endbit data  bitwise wirte   MonWriteBit
2515            wait reg mask result max_wait   wait        MonWait
2516          
2517            ;                 comment
2518            /                 repeat last command
2519            `                 repeat command without CR
2520          */
2521          
2522          /**
2523          * format: c I2cId
2524          */
2525          void SetMonAddress(BYTE addr)
2526          {
2527   1        MonAddress = addr;
2528   1      }
2529          
2530          
2531          /**
2532          * increase/decrease value
2533          *
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 42  

2534          * @param inc 0:decrease 1:increase 10:decrease 10 value. 11:increase 10 value
2535          *
2536          * format
2537          * decrease 1:  ,
2538          * decrease 10: <
2539          * increase 1:  .
2540          * increase 10: >
2541          *
2542          * extern
2543          * MonIndex,MonWdata
2544          */
2545          void MonIncDecI2C(BYTE inc)
2546          {
2547   1        DWORD dTemp;
2548   1      
2549   1        switch(inc){
2550   2          case 0:  MonWdata--;    break;
2551   2          case 1:  MonWdata++;    break;
2552   2          case 10: MonWdata-=0x10;  break;
2553   2          case 11: MonWdata+=0x10;  break;
2554   2        }
2555   1      
2556   1        if ( MonAddress == TW88I2CAddress )
2557   1          WriteTW88(MonIndex, MonWdata);
2558   1      #ifdef SUPPORT_I2C_MASTER
2559   1        else
2560   1          WriteI2C_multi(MonAddress,MonIndexLen<<4|MonDataLen,MonIndex,MonWdata);
2561   1      #endif
2562   1      
2563   1        if( echo ) {
2564   2          Printf("Write ");
2565   2          if(MonIndexLen==2)    Printf("%04xh:",       MonIndex);
2566   2          else          Printf("%02bxh:",(BYTE)MonIndex);
2567   2          if(MonDataLen==4)   Printf("%08lxh",      MonWdata);
2568   2          else if(MonDataLen==2)  Printf("%04xh", (WORD)MonWdata);
2569   2          else          Printf("%02bxh",(BYTE)MonWdata);
2570   2      
2571   2          if ( MonAddress == TW88I2CAddress )
2572   2            dTemp = ReadTW88(MonIndex);
2573   2      #ifdef SUPPORT_I2C_MASTER
2574   2          else 
2575   2            dTemp = ReadI2C_multi(MonAddress, MonIndexLen<<4 | MonDataLen, MonIndex);
2576   2      #endif
2577   2          Printf(" ==> Read ");
2578   2          if(MonIndexLen==2)    Printf("%04xh:",       MonIndex);
2579   2          else          Printf("%02bxh:",(BYTE)MonIndex);
2580   2          if(MonDataLen==4)   Printf("%08lxh",      dTemp);
2581   2          else if(MonDataLen==2)  Printf("%04xh", (WORD)dTemp);
2582   2          else          Printf("%02bxh",(BYTE)dTemp);
2583   2        }
2584   1        Prompt();
2585   1      }
2586          
2587          
2588          //============================================================
2589          // new commands for index and data size
2590          //============================================================
2591          
2592          
2593          
2594          void MonReadI2C_multi(BYTE f_id, BYTE idx_len, BYTE data_len)
2595          {
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 43  

2596   1        BYTE Slave;
2597   1      #ifdef DEBUG_UART
                BYTE i;
              #endif
2600   1        DWORD dTemp;
2601   1      
2602   1      
2603   1        if( argc < (2+f_id) ) {
2604   2          Printf("   --> Missing parameter !!!");
2605   2      #ifdef DEBUG_UART
                  for(i=0; i < 20; i++) {
                    Printf(" %02bx",monstr[i]);
                  }
              #endif
2610   2          return;
2611   2        }
2612   1      
2613   1        if(f_id) {
2614   2          Slave = a2h(argv[1]);
2615   2          MonIndex = a2h( argv[2] );
2616   2        }
2617   1        else {
2618   2          Slave = MonAddress;
2619   2          MonIndex = a2h(argv[1]);
2620   2        }
2621   1        if ( Slave == TW88I2CAddress ) {
2622   2          if(MonIndexLen == 1) {
2623   3            MonIndexLen = 2;
2624   3            MonIndex |= ((WORD)ReadTW88Byte(0xff) << 8);
2625   3          }
2626   2          dTemp = ReadTW88(MonIndex);
2627   2        } 
2628   1      #ifdef SUPPORT_I2C_MASTER
2629   1        else {
2630   2          dTemp = ReadI2C_multi(Slave, idx_len << 4 | data_len, MonIndex);
2631   2        }
2632   1      #endif
2633   1        if( echo ) {
2634   2          Printf("\n\r<R>%02bx", Slave);
2635   2          if(idx_len==2)      Printf("[%04x]",       MonIndex);
2636   2          else          Printf("[%02bx]",(BYTE)MonIndex);
2637   2      
2638   2          if(data_len==4)     Printf("=%08lx",      dTemp);
2639   2          else if(data_len==2)  Printf("=%04x", (WORD)dTemp);
2640   2          else          Printf("=%02bx",(BYTE)dTemp);
2641   2        }
2642   1        MonWdata = dTemp; //save for increase & decrease
2643   1      }
2644          
2645          void MonWriteI2C_multi(BYTE f_id, BYTE idx_len, BYTE data_len)
2646          {
2647   1        BYTE Slave;
2648   1        static DWORD dTemp;
2649   1      
2650   1        if( argc< (3+f_id) ) {
2651   2          Printf("   --> Missing parameter !!!");
2652   2      #ifdef DEBUG_UART
                  DEBUG_dump_uart0();
              #endif
2655   2          return;
2656   2        }
2657   1        if(f_id) {
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 44  

2658   2          Slave    = a2h( argv[1] );
2659   2          MonIndex = a2h( argv[2] );
2660   2          MonWdata = a2h( argv[3] );
2661   2        }
2662   1        else {
2663   2          Slave    = MonAddress;
2664   2          MonIndex = a2h( argv[1] );
2665   2          MonWdata = a2h( argv[2] );
2666   2        }
2667   1      
2668   1        if ( Slave == TW88I2CAddress ) {
2669   2          if(MonIndexLen == 1) {
2670   3            MonIndexLen = 2;
2671   3            MonIndex |= ((WORD)ReadTW88Byte(0xff) << 8);
2672   3          }
2673   2          WriteTW88(MonIndex, MonWdata);
2674   2        }
2675   1      #ifdef SUPPORT_I2C_MASTER
2676   1        else {
2677   2          WriteI2C_multi(Slave, idx_len << 4 | data_len, MonIndex, MonWdata);
2678   2        }
2679   1      #endif
2680   1        if( echo ) {
2681   2          if ( Slave == TW88I2CAddress )
2682   2            dTemp = ReadTW88(MonIndex);
2683   2      #ifdef SUPPORT_I2C_MASTER
2684   2          else
2685   2            dTemp = ReadI2C_multi(Slave, idx_len<<4 |  data_len, MonIndex);
2686   2      #endif
2687   2          Printf("\n\r<R>%02bx", Slave);
2688   2          if(idx_len==2)      Printf("[%04x]",       MonIndex);
2689   2          else          Printf("[%02bx]",(BYTE)MonIndex);
2690   2          if(data_len==4)     Printf("=%08lx",      dTemp);
2691   2          else if(data_len==2)  Printf("=%04x", (WORD)dTemp);
2692   2          else          Printf("=%02bx",(BYTE)dTemp);
2693   2        }
2694   1      }
2695          void MonToggleBit_multi(BYTE f_id, BYTE idx_len, BYTE data_len)
2696          {
2697   1        BYTE i;
2698   1        BYTE Slave;
2699   1        DWORD dTemp;
2700   1        BYTE FromBit,ToBit;
2701   1        DWORD mask, MonMask;
2702   1      
2703   1        Slave = f_id; //ignore f_id 
2704   1      
2705   1        if( argc<5 ) {
2706   2          Printf("   --> Missing parameter !!!");
2707   2      #ifdef DEBUG_UART
                  DEBUG_dump_uart0();
              #endif
2710   2          return;
2711   2        }
2712   1        Slave = a2h(argv[1]);
2713   1        MonIndex = a2h( argv[2] );
2714   1      
2715   1        if(idx_len==1 && data_len==1) {
2716   2          FromBit  =(a2h( argv[3] ) >> 4) & 0x0f;
2717   2          ToBit    = a2h( argv[3] )  & 0x0f;
2718   2        }
2719   1        else { 
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 45  

2720   2          FromBit = (a2h(argv[3]) >> 8) & 0xFF;
2721   2          ToBit   =  a2h(argv[3]) & 0xFF;   
2722   2        }
2723   1        MonMask  = a2h( argv[4] );
2724   1        mask = 0x04 << data_len;
2725   1        if( FromBit<ToBit || FromBit >= mask || ToBit >= mask) {
2726   2          Printf("\n\r   --> Wrong range of bit operation !!!");
2727   2          return;
2728   2        }
2729   1        
2730   1        if(data_len==0) {
2731   2          Printf("\n\r   invalid len");  
2732   2          return;
2733   2        }
2734   1        mask = 0;
2735   1        i=data_len*8-1; //from MS bit
2736   1        while(1) {
2737   2          mask <<= 1; //make room
2738   2          if(i <= FromBit && i >= ToBit)
2739   2            mask |= 1;
2740   2          if(i==0)
2741   2            break;
2742   2          i--;
2743   2        }
2744   1      
2745   1        if ( Slave == TW88I2CAddress ) {
2746   2          if(MonIndexLen == 1) {
2747   3            MonIndexLen = 2;
2748   3            MonIndex |= ((WORD)ReadTW88Byte(0xff) << 8);
2749   3          }     
2750   2          dTemp = ReadTW88(MonIndex);
2751   2          MonWdata = (dTemp & (~mask)) | (MonMask & mask);          
2752   2          WriteTW88(MonIndex, MonWdata);
2753   2        }
2754   1      #ifdef SUPPORT_I2C_MASTER
2755   1        else {
2756   2          dTemp = ReadI2C_multi(Slave, idx_len<<4 |  data_len, MonIndex);
2757   2          MonWdata = (dTemp & (~mask)) | (MonMask & mask);
2758   2          WriteI2C_multi(Slave, idx_len << 4 | data_len, MonIndex, MonWdata);
2759   2        }
2760   1      #endif
2761   1        if( echo ) {
2762   2          if ( Slave == TW88I2CAddress )
2763   2            dTemp = ReadTW88(MonIndex);
2764   2      #ifdef SUPPORT_I2C_MASTER
2765   2          else 
2766   2            dTemp = ReadI2C_multi(Slave, idx_len<<4 |  data_len, MonIndex);
2767   2      #endif
2768   2          Printf("\n\r<R>%02bx", Slave);
2769   2          if(idx_len==2)      Printf("[%04x]",        MonIndex);
2770   2          else          Printf("[%02bx]", (BYTE)MonIndex);
2771   2          if(data_len==4)     Printf("=%08lx",      dTemp);
2772   2          else if(data_len==2)  Printf("=%04x", (WORD)dTemp);
2773   2          else          Printf("=%02bx",(BYTE)dTemp);
2774   2        }
2775   1      }
2776                    
2777          
2778          void MonDumpI2C_multi(BYTE id, BYTE idx_len, BYTE data_len)
2779          {
2780   1        WORD  ToMonIndex;
2781   1        BYTE    Slave = id; //ignore id
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 46  

2782   1        WORD  i;
2783   1        DWORD dTemp;
2784   1        WORD temp_MonIndex; 
2785   1      
2786   1        if(id) {
2787   2          Slave = a2h(argv[1]);
2788   2          if( argc>=3 )   MonIndex = a2h(argv[2]);
2789   2          if( argc>=4 )   ToMonIndex = a2h(argv[3]);
2790   2          else      ToMonIndex = MonIndex+7;
2791   2          //if argc < 3. use old MonIndex.  
2792   2          }
2793   1          else {
2794   2          Slave = MonAddress;
2795   2          if( argc>=2 ) MonIndex = a2h(argv[1]);
2796   2          if( argc>=3 ) ToMonIndex = a2h(argv[2]);
2797   2          else      ToMonIndex = MonIndex+7;  
2798   2          //if argc < 2. use old MonIndex.  
2799   2        }
2800   1                
2801   1        if ( Slave == TW88I2CAddress ) {
2802   2          if(MonIndexLen == 1) {
2803   3            MonIndexLen = 2;
2804   3            MonIndex |= ((WORD)ReadTW88Byte(0xff) << 8);
2805   3            ToMonIndex |= (MonIndex & 0xFF00);
2806   3          }
2807   2        }
2808   1        temp_MonIndex = MonIndex;
2809   1        for(i=MonIndex; i<=ToMonIndex; i+=data_len) {
2810   2          if ( Slave == TW88I2CAddress )
2811   2            dTemp = ReadTW88(MonIndex);
2812   2      #ifdef SUPPORT_I2C_MASTER
2813   2          else 
2814   2            dTemp = ReadI2C_multi(Slave, idx_len<<4 |  data_len, MonIndex);
2815   2      #endif
2816   2      
2817   2          Printf("\n\r<R>%02bx", Slave);
2818   2          if(idx_len==2)      Printf("[%04x]=",       MonIndex);
2819   2          else          Printf("[%02bx]=",(BYTE)MonIndex);
2820   2          if(data_len==4)     Printf("%08lx",      dTemp);
2821   2          else if(data_len==2)  Printf("%04x", (WORD)dTemp);
2822   2          else          Printf("%02bx",(BYTE)dTemp);
2823   2      
2824   2          MonIndex += data_len;
2825   2        }
2826   1        //--------------------------
2827   1        //test routine
2828   1      #if 0
                if(Slave != TW88I2CAddress) {
                  BYTE buff[8*4];
                  BYTE j;
                  WORD *pTemp;
                  
                  MonIndex = temp_MonIndex;
                  ReadI2CS_multi(Slave, idx_len<<4 |  data_len, MonIndex, buff ,8);
              
                  Puts("\nBuff:");
                  for(i=0; i < 8; i++) {
                    Printf(" %02bx",buff[i]);
                  }
                  
              
                  for(i=MonIndex; i<=ToMonIndex; i+=data_len) {
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 47  

              
                    Printf("\n\r<R>%02bx", Slave);
                    if(idx_len==2)      Printf("[%04x]=", i);
                    else          Printf("[%02bx]=", (BYTE)i);
                    pTemp = (WORD *)&buff[i];
              
                    //if(data_len==4)     Printf("%08lx",      *pTemp);
                    //else if(data_len==2)  Printf("%02bx%02bx", buff[i] << 8 | buff[i+1]);
                    //else          Printf("%02bx",buff[i]);
                    for(j=0;j<data_len;j++)
                      Printf("%02bx",buff[i+j]);
              
                    Printf(" %04x",*pTemp);
              
                  }
                }
              #endif
2861   1      }
2862          /**
2863          * wait reg mask result max_wait
2864          * Note: it is not I2C function.
2865          */
2866          void MonWait(void)
2867          {
2868   1        WORD i,max;
2869   1        BYTE reg, mask, result;
2870   1        if( argc<5 ) {
2871   2          Printf("   --> Missing parameter !!!");
2872   2      #ifdef DEBUG_UART
                  DEBUG_dump_uart0();
              #endif
2875   2          return;
2876   2        }
2877   1        reg = a2h( argv[1] );
2878   1        mask = a2h( argv[2] );
2879   1        result = a2h( argv[3] );
2880   1        max = a2h( argv[4] );
2881   1        for(i=0; i < max; i++) {
2882   2          if((ReadTW88(reg) & mask)==result) {
2883   3            Printf("=>OK@%bd",i);
2884   3            break;
2885   3          }
2886   2          delay1ms(2);
2887   2        }
2888   1        if(i >= max)
2889   1          Printf("=>fail wait %bx %bx %bx %d->fail",reg,mask,result,max);
2890   1      }
2891          
2892          //=============================================================================
2893          //      Help Message
2894          //=============================================================================
2895          void MonHelp(void)
2896          {
2897   1        Puts("\n\r=======================================================");
2898   1        Puts("\n\r>>>     Welcome to Intersil Monitor  Rev 1.03       <<<");
2899   1        Puts("\n\r=======================================================");
2900   1        Puts("\n\r   R ii             ; Read data.(");
2901   1        Puts("\n\r   W ii dd          ; Write data.)");
2902   1        Puts("\n\r   D [ii] [cc]      ; Dump.&");
2903   1        Puts("\n\r   B AA II bb DD    ; Bit Operation. bb:StartEnd");
2904   1        Puts("\n\r    for multi size, use Rab format. a=idx size,b=data size");
2905   1        Puts("\n\r   C aa             ; Change I2C address");
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 48  

2906   1        Puts("\n\r   Echo On/Off      ; Terminal Echoing On/Off");
2907   1      //  Puts("\n\r   HDMI [init start dnedid dnhdcp avi timereg]");
2908   1        Puts("\n\r=======================================================");
2909   1        Puts("\n\r=== DEBUG ACCESS ECHO DELAY WAIT cache task isr time ==");
2910   1        Puts("\n\r=== MCU SPI SPIC EE I2C  key touch                   ==");
2911   1        Puts("\n\r=== menu fosd sosd init check tsc_debug trace        ==");
2912   1        Puts("\n\rimain [CVBS|SVIDEO|COMP|PC|HDMI|LVDS|BT656]  ; select Input Mode");
2913   1        Puts("\n\riBT656 [LOOP|DEC|ARGB|DTV|LVDS|OFF]          ; select BT656 Input");
2914   1        Puts("\n\rCheckAndSet                                  ; CheckAndSet input");
2915   1        Puts("\n\r=======================================================");
2916   1        Puts("\n\r");
2917   1      }
2918          void MonHelpHelp()
2919          {
2920   1        Puts("\n\r=======================================================");
2921   1        Puts("\n\rHelp for Help");
2922   1        Puts("\n\r=======================================================");
2923   1        Puts("\n\rR idx                     ;read register");
2924   1        Puts("\n\rRab idx                   ;multi byte version of 'R' command.");
2925   1        Puts("\n\r                          ;  a:index size. 1 or 2 Bytes.");
2926   1        Puts("\n\r                          ;  b:data size. 1,2 or 4 Bytes.");
2927   1        Puts("\n\r");
2928   1        Puts("\n\r( i2cid idx               ;explicit i2cid version of R command");
2929   1        Puts("\n\r(ab i2cid idx             ;multi byte version of '(' command.");
2930   1        Puts("\n\r");
2931   1        Puts("\n\rW idx data                ;write register");
2932   1        Puts("\n\rWab idx data              ;multi byte version of 'W' command.");
2933   1        Puts("\n\r");
2934   1        Puts("\n\r) i2cid idx               ;explicit i2cid version of 'W' command");
2935   1        Puts("\n\r)ab i2cid idx             ;multi byte version of ')' command.");
2936   1        Puts("\n\r");
2937   1        Puts("\n\rD [idx] [e_idx]           ;dump registers");
2938   1        Puts("\n\rDab [idx] [e_idx]         ;multi byte version of 'D' command");
2939   1        Puts("\n\r");
2940   1        Puts("\n\r& i2cid [idx] [e_idx]     ;explicit i2cid version of 'D' command");
2941   1        Puts("\n\r&ab i2cid [idx] [e_idx]   ;multi byte version of '&' command");
2942   1        Puts("\n\r");
2943   1        Puts("\n\rB i2cid SE data           ;toggle bit");
2944   1        Puts("\n\r                          ;  S,Startbit:high nibble");
2945   1        Puts("\n\r                          ;  E,Endbit:low nibble");
2946   1        Puts("\n\rBab i2cid SE data         ;multi byte version of 'B' command");
2947   1        Puts("\n\r                          ; if b is 2, or 4, SE shell be 16bit");
2948   1        Puts("\n\r                          ; and, Startbit:MS Byte");
2949   1        Puts("\n\r                          ;      Endbit:LS Byte.");
2950   1        Puts("\n\r");
2951   1      
2952   1      }
2953          #ifdef SUPPORT_UART1
              void Mon1Help(void)
              {
                Puts1("\n\r=======================================================");
                Puts1("\n\r>>>     Welcome to Intersil Monitor  Rev 1.03       <<<");
                Puts1("\n\r=======================================================");
                Puts1("\n\r   R ii             ; Read data.(");
                Puts1("\n\r   W ii dd          ; Write data.)");
                Puts1("\n\r   D [ii] [cc]      ; Dump.&");
                Puts1("\n\r   B AA II bb DD    ; Bit Operation. bb:StartEnd");
                Puts1("\n\r    for multi size, use Rab format. a=idx size,b=data size");
                Puts1("\n\r   C aa             ; Change I2C address");
                Puts1("\n\r   Echo On/Off      ; Terminal Echoing On/Off");
                  Puts1("\n\r");
                Printf1("\n\rHELP or H or ?");
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 49  

              }
              #endif
2970          //=============================================================================
2971          //
2972          //=============================================================================
2973          /**
2974          * Mon GetCommand
2975          *
2976          * @return 0: nothing. 1: found command.
2977          */
2978          BYTE MonGetCommand(void)
2979          {
2980   1        static BYTE comment=0;
2981   1        static BYTE incnt=0, last_argc=0;
2982   1        BYTE i, ch;
2983   1        BYTE ret=0;
2984   1      
2985   1        if( !RS_ready() ) return 0;
2986   1        ch = RS_rx();
2987   1      
2988   1        //----- if comment, echo back and ignore -----
2989   1        if( comment ) {
2990   2          if( ch=='\r' || ch==0x1b ) comment = 0;
2991   2          else { 
2992   3            Mon_tx(ch);
2993   3            return 0;
2994   3          }
2995   2        }
2996   1        else if( ch==';' ) {
2997   2          comment = 1;
2998   2          Mon_tx(ch);
2999   2          return 0;
3000   2        }
3001   1      
3002   1        //=====================================
3003   1        switch( ch ) {
3004   2        //--- ESC
3005   2        case 0x1b:  
3006   2          argc = 0;
3007   2          incnt = 0;
3008   2          comment = 0;
3009   2          Prompt();
3010   2          return 0;
3011   2      
3012   2        //--- end of string
3013   2        case '\r':
3014   2      
3015   2          if( incnt==0 ) {
3016   3            Prompt();
3017   3            break;
3018   3          }
3019   2      
3020   2          monstr[incnt++] = '\0';
3021   2          argc=0;
3022   2          //ignore control char.
3023   2          for(i=0; i<incnt; i++) 
3024   2            if( monstr[i] > ' ' ) 
3025   2              break;
3026   2      
3027   2          if( !monstr[i] ) {
3028   3            incnt = 0;
3029   3            comment = 0;
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 50  

3030   3            Prompt();
3031   3            return 0;
3032   3          }
3033   2          argv[0] = &monstr[i];
3034   2          for(; i<incnt; i++) {
3035   3            if( monstr[i] <= ' ' ) {
3036   4              monstr[i]='\0';
3037   4      #ifdef DEBUG_UART
                        Printf("(%s) ",  argv[argc]);
              #endif
3040   4              i++;
3041   4              while( monstr[i]==' ' || monstr[i]=='\t') i++;
3042   4              argc++;
3043   4              if( monstr[i] ){
3044   5                  argv[argc] = &monstr[i];
3045   5              }
3046   4            }
3047   3          }
3048   2      
3049   2          ret = 1;
3050   2          last_argc = argc;
3051   2          incnt = 0;
3052   2          break;
3053   2      
3054   2        //--- repeat command
3055   2        case '/':
3056   2          argc = last_argc;
3057   2          ret = 1;
3058   2          break;
3059   2      
3060   2        //--- repeat command without CR
3061   2        case '`':
3062   2        {
3063   3          BYTE i, j, ch;
3064   3      
3065   3          for(j=0; j<last_argc; j++) {
3066   4            for(i=0; i<100; i++) {
3067   5              ch = argv[j][i];
3068   5              if( ch==0 ) {
3069   6                if( j==last_argc-1 ) return 0;
3070   6                ch = ' ';
3071   6                RS_ungetch( ch );
3072   6                break;
3073   6              }
3074   5              else {
3075   6                RS_ungetch( ch );
3076   6              }
3077   5            }
3078   4          }
3079   3          break;
3080   3        }
3081   2      
3082   2        //--- back space
3083   2        case 0x08:
3084   2          if( incnt ) {
3085   3            incnt--;
3086   3            Mon_tx(ch);
3087   3            Mon_tx(' ');
3088   3            Mon_tx(ch);
3089   3          }
3090   2          break;
3091   2      
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 51  

3092   2        //--- decreamental write
3093   2        case ',':
3094   2          if( incnt ) {
3095   3            Mon_tx(ch);
3096   3            monstr[incnt++] = ch;
3097   3          }
3098   2          else
3099   2            MonIncDecI2C(0);
3100   2          break;
3101   2      
3102   2        case '<':
3103   2          if( incnt ) {
3104   3            Mon_tx(ch);
3105   3            monstr[incnt++] = ch;
3106   3          }
3107   2          else
3108   2            MonIncDecI2C(10);
3109   2          break;
3110   2      
3111   2        //--- increamental write
3112   2        case '.':
3113   2          if( incnt ) {
3114   3            Mon_tx(ch);
3115   3            monstr[incnt++] = ch;
3116   3          }
3117   2          else
3118   2            MonIncDecI2C(1);
3119   2          break;
3120   2      
3121   2        case '>':
3122   2          if( incnt ) {
3123   3            Mon_tx(ch);
3124   3            monstr[incnt++] = ch;
3125   3          }
3126   2          else
3127   2            MonIncDecI2C(11);
3128   2          break;
3129   2      
3130   2        default:
3131   2          Mon_tx(ch);
3132   2          monstr[incnt++] = ch;
3133   2      #ifdef DEBUG_UART
                  if(incnt==50) {    //BK130116
                    Puts("###");  //overflow
                  }
              #endif
3138   2          break;
3139   2        }
3140   1      
3141   1        if( ret ) {
3142   2          comment = 0;
3143   2          last_argc = argc;
3144   2          return ret;
3145   2        }
3146   1        else {
3147   2          return ret;
3148   2        }
3149   1      }
3150          
3151          #ifdef SUPPORT_UART1
              /**
              * Mon1 GetCommand
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 52  

              *
              */
              BYTE Mon1GetCommand(void)
              {
                static BYTE comment1=0;
                static BYTE incnt1=0, last_argc1=0;
                BYTE i, ch;
                BYTE ret=0;
              
                if( !RS1_ready() ) return 0;
                ch = RS1_rx();
              
                //----- if comment, echo back and ignore -----
                if( comment1 ) {
                  if( ch=='\r' || ch==0x1b ) comment1 = 0;
                  else { 
                    Mon1_tx(ch);
                    return 0;
                  }
                }
                else if( ch==';' ) {
                  comment1 = 1;
                  Mon1_tx(ch);
                  return 0;
                }
              
                //=====================================
                switch( ch ) {
              
                case 0x1b:
                  argc1 = 0;
                  incnt1 = 0;
                  comment1 = 0;
                  Prompt1();
                  return 0;
              
                //--- end of string
                case '\r':
              
                  if( incnt1==0 ) {
                    Prompt1();
                    break;
                  }
              
                  mon1str[incnt1++] = '\0';
                  argc1=0;
              
                  for(i=0; i<incnt1; i++) if( mon1str[i] > ' ' ) break;
              
                  if( !mon1str[i] ) {
                    incnt1 = 0;
                    comment1 = 0;
                    Prompt1();
                    return 0;
                  }
                  argv1[0] = &mon1str[i];
                  for(; i<incnt1; i++) {
                    if( mon1str[i] <= ' ' ) {
                      mon1str[i]='\0';
                         //Printf("(%s) ",  argv[argc]);
                      i++;
                      while( mon1str[i]==' ' ) i++;
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 53  

                      argc1++;
                      if( mon1str[i] ){
                         argv1[argc1] = &mon1str[i];
                      }
                    }
                  }
              
                  ret = 1;
                  last_argc1 = argc1;
                  incnt1 = 0;
                  
                  break;
              
                //--- repeat command
                case '/':
                  argc1 = last_argc1;
                  ret = 1;
                  break;
              
                //--- repeat command without CR
                case '`':
                {
                  BYTE i, j, ch;
              
                  for(j=0; j<last_argc1; j++) {
                    for(i=0; i<100; i++) {
                      ch = argv1[j][i];
                      if( ch==0 ) {
                        if( j==last_argc1-1 ) return 0;
                        ch = ' ';
                        RS1_ungetch( ch );
                        break;
                      }
                      else {
                        RS1_ungetch( ch );
                      }
                    }
                  }
                  break;
                }
              
                //--- back space
                case 0x08:
                  if( incnt1 ) {
                    incnt1--;
                    Mon1_tx(ch);
                    Mon1_tx(' ');
                    Mon1_tx(ch);
                  }
                  break;
              
                //--- decreamental write
                case ',':
                  if( incnt1 ) {
                    Mon1_tx(ch);
                    mon1str[incnt1++] = ch;
                  }
                  //else
                  //  MonIncDecI2C(0);    //BKTODO??
                  break;
              
                case '<':
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 54  

                  if( incnt1 ) {
                    Mon1_tx(ch);
                    mon1str[incnt1++] = ch;
                  }
                  //else
                  //  MonIncDecI2C(10); //??BKTODO??
                  break;
              
                //--- increamental write
                case '.':
                  if( incnt1 ) {
                    Mon1_tx(ch);
                    mon1str[incnt1++] = ch;
                  }
                  //else
                  //  MonIncDecI2C(1);  //??BKTODO
                  break;
              
                case '>':
                  if( incnt1 ) {
                    Mon1_tx(ch);
                    mon1str[incnt1++] = ch;
                  }
                  //else
                  //  MonIncDecI2C(11); //BKTODO
                  break;
              
                default:
                  Mon1_tx(ch);
                  mon1str[incnt1++] = ch;
                  break;
                }
              
                if( ret ) {
                  comment1 = 0;
                  last_argc1 = argc1;
                  return ret;
                }
                else {
                  return ret;
                }
              }
              #endif
3321          
3322          //*****************************************************************************
3323          //        Monitoring Command
3324          //*****************************************************************************
3325          
3326          BYTE *MonString = 0;
3327          //extern CODE BYTE DataInitADC[];
3328          //extern CODE BYTE DataInitYUV[];
3329          //extern CODE BYTE DataInitNTSC[];
3330          //extern CODE BYTE DataInitDTV[];
3331          //extern CODE BYTE DataInitTCON[];
3332          
3333          /*
3334              return 1:TwCommand 0:No.
3335          */
3336          BYTE MonGetTwCmdLength(void)
3337          {
3338   1          if(argv[0][1]==0) {
3339   2              MonIndexLen=1;
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 55  

3340   2              MonDataLen=1;
3341   2              return 1;
3342   2          }
3343   1      
3344   1          if(argv[0][1]!='1' && argv[0][1]!='2')
3345   1              return 0;
3346   1          MonIndexLen = argv[0][1] - '0';                
3347   1      
3348   1          if(argv[0][2] < '1' && argv[0][2] > '4')
3349   1              return 0;
3350   1          MonDataLen = argv[0][2] - '0';                
3351   1          return 1;
3352   1      }
3353          
3354          /**
3355          * monitor.
3356          *
3357          * get user command and execute it.
3358          */
3359          void Monitor(void)
3360          {
3361   1        WORD wValue;
3362   1      
3363   1        if( MonString ) {                                         
3364   2          RS_ungetch( *MonString++ );
3365   2          if( *MonString==0 ) MonString = 0;
3366   2        }
3367   1      
3368   1        if( !MonGetCommand() ) 
3369   1              return;
3370   1      
3371   1          //=====================================
3372   1          // Techwell Commands
3373   1          //=====================================
3374   1      
3375   1          //----------------------------------------------
3376   1          //R idx       ;read register
3377   1          //Rab idx     ;multi byte version of 'R' command.
3378   1          //        ; a:index size. 1 or 2 Bytes.
3379   1          //            ; b:data size. 1,2 or 4 Bytes.
3380   1          //( i2cid idx ;slave version of R command
3381   1          //(ab i2cid idx ;multi byte version of '(' command.
3382   1          //----------------------------------------------
3383   1          if(argv[0][0]=='r' || argv[0][0]=='R') {
3384   2              if(MonGetTwCmdLength()) {
3385   3                  MonReadI2C_multi(0, MonIndexLen,MonDataLen); 
3386   3            Prompt();
3387   3                  return; 
3388   3              }
3389   2          }
3390   1          else if(argv[0][0]=='(') {
3391   2              if(MonGetTwCmdLength()) {
3392   3                  MonReadI2C_multi(1, MonIndexLen,MonDataLen); 
3393   3            Prompt();
3394   3                  return; 
3395   3              }
3396   2          }
3397   1          //----------------------------------------------
3398   1        //W idx data        ;write register
3399   1        //Wab idx data      ;multi byte version of 'W' command.
3400   1        //            ; a:index size. 1 or 2 Bytes.
3401   1        //                ; b:data size. 1,2 or 4 Bytes.
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 56  

3402   1        //) i2cid idx     ;slave version of 'W' command
3403   1        //)ab i2cid idx     ;multi byte version of ')' command.
3404   1          //----------------------------------------------
3405   1        else if(argv[0][0]=='w' || argv[0][0]=='W') {
3406   2              if(MonGetTwCmdLength()) {
3407   3                  MonWriteI2C_multi(0, MonIndexLen,MonDataLen); 
3408   3            Prompt();
3409   3                  return; 
3410   3              }
3411   2          }
3412   1        else if(argv[0][0]==')') {
3413   2              if(MonGetTwCmdLength()) {
3414   3                  MonWriteI2C_multi(1, MonIndexLen,MonDataLen); 
3415   3            Prompt();
3416   3                  return; 
3417   3              }
3418   2          }
3419   1          //----------------------------------------------
3420   1        //D [idx] [end_idx]     ;dump registers
3421   1        //Dab [idx] [end_idx]   ;multi byte version of 'D' command
3422   1        //& i2cid [idx] [end_idx] ;slave version of 'D' command
3423   1        //&ab i2cid [idx] [end_idx] ;multi byte version of '&' command
3424   1          //----------------------------------------------
3425   1        else if(argv[0][0]=='d' || argv[0][0]=='D') {
3426   2              if(MonGetTwCmdLength()) {
3427   3                  MonDumpI2C_multi(0, MonIndexLen,MonDataLen); 
3428   3            Prompt();
3429   3                  return; 
3430   3              }
3431   2          }
3432   1        else if(argv[0][0]=='&') {
3433   2              if(MonGetTwCmdLength()) {
3434   3                  MonDumpI2C_multi(1, MonIndexLen,MonDataLen); 
3435   3            Prompt();
3436   3                  return; 
3437   3              }
3438   2          }
3439   1          //----------------------------------------------
3440   1        //B i2cid StartbitEndbit data ;toggle bit
3441   1        //                ;Startbit:high nibble
3442   1        //                ;Endbit:low nibble
3443   1        //Bab i2cid StartbitEndbit data ;multi byte version of 'B' command
3444   1        //                ;if b is 2, or 4, StartbitEndbit shell be 16bit
3445   1        //                ; and, Startbit:MSByte
3446   1        //                ;      Endbit:LSByte.
3447   1          //----------------------------------------------
3448   1        else if(argv[0][0]=='b' || argv[0][0]=='B') {
3449   2              if(MonGetTwCmdLength()) {
3450   3                  MonToggleBit_multi(1, MonIndexLen,MonDataLen); 
3451   3            Prompt();
3452   3                  return; 
3453   3              }
3454   2          }
3455   1          //-----------------------
3456   1          //MONITOR_COMMAND_PARSE:
3457   1          //-----------------------
3458   1        //---------------- Change I2C -----------------------
3459   1        if( !stricmp( argv[0], "C" ) ) {
3460   2          MonAddress = a2h( argv[1] );
3461   2          Printf("\n\rSetMonAddress:%d",__LINE__);
3462   2        }
3463   1        //---------------- wait -----------------------
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 57  

3464   1        else if( !stricmp( argv[0], "wait" ) ) {
3465   2          MonWait();
3466   2        }
3467   1        //---------------- delay -----------------------
3468   1        else if( !stricmp( argv[0], "delay" ) ) {
3469   2          wValue = a2i( argv[1] );
3470   2          delay1ms(wValue);
3471   2        }
3472   1        //---------------- Debug Level ---------------------
3473   1        else if ( !stricmp( argv[0], "DEBUG" ) ) {
3474   2          if( argc==2 ) {
3475   3            DebugLevel = a2h(argv[1]);
3476   3          }
3477   2          Printf("\n\rDebug Level = %2bx", DebugLevel);
3478   2        }
3479   1        //---------------- SW Key pad ---------------------
3480   1        else if ( !stricmp( argv[0], "KEY" ) ) {
3481   2          if( argc==2 ) {
3482   3            SW_key = a2h(argv[1]);
3483   3          }
3484   2          Printf("\n\rSW_key = %2bx", SW_key);
3485   2        }
3486   1        //---------------- Echo back on/off -----------------
3487   1        else if ( !stricmp( argv[0], "echo" ) ) {
3488   2          if( !stricmp( argv[1], "off" ) ) {
3489   3            echo = 0;
3490   3            Printf("\n\recho off");
3491   3          }
3492   2          else {
3493   3            echo = 1;
3494   3            Printf("\n\recho on");
3495   3          }
3496   2        }
3497   1        //---------------- access on/off -----------------
3498   1        else if ( !stricmp( argv[0], "ACCESS" ) ) {
3499   2          if(argc < 2) {
3500   3            Printf("\n\rAccess %s", g_access ? "on" : "off");
3501   3          }
3502   2          else if( !stricmp( argv[1], "0" ) ) {
3503   3            g_access = 0;
3504   3            Printf("\n\rAccess off");
3505   3            //disable interrupt.
3506   3            WriteTW88(REG003, 0xFE ); // enable only SW interrupt
3507   3          }
3508   2          else {
3509   3            g_access = 1;
3510   3            Printf("\n\rAccess on");
3511   3          }
3512   2        }
3513   1        //---------------- cache on/off -----------------
3514   1        else if ( !stricmp( argv[0], "cache" ) ) {
3515   2          if(argc >=2) {
3516   3            if( !stricmp( argv[1], "on" ) )
3517   3              SFR_CACHE_EN = 1;
3518   3            else if( !stricmp( argv[1], "off" ) )
3519   3              SFR_CACHE_EN = 0;
3520   3            else
3521   3              Printf("\n\rusage:cache [on|off]");
3522   3          }
3523   2          //cache status
3524   2          if(SFR_CACHE_EN)  Printf("\n\rcache on");
3525   2          else        Printf("\n\rcache off");
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 58  

3526   2        }
3527   1        //---------------- Help -----------------------------
3528   1        else if( !stricmp( argv[0], "H" ) 
3529   1          ||   !stricmp( argv[0], "HELP" ) 
3530   1          ||   !stricmp( argv[0], "?" ) ) {
3531   2          MonHelp();
3532   2        }
3533   1        else if( !stricmp( argv[0], "??" ) ) {
3534   2          MonHelpHelp();
3535   2        }
3536   1      
3537   1        //------------------------------------------------------
3538   1        //---------------- OTHERS  -----------------------------
3539   1        //------------------------------------------------------
3540   1      #ifdef SUPPORT_DELTA_RGB
                else if( !stricmp( argv[0], "AUO" ) )   monitor_auo();
                else if( !stricmp( argv[0], "AUO2" ) )  monitor_auo1()
              #endif
3544   1      #if defined(SUPPORT_BT656)
3545   1        else if( !stricmp( argv[0], "bt656" ))  monitor_bt656();  
3546   1      #endif
3547   1        else if( !stricmp( argv[0], "bt656e" )) monitor_bt656e();
3548   1        else if( !stricmp( argv[0], "compiler_warning" )) monitor_compiler();
3549   1        else if( !stricmp( argv[0], "check" ) ) monitor_check();
3550   1        else if( !stricmp( argv[0], "CheckAndSet" ) ) monitor_checkandset();
3551   1      
3552   1      #ifdef SUPPORT_DELTA_RGB
                else if( !stricmp( argv[0], "delta" ) ) monitor_delta();  //Delta RGB Panel Test
              #endif
3555   1      #ifdef USE_SFLASH_EEPROM
3556   1        else if( !stricmp( argv[0], "EE" ) )  MonitorEE();    //--EEPROM Debug    
3557   1      #endif
3558   1        else if( !stricmp( argv[0], "fosd" ))   MonitorFOsd();    //--Font Osd Debug
3559   1        else if( !stricmp( argv[0], "fosd" ))   monitor_fosd(); //--FontOSD Test
3560   1      #if 0
                else if( !stricmp( argv[0], "grid" ) )  monitor_grid();
              #endif
3563   1        else if( !stricmp( argv[0], "HDMI" ) )  monitor_hdmi();
3564   1      
3565   1      
3566   1      #if defined(SUPPORT_I2C_MASTER) 
3567   1        else if( !stricmp( argv[0], "i2c" ) )   monitor_i2c();  //i2c debug routine
3568   1      #endif
3569   1        else if( !stricmp( argv[0], "i2cspi" ) )  monitor_i2cspi();
3570   1        else if( !stricmp( argv[0], "i2cspic" ) )   monitor_i2cspic();
3571   1        else if( !stricmp( argv[0], "ISR" ) )   monitor_isr();
3572   1        else if( !stricmp( argv[0], "init" ) )  monitor_init();
3573   1        else if( !stricmp( argv[0], "imain") )  monitor_imain();
3574   1      #if defined(SUPPORT_BT656)
3575   1        else if( !stricmp( argv[0], "iBT656") ) monitor_ibt656();
3576   1      #endif
3577   1        else if( !stricmp( argv[0], "MCU" ) )   MonitorMCU(); //--MCU Debug
3578   1        else if( !stricmp( argv[0], "menu" ) )  MonitorMenu();  //-- MENU Debug
3579   1      #if 0
                else if( !stricmp( argv[0], "pclk" ) )  monitor_pclk();
              #endif
3582   1        else if( !stricmp( argv[0], "rpixel" )) monitor_rpixel();
3583   1      #if defined(REMO_RC5) && defined(DEBUG_REMO)
                else if( !stricmp( argv[0], "remo"))  monitor_remo();
              #endif
3586   1        else if( !stricmp( argv[0], "SPI" ) )   MonitorSPI();   //--SPI Debug
3587   1        else if( !stricmp( argv[0], "SPIC" ) )  MonitorSPIC();  //--SPI Debug
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 59  

3588   1        else if( !stricmp( argv[0], "sosd" ) )  MonitorSOsd();  //--SPI Osd Debug
3589   1        else if( !stricmp( argv[0], "sosd" ))   monitor_sosd(); //--SpiOSD Test
3590   1        else if( !stricmp( argv[0], "scaler" )) monitor_scaler();
3591   1        else if( !stricmp( argv[0], "task" ) )  monitor_task(); //--task on/off
3592   1        else if( !stricmp( argv[0], "time" ) )  monitor_time(); //--System Clock Display
3593   1      #ifdef SUPPORT_TOUCH
3594   1        else if( !stricmp( argv[0], "tsc" ))  monitor_touch();  //--Touch Debug
3595   1      #endif  
3596   1      #ifdef DEBUG_UART
                else if( !stricmp( argv[0], "UART"))    monitor_uart(); //--debug UART
              #endif
3599   1        //----------------------------------------------------
3600   1        else {
3601   2          Printf("\n\rInvalid command...");
3602   2        }
3603   1        Prompt();
3604   1      }
3605          
3606          #if 0
              //monitor() is too long..1443 lines..
              //make it simple
              void Monitor()
              {
                //if MonString, attach
                if( MonString ) {                                         
                  RS_ungetch( *MonString++ );
                  if( *MonString==0 ) 
                    MonString = 0;
                }
                //If empty, exit
                if( !MonGetCommand() ) 
                  return;
              
                //process basic commands for TW-Terminal & TW-Dongle
                //
                //c <i2c_id>
                //wait
                //delay
                //help ? ??
              
              
                //other
                //ddremo  ->  PrintRemoCapture
                //UARTDUMP  ->
              
                //i2c   -> monitor_i2c()
                //isr   ->
                //init    ->
                //imain   -> video input select
                //ibt656  -> bt656 input select
                //checkandset ->
                //checkclock,checkclock2
                //check ...
                //spi   -> monitor_spi
                //spic    -> monitor_spic
                //ee    -> monitor_ee
                //menu    -> monitor_menu
                //fosd    -> monitor_fontosd
                //sosd    -> monitor_spiosd
                //mcu   -> monitor_mcu
                //debug   -> 
                //key   -> sw key
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 60  

                //echo    ->
                //access  ->
                //cache   ->
                //task    ->
                //time    ->
                //pclk
                //testfon ->
                //ramfont
                //lutgrid -> 
                //touch
                //tsc_debug
                //trace
                //calib
                //delta
                //auo
                //hdmi
                //tgrid autogrid  stepgrid
                //bt656   -> monitor_bt656()
                //bt656e  -> 
                //rpixel
                //compiler
              
                else if ( !stricmp( argv[0], "imain") ) monitor_imain();
              
              
              }
              #endif
3677          
3678          
3679          //=============================================================================
3680          //  UART1. 57600bps 8Data 1Stop NoParity NoFlowControl
3681          //=============================================================================
3682          
3683          #ifdef SUPPORT_UART1
              BYTE *Mon1String = 0;
              void ProcessFinishMessage(void)
              {
                Puts1("OK");
              }
              /**
              * monitor1
              *
              */
              
              void Monitor1(void)
              {
                if( Mon1String ) {
                  RS1_ungetch( *Mon1String++ );
                  if( *Mon1String==0 ) Mon1String = 0;
                }
              
                if( !Mon1GetCommand() ) 
                      return;
              
                  //=====================================
                  // Techwell Commands
                  //=====================================
                  //----------------------------------------------
                  //R idx       ;read register
                  //Rab idx     ;multi byte version of 'R' command.
                  //        ; a:index size. 1 or 2 Bytes.
                  //            ; b:data size. 1,2 or 4 Bytes.
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 61  

                  //( i2cid idx ;slave version of R command
                  //(ab i2cid idx ;multi byte version of '(' command.
                  //----------------------------------------------
                  if(argv1[0][0]=='r' || argv1[0][0]=='R') {
                      if(Mon1GetTwCmdLength()) {
                          Mon1ReadI2C_multi(0, Mon1IndexLen,Mon1DataLen); 
                    Prompt1();
                          return; 
                      }
                  }
                  else if(argv1[0][0]=='(') {
                      if(Mon1GetTwCmdLength()) {
                          Mon1ReadI2C_multi(1, Mon1IndexLen,Mon1DataLen); 
                    Prompt1();
                          return; 
                      }
                  }
                  //----------------------------------------------
                //W idx data        ;write register
                //Wab idx data      ;multi byte version of 'W' command.
                //            ; a:index size. 1 or 2 Bytes.
                //                ; b:data size. 1,2 or 4 Bytes.
                //) i2cid idx     ;slave version of 'W' command
                //)ab i2cid idx     ;multi byte version of ')' command.
                  //----------------------------------------------
                else if(argv1[0][0]=='w' || argv1[0][0]=='W') {
                      if(Mon1GetTwCmdLength()) {
                          Mon1WriteI2C_multi(0, Mon1IndexLen,Mon1DataLen); 
                    Prompt1();
                          return; 
                      }
                  }
                else if(argv1[0][0]==')') {
                      if(Mon1GetTwCmdLength()) {
                          Mon1WriteI2C_multi(1, Mon1IndexLen,Mon1DataLen); 
                    Prompt1();
                          return; 
                      }
                  }
                  //----------------------------------------------
                //D [idx] [end_idx]     ;dump registers
                //Dab [idx] [end_idx]   ;multi byte version of 'D' command
                //& i2cid [idx] [end_idx] ;slave version of 'D' command
                //&ab i2cid [idx] [end_idx] ;multi byte version of '&' command
                  //----------------------------------------------
                else if(argv1[0][0]=='d' || argv1[0][0]=='D') {
                      if(Mon1GetTwCmdLength()) {
                          Mon1DumpI2C_multi(0, Mon1IndexLen,Mon1DataLen); 
                    Prompt1();
                          return; 
                      }
                  }
                else if(argv1[0][0]=='&') {
                      if(Mon1GetTwCmdLength()) {
                          Mon1DumpI2C_multi(1, Mon1IndexLen,Mon1DataLen); 
                    Prompt1();
                          return; 
                      }
                  }
                  //----------------------------------------------
                //B i2cid StartbitEndbit data ;toggle bit
                //                ;Startbit:high nibble
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 62  

                //                ;Endbit:low nibble
                //Bab i2cid StartbitEndbit data ;multi byte version of 'B' command
                //                ;if b is 2, or 4, StartbitEndbit shell be 16bit
                //                ; and, Startbit:MSByte
                //                ;      Endbit:LSByte.
                  //----------------------------------------------
                else if(argv1[0][0]=='b' || argv1[0][0]=='B') {
                      if(Mon1GetTwCmdLength()) {
                          Mon1ToggleBit_multi(1, Mon1IndexLen,Mon1DataLen); 
                    Prompt1();
                          return; 
                      }
                  }
                  //-----------------------
                  //MONITOR_COMMAND_PARSE:
                  //-----------------------
                //---------------- Change I2C -----------------------
                if( !stricmp( argv1[0], "C" ) ) {
                  Mon1Address = a2h( argv1[1] );
                  Printf("\n\rSetMon1Address:%d",__LINE__);
                }
                //---------------- wait -----------------------
                else if( !stricmp( argv1[0], "wait" ) ) {
                  MonWait();
                }
                //---------------- delay -----------------------
                else if( !stricmp( argv1[0], "delay" ) ) {
                  wValue = a2i( argv1[1] );
                  delay1ms(wValue);
                }
                //---------------- Debug Level ---------------------
                else if ( !stricmp( argv1[0], "DEBUG" ) ) {
                  if( argc1==2 ) {
                    DebugLevel = a2h(argv1[1]);
                  }
                  Printf1("\n\rDebug Level = %2bx", DebugLevel);
                }
                //---------------- SW Key pad ---------------------
                else if ( !stricmp( argv1[0], "KEY" ) ) {
                  if( argc1==2 ) {
                    SW_key = a2h(argv1[1]);
                  }
                  Printf1("\n\rSW_key = %2bx", SW_key);
                }
                //---------------- Echo back on/off -----------------
                else if ( !stricmp( argv1[0], "echo" ) ) {
                  if( !stricmp( argv1[1], "off" ) ) {
                    echo = 0;
                    Printf1("\n\recho off");
                  }
                  else {
                    echo = 1;
                    Printf1("\n\recho on");
                  }
                }
                //---------------- access on/off -----------------
                else if ( !stricmp( argv1[0], "ACCESS" ) ) {
                  if(argc1 < 2) {
                    Printf1("\n\rAccess %s", g_access ? "on" : "off");
                  }
                  else if( !stricmp( argv1[1], "0" ) ) {
                    g_access = 0;
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 63  

                    Printf1("\n\rAccess off");
                    //disable interrupt.
                    WriteTW88(REG003, 0xFE ); // enable only SW interrupt
                  }
                  else {
                    g_access = 1;
                    Printf1("\n\rAccess on");
                  }
                }
                //---------------- cache on/off -----------------
                else if ( !stricmp( argv1[0], "cache" ) ) {
                  if(argc1 >=2) {
                    if( !stricmp( argv1[1], "on" ) )
                      SFR_CACHE_EN = 1;
                    else if( !stricmp( argv1[1], "off" ) )
                      SFR_CACHE_EN = 0;
                    else
                      Printf1("\n\rusage:cache [on|off]");
                  }
                  //cache status
                  if(SFR_CACHE_EN)  Printf1("\n\rcache on");
                  else        Printf1("\n\rcache off");
                }
                //---------------- Help -----------------------------
                else if( !stricmp( argv1[0], "H" ) 
                  ||   !stricmp( argv1[0], "HELP" ) 
                  ||   !stricmp( argv1[0], "?" ) ) {
                  Mon1Help();
                }
                else if( !stricmp( argv1[0], "??" ) ) {
                  Mon1HelpHelp();
                }
                //----------------------------------------------------
                else {
                  Printf1("\n\rInvalid command...");
                }
                Prompt1();
              }
              #endif
3875          
3876          //---------------- check clock-------------------------
3877          // command checkclock
3878          //
3879          // step.
3880          //  access 0
3881          //  mcu intc
3882          //  checkclock and than type enter.
3883          //  mcu intc again
3884          //  test checkclock again
3885          //..
3886          //Note: When FW read SystemClock, use SFRB_EA.
3887          //
3888          void Test_Checkclock2(void)
3889          {}
3890          void Test_Checkclock(void)
3891          {
3892   1        //WORD ii, loop_max;
3893   1        volatile DWORD count;
3894   1        volatile DWORD WaitTime,CapturedSystemClock;
3895   1        DWORD count_72_low=0, count_72_high;
3896   1        DWORD count_54_low=0, count_54_high;
3897   1        DWORD count_36_low=0, count_36_high;
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 64  

3898   1        DWORD count_27_low=0, count_27_high;
3899   1        DWORD lloopp;
3900   1        WORD WaitInterval=50; //200*10mSec
3901   1        BYTE cache;
3902   1      
3903   1        //loop_max = 0x1000;
3904   1        Printf("\n\rPress any key to Quit...");
3905   1      
3906   1        cache = SFR_CACHE_EN;
3907   1        SFR_CACHE_EN = 0;
3908   1        WriteTW88(REG400, ReadTW88(REG400) & ~0x04);
3909   1        SFRB_EX0  = 0;
3910   1        SFRB_EINT4 = 0;
3911   1        SFRB_ET1 = 0;
3912   1        DisableRemoInt();
3913   1        lloopp = 0;
3914   1      
3915   1        while(!RS_ready()) {
3916   2          Printf("\r%ld",lloopp);
3917   2          lloopp++;
3918   2          //--------------------
3919   2          //Printf("\n\r27MHz..");
3920   2          WriteTW88(REG4E1, ReadTW88(REG4E1) & 0xCF);
3921   2          count = 0;
3922   2          WaitOneVBlank();
3923   2          SFRB_ET0 = 0;
3924   2          CapturedSystemClock = SystemClock;
3925   2          SFRB_ET0 = 1;
3926   2          WaitTime = CapturedSystemClock + WaitInterval;
3927   2          do {
3928   3            count++;
3929   3            SFRB_ET0 = 0;
3930   3            CapturedSystemClock = SystemClock;
3931   3            SFRB_ET0 = 1;
3932   3          } while( WaitTime > CapturedSystemClock);
3933   2          //Printf(" count:%ld",count);
3934   2          if(count_27_low==0) {
3935   3            count_27_low = count * 0.8;
3936   3            count_27_high = count * 1.2;
3937   3            Printf("\n\r27MHz...");
3938   3            Printf(" count:%ld",count);
3939   3            Printf(" %ld~%ld",count_27_low,count_27_high);
3940   3          }
3941   2          else {
3942   3            if(count < count_27_low || count > count_27_high) {
3943   4              Printf("\n\rFAIL:27MHz..");
3944   4              Printf(" count:%ld",count);
3945   4              Printf(" WaitTime:%ld,SystemClock:%ld",WaitTime,CapturedSystemClock);
3946   4              break;
3947   4            }
3948   3            Printf(".");
3949   3          }
3950   2      
3951   2      
3952   2          //Printf("\n\rPLL 72..");
3953   2          PllClkSetSource(PLLCLK_PLL108); //WriteTW88(REG4E0, ReadTW88(REG4E0) | 0x01);
3954   2          WriteTW88(REG4E1, 0x21);
3955   2          count = 0;
3956   2          WaitOneVBlank();
3957   2          SFRB_ET0 = 0;
3958   2          CapturedSystemClock = SystemClock;
3959   2          SFRB_ET0 = 1;
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 65  

3960   2          WaitTime = CapturedSystemClock + WaitInterval;
3961   2          do {
3962   3            count++;
3963   3            SFRB_ET0 = 0;
3964   3            CapturedSystemClock = SystemClock;
3965   3            SFRB_ET0 = 1;
3966   3          } while( WaitTime > CapturedSystemClock);
3967   2          //Printf(" count:%ld",count);
3968   2          if(count_72_low==0) {
3969   3            count_72_low = count * 0.8;
3970   3            count_72_high = count * 1.2;
3971   3            Printf("\n\rPLL 72..");
3972   3            Printf(" count:%ld",count);
3973   3            Printf(" %ld~%ld",count_72_low,count_72_high);
3974   3          }
3975   2          else {
3976   3            if(count < count_72_low || count > count_72_high) {
3977   4              Printf("\n\rFAIL:PLL 72..");
3978   4              Printf(" count:%ld",count);
3979   4              Printf(" WaitTime:%ld,SystemClock:%ld",WaitTime,CapturedSystemClock);
3980   4              break;
3981   4            }
3982   3            Printf(".");
3983   3          }
3984   2      
3985   2      
3986   2          //Printf("\n\rPLL 54..");
3987   2          WriteTW88(REG4E1, 0x22);
3988   2          count = 0;
3989   2          WaitOneVBlank();
3990   2          SFRB_ET0 = 0;
3991   2          CapturedSystemClock = SystemClock;
3992   2          SFRB_ET0 = 1;
3993   2          WaitTime = CapturedSystemClock + WaitInterval;
3994   2          do {
3995   3            count++;
3996   3            SFRB_ET0 = 0;
3997   3            CapturedSystemClock = SystemClock;
3998   3            SFRB_ET0 = 1;
3999   3          } while( WaitTime > CapturedSystemClock);
4000   2          //Printf(" count:%ld",count);
4001   2          if(count_54_low==0) {
4002   3            count_54_low = count * 0.8;
4003   3            count_54_high = count * 1.2;
4004   3            Printf("\n\rPLL 54..");
4005   3            Printf(" count:%ld",count);
4006   3            Printf(" %ld~%ld",count_54_low,count_54_high);
4007   3          }
4008   2          else {
4009   3            if(count < count_54_low || count > count_54_high) {
4010   4              Printf("\n\rFAIL:PLL 54..");
4011   4              Printf(" count:%ld",count);
4012   4              Printf(" WaitTime:%ld,SystemClock:%ld",WaitTime,CapturedSystemClock);
4013   4              break;
4014   4            }
4015   3            Printf(".");
4016   3          }
4017   2      
4018   2      
4019   2      
4020   2      
4021   2          //Printf("\n\rPLL 36..");
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 66  

4022   2          WriteTW88(REG4E1, 0x24);
4023   2          count = 0;
4024   2          WaitOneVBlank();
4025   2          SFRB_ET0 = 0;
4026   2          CapturedSystemClock = SystemClock;
4027   2          SFRB_ET0 = 1;
4028   2          WaitTime = CapturedSystemClock + WaitInterval;
4029   2          do {
4030   3            count++;
4031   3            SFRB_ET0 = 0;
4032   3            CapturedSystemClock = SystemClock;
4033   3            SFRB_ET0 = 1;
4034   3          } while( WaitTime > CapturedSystemClock);
4035   2          //Printf(" count:%ld",count);
4036   2          if(count_36_low==0) {
4037   3            count_36_low = count * 0.8;
4038   3            count_36_high = count * 1.2;
4039   3            Printf("\n\rPLL 36..");
4040   3            Printf(" count:%ld",count);
4041   3            Printf(" %ld~%ld",count_36_low,count_36_high);
4042   3      
4043   3            Printf("\n\r");
4044   3          }
4045   2          else {
4046   3            if(count < count_36_low || count > count_36_high) {
4047   4              Printf("\n\rFAIL:PLL 36..");
4048   4              Printf(" count:%ld",count);
4049   4              Printf(" WaitTime:%ld,SystemClock:%ld",WaitTime,CapturedSystemClock);
4050   4              break;
4051   4            }
4052   3            Printf(".");
4053   3          }
4054   2      
4055   2      
4056   2      
4057   2          //Printf("\n\rPLL 27..");
4058   2          WriteTW88(REG4E1, 0x26);
4059   2          count = 0;
4060   2          WaitOneVBlank();
4061   2          SFRB_ET0 = 0;
4062   2          CapturedSystemClock = SystemClock;
4063   2          SFRB_ET0 = 1;
4064   2          WaitTime = CapturedSystemClock + WaitInterval;
4065   2          do {
4066   3            count++;
4067   3            SFRB_ET0 = 0;
4068   3            CapturedSystemClock = SystemClock;
4069   3            SFRB_ET0 = 1;
4070   3          } while( WaitTime > CapturedSystemClock);
4071   2          //Printf(" count:%ld",count);
4072   2          if(count < count_27_low || count > count_27_high) {
4073   3            Printf("\n\rFAIL:PLL 27..");
4074   3            Printf(" count:%ld",count);
4075   3            Printf(" WaitTime:%ld,SystemClock:%ld",WaitTime,CapturedSystemClock);
4076   3            break;
4077   3          }
4078   2          Printf(".");
4079   2      
4080   2      
4081   2      
4082   2          //--------------------
4083   2          //Printf("\n\rPCLK1 72..");
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 67  

4084   2          WriteTW88(REG4E1, 0x01);  //27MHz first
4085   2          PllClkSetSource(PLLCLK_SSPLL);    //WriteTW88(REG4E0, ReadTW88(REG4E0) & ~0x01);
4086   2          WriteTW88(REG4E1, 0x21);
4087   2          count = 0;
4088   2          WaitOneVBlank();
4089   2          SFRB_ET0 = 0;
4090   2          CapturedSystemClock = SystemClock;
4091   2          SFRB_ET0 = 1;
4092   2          WaitTime = CapturedSystemClock + WaitInterval;
4093   2          do {
4094   3            count++;
4095   3            SFRB_ET0 = 0;
4096   3            CapturedSystemClock = SystemClock;
4097   3            SFRB_ET0 = 1;
4098   3          } while( WaitTime > CapturedSystemClock);
4099   2          //Printf(" count:%ld",count);
4100   2          if(count < count_72_low || count > count_72_high) {
4101   3            Printf("\n\rFAIL:PCLK 72..");
4102   3            Printf(" count:%ld",count);
4103   3            Printf(" WaitTime:%ld,SystemClock:%ld",WaitTime,CapturedSystemClock);
4104   3            break;
4105   3          }
4106   2          Printf(".");
4107   2      
4108   2      
4109   2          //Printf("\n\rPCLK1 54..");
4110   2          WriteTW88(REG4E1, 0x22);
4111   2          count = 0;
4112   2          WaitOneVBlank();
4113   2          SFRB_ET0 = 0;
4114   2          CapturedSystemClock = SystemClock;
4115   2          SFRB_ET0 = 1;
4116   2          WaitTime = CapturedSystemClock + WaitInterval;
4117   2          do {
4118   3            count++;
4119   3            SFRB_ET0 = 0;
4120   3            CapturedSystemClock = SystemClock;
4121   3            SFRB_ET0 = 1;
4122   3          } while( WaitTime > CapturedSystemClock);
4123   2          //Printf(" count:%ld",count);
4124   2          if(count < count_54_low || count > count_54_high) {
4125   3            Printf("\n\rFAIL:PCLK 54..");
4126   3            Printf(" count:%ld",count);
4127   3            Printf(" WaitTime:%ld,SystemClock:%ld",WaitTime,CapturedSystemClock);
4128   3            break;
4129   3          }
4130   2          Printf(".");
4131   2      
4132   2      
4133   2          //Printf("\n\rPCLK1 36..");
4134   2          WriteTW88(REG4E1, 0x24);
4135   2          count = 0;
4136   2          WaitOneVBlank();
4137   2          SFRB_ET0 = 0;
4138   2          CapturedSystemClock = SystemClock;
4139   2          SFRB_ET0 = 1;
4140   2          WaitTime = CapturedSystemClock + WaitInterval;
4141   2          do {
4142   3            count++;
4143   3            SFRB_ET0 = 0;
4144   3            CapturedSystemClock = SystemClock;
4145   3            SFRB_ET0 = 1;
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 68  

4146   3          } while( WaitTime > CapturedSystemClock);
4147   2          //Printf(" count:%ld",count);
4148   2          if(count < count_36_low || count > count_36_high) {
4149   3            Printf("\n\rFAIL:PCLK 36..");
4150   3            Printf(" count:%ld",count);
4151   3            Printf(" WaitTime:%ld,SystemClock:%ld",WaitTime,CapturedSystemClock);
4152   3            break;
4153   3          }
4154   2          Printf(".");
4155   2      
4156   2          //Printf("\n\rPCLK1 27..");
4157   2          WriteTW88(REG4E1, 0x26);
4158   2          count = 0;
4159   2          WaitOneVBlank();
4160   2          SFRB_ET0 = 0;
4161   2          CapturedSystemClock = SystemClock;
4162   2          SFRB_ET0 = 1;
4163   2          WaitTime = CapturedSystemClock + WaitInterval;
4164   2          do {
4165   3            count++;
4166   3            SFRB_ET0 = 0;
4167   3            CapturedSystemClock = SystemClock;
4168   3            SFRB_ET0 = 1;
4169   3          } while( WaitTime > CapturedSystemClock);
4170   2          //Printf(" count:%ld",count);
4171   2          if(count < count_27_low || count > count_27_high) {
4172   3            Printf("\n\rFAIL:PCLK 27..");
4173   3            Printf(" count:%ld",count);
4174   3            Printf(" WaitTime:%ld,SystemClock:%ld",WaitTime,CapturedSystemClock);
4175   3            break;
4176   3          }
4177   2          Printf(".");
4178   2      
4179   2      
4180   2          //restore
4181   2          WriteTW88(REG4E1, 0x01);  //27MHz
4182   2      
4183   2          //Printf("+++");
4184   2          //Printf("\r");
4185   2        }
4186   1        SFR_CACHE_EN = cache;
4187   1      }
4188          
4189          
4190          void Test_McuSpeed(WORD count)
4191          {
4192   1        DWORD StartClock, UsedClock;
4193   1        BYTE hour,min,sec,ms;
4194   1        BYTE j,k;
4195   1        WORD i;
4196   1      
4197   1      
4198   1        Printf("\n\rStart");
4199   1        SFR_CACHE_EN = 0;
4200   1      
4201   1        SFRB_ET0 = 0;
4202   1        StartClock = SystemClock;
4203   1        SFRB_ET0 = 1;
4204   1      
4205   1        for(i=0; i < count; i++) {
4206   2          for(j=0; j < 100; j++) {
4207   3            for(k=0; k < 100; k++) {
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 69  

4208   4              ;
4209   4            } 
4210   3          }
4211   2          Puts(".");      
4212   2        }
4213   1        SFRB_ET0 = 0;
4214   1        UsedClock = SystemClock;
4215   1        SFRB_ET0 = 1;
4216   1        UsedClock -= StartClock;
4217   1      
4218   1      
4219   1      
4220   1        ms = (BYTE)(UsedClock%100);
4221   1        UsedClock = UsedClock/100;
4222   1        if(UsedClock==0) {
4223   2          sec = 0;
4224   2          min = 0;
4225   2          hour = 0;
4226   2        }
4227   1        else {
4228   2          sec = (BYTE)(UsedClock % 60);
4229   2          UsedClock = UsedClock / 60;
4230   2          if(UsedClock==0) {
4231   3            min = 0;
4232   3            hour = 0;
4233   3          }
4234   2          else {
4235   3            min = (BYTE)(UsedClock%60);
4236   3            hour = UsedClock / 60;
4237   3          }
4238   2        }
4239   1        Printf("\n\rUsedClock %bd:%02bd:%02bd.%02bd", hour,min,sec ,ms);
4240   1      
4241   1      
4242   1        SFR_CACHE_EN = 1; 
4243   1      }
4244          
4245          //struct ch_t {
4246          //  char c0;
4247          //  char c1;
4248          //};
4249          //union combo_t {
4250          //  WORD w;
4251          //  struct ch_t ch;
4252          //}
4253          //
4254          //void Test_Union(void)
4255          //{
4256          //  union combo_t x;
4257          //    
4258          //}
4259          
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 70  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com03E6 (BEGIN)
0000         L?0999:
0000         L?1000:
0000 90000000    E     MOV     DPTR,#?_stricmp?BYTE+03H
0004 7400        R     MOV     A,#MBYTE ?SC_315
0006 F0                MOVX    @DPTR,A
0007 A3                INC     DPTR
0008 7400        R     MOV     A,#HIGH ?SC_315
000A F0                MOVX    @DPTR,A
000B 7400        R     MOV     A,#LOW ?SC_315
000D         L?1001:
000D A3                INC     DPTR
000E         L?1002:
000E F0                MOVX    @DPTR,A
000F         L?1003:
000F 90000000    R     MOV     DPTR,#argv+03H
0013         L?1004:
0013 E0                MOVX    A,@DPTR
0014 FB                MOV     R3,A
0015 A3                INC     DPTR
0016 E0                MOVX    A,@DPTR
0017 FA                MOV     R2,A
0018 A3                INC     DPTR
0019 E0                MOVX    A,@DPTR
001A F9                MOV     R1,A
001B 22                RET     
001C         L?1005:
001C         L?1006:
001C 7B3C              MOV     R3,#03CH
001E         L?1007:
001E E4                CLR     A
001F FA                MOV     R2,A
0020 F9                MOV     R1,A
0021 F8                MOV     R0,A
0022         L?1008:
0022 90000000    R     MOV     DPTR,#time
0026         L?1009:
0026 E0                MOVX    A,@DPTR
0027 FC                MOV     R4,A
0028 A3                INC     DPTR
0029 E0                MOVX    A,@DPTR
002A FD                MOV     R5,A
002B A3                INC     DPTR
002C E0                MOVX    A,@DPTR
002D FE                MOV     R6,A
002E A3                INC     DPTR
002F E0                MOVX    A,@DPTR
0030 FF                MOV     R7,A
0031 22                RET     
0032         L?1010:
0032         L?1011:
0032 90000000    R     MOV     DPTR,#count
0036 E0                MOVX    A,@DPTR
0037 FC                MOV     R4,A
0038 A3                INC     DPTR
0039 E0                MOVX    A,@DPTR
003A FD                MOV     R5,A
003B A3                INC     DPTR
003C E0                MOVX    A,@DPTR
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 71  

003D FE                MOV     R6,A
003E A3                INC     DPTR
003F E0                MOVX    A,@DPTR
0040 2401              ADD     A,#01H
0042 FF                MOV     R7,A
0043 E4                CLR     A
0044 3E                ADDC    A,R6
0045 FE                MOV     R6,A
0046 E4                CLR     A
0047 3D                ADDC    A,R5
0048 FD                MOV     R5,A
0049 E4                CLR     A
004A 3C                ADDC    A,R4
004B FC                MOV     R4,A
004C 90000000    R     MOV     DPTR,#count
0050 110000      E     ACALL   ?C?LSTXDATA
0053 C2A9              CLR     SFRB_ET0
0055 AF00        E     MOV     R7,SystemClock+03H
0057 AE00        E     MOV     R6,SystemClock+02H
0059 AD00        E     MOV     R5,SystemClock+01H
005B AC00        E     MOV     R4,SystemClock
005D 90000000    R     MOV     DPTR,#CapturedSystemClock
0061 110000      E     ACALL   ?C?LSTXDATA
0064 D2A9              SETB    SFRB_ET0
0066 90000000    R     MOV     DPTR,#CapturedSystemClock
006A E0                MOVX    A,@DPTR
006B FC                MOV     R4,A
006C A3                INC     DPTR
006D E0                MOVX    A,@DPTR
006E FD                MOV     R5,A
006F A3                INC     DPTR
0070 E0                MOVX    A,@DPTR
0071 FE                MOV     R6,A
0072 A3                INC     DPTR
0073 E0                MOVX    A,@DPTR
0074 FF                MOV     R7,A
0075 90000000    R     MOV     DPTR,#WaitTime
0079         L?1012:
0079 E0                MOVX    A,@DPTR
007A F8                MOV     R0,A
007B A3                INC     DPTR
007C E0                MOVX    A,@DPTR
007D F9                MOV     R1,A
007E A3                INC     DPTR
007F E0                MOVX    A,@DPTR
0080 FA                MOV     R2,A
0081 A3                INC     DPTR
0082 E0                MOVX    A,@DPTR
0083 22                RET     
0084         L?1014:
0084         L?1015:
0084 7400        R     MOV     A,#MBYTE ?SC_1366
0086         L?1016:
0086 90000000    E     MOV     DPTR,#?_stricmp?BYTE+03H
008A F0                MOVX    @DPTR,A
008B A3                INC     DPTR
008C 22                RET     
008D         L?1017:
008D         L?1018:
008D 7400        R     MOV     A,#MBYTE ?SC_3411
008F         L?1019:
008F 90000000    E     MOV     DPTR,#?_stricmp?BYTE+03H
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 72  

0093 F0                MOVX    @DPTR,A
0094 A3                INC     DPTR
0095 22                RET     
0096         L?1020:
0096 7400        R     MOV     A,#MBYTE ?SC_337
0098         L?1021:
0098 90000000    E     MOV     DPTR,#?_stricmp?BYTE+03H
009C F0                MOVX    @DPTR,A
009D A3                INC     DPTR
009E 22                RET     
009F         L?1022:
009F 7400        R     MOV     A,#MBYTE ?SC_644
00A1         L?1023:
00A1 90000000    E     MOV     DPTR,#?_stricmp?BYTE+03H
00A5 F0                MOVX    @DPTR,A
00A6 A3                INC     DPTR
00A7 22                RET     
00A8         L?1024:
00A8 7400        R     MOV     A,#MBYTE ?SC_315
00AA         L?1025:
00AA 90000000    E     MOV     DPTR,#?_stricmp?BYTE+03H
00AE F0                MOVX    @DPTR,A
00AF A3                INC     DPTR
00B0 22                RET     
00B1         L?1026:
00B1 7400        R     MOV     A,#MBYTE ?SC_2710
00B3         L?1027:
00B3 90000000    E     MOV     DPTR,#?_stricmp?BYTE+03H
00B7 F0                MOVX    @DPTR,A
00B8 A3                INC     DPTR
00B9 22                RET     
00BA         L?1029:
00BA 7400        R     MOV     A,#MBYTE ?SC_2727
00BC         L?1030:
00BC 90000000    E     MOV     DPTR,#?_stricmp?BYTE+03H
00C0 F0                MOVX    @DPTR,A
00C1 A3                INC     DPTR
00C2 22                RET     
00C3         L?1031:
00C3 7400        R     MOV     A,#MBYTE ?SC_2954
00C5         L?1032:
00C5 90000000    E     MOV     DPTR,#?_stricmp?BYTE+03H
00C9 F0                MOVX    @DPTR,A
00CA A3                INC     DPTR
00CB 22                RET     
00CC         L?1033:
00CC 7400        R     MOV     A,#MBYTE ?SC_284
00CE         L?1034:
00CE 90000000    E     MOV     DPTR,#?_stricmp?BYTE+03H
00D2 F0                MOVX    @DPTR,A
00D3 A3                INC     DPTR
00D4 22                RET     
00D5         L?1035:
00D5 7400        R     MOV     A,#MBYTE ?SC_6407
00D7         L?1036:
00D7 90000000    E     MOV     DPTR,#?_stricmp?BYTE+03H
00DB F0                MOVX    @DPTR,A
00DC A3                INC     DPTR
00DD 22                RET     
00DE         L?1037:
00DE 7400        R     MOV     A,#MBYTE ?SC_6478
00E0         L?1038:
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 73  

00E0 90000000    E     MOV     DPTR,#?_stricmp?BYTE+03H
00E4 F0                MOVX    @DPTR,A
00E5 A3                INC     DPTR
00E6 22                RET     
00E7         L?1039:
00E7 90000000    E     MOV     DPTR,#?_stricmp?BYTE+03H
00EB F0                MOVX    @DPTR,A
00EC A3                INC     DPTR
00ED 22                RET     
00EE         L?1041:
00EE 90000000    E     MOV     DPTR,#?_stricmp?BYTE+03H
00F2 F0                MOVX    @DPTR,A
00F3 A3                INC     DPTR
00F4 22                RET     
00F5         L?1042:
00F5 90000000    E     MOV     DPTR,#?_stricmp?BYTE+03H
00F9 F0                MOVX    @DPTR,A
00FA A3                INC     DPTR
00FB 22                RET     
00FC         L?1044:
00FC 90000000    E     MOV     DPTR,#?_stricmp?BYTE+03H
0100 F0                MOVX    @DPTR,A
0101 A3                INC     DPTR
0102 22                RET     
0103         L?1045:
0103 90000000    E     MOV     DPTR,#?_stricmp?BYTE+03H
0107 F0                MOVX    @DPTR,A
0108 A3                INC     DPTR
0109 22                RET     
010A         L?1046:
010A 90000000    E     MOV     DPTR,#?_stricmp?BYTE+03H
010E F0                MOVX    @DPTR,A
010F A3                INC     DPTR
0110 22                RET     
0111         L?1047:
0111 90000000    E     MOV     DPTR,#?_stricmp?BYTE+03H
0115 F0                MOVX    @DPTR,A
0116 A3                INC     DPTR
0117 22                RET     
0118         L?1048:
0118 90000000    E     MOV     DPTR,#?_stricmp?BYTE+03H
011C F0                MOVX    @DPTR,A
011D A3                INC     DPTR
011E 22                RET     
011F         L?1051:
011F 90000000    E     MOV     DPTR,#?_stricmp?BYTE+03H
0123 F0                MOVX    @DPTR,A
0124 A3                INC     DPTR
0125 22                RET     
0126         L?1052:
0126 90000000    E     MOV     DPTR,#?_stricmp?BYTE+03H
012A F0                MOVX    @DPTR,A
012B A3                INC     DPTR
012C 22                RET     
012D         L?1053:
012D         L?1054:
012D 7B00        R     MOV     R3,#MBYTE ?SC_6547
012F 7A00        R     MOV     R2,#HIGH ?SC_6547
0131 7900        R     MOV     R1,#LOW ?SC_6547
0133 90000000    R     MOV     DPTR,#count
0137         L?1055:
0137 E0                MOVX    A,@DPTR
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 74  

0138 FC                MOV     R4,A
0139 A3                INC     DPTR
013A E0                MOVX    A,@DPTR
013B FD                MOV     R5,A
013C A3                INC     DPTR
013D E0                MOVX    A,@DPTR
013E FE                MOV     R6,A
013F A3                INC     DPTR
0140 E0                MOVX    A,@DPTR
0141 FF                MOV     R7,A
0142         L?1056:
0142 90000000    E     MOV     DPTR,#?_Printf?BYTE+03H
0146 010000      E     AJMP    ?C?LSTXDATA
0149         L?1057:
0149         L?1058:
0149 7B00        R     MOV     R3,#MBYTE ?SC_3963
014B 7A00        R     MOV     R2,#HIGH ?SC_3963
014D 7900        R     MOV     R1,#LOW ?SC_3963
014F         L?1059:
014F 90000000    R     MOV     DPTR,#MonIndex
0153         L?1060:
0153 E0                MOVX    A,@DPTR
0154 FF                MOV     R7,A
0155 A3                INC     DPTR
0156 E0                MOVX    A,@DPTR
0157 CF                XCH     A,R7
0158         L?1061:
0158 90000000    E     MOV     DPTR,#?_Printf?BYTE+03H
015C F0                MOVX    @DPTR,A
015D A3                INC     DPTR
015E EF                MOV     A,R7
015F 22                RET     
0160         L?1062:
0160 90000000    E     MOV     DPTR,#?_stricmp?BYTE+03H
0164 F0                MOVX    @DPTR,A
0165 A3                INC     DPTR
0166 22                RET     
0167         L?1064:
0167 90000000    E     MOV     DPTR,#?_stricmp?BYTE+03H
016B F0                MOVX    @DPTR,A
016C A3                INC     DPTR
016D 22                RET     
016E         L?1066:
016E 90000000    E     MOV     DPTR,#?_stricmp?BYTE+03H
0172 F0                MOVX    @DPTR,A
0173 A3                INC     DPTR
0174 22                RET     
0175         L?1067:
0175 90000000    E     MOV     DPTR,#?_stricmp?BYTE+03H
0179 F0                MOVX    @DPTR,A
017A A3                INC     DPTR
017B 22                RET     
017C         L?1068:
017C 90000000    E     MOV     DPTR,#?_stricmp?BYTE+03H
0180 F0                MOVX    @DPTR,A
0181 A3                INC     DPTR
0182 22                RET     
0183         L?1070:
0183 90000000    E     MOV     DPTR,#?_stricmp?BYTE+03H
0187 F0                MOVX    @DPTR,A
0188 A3                INC     DPTR
0189 22                RET     
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 75  

018A         L?1071:
018A 90000000    E     MOV     DPTR,#?_stricmp?BYTE+03H
018E F0                MOVX    @DPTR,A
018F A3                INC     DPTR
0190 22                RET     
0191         L?1072:
0191 90000000    E     MOV     DPTR,#?_stricmp?BYTE+03H
0195 F0                MOVX    @DPTR,A
0196 A3                INC     DPTR
0197 22                RET     
0198         L?1073:
0198 E4                CLR     A
0199 FA                MOV     R2,A
019A F9                MOV     R1,A
019B F8                MOV     R0,A
019C 110000      E     ACALL   ?C?ULDIV
019F 90000000    R     MOV     DPTR,#time
01A3 110000      E     ACALL   ?C?LSTXDATA
01A6 90000000    R     MOV     DPTR,#time
01AA         L?1074:
01AA E4                CLR     A
01AB FF                MOV     R7,A
01AC FE                MOV     R6,A
01AD FD                MOV     R5,A
01AE FC                MOV     R4,A
01AF         L?1075:
01AF E0                MOVX    A,@DPTR
01B0 F8                MOV     R0,A
01B1 A3                INC     DPTR
01B2         L?1076:
01B2 E0                MOVX    A,@DPTR
01B3 F9                MOV     R1,A
01B4 A3                INC     DPTR
01B5 E0                MOVX    A,@DPTR
01B6 FA                MOV     R2,A
01B7 A3                INC     DPTR
01B8 E0                MOVX    A,@DPTR
01B9 22                RET     
01BA         L?1077:
01BA 90000000    E     MOV     DPTR,#?_stricmp?BYTE+03H
01BE F0                MOVX    @DPTR,A
01BF A3                INC     DPTR
01C0 22                RET     
01C1         L?1078:
01C1 90000000    E     MOV     DPTR,#?_stricmp?BYTE+03H
01C5 F0                MOVX    @DPTR,A
01C6 A3                INC     DPTR
01C7 22                RET     
01C8         L?1080:
01C8 90000000    E     MOV     DPTR,#?_stricmp?BYTE+03H
01CC F0                MOVX    @DPTR,A
01CD A3                INC     DPTR
01CE 22                RET     
01CF         L?1081:
01CF 90000000    E     MOV     DPTR,#?_stricmp?BYTE+03H
01D3 F0                MOVX    @DPTR,A
01D4 A3                INC     DPTR
01D5 22                RET     
01D6         L?1082:
01D6         L?1083:
01D6 90000000    R     MOV     DPTR,#MonIndex
01DA E0                MOVX    A,@DPTR
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 76  

01DB FE                MOV     R6,A
01DC A3                INC     DPTR
01DD E0                MOVX    A,@DPTR
01DE 759300      E     MOV     DPX,#?C?XDATASEG
01E1 2500        E     ADD     A,regTW88+01H
01E3 F582              MOV     DPL,A
01E5 E500        E     MOV     A,regTW88
01E7 3E                ADDC    A,R6
01E8 F583              MOV     DPH,A
01EA 759300      E     MOV     DPX,#?C?XDATASEG
01ED E0                MOVX    A,@DPTR
01EE FF                MOV     R7,A
01EF E4                CLR     A
01F0 FC                MOV     R4,A
01F1 FD                MOV     R5,A
01F2 FE                MOV     R6,A
01F3 22                RET     
01F4         L?1084:
01F4 90000000    R     MOV     DPTR,#index
01F8 E0                MOVX    A,@DPTR
01F9 2404              ADD     A,#04H
01FB         L?1085:
01FB FF                MOV     R7,A
01FC E4                CLR     A
01FD 33                RLC     A
01FE FE                MOV     R6,A
01FF         L?1086:
01FF 90000000    R     MOV     DPTR,#argc
0203 E0                MOVX    A,@DPTR
0204 C3                CLR     C
0205 22                RET     
0206         L?1087:
0206 90000000    E     MOV     DPTR,#?_stricmp?BYTE+03H
020A F0                MOVX    @DPTR,A
020B A3                INC     DPTR
020C 22                RET     
020D         L?1088:
020D         L?1089:
020D 90000000    R     MOV     DPTR,#i
0211         L?1090:
0211 E0                MOVX    A,@DPTR
0212 2400        R     ADD     A,#LOW atemp
0214 F582              MOV     DPL,A
0216 E4                CLR     A
0217 3400        R     ADDC    A,#HIGH atemp
0219         L?1091:
0219 F583              MOV     DPH,A
021B 759300      E     MOV     DPX,#?C?XDATASEG
021E         L?1092:
021E E0                MOVX    A,@DPTR
021F 90000000    E     MOV     DPTR,#?_Printf?BYTE+03H
0223 F0                MOVX    @DPTR,A
0224 22                RET     
0225         L?1093:
0225         L?1094:
0225 110000      E     ACALL   ?C?LSTXDATA
0228         L?1095:
0228 90000000    R     MOV     DPTR,#count
022C E0                MOVX    A,@DPTR
022D FC                MOV     R4,A
022E A3                INC     DPTR
022F E0                MOVX    A,@DPTR
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 77  

0230 FD                MOV     R5,A
0231 A3                INC     DPTR
0232 E0                MOVX    A,@DPTR
0233 FE                MOV     R6,A
0234 A3                INC     DPTR
0235 E0                MOVX    A,@DPTR
0236 FF                MOV     R7,A
0237 E4                CLR     A
0238 010000      E     AJMP    ?C?FCASTL
023B         L?1096:
023B 90000000    E     MOV     DPTR,#?_stricmp?BYTE+03H
023F F0                MOVX    @DPTR,A
0240 A3                INC     DPTR
0241 22                RET     
0242         L?1097:
0242         L?1098:
0242 2F                ADD     A,R7
0243 FF                MOV     R7,A
0244 EA                MOV     A,R2
0245 3E                ADDC    A,R6
0246 FE                MOV     R6,A
0247 ED                MOV     A,R5
0248 39                ADDC    A,R1
0249 FD                MOV     R5,A
024A EC                MOV     A,R4
024B 38                ADDC    A,R0
024C FC                MOV     R4,A
024D 90000000    R     MOV     DPTR,#WaitTime
0251 010000      E     AJMP    ?C?LSTXDATA
0254         L?1099:
0254 7400        R     MOV     A,#HIGH ?SC_6407
0256 F0                MOVX    @DPTR,A
0257 7400        R     MOV     A,#LOW ?SC_6407
0259         L?1100:
0259 A3                INC     DPTR
025A F0                MOVX    @DPTR,A
025B 90000000    R     MOV     DPTR,#argv
025F 22                RET     
0260         L?1102:
0260 90000000    E     MOV     DPTR,#?_stricmp?BYTE+03H
0264 F0                MOVX    @DPTR,A
0265 A3                INC     DPTR
0266 22                RET     
0267         L?1103:
0267 7400        R     MOV     A,#HIGH ?SC_6478
0269 F0                MOVX    @DPTR,A
026A 7400        R     MOV     A,#LOW ?SC_6478
026C         L?1104:
026C A3                INC     DPTR
026D F0                MOVX    @DPTR,A
026E 90000000    R     MOV     DPTR,#argv
0272 22                RET     
0273         L?1108:
0273 90000000    E     MOV     DPTR,#?_stricmp?BYTE+03H
0277 F0                MOVX    @DPTR,A
0278 A3                INC     DPTR
0279 22                RET     
027A         L?1109:
027A 90000000    R     MOV     DPTR,#idx_len
027E         L?1110:
027E E0                MOVX    A,@DPTR
027F C4                SWAP    A
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 78  

0280 54F0              ANL     A,#0F0H
0282 FE                MOV     R6,A
0283 A3                INC     DPTR
0284 E0                MOVX    A,@DPTR
0285 4E                ORL     A,R6
0286 FD                MOV     R5,A
0287         L?1111:
0287 90000000    R     MOV     DPTR,#MonIndex
028B E0                MOVX    A,@DPTR
028C FA                MOV     R2,A
028D A3                INC     DPTR
028E E0                MOVX    A,@DPTR
028F FB                MOV     R3,A
0290 22                RET     
0291         L?1112:
0291 90000000    E     MOV     DPTR,#?_stricmp?BYTE+03H
0295 F0                MOVX    @DPTR,A
0296 A3                INC     DPTR
0297 22                RET     
0298         L?1113:
0298 90000000    E     MOV     DPTR,#?_stricmp?BYTE+03H
029C F0                MOVX    @DPTR,A
029D A3                INC     DPTR
029E 22                RET     
029F         L?1114:
029F A3                INC     DPTR
02A0 F0                MOVX    @DPTR,A
02A1 90000000    R     MOV     DPTR,#argv
02A5 22                RET     
02A6         L?1115:
02A6 90000000    E     MOV     DPTR,#?_stricmp?BYTE+03H
02AA F0                MOVX    @DPTR,A
02AB A3                INC     DPTR
02AC 22                RET     
02AD         L?1116:
02AD A3                INC     DPTR
02AE F0                MOVX    @DPTR,A
02AF 90000000    R     MOV     DPTR,#argv
02B3 22                RET     
02B4         L?1117:
02B4         L?1118:
02B4 7402              MOV     A,#02H
02B6 F0                MOVX    @DPTR,A
02B7 759300      E     MOV     DPX,#?C?XDATASEG
02BA E500        E     MOV     A,regTW88+01H
02BC 24FF              ADD     A,#0FFH
02BE F582              MOV     DPL,A
02C0 E4                CLR     A
02C1 3500        E     ADDC    A,regTW88
02C3 F583              MOV     DPH,A
02C5 759300      E     MOV     DPX,#?C?XDATASEG
02C8 E0                MOVX    A,@DPTR
02C9 FE                MOV     R6,A
02CA 90000000    R     MOV     DPTR,#MonIndex
02CE E0                MOVX    A,@DPTR
02CF 4E                ORL     A,R6
02D0 F0                MOVX    @DPTR,A
02D1 A3                INC     DPTR
02D2 E0                MOVX    A,@DPTR
02D3 F0                MOVX    @DPTR,A
02D4 22                RET     
02D5         L?1119:
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 79  

02D5 90000000    E     MOV     DPTR,#?_stricmp?BYTE+03H
02D9 F0                MOVX    @DPTR,A
02DA A3                INC     DPTR
02DB 22                RET     
02DC         L?1120:
02DC A3                INC     DPTR
02DD F0                MOVX    @DPTR,A
02DE 90000000    R     MOV     DPTR,#argv
02E2 22                RET     
02E3         L?1124:
02E3 90000000    E     MOV     DPTR,#?_stricmp?BYTE+03H
02E7 F0                MOVX    @DPTR,A
02E8 A3                INC     DPTR
02E9 22                RET     
02EA         L?1125:
02EA A3                INC     DPTR
02EB F0                MOVX    @DPTR,A
02EC 90000000    R     MOV     DPTR,#argv
02F0 22                RET     
02F1         L?1126:
02F1         L?1127:
02F1 90000000    R     MOV     DPTR,#index
02F5 E0                MOVX    A,@DPTR
02F6 75F003            MOV     B,#03H
02F9 A4                MUL     AB
02FA 2400        R     ADD     A,#LOW argv+06H
02FC F582              MOV     DPL,A
02FE E4                CLR     A
02FF 3400        R     ADDC    A,#HIGH argv+06H
0301 F583              MOV     DPH,A
0303 759300      E     MOV     DPX,#?C?XDATASEG
0306 22                RET     
0307         L?1128:
0307         L?1129:
0307 90000000    R     MOV     DPTR,#MonWdata
030B A3                INC     DPTR
030C A3                INC     DPTR
030D A3                INC     DPTR
030E E0                MOVX    A,@DPTR
030F FF                MOV     R7,A
0310 90000000    R     MOV     DPTR,#MonIndex
0314 E0                MOVX    A,@DPTR
0315 FC                MOV     R4,A
0316 A3                INC     DPTR
0317 E0                MOVX    A,@DPTR
0318 759300      E     MOV     DPX,#?C?XDATASEG
031B 2500        E     ADD     A,regTW88+01H
031D F582              MOV     DPL,A
031F E500        E     MOV     A,regTW88
0321 3C                ADDC    A,R4
0322         L?1130:
0322 F583              MOV     DPH,A
0324 759300      E     MOV     DPX,#?C?XDATASEG
0327 EF                MOV     A,R7
0328 22                RET     
0329         L?1131:
0329 90000000    E     MOV     DPTR,#?_stricmp?BYTE+03H
032D F0                MOVX    @DPTR,A
032E A3                INC     DPTR
032F 22                RET     
0330         L?1132:
0330 A3                INC     DPTR
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 80  

0331 F0                MOVX    @DPTR,A
0332 90000000    R     MOV     DPTR,#argv
0336 22                RET     
0337         L?1134:
0337         L?1135:
0337 90000000    R     MOV     DPTR,#MonWdata
033B         L?1136:
033B E0                MOVX    A,@DPTR
033C FC                MOV     R4,A
033D A3                INC     DPTR
033E E0                MOVX    A,@DPTR
033F FD                MOV     R5,A
0340 A3                INC     DPTR
0341 E0                MOVX    A,@DPTR
0342 FE                MOV     R6,A
0343 A3                INC     DPTR
0344 E0                MOVX    A,@DPTR
0345 22                RET     
0346         L?1139:
0346 90000000    E     MOV     DPTR,#?_stricmp?BYTE+03H
034A F0                MOVX    @DPTR,A
034B A3                INC     DPTR
034C 22                RET     
034D         L?1140:
034D A3                INC     DPTR
034E F0                MOVX    @DPTR,A
034F 90000000    R     MOV     DPTR,#argv
0353 22                RET     
0354         L?1141:
0354         L?1142:
0354 7B00        R     MOV     R3,#MBYTE ?SC_3970
0356 7A00        R     MOV     R2,#HIGH ?SC_3970
0358 7900        R     MOV     R1,#LOW ?SC_3970
035A         L?1143:
035A 90000000    R     MOV     DPTR,#MonIndex
035E         L?1144:
035E A3                INC     DPTR
035F E0                MOVX    A,@DPTR
0360 90000000    E     MOV     DPTR,#?_Printf?BYTE+03H
0364 22                RET     
0365         L?1146:
0365 90000000    E     MOV     DPTR,#?_stricmp?BYTE+03H
0369 F0                MOVX    @DPTR,A
036A A3                INC     DPTR
036B 22                RET     
036C         L?1147:
036C A3                INC     DPTR
036D F0                MOVX    @DPTR,A
036E 90000000    R     MOV     DPTR,#argv
0372 22                RET     
0373         L?1148:
0373 EE                MOV     A,R6
0374 F0                MOVX    @DPTR,A
0375 EF                MOV     A,R7
0376         L?1149:
0376 A3                INC     DPTR
0377 F0                MOVX    @DPTR,A
0378 90000000    R     MOV     DPTR,#argv+06H
037C 22                RET     
037D         L?1150:
037D 90000000    E     MOV     DPTR,#?_stricmp?BYTE+03H
0381 F0                MOVX    @DPTR,A
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 81  

0382 A3                INC     DPTR
0383 22                RET     
0384         L?1151:
0384 A3                INC     DPTR
0385 F0                MOVX    @DPTR,A
0386 90000000    R     MOV     DPTR,#argv
038A 22                RET     
038B         L?1152:
038B         L?1153:
038B 7BCD              MOV     R3,#0CDH
038D 7ACC              MOV     R2,#0CCH
038F 794C              MOV     R1,#04CH
0391         L?1154:
0391 783F              MOV     R0,#03FH
0393 110000      E     ACALL   ?C?FPMUL
0396 010000      E     AJMP    ?C?CASTF
0399         L?1155:
0399 2400              ADD     A,#00H
039B FF                MOV     R7,A
039C E4                CLR     A
039D 3E                ADDC    A,R6
039E FE                MOV     R6,A
039F ED                MOV     A,R5
03A0 3401              ADDC    A,#01H
03A2 FD                MOV     R5,A
03A3 E4                CLR     A
03A4 3C                ADDC    A,R4
03A5 FC                MOV     R4,A
03A6 010000      E     AJMP    ?C?LSTXDATA
03A9         L?1156:
03A9 FD                MOV     R5,A
03AA FC                MOV     R4,A
03AB         L?1157:
03AB 90000000    R     MOV     DPTR,#mask
03AF 010000      E     AJMP    ?C?LSTXDATA
03B2         L?1159:
03B2 90000000    E     MOV     DPTR,#?_stricmp?BYTE+03H
03B6 F0                MOVX    @DPTR,A
03B7 A3                INC     DPTR
03B8 22                RET     
03B9         L?1160:
03B9 A3                INC     DPTR
03BA F0                MOVX    @DPTR,A
03BB 90000000    R     MOV     DPTR,#argv
03BF 22                RET     
03C0         L?1162:
03C0 AF00        E     MOV     R7,SystemClock+03H
03C2 AE00        E     MOV     R6,SystemClock+02H
03C4 AD00        E     MOV     R5,SystemClock+01H
03C6 AC00        E     MOV     R4,SystemClock
03C8 110000      E     ACALL   ?C?LSTXDATA
03CB D2A9              SETB    SFRB_ET0
03CD 22                RET     
03CE         L?1166:
03CE         L?1167:
03CE 7400        R     MOV     A,#LOW monstr
03D0 2E                ADD     A,R6
03D1         L?1168:
03D1 F582              MOV     DPL,A
03D3 E4                CLR     A
03D4 3400        R     ADDC    A,#HIGH monstr
03D6 F583              MOV     DPH,A
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 82  

03D8 759300      E     MOV     DPX,#?C?XDATASEG
03DB 22                RET     
03DC         L?1171:
03DC         L?1172:
03DC 7400        R     MOV     A,#HIGH ?SC_3411
03DE F0                MOVX    @DPTR,A
03DF 7400        R     MOV     A,#LOW ?SC_3411
03E1         L?1173:
03E1 A3                INC     DPTR
03E2 F0                MOVX    @DPTR,A
03E3 90000000    R     MOV     DPTR,#argv+06H
03E7 22                RET     
03E8         L?1174:
03E8 90000000    E     MOV     DPTR,#?_stricmp?BYTE+03H
03EC F0                MOVX    @DPTR,A
03ED A3                INC     DPTR
03EE 22                RET     
03EF         L?1175:
03EF A3                INC     DPTR
03F0 F0                MOVX    @DPTR,A
03F1 90000000    R     MOV     DPTR,#argv
03F5 22                RET     
03F6         L?1178:
03F6 E4                CLR     A
03F7 FF                MOV     R7,A
03F8 FE                MOV     R6,A
03F9 FD                MOV     R5,A
03FA FC                MOV     R4,A
03FB         L?1179:
03FB 110000      E     ACALL   ?C?LSTXDATA
03FE E4                CLR     A
03FF FF                MOV     R7,A
0400 FE                MOV     R6,A
0401 FD                MOV     R5,A
0402 FC                MOV     R4,A
0403 22                RET     
0404         L?1180:
0404         L?1181:
0404 90000000    R     MOV     DPTR,#read_byte
0408         L?1182:
0408 E0                MOVX    A,@DPTR
0409 FF                MOV     R7,A
040A 90000000    R     MOV     DPTR,#i
040E E0                MOVX    A,@DPTR
040F FE                MOV     R6,A
0410 C3                CLR     C
0411 9F                SUBB    A,R7
0412 22                RET     
0413         L?1183:
0413         L?1184:
0413 90000000    R     MOV     DPTR,#argc
0417 E0                MOVX    A,@DPTR
0418 D3                SETB    C
0419 22                RET     
041A         L?1185:
041A         L?1186:
041A 90000000    R     MOV     DPTR,#MonIndexLen
041E E0                MOVX    A,@DPTR
041F FD                MOV     R5,A
0420 A3                INC     DPTR
0421 E0                MOVX    A,@DPTR
0422 FB                MOV     R3,A
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 83  

0423 22                RET     
0424         L?1187:
0424 90000000    E     MOV     DPTR,#?_stricmp?BYTE+03H
0428 F0                MOVX    @DPTR,A
0429 A3                INC     DPTR
042A 22                RET     
042B         L?1188:
042B A3                INC     DPTR
042C F0                MOVX    @DPTR,A
042D 90000000    R     MOV     DPTR,#argv
0431 22                RET     
0432         L?1190:
0432 90000000    E     MOV     DPTR,#?_stricmp?BYTE+03H
0436 F0                MOVX    @DPTR,A
0437 A3                INC     DPTR
0438 22                RET     
0439         L?1191:
0439 A3                INC     DPTR
043A F0                MOVX    @DPTR,A
043B 90000000    R     MOV     DPTR,#argv
043F 22                RET     
0440         L?1192:
0440 EB                MOV     A,R3
0441 4F                ORL     A,R7
0442 FF                MOV     R7,A
0443 EA                MOV     A,R2
0444 4E                ORL     A,R6
0445 FE                MOV     R6,A
0446 E9                MOV     A,R1
0447 4D                ORL     A,R5
0448 FD                MOV     R5,A
0449 E8                MOV     A,R0
044A 4C                ORL     A,R4
044B         L?1193:
044B FC                MOV     R4,A
044C         L?1194:
044C 90000000    R     MOV     DPTR,#MonWdata
0450 010000      E     AJMP    ?C?LSTXDATA
0453         L?1197:
0453 E4                CLR     A
0454 FF                MOV     R7,A
0455 FE                MOV     R6,A
0456 FD                MOV     R5,A
0457 FC                MOV     R4,A
0458         L?1198:
0458 F0                MOVX    @DPTR,A
0459 A3                INC     DPTR
045A F0                MOVX    @DPTR,A
045B A3                INC     DPTR
045C F0                MOVX    @DPTR,A
045D A3                INC     DPTR
045E F0                MOVX    @DPTR,A
045F 22                RET     
0460         L?1200:
0460 7400        R     MOV     A,#HIGH ?SC_1366
0462 F0                MOVX    @DPTR,A
0463 7400        R     MOV     A,#LOW ?SC_1366
0465         L?1201:
0465 A3                INC     DPTR
0466 F0                MOVX    @DPTR,A
0467 90000000    R     MOV     DPTR,#argv+06H
046B 22                RET     
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 84  

046C         L?1202:
046C         L?1203:
046C 75F003            MOV     B,#03H
046F A4                MUL     AB
0470 2400        R     ADD     A,#LOW argv
0472 F582              MOV     DPL,A
0474 E4                CLR     A
0475 3400        R     ADDC    A,#HIGH argv
0477 F583              MOV     DPH,A
0479 759300      E     MOV     DPX,#?C?XDATASEG
047C 22                RET     
047D         L?1205:
047D         L?1206:
047D 9F                SUBB    A,R7
047E EE                MOV     A,R6
047F 6480              XRL     A,#080H
0481 F8                MOV     R0,A
0482 7480              MOV     A,#080H
0484 98                SUBB    A,R0
0485 22                RET     
0486         L?1207:
0486         L?1208:
0486 90000000    E     MOV     DPTR,#?_Printf?BYTE+07H
048A 010000      E     AJMP    ?C?LSTXDATA
048D         L?1209:
048D         L?1210:
048D 90000000    R     MOV     DPTR,#MonIndex
0491 EE                MOV     A,R6
0492 F0                MOVX    @DPTR,A
0493 A3                INC     DPTR
0494 EF                MOV     A,R7
0495 F0                MOVX    @DPTR,A
0496 22                RET     
0497         L?1211:
0497         L?1212:
0497 5F                ANL     A,R7
0498 FF                MOV     R7,A
0499 EA                MOV     A,R2
049A 5E                ANL     A,R6
049B FE                MOV     R6,A
049C E9                MOV     A,R1
049D 5D                ANL     A,R5
049E FD                MOV     R5,A
049F E8                MOV     A,R0
04A0 5C                ANL     A,R4
04A1 FC                MOV     R4,A
04A2 22                RET     
04A3         L?1213:
04A3 90000000    E     MOV     DPTR,#?_stricmp?BYTE+03H
04A7 F0                MOVX    @DPTR,A
04A8 A3                INC     DPTR
04A9 22                RET     
04AA         L?1214:
04AA A3                INC     DPTR
04AB F0                MOVX    @DPTR,A
04AC 90000000    R     MOV     DPTR,#argv
04B0 22                RET     
04B1         L?1218:
04B1         L?1219:
04B1 7400        R     MOV     A,#MBYTE bTemp
04B3 F0                MOVX    @DPTR,A
04B4 A3                INC     DPTR
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 85  

04B5 7400        R     MOV     A,#HIGH bTemp
04B7 F0                MOVX    @DPTR,A
04B8 A3                INC     DPTR
04B9 7400        R     MOV     A,#LOW bTemp
04BB F0                MOVX    @DPTR,A
04BC E4                CLR     A
04BD A3                INC     DPTR
04BE F0                MOVX    @DPTR,A
04BF 22                RET     
04C0         L?1223:
04C0         L?1224:
04C0 90000000    R     MOV     DPTR,#cmd
04C4 E0                MOVX    A,@DPTR
04C5 FF                MOV     R7,A
04C6 22                RET     
04C7         L?1225:
04C7         L?1226:
04C7 7B00        R     MOV     R3,#MBYTE ?SC_6612
04C9 7A00        R     MOV     R2,#HIGH ?SC_6612
04CB 7900        R     MOV     R1,#LOW ?SC_6612
04CD 22                RET     
04CE         L?1227:
04CE 7404              MOV     A,#04H
04D0         L?1228:
04D0 90000000    E     MOV     DPTR,#?_I2cSpiFlashChipRegCmd?BYTE+03H
04D4 F0                MOVX    @DPTR,A
04D5 A3                INC     DPTR
04D6 74C8              MOV     A,#0C8H
04D8 F0                MOVX    @DPTR,A
04D9 22                RET     
04DA         L?1229:
04DA AF00        E     MOV     R7,SystemClock+03H
04DC AE00        E     MOV     R6,SystemClock+02H
04DE AD00        E     MOV     R5,SystemClock+01H
04E0 AC00        E     MOV     R4,SystemClock
04E2 110000      E     ACALL   ?C?LSTXDATA
04E5 D2A9              SETB    SFRB_ET0
04E7 22                RET     
04E8         L?1231:
04E8 90000000    R     MOV     DPTR,#i2cid
04EC         L?1232:
04EC EF                MOV     A,R7
04ED F0                MOVX    @DPTR,A
04EE 90000000    R     MOV     DPTR,#argv+09H
04F2 22                RET     
04F3         L?1233:
04F3 90000000    R     MOV     DPTR,#max
04F7 E0                MOVX    A,@DPTR
04F8 FE                MOV     R6,A
04F9 A3                INC     DPTR
04FA E0                MOVX    A,@DPTR
04FB FF                MOV     R7,A
04FC C3                CLR     C
04FD 90000000    R     MOV     DPTR,#i+01H
0501 E0                MOVX    A,@DPTR
0502 9F                SUBB    A,R7
0503 90000000    R     MOV     DPTR,#i
0507 E0                MOVX    A,@DPTR
0508 9E                SUBB    A,R6
0509 22                RET     
050A         L?1234:
050A         L?1235:
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 86  

050A 7B3C              MOV     R3,#03CH
050C         L?1236:
050C E4                CLR     A
050D FA                MOV     R2,A
050E F9                MOV     R1,A
050F F8                MOV     R0,A
0510 90000000    R     MOV     DPTR,#UsedClock
0514 22                RET     
0515         L?1239:
0515 90000000    E     MOV     DPTR,#?_stricmp?BYTE+03H
0519 F0                MOVX    @DPTR,A
051A A3                INC     DPTR
051B 22                RET     
051C         L?1240:
051C A3                INC     DPTR
051D F0                MOVX    @DPTR,A
051E 90000000    R     MOV     DPTR,#argv
0522 22                RET     
0523         L?1248:
0523 90000000    E     MOV     DPTR,#?_Printf?BYTE+03H
0527         L?1249:
0527 F0                MOVX    @DPTR,A
0528 A3                INC     DPTR
0529 EA                MOV     A,R2
052A F0                MOVX    @DPTR,A
052B A3                INC     DPTR
052C E9                MOV     A,R1
052D F0                MOVX    @DPTR,A
052E 22                RET     
052F         L?1250:
052F         L?1251:
052F 90000000    R     MOV     DPTR,#i
0533 E0                MOVX    A,@DPTR
0534 04                INC     A
0535 F0                MOVX    @DPTR,A
0536 22                RET     
0537         L?1252:
0537 90000000    R     MOV     DPTR,#wTemp
053B E0                MOVX    A,@DPTR
053C FE                MOV     R6,A
053D A3                INC     DPTR
053E E0                MOVX    A,@DPTR
053F FF                MOV     R7,A
0540 A3                INC     DPTR
0541 E0                MOVX    A,@DPTR
0542 FC                MOV     R4,A
0543 A3                INC     DPTR
0544 E0                MOVX    A,@DPTR
0545 FD                MOV     R5,A
0546 C3                CLR     C
0547 9F                SUBB    A,R7
0548 EC                MOV     A,R4
0549 9E                SUBB    A,R6
054A 22                RET     
054B         L?1253:
054B 7400        E     MOV     A,#LOW SPI_CmdBuffer
054D         L?1254:
054D 7B00        R     MOV     R3,#MBYTE ?SC_801
054F 7A00        R     MOV     R2,#HIGH ?SC_801
0551 7900        R     MOV     R1,#LOW ?SC_801
0553 2E                ADD     A,R6
0554 F582              MOV     DPL,A
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 87  

0556 E4                CLR     A
0557 22                RET     
0558         L?1257:
0558         L?1258:
0558 7B00        R     MOV     R3,#MBYTE ?SC_904
055A 7A00        R     MOV     R2,#HIGH ?SC_904
055C 7900        R     MOV     R1,#LOW ?SC_904
055E 22                RET     
055F         L?1259:
055F         L?1260:
055F 90000000    E     MOV     DPTR,#InputMain
0563 E0                MOVX    A,@DPTR
0564 FF                MOV     R7,A
0565 22                RET     
0566         L?1263:
0566 2401              ADD     A,#01H
0568         L?1264:
0568 F9                MOV     R1,A
0569 E4                CLR     A
056A 3A                ADDC    A,R2
056B FA                MOV     R2,A
056C 010000      E     AJMP    ?C?CLDPTR
056F         L?1265:
056F         L?1266:
056F 7B00        R     MOV     R3,#MBYTE ?SC_2564
0571 7A00        R     MOV     R2,#HIGH ?SC_2564
0573 7900        R     MOV     R1,#LOW ?SC_2564
0575 90000000    R     MOV     DPTR,#spiaddr
0579 22                RET     
057A         L?1267:
057A 2401              ADD     A,#01H
057C         L?1268:
057C FF                MOV     R7,A
057D E4                CLR     A
057E 3E                ADDC    A,R6
057F FE                MOV     R6,A
0580 E4                CLR     A
0581 3D                ADDC    A,R5
0582 FD                MOV     R5,A
0583 E4                CLR     A
0584 3C                ADDC    A,R4
0585 22                RET     
0586         L?1271:
0586 A3                INC     DPTR
0587         L?1272:
0587 7B00        R     MOV     R3,#MBYTE ?SC_3985
0589 7A00        R     MOV     R2,#HIGH ?SC_3985
058B 7900        R     MOV     R1,#LOW ?SC_3985
058D A3                INC     DPTR
058E 22                RET     
058F         L?1275:
058F C3                CLR     C
0590 90000000    R     MOV     DPTR,#i+01H
0594 E0                MOVX    A,@DPTR
0595 9464              SUBB    A,#064H
0597 90000000    R     MOV     DPTR,#i
059B E0                MOVX    A,@DPTR
059C 9400              SUBB    A,#00H
059E 22                RET     
059F         L?1276:
059F A3                INC     DPTR
05A0 F0                MOVX    @DPTR,A
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 88  

05A1 90000000    R     MOV     DPTR,#argv+06H
05A5 22                RET     
05A6         L?1277:
05A6 C3                CLR     C
05A7 90000000    R     MOV     DPTR,#i+01H
05AB E0                MOVX    A,@DPTR
05AC 9464              SUBB    A,#064H
05AE 90000000    R     MOV     DPTR,#i
05B2 E0                MOVX    A,@DPTR
05B3 9400              SUBB    A,#00H
05B5 22                RET     
05B6         L?1278:
05B6         L?1279:
05B6 90000000    R     MOV     DPTR,#ret
05BA EF                MOV     A,R7
05BB F0                MOVX    @DPTR,A
05BC 22                RET     
05BD         L?1280:
05BD 90000000    R     MOV     DPTR,#w_len
05C1 E0                MOVX    A,@DPTR
05C2 FD                MOV     R5,A
05C3         L?1281:
05C3 90000000    R     MOV     DPTR,#read_byte
05C7 E0                MOVX    A,@DPTR
05C8 FB                MOV     R3,A
05C9 22                RET     
05CA         L?1282:
05CA         L?1283:
05CA E0                MOVX    A,@DPTR
05CB C4                SWAP    A
05CC 54F0              ANL     A,#0F0H
05CE FF                MOV     R7,A
05CF A3                INC     DPTR
05D0 E0                MOVX    A,@DPTR
05D1 4F                ORL     A,R7
05D2 FD                MOV     R5,A
05D3 22                RET     
05D4         L?1284:
05D4 90000000    R     MOV     DPTR,#argv
05D8         L?1285:
05D8 E0                MOVX    A,@DPTR
05D9 FB                MOV     R3,A
05DA A3                INC     DPTR
05DB E0                MOVX    A,@DPTR
05DC FA                MOV     R2,A
05DD A3                INC     DPTR
05DE E0                MOVX    A,@DPTR
05DF 22                RET     
05E0         L?1286:
05E0 90000000    E     MOV     DPTR,#?_stricmp?BYTE+03H
05E4 F0                MOVX    @DPTR,A
05E5 A3                INC     DPTR
05E6 22                RET     
05E7         L?1287:
05E7 A3                INC     DPTR
05E8 F0                MOVX    @DPTR,A
05E9 90000000    R     MOV     DPTR,#argv
05ED 22                RET     
05EE         L?1288:
05EE F582              MOV     DPL,A
05F0 E500        E     MOV     A,regTW88
05F2 3404              ADDC    A,#04H
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 89  

05F4         L?1289:
05F4 F583              MOV     DPH,A
05F6 759300      E     MOV     DPX,#?C?XDATASEG
05F9 E0                MOVX    A,@DPTR
05FA 22                RET     
05FB         L?1291:
05FB 90000000    R     MOV     DPTR,#incnt
05FF E0                MOVX    A,@DPTR
0600 FF                MOV     R7,A
0601 90000000    R     MOV     DPTR,#i
0605 E0                MOVX    A,@DPTR
0606 FE                MOV     R6,A
0607 C3                CLR     C
0608 9F                SUBB    A,R7
0609 22                RET     
060A         L?1295:
060A A3                INC     DPTR
060B         L?1296:
060B 7B00        R     MOV     R3,#MBYTE ?SC_3991
060D 7A00        R     MOV     R2,#HIGH ?SC_3991
060F 7900        R     MOV     R1,#LOW ?SC_3991
0611 A3                INC     DPTR
0612 22                RET     
0613         L?1297:
0613 FC                MOV     R4,A
0614 90000000    R     MOV     DPTR,#lloopp
0618 010000      E     AJMP    ?C?LSTXDATA
061B         L?1299:
061B 90000000    E     MOV     DPTR,#?_Printf?BYTE+03H
061F F0                MOVX    @DPTR,A
0620 A3                INC     DPTR
0621 22                RET     
0622         L?1300:
0622         L?1301:
0622 E0                MOVX    A,@DPTR
0623 90000000    E     MOV     DPTR,#?_Printf?BYTE+04H
0627 F0                MOVX    @DPTR,A
0628 22                RET     
0629         L?1302:
0629         L?1303:
0629 E4                CLR     A
062A 90000000    R     MOV     DPTR,#i
062E F0                MOVX    @DPTR,A
062F 22                RET     
0630         L?1304:
0630         L?1305:
0630 7B00        R     MOV     R3,#MBYTE ?SC_3923
0632 7A00        R     MOV     R2,#HIGH ?SC_3923
0634 7900        R     MOV     R1,#LOW ?SC_3923
0636 22                RET     
0637         L?1306:
0637         L?1307:
0637 EF                MOV     A,R7
0638 F0                MOVX    @DPTR,A
0639 90000000    R     MOV     DPTR,#argv+06H
063D 22                RET     
063E         L?1308:
063E         L?1309:
063E 7B00        R     MOV     R3,#MBYTE ?SC_3952
0640 7A00        R     MOV     R2,#HIGH ?SC_3952
0642 7900        R     MOV     R1,#LOW ?SC_3952
0644 22                RET     
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 90  

0645         L?1310:
0645         L?1311:
0645 7B00        R     MOV     R3,#MBYTE ?SC_4127
0647 7A00        R     MOV     R2,#HIGH ?SC_4127
0649 7900        R     MOV     R1,#LOW ?SC_4127
064B 22                RET     
064C         L?1312:
064C         L?1313:
064C 90000000    R     MOV     DPTR,#ch
0650 E0                MOVX    A,@DPTR
0651 FF                MOV     R7,A
0652 22                RET     
0653         L?1314:
0653 90000000    R     MOV     DPTR,#i
0657 E0                MOVX    A,@DPTR
0658 2400        R     ADD     A,#LOW monstr
065A F9                MOV     R1,A
065B E4                CLR     A
065C 3400        R     ADDC    A,#HIGH monstr
065E FA                MOV     R2,A
065F 22                RET     
0660         L?1315:
0660         L?1316:
0660 7B9A              MOV     R3,#09AH
0662 7A99              MOV     R2,#099H
0664 7999              MOV     R1,#099H
0666 22                RET     
0667         L?1319:
0667 EE                MOV     A,R6
0668 F0                MOVX    @DPTR,A
0669 A3                INC     DPTR
066A EF                MOV     A,R7
066B F0                MOVX    @DPTR,A
066C D3                SETB    C
066D 9400              SUBB    A,#00H
066F EE                MOV     A,R6
0670 9408              SUBB    A,#08H
0672 22                RET     
0673         L?1320:
0673         L?1321:
0673 90000000    E     MOV     DPTR,#?_WriteI2C_multi?BYTE+04H
0677 010000      E     AJMP    ?C?LSTXDATA
067A         L?1322:
067A 7B00        R     MOV     R3,#MBYTE ?SC_3899
067C 7A00        R     MOV     R2,#HIGH ?SC_3899
067E 7900        R     MOV     R1,#LOW ?SC_3899
0680 A3                INC     DPTR
0681 A3                INC     DPTR
0682 22                RET     
0683         L?1323:
0683         L?1324:
0683 90000000    R     MOV     DPTR,#dTemp
0687 010000      E     AJMP    ?C?LSTXDATA
068A         L?1325:
068A         L?1326:
068A 90000000    R     MOV     DPTR,#i
068E E0                MOVX    A,@DPTR
068F 04                INC     A
0690 F0                MOVX    @DPTR,A
0691 22                RET     
0692         L?1327:
0692 F0                MOVX    @DPTR,A
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 91  

0693 90000000    R     MOV     DPTR,#argc
0697 E0                MOVX    A,@DPTR
0698 90000000    R     MOV     DPTR,#last_argc
069C F0                MOVX    @DPTR,A
069D 22                RET     
069E         L?1328:
069E E4                CLR     A
069F FA                MOV     R2,A
06A0 F9                MOV     R1,A
06A1 F8                MOV     R0,A
06A2 110000      E     ACALL   ?C?ULDIV
06A5 90000000    R     MOV     DPTR,#UsedClock
06A9 22                RET     
06AA         L?1334:
06AA 7B00        R     MOV     R3,#MBYTE ?SC_2103
06AC 7A00        R     MOV     R2,#HIGH ?SC_2103
06AE 7900        R     MOV     R1,#LOW ?SC_2103
06B0 90000000    R     MOV     DPTR,#ret
06B4 22                RET     
06B5         L?1335:
06B5 7B00        R     MOV     R3,#MBYTE ?SC_2127
06B7 7A00        R     MOV     R2,#HIGH ?SC_2127
06B9 7900        R     MOV     R1,#LOW ?SC_2127
06BB 90000000    R     MOV     DPTR,#spiaddr
06BF 22                RET     
06C0         L?1336:
06C0 E4                CLR     A
06C1 7B64              MOV     R3,#064H
06C3 FA                MOV     R2,A
06C4 F9                MOV     R1,A
06C5 F8                MOV     R0,A
06C6 90000000    R     MOV     DPTR,#UsedTime
06CA 22                RET     
06CB         L?1337:
06CB 90000000    E     MOV     DPTR,#CpuTouchChanged
06CF E0                MOVX    A,@DPTR
06D0 90000000    R     MOV     DPTR,#temp
06D4 F0                MOVX    @DPTR,A
06D5 22                RET     
06D6         L?1338:
06D6 90000000    E     MOV     DPTR,#CpuAUX0_Changed
06DA E0                MOVX    A,@DPTR
06DB 90000000    R     MOV     DPTR,#atemp
06DF F0                MOVX    @DPTR,A
06E0 22                RET     
06E1         L?1339:
06E1 90000000    E     MOV     DPTR,#CpuAUX1_Changed
06E5 E0                MOVX    A,@DPTR
06E6 90000000    R     MOV     DPTR,#atemp+01H
06EA F0                MOVX    @DPTR,A
06EB 22                RET     
06EC         L?1340:
06EC 90000000    E     MOV     DPTR,#CpuAUX2_Changed
06F0 E0                MOVX    A,@DPTR
06F1 90000000    R     MOV     DPTR,#atemp+02H
06F5 F0                MOVX    @DPTR,A
06F6 22                RET     
06F7         L?1343:
06F7         L?1344:
06F7 7B00        R     MOV     R3,#MBYTE wTemp
06F9 7A00        R     MOV     R2,#HIGH wTemp
06FB 7900        R     MOV     R1,#LOW wTemp
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 92  

06FD 22                RET     
06FE         L?1345:
06FE         L?1346:
06FE 7B00        R     MOV     R3,#MBYTE bTemp
0700 7A00        R     MOV     R2,#HIGH bTemp
0702 7900        R     MOV     R1,#LOW bTemp
0704 22                RET     
0705         L?1347:
0705 7F00              MOV     R7,#00H
0707 7EF3              MOV     R6,#0F3H
0709 7D6F              MOV     R5,#06FH
070B 7C06              MOV     R4,#06H
070D F0                MOVX    @DPTR,A
070E 22                RET     
070F         L?1348:
070F         L?1349:
070F 90000000    R     MOV     DPTR,#i2cid
0713 E0                MOVX    A,@DPTR
0714 FF                MOV     R7,A
0715 22                RET     
0716         L?1350:
0716         L?1351:
0716 E0                MOVX    A,@DPTR
0717 FE                MOV     R6,A
0718 A3                INC     DPTR
0719 E0                MOVX    A,@DPTR
071A FF                MOV     R7,A
071B C3                CLR     C
071C 22                RET     
071D         L?1352:
071D A3                INC     DPTR
071E F0                MOVX    @DPTR,A
071F 90000000    R     MOV     DPTR,#argv+06H
0723 22                RET     
0724         L?1353:
0724         L?1354:
0724 7B00        R     MOV     R3,#MBYTE ?SC_1706
0726 7A00        R     MOV     R2,#HIGH ?SC_1706
0728 7900        R     MOV     R1,#LOW ?SC_1706
072A 22                RET     
072B         L?1355:
072B         L?1356:
072B 7B00        R     MOV     R3,#MBYTE ?SC_1640
072D 7A00        R     MOV     R2,#HIGH ?SC_1640
072F 7900        R     MOV     R1,#LOW ?SC_1640
0731 22                RET     
0732         L?1357:
0732 90000000    R     MOV     DPTR,#index
0736 E0                MOVX    A,@DPTR
0737 75F003            MOV     B,#03H
073A A4                MUL     AB
073B 22                RET     
073C         L?1358:
073C         L?1359:
073C 7B00        R     MOV     R3,#MBYTE ?SC_2828
073E 7A00        R     MOV     R2,#HIGH ?SC_2828
0740 7900        R     MOV     R1,#LOW ?SC_2828
0742 22                RET     
0743         L?1360:
0743         L?1361:
0743 E0                MOVX    A,@DPTR
0744 90000000    E     MOV     DPTR,#?_Printf?BYTE+05H
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 93  

0748 F0                MOVX    @DPTR,A
0749 22                RET     
074A         L?1362:
074A         L?1363:
074A 7B00        R     MOV     R3,#MBYTE ?SC_3978
074C 7A00        R     MOV     R2,#HIGH ?SC_3978
074E 7900        R     MOV     R1,#LOW ?SC_3978
0750 22                RET     
0751         L?1364:
0751 90000000    E     MOV     DPTR,#?_stricmp?BYTE+03H
0755 F0                MOVX    @DPTR,A
0756 A3                INC     DPTR
0757 22                RET     
0758         L?1365:
0758 A3                INC     DPTR
0759 F0                MOVX    @DPTR,A
075A 90000000    R     MOV     DPTR,#argv
075E 22                RET     
             ; FUNCTION Com03E6 (END)

             ; FUNCTION monitor_bt656 (BEGIN)
                                           ; SOURCE LINE # 162
                                           ; SOURCE LINE # 163
                                           ; SOURCE LINE # 164
0000 110000      R     ACALL   L?1086
0003 9402              SUBB    A,#02H
0005 5051              JNC     ?C0001
                                           ; SOURCE LINE # 165
0007 7B00        R     MOV     R3,#MBYTE ?SC_0
0009 7A00        R     MOV     R2,#HIGH ?SC_0
000B 7900        R     MOV     R1,#LOW ?SC_0
000D 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 166
0010 7B00        R     MOV     R3,#MBYTE ?SC_50
0012 7A00        R     MOV     R2,#HIGH ?SC_50
0014 7900        R     MOV     R1,#LOW ?SC_50
0016 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 167
0019 7B00        R     MOV     R3,#MBYTE ?SC_70
001B 7A00        R     MOV     R2,#HIGH ?SC_70
001D 7900        R     MOV     R1,#LOW ?SC_70
001F 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 168
0022 7B00        R     MOV     R3,#MBYTE ?SC_102
0024 7A00        R     MOV     R2,#HIGH ?SC_102
0026 7900        R     MOV     R1,#LOW ?SC_102
0028 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 169
002B 7B00        R     MOV     R3,#MBYTE ?SC_133
002D 7A00        R     MOV     R2,#HIGH ?SC_133
002F 7900        R     MOV     R1,#LOW ?SC_133
0031 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 170
0034 7B00        R     MOV     R3,#MBYTE ?SC_154
0036 7A00        R     MOV     R2,#HIGH ?SC_154
0038 7900        R     MOV     R1,#LOW ?SC_154
003A 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 171
003D 7B00        R     MOV     R3,#MBYTE ?SC_180
003F 7A00        R     MOV     R2,#HIGH ?SC_180
0041 7900        R     MOV     R1,#LOW ?SC_180
0043 110000      E     ACALL   _Printf
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 94  

                                           ; SOURCE LINE # 172
0046 7B00        R     MOV     R3,#MBYTE ?SC_207
0048 7A00        R     MOV     R2,#HIGH ?SC_207
004A 7900        R     MOV     R1,#LOW ?SC_207
004C 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 173
004F 7B00        R     MOV     R3,#MBYTE ?SC_250
0051 7A00        R     MOV     R2,#HIGH ?SC_250
0053 7900        R     MOV     R1,#LOW ?SC_250
0055 010000      R     AJMP    ?C0828
                                           ; SOURCE LINE # 175
0058         ?C0001:
                                           ; SOURCE LINE # 176
0058 7400        R     MOV     A,#MBYTE ?SC_284
005A 110000      R     ACALL   L?1016
005D 7400        R     MOV     A,#HIGH ?SC_284
005F F0                MOVX    @DPTR,A
0060 7400        R     MOV     A,#LOW ?SC_284
0062 110000      R     ACALL   L?1001
0065 110000      E     ACALL   _stricmp
0068 EF                MOV     A,R7
0069 4E                ORL     A,R6
006A 700C              JNZ     ?C0003
                                           ; SOURCE LINE # 177
006C 7B00        R     MOV     R3,#MBYTE ?SC_286
006E 7A00        R     MOV     R2,#HIGH ?SC_286
0070 7900        R     MOV     R1,#LOW ?SC_286
0072 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 178
0075 010000      E     AJMP    BT656Enc_Info
                                           ; SOURCE LINE # 179
0078         ?C0003:
                                           ; SOURCE LINE # 180
0078 110000      R     ACALL   L?0999
007B 110000      E     ACALL   _stricmp
007E EF                MOV     A,R7
007F 4E                ORL     A,R6
0080 7004              JNZ     ?C0005
                                           ; SOURCE LINE # 181
0082 FF                MOV     R7,A
0083 010000      E     AJMP    _BT656Enc_Enable
0086         ?C0005:
                                           ; SOURCE LINE # 182
0086 7400        R     MOV     A,#MBYTE ?SC_319
0088 110000      R     ACALL   L?1019
008B 7400        R     MOV     A,#HIGH ?SC_319
008D F0                MOVX    @DPTR,A
008E A3                INC     DPTR
008F 7400        R     MOV     A,#LOW ?SC_319
0091 110000      R     ACALL   L?1002
0094 110000      E     ACALL   _stricmp
0097 EF                MOV     A,R7
0098 4E                ORL     A,R6
0099 7003              JNZ     ?C0007
                                           ; SOURCE LINE # 183
009B FF                MOV     R7,A
009C 8060              SJMP    ?C0832
009E         ?C0007:
                                           ; SOURCE LINE # 184
009E 7400        R     MOV     A,#MBYTE ?SC_323
00A0 110000      R     ACALL   L?1021
00A3 7400        R     MOV     A,#HIGH ?SC_323
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 95  

00A5 F0                MOVX    @DPTR,A
00A6 A3                INC     DPTR
00A7 7400        R     MOV     A,#LOW ?SC_323
00A9 110000      R     ACALL   L?1002
00AC 110000      E     ACALL   _stricmp
00AF EF                MOV     A,R7
00B0 4E                ORL     A,R6
00B1 7004              JNZ     ?C0009
                                           ; SOURCE LINE # 185
00B3 7F01              MOV     R7,#01H
00B5         ?C0829:
00B5 8047              SJMP    ?C0832
00B7         ?C0009:
                                           ; SOURCE LINE # 186
00B7 7400        R     MOV     A,#MBYTE ?SC_328
00B9 110000      R     ACALL   L?1023
00BC 7400        R     MOV     A,#HIGH ?SC_328
00BE F0                MOVX    @DPTR,A
00BF A3                INC     DPTR
00C0 7400        R     MOV     A,#LOW ?SC_328
00C2 110000      R     ACALL   L?1002
00C5 110000      E     ACALL   _stricmp
00C8 EF                MOV     A,R7
00C9 4E                ORL     A,R6
00CA 7004              JNZ     ?C0011
                                           ; SOURCE LINE # 187
00CC 7F02              MOV     R7,#02H
00CE         ?C0830:
00CE 802E              SJMP    ?C0832
00D0         ?C0011:
                                           ; SOURCE LINE # 188
00D0 7400        R     MOV     A,#MBYTE ?SC_332
00D2 110000      R     ACALL   L?1025
00D5 7400        R     MOV     A,#HIGH ?SC_332
00D7 F0                MOVX    @DPTR,A
00D8 A3                INC     DPTR
00D9 7400        R     MOV     A,#LOW ?SC_332
00DB 110000      R     ACALL   L?1002
00DE 110000      E     ACALL   _stricmp
00E1 EF                MOV     A,R7
00E2 4E                ORL     A,R6
00E3 7004              JNZ     ?C0013
                                           ; SOURCE LINE # 189
00E5 7F03              MOV     R7,#03H
00E7         ?C0831:
00E7 8015              SJMP    ?C0832
00E9         ?C0013:
                                           ; SOURCE LINE # 190
00E9 110000      R     ACALL   L?1020
00EC 7400        R     MOV     A,#HIGH ?SC_337
00EE F0                MOVX    @DPTR,A
00EF A3                INC     DPTR
00F0 7400        R     MOV     A,#LOW ?SC_337
00F2 110000      R     ACALL   L?1002
00F5 110000      E     ACALL   _stricmp
00F8 EF                MOV     A,R7
00F9 4E                ORL     A,R6
00FA 7005              JNZ     ?C0015
                                           ; SOURCE LINE # 191
00FC 7F04              MOV     R7,#04H
00FE         ?C0832:
00FE 010000      E     AJMP    _BT656Enc_Setup
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 96  

0101         ?C0015:
                                           ; SOURCE LINE # 192
0101 7400        R     MOV     A,#MBYTE ?SC_343
0103 110000      R     ACALL   L?1027
0106 7400        R     MOV     A,#HIGH ?SC_343
0108 F0                MOVX    @DPTR,A
0109 A3                INC     DPTR
010A 7400        R     MOV     A,#LOW ?SC_343
010C 110000      R     ACALL   L?1002
010F 110000      E     ACALL   _stricmp
0112 EF                MOV     A,R7
0113 4E                ORL     A,R6
0114 7005              JNZ     ?C0017
                                           ; SOURCE LINE # 193
0116 7F06              MOV     R7,#06H
0118 010000      E     AJMP    _ChangeBT656__MAIN
011B         ?C0017:
                                           ; SOURCE LINE # 194
                                           ; SOURCE LINE # 195
011B 7B00        R     MOV     R3,#MBYTE ?SC_348
011D 7A00        R     MOV     R2,#HIGH ?SC_348
011F 7900        R     MOV     R1,#LOW ?SC_348
0121         ?C0828:
0121 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 196
                                           ; SOURCE LINE # 197
0124         ?C0002:
0124 22                RET     
             ; FUNCTION monitor_bt656 (END)

             ; FUNCTION monitor_bt656e (BEGIN)
                                           ; SOURCE LINE # 200
                                           ; SOURCE LINE # 201
                                           ; SOURCE LINE # 203
0000 110000      R     ACALL   L?1086
0003 9402              SUBB    A,#02H
0005 5008              JNC     ?C0019
0007 E4                CLR     A
0008 90000000    R     MOV     DPTR,#mode
000C F0                MOVX    @DPTR,A
000D 800C              SJMP    ?C0020
000F         ?C0019:
                                           ; SOURCE LINE # 204
000F 110000      R     ACALL   L?1003
0012 110000      E     ACALL   _a2i
0015 90000000    R     MOV     DPTR,#mode
0019 EF                MOV     A,R7
001A F0                MOVX    @DPTR,A
001B         ?C0020:
                                           ; SOURCE LINE # 205
001B 90000000    R     MOV     DPTR,#mode
001F E0                MOVX    A,@DPTR
0020 D3                SETB    C
0021 9405              SUBB    A,#05H
0023 4002              JC      ?C0021
                                           ; SOURCE LINE # 206
0025 E4                CLR     A
0026 F0                MOVX    @DPTR,A
0027         ?C0021:
                                           ; SOURCE LINE # 207
0027 90000000    R     MOV     DPTR,#mode
002B E0                MOVX    A,@DPTR
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 97  

002C FF                MOV     R7,A
002D 010000      E     AJMP    _BT656_InitExtEncoder
             ; FUNCTION monitor_bt656e (END)

             ; FUNCTION monitor_checkandset (BEGIN)
                                           ; SOURCE LINE # 210
                                           ; SOURCE LINE # 211
                                           ; SOURCE LINE # 214
0000 90000000    E     MOV     DPTR,#InputMain
0004 E0                MOVX    A,@DPTR
0005 B40900            CJNE    A,#09H,?C0810
0008         ?C0810:
0008 5041              JNC     ?C0032
000A 90000000    R     MOV     DPTR,#?C0811
000E F8                MOV     R0,A
000F 28                ADD     A,R0
0010 28                ADD     A,R0
0011 73                JMP     @A+DPTR
0012         ?C0811:
0012 010000      R     AJMP    ?C0025
0015 010000      R     AJMP    ?C0025
0018 010000      R     AJMP    ?C0026
001B 010000      R     AJMP    ?C0027
001E 010000      R     AJMP    ?C0032
0021 010000      R     AJMP    ?C0029
0024 010000      R     AJMP    ?C0029
0027 010000      R     AJMP    ?C0030
002A 010000      R     AJMP    ?C0031
                                           ; SOURCE LINE # 215
                                           ; SOURCE LINE # 219
002D         ?C0025:
002D 110000      E     ACALL   CheckAndSetDecoderScaler
0030 801C              SJMP    ?C0838
                                           ; SOURCE LINE # 221
0032         ?C0026:
0032 110000      E     ACALL   CheckAndSetComponent
0035         ?C0833:
0035 8017              SJMP    ?C0838
                                           ; SOURCE LINE # 224
0037         ?C0027:
0037 110000      E     ACALL   CheckAndSetPC
003A         ?C0834:
003A 8012              SJMP    ?C0838
                                           ; SOURCE LINE # 230
                                           ; SOURCE LINE # 231
003C         ?C0029:
                                           ; SOURCE LINE # 235
003C 110000      E     ACALL   CheckAndSetHDMI
003F         ?C0835:
003F 800D              SJMP    ?C0838
                                           ; SOURCE LINE # 238
0041         ?C0030:
0041 110000      E     ACALL   CheckAndSetBT656Loop
0044         ?C0836:
0044 8008              SJMP    ?C0838
                                           ; SOURCE LINE # 241
0046         ?C0031:
0046 110000      E     ACALL   CheckAndSetLVDSRx
0049         ?C0837:
0049 8003              SJMP    ?C0838
                                           ; SOURCE LINE # 243
004B         ?C0032:
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 98  

004B 110000      E     ACALL   CheckAndSetUnknown
004E         ?C0838:
004E 90000000    R     MOV     DPTR,#ret
0052 EF                MOV     A,R7
0053 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 244
0054         ?C0023:
                                           ; SOURCE LINE # 245
0054 90000000    R     MOV     DPTR,#ret
0058 E0                MOVX    A,@DPTR
0059 700C              JNZ     ?C0033
                                           ; SOURCE LINE # 247
005B FF                MOV     R7,A
005C 110000      E     ACALL   _VInput_enableOutput
                                           ; SOURCE LINE # 248
005F 7B00        R     MOV     R3,#MBYTE ?SC_362
0061 7A00        R     MOV     R2,#HIGH ?SC_362
0063 7900        R     MOV     R1,#LOW ?SC_362
                                           ; SOURCE LINE # 249
0065 800B              SJMP    ?C0839
0067         ?C0033:
                                           ; SOURCE LINE # 253
0067 E4                CLR     A
0068 FF                MOV     R7,A
0069 110000      E     ACALL   _VInput_gotoFreerun
                                           ; SOURCE LINE # 254
006C 7B00        R     MOV     R3,#MBYTE ?SC_375
006E 7A00        R     MOV     R2,#HIGH ?SC_375
0070 7900        R     MOV     R1,#LOW ?SC_375
0072         ?C0839:
0072 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 255
                                           ; SOURCE LINE # 256
0075         ?C0035:
0075 22                RET     
             ; FUNCTION monitor_checkandset (END)

             ; FUNCTION monitor_checkspeed (BEGIN)
                                           ; SOURCE LINE # 257
                                           ; SOURCE LINE # 258
                                           ; SOURCE LINE # 260
0000 110000      R     ACALL   L?1086
0003 9402              SUBB    A,#02H
0005 500C              JNC     ?C0036
0007 90000000    R     MOV     DPTR,#count
000B E4                CLR     A
000C F0                MOVX    @DPTR,A
000D A3                INC     DPTR
000E 7464              MOV     A,#064H
0010 F0                MOVX    @DPTR,A
0011 800F              SJMP    ?C0037
0013         ?C0036:
                                           ; SOURCE LINE # 261
0013 110000      R     ACALL   L?1003
0016 110000      E     ACALL   _a2h
0019 90000000    R     MOV     DPTR,#count
001D EE                MOV     A,R6
001E F0                MOVX    @DPTR,A
001F A3                INC     DPTR
0020 EF                MOV     A,R7
0021 F0                MOVX    @DPTR,A
0022         ?C0037:
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 99  

                                           ; SOURCE LINE # 262
0022 90000000    R     MOV     DPTR,#count
0026 E0                MOVX    A,@DPTR
0027 FE                MOV     R6,A
0028 A3                INC     DPTR
0029 E0                MOVX    A,@DPTR
002A FF                MOV     R7,A
002B 010000      R     AJMP    _Test_McuSpeed
             ; FUNCTION monitor_checkspeed (END)

             ; FUNCTION monitor_check (BEGIN)
                                           ; SOURCE LINE # 264
                                           ; SOURCE LINE # 265
                                           ; SOURCE LINE # 266
0000 110000      R     ACALL   L?1086
0003 9402              SUBB    A,#02H
0005 5012              JNC     ?C0039
                                           ; SOURCE LINE # 267
0007 7B00        R     MOV     R3,#MBYTE ?SC_385
0009 7A00        R     MOV     R2,#HIGH ?SC_385
000B 7900        R     MOV     R1,#LOW ?SC_385
000D 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 269
0010 7B00        R     MOV     R3,#MBYTE ?SC_409
0012 7A00        R     MOV     R2,#HIGH ?SC_409
0014 7900        R     MOV     R1,#LOW ?SC_409
0016 010000      E     AJMP    _Puts
                                           ; SOURCE LINE # 271
0019         ?C0039:
                                           ; SOURCE LINE # 272
0019 7400        R     MOV     A,#MBYTE ?SC_424
001B 110000      R     ACALL   L?1030
001E 7400        R     MOV     A,#HIGH ?SC_424
0020 F0                MOVX    @DPTR,A
0021 A3                INC     DPTR
0022 7400        R     MOV     A,#LOW ?SC_424
0024 110000      R     ACALL   L?1002
0027 110000      E     ACALL   _stricmp
002A EF                MOV     A,R7
002B 4E                ORL     A,R6
002C 7003              JNZ     ?C0041
                                           ; SOURCE LINE # 273
002E 010000      E     AJMP    AdjustSSPLL_with_HTotal
0031         ?C0041:
                                           ; SOURCE LINE # 274
0031 7400        R     MOV     A,#MBYTE ?SC_429
0033 110000      R     ACALL   L?1032
0036 7400        R     MOV     A,#HIGH ?SC_429
0038 F0                MOVX    @DPTR,A
0039 A3                INC     DPTR
003A 7400        R     MOV     A,#LOW ?SC_429
003C 110000      R     ACALL   L?1002
003F 110000      E     ACALL   _stricmp
0042 EF                MOV     A,R7
0043 4E                ORL     A,R6
0044 7036              JNZ     ?C0043
                                           ; SOURCE LINE # 276
0046 110000      R     ACALL   L?1086
0049 9403              SUBB    A,#03H
004B 5009              JNC     ?C0044
004D 90000000    R     MOV     DPTR,#count
0051 7420              MOV     A,#020H
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 100 

0053 F0                MOVX    @DPTR,A
0054 8010              SJMP    ?C0045
0056         ?C0044:
                                           ; SOURCE LINE # 277
0056 90000000    R     MOV     DPTR,#argv+06H
005A 110000      R     ACALL   L?1004
005D 110000      E     ACALL   _a2i
0060 90000000    R     MOV     DPTR,#count
0064 EF                MOV     A,R7
0065 F0                MOVX    @DPTR,A
0066         ?C0045:
                                           ; SOURCE LINE # 278
0066 90000000    R     MOV     DPTR,#count
006A E0                MOVX    A,@DPTR
006B C3                CLR     C
006C 9408              SUBB    A,#08H
006E 5003              JNC     ?C0046
                                           ; SOURCE LINE # 279
0070 7408              MOV     A,#08H
0072 F0                MOVX    @DPTR,A
0073         ?C0046:
                                           ; SOURCE LINE # 280
0073 90000000    R     MOV     DPTR,#count
0077 E0                MOVX    A,@DPTR
0078 FF                MOV     R7,A
0079 010000      E     AJMP    _CheckSpiClock
                                           ; SOURCE LINE # 281
007C         ?C0043:
                                           ; SOURCE LINE # 283
007C 7400        R     MOV     A,#MBYTE ?SC_434
007E 110000      R     ACALL   L?1034
0081 7400        R     MOV     A,#HIGH ?SC_434
0083 F0                MOVX    @DPTR,A
0084 A3                INC     DPTR
0085 7400        R     MOV     A,#LOW ?SC_434
0087 110000      R     ACALL   L?1002
008A 110000      E     ACALL   _stricmp
008D EF                MOV     A,R7
008E 4E                ORL     A,R6
008F 6015              JZ      ?C0049
0091 7400        R     MOV     A,#MBYTE ?SC_440
0093 110000      R     ACALL   L?1036
0096 7400        R     MOV     A,#HIGH ?SC_440
0098 F0                MOVX    @DPTR,A
0099 A3                INC     DPTR
009A 7400        R     MOV     A,#LOW ?SC_440
009C 110000      R     ACALL   L?1002
009F 110000      E     ACALL   _stricmp
00A2 EF                MOV     A,R7
00A3 4E                ORL     A,R6
00A4 7003              JNZ     ?C0048
00A6         ?C0049:
                                           ; SOURCE LINE # 284
00A6 010000      E     AJMP    AutoTunePhase
00A9         ?C0048:
                                           ; SOURCE LINE # 285
00A9 7400        R     MOV     A,#MBYTE ?SC_443
00AB 110000      R     ACALL   L?1038
00AE 7400        R     MOV     A,#HIGH ?SC_443
00B0 F0                MOVX    @DPTR,A
00B1 A3                INC     DPTR
00B2 7400        R     MOV     A,#LOW ?SC_443
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 101 

00B4 110000      R     ACALL   L?1002
00B7 110000      E     ACALL   _stricmp
00BA EF                MOV     A,R7
00BB 4E                ORL     A,R6
00BC 7003              JNZ     ?C0051
                                           ; SOURCE LINE # 286
00BE 010000      E     AJMP    AutoTuneColor
00C1         ?C0051:
                                           ; SOURCE LINE # 288
00C1 7400        R     MOV     A,#MBYTE ?SC_449
00C3 110000      R     ACALL   L?1039
00C6 7400        R     MOV     A,#HIGH ?SC_449
00C8 F0                MOVX    @DPTR,A
00C9 A3                INC     DPTR
00CA 7400        R     MOV     A,#LOW ?SC_449
00CC 110000      R     ACALL   L?1002
00CF 110000      E     ACALL   _stricmp
00D2 EF                MOV     A,R7
00D3 4E                ORL     A,R6
00D4 7003              JNZ     ?C0053
                                           ; SOURCE LINE # 289
00D6 010000      E     AJMP    DumpClock
00D9         ?C0053:
                                           ; SOURCE LINE # 290
00D9 7400        R     MOV     A,#MBYTE ?SC_455
00DB 110000      R     ACALL   L?1039
00DE 7400        R     MOV     A,#HIGH ?SC_455
00E0 F0                MOVX    @DPTR,A
00E1 A3                INC     DPTR
00E2 7400        R     MOV     A,#LOW ?SC_455
00E4 110000      R     ACALL   L?1002
00E7 110000      E     ACALL   _stricmp
00EA EF                MOV     A,R7
00EB 4E                ORL     A,R6
00EC 7003              JNZ     ?C0055
                                           ; SOURCE LINE # 291
00EE 010000      R     AJMP    Test_Checkclock
00F1         ?C0055:
                                           ; SOURCE LINE # 292
00F1 7400        R     MOV     A,#MBYTE ?SC_462
00F3 110000      R     ACALL   L?1041
00F6 7400        R     MOV     A,#HIGH ?SC_462
00F8 F0                MOVX    @DPTR,A
00F9 A3                INC     DPTR
00FA 7400        R     MOV     A,#LOW ?SC_462
00FC 110000      R     ACALL   L?1002
00FF 110000      E     ACALL   _stricmp
0102 EF                MOV     A,R7
0103 4E                ORL     A,R6
0104 7003              JNZ     ?C0057
                                           ; SOURCE LINE # 293
0106 010000      R     AJMP    Test_Checkclock2
0109         ?C0057:
                                           ; SOURCE LINE # 294
0109 7400        R     MOV     A,#MBYTE ?SC_469
010B 110000      R     ACALL   L?1041
010E 7400        R     MOV     A,#HIGH ?SC_469
0110 F0                MOVX    @DPTR,A
0111 A3                INC     DPTR
0112 7400        R     MOV     A,#LOW ?SC_469
0114 110000      R     ACALL   L?1002
0117 110000      E     ACALL   _stricmp
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 102 

011A EF                MOV     A,R7
011B 4E                ORL     A,R6
011C 7003              JNZ     ?C0059
                                           ; SOURCE LINE # 295
011E 010000      R     AJMP    monitor_checkspeed
0121         ?C0059:
                                           ; SOURCE LINE # 296
0121 7400        R     MOV     A,#MBYTE ?SC_475
0123 110000      R     ACALL   L?1042
0126 7400        R     MOV     A,#HIGH ?SC_475
0128 F0                MOVX    @DPTR,A
0129 A3                INC     DPTR
012A 7400        R     MOV     A,#LOW ?SC_475
012C 110000      R     ACALL   L?1002
012F 110000      E     ACALL   _stricmp
0132 EF                MOV     A,R7
0133 4E                ORL     A,R6
0134 7003              JNZ     ?C0062
                                           ; SOURCE LINE # 297
0136 110000      E     ACALL   Measure_VideoTiming
                                           ; SOURCE LINE # 298
0139         ?C0062:
0139 22                RET     
             ; FUNCTION monitor_check (END)

             ; FUNCTION monitor_compiler (BEGIN)
                                           ; SOURCE LINE # 307
                                           ; SOURCE LINE # 308
                                           ; SOURCE LINE # 330
0000 110000      E     ACALL   dummy_i2c_code
                                           ; SOURCE LINE # 331
0003 110000      E     ACALL   dummy_remo_code
                                           ; SOURCE LINE # 332
0006 110000      E     ACALL   dummy_misc_code
                                           ; SOURCE LINE # 333
0009 110000      E     ACALL   dummy_argb_code
                                           ; SOURCE LINE # 334
000C 110000      E     ACALL   dummy_osdspi_code
                                           ; SOURCE LINE # 341
000F 7B00        R     MOV     R3,#MBYTE ?SC_480
0011 7A00        R     MOV     R2,#HIGH ?SC_480
0013 7900        R     MOV     R1,#LOW ?SC_480
0015 110000      E     ACALL   _wPuts
                                           ; SOURCE LINE # 342
0018 7D56              MOV     R5,#056H
001A 7C01              MOV     R4,#01H
001C 7F01              MOV     R7,#01H
001E 7E00              MOV     R6,#00H
0020 110000      E     ACALL   _delay1s
                                           ; SOURCE LINE # 346
0023 110000      R     ACALL   L?1343
0026 E4                CLR     A
0027 90000000    E     MOV     DPTR,#?_TWmemset?BYTE+05H
002B F0                MOVX    @DPTR,A
002C A3                INC     DPTR
002D F0                MOVX    @DPTR,A
002E FD                MOV     R5,A
002F FC                MOV     R4,A
0030 110000      E     ACALL   _TWmemset
                                           ; SOURCE LINE # 347
0033 90000000    E     MOV     DPTR,#?_TWmemcmp?BYTE+03H
0037 110000      R     ACALL   L?1218
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 103 

003A A3                INC     DPTR
003B F0                MOVX    @DPTR,A
003C 110000      R     ACALL   L?1345
003F 110000      E     ACALL   _TWmemcmp
                                           ; SOURCE LINE # 360
0042 7F8A              MOV     R7,#08AH
0044 110000      E     ACALL   _CheckI2C
                                           ; SOURCE LINE # 362
0047 110000      R     ACALL   L?1345
004A E4                CLR     A
004B 90000000    E     MOV     DPTR,#?_ReadI2CS?BYTE+05H
004F F0                MOVX    @DPTR,A
0050 FD                MOV     R5,A
0051 7F8A              MOV     R7,#08AH
0053 110000      E     ACALL   _ReadI2CS
                                           ; SOURCE LINE # 365
0056 90000000    E     MOV     DPTR,#?_ReadI2CS_multi?BYTE+04H
005A 110000      R     ACALL   L?1218
005D FB                MOV     R3,A
005E FA                MOV     R2,A
005F 7D21              MOV     R5,#021H
0061 7F78              MOV     R7,#078H
0063 110000      E     ACALL   _ReadI2CS_multi
                                           ; SOURCE LINE # 366
0066 90000000    E     MOV     DPTR,#?_WriteI2CS_multi?BYTE+04H
006A 110000      R     ACALL   L?1219
006D FB                MOV     R3,A
006E FA                MOV     R2,A
006F 7D21              MOV     R5,#021H
0071 7F78              MOV     R7,#078H
0073 110000      E     ACALL   _WriteI2CS_multi
                                           ; SOURCE LINE # 374
0076 110000      E     ACALL   ScalerReadOutputWidth
                                           ; SOURCE LINE # 376
0079 110000      E     ACALL   ScalerReadXDownReg
                                           ; SOURCE LINE # 382
007C 7F01              MOV     R7,#01H
007E 110000      E     ACALL   _PclkoSetDiv
                                           ; SOURCE LINE # 383
0081 E4                CLR     A
0082 90000000    E     MOV     DPTR,#?_Sspll1SetFreq?BYTE+04H
0086 110000      R     ACALL   L?1347
0089 110000      E     ACALL   _Sspll1SetFreq
                                           ; SOURCE LINE # 384
008C E4                CLR     A
008D FF                MOV     R7,A
008E 110000      E     ACALL   _SpiClk_overclocking
                                           ; SOURCE LINE # 385
0091 110000      E     ACALL   SpiClk_SetSync
                                           ; SOURCE LINE # 386
0094 110000      E     ACALL   PllClkGetSource
                                           ; SOURCE LINE # 387
0097 7F02              MOV     R7,#02H
0099 110000      E     ACALL   _SpiClk_GetMinAsyncWaitValue
                                           ; SOURCE LINE # 388
009C 90000000    E     MOV     DPTR,#?_SpiClk_SetAsync?BYTE+03H
00A0 7401              MOV     A,#01H
00A2 F0                MOVX    @DPTR,A
00A3 FB                MOV     R3,A
00A4 7D03              MOV     R5,#03H
00A6 7F02              MOV     R7,#02H
00A8 110000      E     ACALL   _SpiClk_SetAsync
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 104 

                                           ; SOURCE LINE # 389
00AB 110000      E     ACALL   SpiClkReadSource
                                           ; SOURCE LINE # 390
00AE E4                CLR     A
00AF FF                MOV     R7,A
00B0 110000      E     ACALL   _SpiClkSetSource
                                           ; SOURCE LINE # 395
00B3 E4                CLR     A
00B4 FF                MOV     R7,A
00B5 110000      E     ACALL   _MeasSetErrTolerance
                                           ; SOURCE LINE # 396
00B8 E4                CLR     A
00B9 FF                MOV     R7,A
00BA 110000      E     ACALL   _MeasEnableChangedDetection
                                           ; SOURCE LINE # 399
00BD 110000      E     ACALL   MeasGetVPeriod
                                           ; SOURCE LINE # 400
00C0 7F01              MOV     R7,#01H
00C2 110000      E     ACALL   _MeasGetHTotal
                                           ; SOURCE LINE # 401
00C5 110000      E     ACALL   MeasGetHSyncRiseToFallWidth
                                           ; SOURCE LINE # 402
00C8 110000      E     ACALL   MeasGetHSyncRiseToHActiveEnd
                                           ; SOURCE LINE # 403
00CB 110000      E     ACALL   MeasGetVSyncRiseToFallWidth
                                           ; SOURCE LINE # 404
00CE 110000      E     ACALL   MeasGetVsyncRisePos
                                           ; SOURCE LINE # 405
00D1 110000      R     ACALL   L?1343
00D4 110000      E     ACALL   _MeasGetHActive
                                           ; SOURCE LINE # 407
00D7 110000      R     ACALL   L?1344
00DA 110000      E     ACALL   _MeasGetVActive
                                           ; SOURCE LINE # 409
00DD 110000      E     ACALL   MeasGetVPeriod27
                                           ; SOURCE LINE # 431
00E0 110000      E     ACALL   Dummy_FosdMenu_func
                                           ; SOURCE LINE # 432
00E3 110000      E     ACALL   Dummy_FosdInitTable_func
                                           ; SOURCE LINE # 433
00E6 110000      E     ACALL   Dummy_FosdDispInfo_func
                                           ; SOURCE LINE # 434
00E9 110000      E     ACALL   Dummy_FosdString_func
                                           ; SOURCE LINE # 449
00EC E4                CLR     A
00ED FF                MOV     R7,A
00EE 110000      E     ACALL   _SpiFlash_4B_DmaCmd
                                           ; SOURCE LINE # 454
00F1 E4                CLR     A
00F2 FF                MOV     R7,A
00F3 FE                MOV     R6,A
00F4 FD                MOV     R5,A
00F5 FC                MOV     R4,A
00F6 110000      E     ACALL   _SpiFlash_SectorErase
                                           ; SOURCE LINE # 455
00F9 E4                CLR     A
00FA FF                MOV     R7,A
00FB FE                MOV     R6,A
00FC FD                MOV     R5,A
00FD FC                MOV     R4,A
00FE 110000      E     ACALL   _SpiFlash_BlockErase
                                           ; SOURCE LINE # 456
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 105 

0101 90000000    E     MOV     DPTR,#?_SpiFlash_PageProgram_XMem?BYTE+04H
0105 110000      R     ACALL   L?1197
0108 110000      E     ACALL   _SpiFlash_PageProgram_XMem
                                           ; SOURCE LINE # 457
010B E4                CLR     A
010C FF                MOV     R7,A
010D FE                MOV     R6,A
010E FD                MOV     R5,A
010F FC                MOV     R4,A
0110 110000      R     ACALL   L?1346
0113 90000000    E     MOV     DPTR,#?_SpiFlash_PageProgram_ChipReg?BYTE+07H
0117 F0                MOVX    @DPTR,A
0118 110000      E     ACALL   _SpiFlash_PageProgram_ChipReg
                                           ; SOURCE LINE # 458
011B E4                CLR     A
011C FF                MOV     R7,A
011D FE                MOV     R6,A
011E FD                MOV     R5,A
011F FC                MOV     R4,A
0120 90000000    E     MOV     DPTR,#?_SpiFlash_FastRead_ChipReg?BYTE+04H
0124 F0                MOVX    @DPTR,A
0125 110000      E     ACALL   _SpiFlash_FastRead_ChipReg
                                           ; SOURCE LINE # 459
0128 90000000    E     MOV     DPTR,#?_SpiFlash_FastRead_Fixed_ChipReg?BYTE+04H
012C 110000      R     ACALL   L?1178
012F 110000      E     ACALL   _SpiFlash_FastRead_Fixed_ChipReg
                                           ; SOURCE LINE # 460
0132 90000000    E     MOV     DPTR,#?_SpiFlash_Read_XMem?BYTE+04H
0136 110000      R     ACALL   L?1197
0139 110000      E     ACALL   _SpiFlash_Read_XMem
                                           ; SOURCE LINE # 462
013C E4                CLR     A
013D FF                MOV     R7,A
013E FE                MOV     R6,A
013F FD                MOV     R5,A
0140 FC                MOV     R4,A
0141 90000000    E     MOV     DPTR,#?_SpiFlash_Read_FOsd?BYTE+04H
0145 110000      R     ACALL   L?1198
0148 110000      E     ACALL   _SpiFlash_Read_FOsd
                                           ; SOURCE LINE # 463
014B E4                CLR     A
014C FF                MOV     R7,A
014D FE                MOV     R6,A
014E FD                MOV     R5,A
014F FC                MOV     R4,A
0150 90000000    E     MOV     DPTR,#?_SpiFlash_Read_SOsd?BYTE+04H
0154 110000      R     ACALL   L?1198
0157 010000      E     AJMP    _SpiFlash_Read_SOsd
             ; FUNCTION monitor_compiler (END)

             ; FUNCTION monitor_fosd (BEGIN)
                                           ; SOURCE LINE # 498
                                           ; SOURCE LINE # 499
                                           ; SOURCE LINE # 500
0000 110000      R     ACALL   L?1086
0003 9402              SUBB    A,#02H
0005 402B              JC      ?C0067
                                           ; SOURCE LINE # 501
0007         ?C0064:
                                           ; SOURCE LINE # 656
0007 7400        R     MOV     A,#MBYTE ?SC_488
0009 110000      R     ACALL   L?1042
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 106 

000C 7400        R     MOV     A,#HIGH ?SC_488
000E F0                MOVX    @DPTR,A
000F A3                INC     DPTR
0010 7400        R     MOV     A,#LOW ?SC_488
0012 110000      R     ACALL   L?1002
0015 110000      E     ACALL   _stricmp
0018 EF                MOV     A,R7
0019 4E                ORL     A,R6
001A 7016              JNZ     ?C0067
                                           ; SOURCE LINE # 659
001C 90000000    R     MOV     DPTR,#argv+06H
0020 110000      R     ACALL   L?1004
0023 110000      E     ACALL   _a2h
0026 90000000    R     MOV     DPTR,#start
002A EE                MOV     A,R6
002B F0                MOVX    @DPTR,A
002C A3                INC     DPTR
002D EF                MOV     A,R7
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 660
002F 110000      E     ACALL   _TestInitFontRam
                                           ; SOURCE LINE # 661
                                           ; SOURCE LINE # 662
0032         ?C0067:
0032 22                RET     
             ; FUNCTION monitor_fosd (END)

             ; FUNCTION monitor_hdmi (BEGIN)
                                           ; SOURCE LINE # 705
                                           ; SOURCE LINE # 706
                                           ; SOURCE LINE # 716
0000 110000      R     ACALL   L?1086
0003 9402              SUBB    A,#02H
0005 5009              JNC     ?C0069
                                           ; SOURCE LINE # 717
0007 7B00        R     MOV     R3,#MBYTE ?SC_497
0009 7A00        R     MOV     R2,#HIGH ?SC_497
000B 7900        R     MOV     R1,#LOW ?SC_497
000D 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 718
                                           ; SOURCE LINE # 744
0010         ?C0069:
0010 22                RET     
             ; FUNCTION monitor_hdmi (END)

             ; FUNCTION monitor_i2c (BEGIN)
                                           ; SOURCE LINE # 786
                                           ; SOURCE LINE # 787
                                           ; SOURCE LINE # 788
0000 90000000    R     MOV     DPTR,#argc
0004 E0                MOVX    A,@DPTR
0005 B40124            CJNE    A,#01H,?C0070
                                           ; SOURCE LINE # 789
0008 7B00        R     MOV     R3,#MBYTE ?SC_535
000A 7A00        R     MOV     R2,#HIGH ?SC_535
000C 7900        R     MOV     R1,#LOW ?SC_535
000E 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 790
0011 7B00        R     MOV     R3,#MBYTE ?SC_566
0013 7A00        R     MOV     R2,#HIGH ?SC_566
0015 7900        R     MOV     R1,#LOW ?SC_566
0017 110000      E     ACALL   _Printf
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 107 

                                           ; SOURCE LINE # 791
001A 7B00        R     MOV     R3,#MBYTE ?SC_602
001C 7A00        R     MOV     R2,#HIGH ?SC_602
001E 7900        R     MOV     R1,#LOW ?SC_602
0020 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 792
0023 7B00        R     MOV     R3,#MBYTE ?SC_618
0025 7A00        R     MOV     R2,#HIGH ?SC_618
0027 7900        R     MOV     R1,#LOW ?SC_618
0029 010000      R     AJMP    ?C0846
                                           ; SOURCE LINE # 794
002C         ?C0070:
                                           ; SOURCE LINE # 795
002C 110000      R     ACALL   L?1022
002F 7400        R     MOV     A,#HIGH ?SC_644
0031 F0                MOVX    @DPTR,A
0032 A3                INC     DPTR
0033 7400        R     MOV     A,#LOW ?SC_644
0035 110000      R     ACALL   L?1002
0038 110000      E     ACALL   _stricmp
003B EF                MOV     A,R7
003C 4E                ORL     A,R6
003D 704E              JNZ     ?C0072
                                           ; SOURCE LINE # 797
003F 110000      R     ACALL   L?1086
0042 9403              SUBB    A,#03H
0044 5009              JNC     ?C0073
                                           ; SOURCE LINE # 798
0046 7B00        R     MOV     R3,#MBYTE ?SC_650
0048 7A00        R     MOV     R2,#HIGH ?SC_650
004A 7900        R     MOV     R1,#LOW ?SC_650
004C         ?C0840:
004C 010000      R     AJMP    ?C0846
                                           ; SOURCE LINE # 800
004F         ?C0073:
                                           ; SOURCE LINE # 801
004F 90000000    R     MOV     DPTR,#argv+06H
0053 110000      R     ACALL   L?1004
0056 110000      R     ACALL   L?1366
                                           ; SOURCE LINE # 802
0059 110000      R     ACALL   L?1290
                                           ; SOURCE LINE # 804
005C 7B00        R     MOV     R3,#MBYTE ?SC_668
005E 7A00        R     MOV     R2,#HIGH ?SC_668
0060 7900        R     MOV     R1,#LOW ?SC_668
0062 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 805
0065 90000000    R     MOV     DPTR,#temp
0069 E0                MOVX    A,@DPTR
006A 7008              JNZ     ?C0074
006C 7B00        R     MOV     R3,#MBYTE ?SC_679
006E 7A00        R     MOV     R2,#HIGH ?SC_679
0070 7900        R     MOV     R1,#LOW ?SC_679
0072 8006              SJMP    ?C0842
0074         ?C0074:
                                           ; SOURCE LINE # 806
0074 7B00        R     MOV     R3,#MBYTE ?SC_684
0076 7A00        R     MOV     R2,#HIGH ?SC_684
0078 7900        R     MOV     R1,#LOW ?SC_684
007A         ?C0842:
007A 110000      E     ACALL   _Puts
007D         ?C0075:
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 108 

                                           ; SOURCE LINE # 807
007D 7B00        R     MOV     R3,#MBYTE ?SC_689
007F 7A00        R     MOV     R2,#HIGH ?SC_689
0081 7900        R     MOV     R1,#LOW ?SC_689
0083 90000000    E     MOV     DPTR,#I2C_delay_base
0087 110000      R     ACALL   L?1092
008A         ?C0841:
                                           ; SOURCE LINE # 808
008A 010000      R     AJMP    ?C0846
008D         ?C0072:
                                           ; SOURCE LINE # 809
008D 7400        R     MOV     A,#MBYTE ?SC_710
008F 110000      R     ACALL   L?1044
0092 7400        R     MOV     A,#HIGH ?SC_710
0094 F0                MOVX    @DPTR,A
0095 A3                INC     DPTR
0096 7400        R     MOV     A,#LOW ?SC_710
0098 110000      R     ACALL   L?1002
009B 110000      E     ACALL   _stricmp
009E EF                MOV     A,R7
009F 4E                ORL     A,R6
00A0 7003              JNZ     $ + 5H
00A2 010000      R     AJMP    ?C0071
                                           ; SOURCE LINE # 810
00A5         ?C0077:
                                           ; SOURCE LINE # 835
00A5 7400        R     MOV     A,#MBYTE ?SC_714
00A7 110000      R     ACALL   L?1044
00AA 7400        R     MOV     A,#HIGH ?SC_714
00AC F0                MOVX    @DPTR,A
00AD A3                INC     DPTR
00AE 7400        R     MOV     A,#LOW ?SC_714
00B0 110000      R     ACALL   L?1002
00B3 110000      E     ACALL   _stricmp
00B6 EF                MOV     A,R7
00B7 4E                ORL     A,R6
00B8 6003              JZ      $ + 5H
00BA 010000      R     AJMP    ?C0079
                                           ; SOURCE LINE # 838
00BD 110000      R     ACALL   L?1086
00C0 9404              SUBB    A,#04H
00C2 5009              JNC     ?C0080
                                           ; SOURCE LINE # 839
00C4 7B00        R     MOV     R3,#MBYTE ?SC_716
00C6 7A00        R     MOV     R2,#HIGH ?SC_716
00C8 7900        R     MOV     R1,#LOW ?SC_716
00CA         ?C0843:
00CA 010000      R     AJMP    ?C0846
                                           ; SOURCE LINE # 841
00CD         ?C0080:
                                           ; SOURCE LINE # 842
00CD 90000000    R     MOV     DPTR,#argv+06H
00D1 110000      R     ACALL   L?1004
00D4 110000      E     ACALL   _a2h
                                           ; SOURCE LINE # 843
00D7 110000      R     ACALL   L?1231
00DA 110000      R     ACALL   L?1004
00DD 110000      E     ACALL   _a2h
00E0 90000000    R     MOV     DPTR,#value
00E4 EF                MOV     A,R7
00E5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 844
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 109 

00E6 110000      R     ACALL   L?1086
00E9 9404              SUBB    A,#04H
00EB 90000000    R     MOV     DPTR,#cnt
00EF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 845
00F0 E4                CLR     A
00F1 A3                INC     DPTR
00F2 F0                MOVX    @DPTR,A
00F3         ?C0081:
00F3 90000000    R     MOV     DPTR,#cnt
00F7 E0                MOVX    A,@DPTR
00F8 FF                MOV     R7,A
00F9 A3                INC     DPTR
00FA E0                MOVX    A,@DPTR
00FB FE                MOV     R6,A
00FC C3                CLR     C
00FD 9F                SUBB    A,R7
00FE 5030              JNC     ?C0082
                                           ; SOURCE LINE # 846
0100 EE                MOV     A,R6
0101 75F003            MOV     B,#03H
0104 A4                MUL     AB
0105 2400        R     ADD     A,#LOW argv+0CH
0107 F582              MOV     DPL,A
0109 E4                CLR     A
010A 3400        R     ADDC    A,#HIGH argv+0CH
010C F583              MOV     DPH,A
010E 759300      E     MOV     DPX,#?C?XDATASEG
0111 110000      R     ACALL   L?1004
0114 110000      E     ACALL   _a2h
0117 90000000    R     MOV     DPTR,#i
011B E0                MOVX    A,@DPTR
011C 2400        E     ADD     A,#LOW SPI_Buffer
011E F582              MOV     DPL,A
0120 E4                CLR     A
0121 3400        E     ADDC    A,#HIGH SPI_Buffer
0123 110000      R     ACALL   L?1130
0126 F0                MOVX    @DPTR,A
0127 90000000    R     MOV     DPTR,#i
012B E0                MOVX    A,@DPTR
012C 04                INC     A
012D F0                MOVX    @DPTR,A
012E 80C3              SJMP    ?C0081
0130         ?C0082:
                                           ; SOURCE LINE # 847
0130 110000      R     ACALL   L?1348
0133 A3                INC     DPTR
0134 E0                MOVX    A,@DPTR
0135 FD                MOV     R5,A
0136 7B00        E     MOV     R3,#MBYTE SPI_Buffer
0138 7A00        E     MOV     R2,#HIGH SPI_Buffer
013A 7900        E     MOV     R1,#LOW SPI_Buffer
013C A3                INC     DPTR
013D E0                MOVX    A,@DPTR
013E 90000000    E     MOV     DPTR,#?_WriteI2CS?BYTE+05H
0142 F0                MOVX    @DPTR,A
0143 010000      E     AJMP    _WriteI2CS
                                           ; SOURCE LINE # 848
0146         ?C0079:
                                           ; SOURCE LINE # 849
0146 7400        R     MOV     A,#MBYTE ?SC_748
0148 110000      R     ACALL   L?1045
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 110 

014B 7400        R     MOV     A,#HIGH ?SC_748
014D F0                MOVX    @DPTR,A
014E A3                INC     DPTR
014F 7400        R     MOV     A,#LOW ?SC_748
0151 110000      R     ACALL   L?1002
0154 110000      E     ACALL   _stricmp
0157 EF                MOV     A,R7
0158 4E                ORL     A,R6
0159 702F              JNZ     ?C0085
                                           ; SOURCE LINE # 851
015B 110000      R     ACALL   L?1086
015E 9403              SUBB    A,#03H
0160 5008              JNC     ?C0086
                                           ; SOURCE LINE # 852
0162 7B00        R     MOV     R3,#MBYTE ?SC_750
0164 7A00        R     MOV     R2,#HIGH ?SC_750
0166 7900        R     MOV     R1,#LOW ?SC_750
0168         ?C0844:
0168 8045              SJMP    ?C0846
                                           ; SOURCE LINE # 854
016A         ?C0086:
                                           ; SOURCE LINE # 855
016A 90000000    R     MOV     DPTR,#argv+06H
016E 110000      R     ACALL   L?1004
0171 110000      R     ACALL   L?1366
                                           ; SOURCE LINE # 856
0174 110000      E     ACALL   _ReadI2C_Only
0177 90000000    R     MOV     DPTR,#value
017B EF                MOV     A,R7
017C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 857
017D 7B00        R     MOV     R3,#MBYTE ?SC_764
017F 7A00        R     MOV     R2,#HIGH ?SC_764
0181 7900        R     MOV     R1,#LOW ?SC_764
0183 90000000    E     MOV     DPTR,#?_Printf?BYTE+03H
0187 F0                MOVX    @DPTR,A
0188         ?C0845:
                                           ; SOURCE LINE # 858
0188 8025              SJMP    ?C0846
018A         ?C0085:
                                           ; SOURCE LINE # 859
018A 7400        R     MOV     A,#MBYTE ?SC_772
018C 110000      R     ACALL   L?1045
018F 7400        R     MOV     A,#HIGH ?SC_772
0191 F0                MOVX    @DPTR,A
0192 A3                INC     DPTR
0193 7400        R     MOV     A,#LOW ?SC_772
0195 110000      R     ACALL   L?1002
0198 110000      E     ACALL   _stricmp
019B EF                MOV     A,R7
019C 4E                ORL     A,R6
019D 6003              JZ      $ + 5H
019F 010000      R     AJMP    ?C0088
                                           ; SOURCE LINE # 863
01A2 110000      R     ACALL   L?1086
01A5 9404              SUBB    A,#04H
01A7 5009              JNC     ?C0089
                                           ; SOURCE LINE # 864
01A9 7B00        R     MOV     R3,#MBYTE ?SC_775
01AB 7A00        R     MOV     R2,#HIGH ?SC_775
01AD 7900        R     MOV     R1,#LOW ?SC_775
01AF         ?C0846:
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 111 

01AF 010000      E     AJMP    _Printf
                                           ; SOURCE LINE # 866
01B2         ?C0089:
                                           ; SOURCE LINE # 867
01B2 90000000    R     MOV     DPTR,#argv+06H
01B6 110000      R     ACALL   L?1004
01B9 110000      E     ACALL   _a2h
                                           ; SOURCE LINE # 868
01BC 110000      R     ACALL   L?1231
01BF 110000      R     ACALL   L?1004
01C2 110000      E     ACALL   _a2h
01C5 7E00              MOV     R6,#00H
01C7 90000000    R     MOV     DPTR,#n
01CB EE                MOV     A,R6
01CC F0                MOVX    @DPTR,A
01CD A3                INC     DPTR
01CE EF                MOV     A,R7
01CF F0                MOVX    @DPTR,A
01D0 FD                MOV     R5,A
                                           ; SOURCE LINE # 871
01D1 110000      R     ACALL   L?1348
01D4 7B00        E     MOV     R3,#MBYTE SPI_Buffer
01D6 7A00        E     MOV     R2,#HIGH SPI_Buffer
01D8 7900        E     MOV     R1,#LOW SPI_Buffer
01DA 90000000    E     MOV     DPTR,#?_ReadI2CS_Only?BYTE+04H
01DE ED                MOV     A,R5
01DF F0                MOVX    @DPTR,A
01E0 110000      E     ACALL   _ReadI2CS_Only
                                           ; SOURCE LINE # 872
01E3 E4                CLR     A
01E4 90000000    R     MOV     DPTR,#i
01E8 F0                MOVX    @DPTR,A
01E9 A3                INC     DPTR
01EA F0                MOVX    @DPTR,A
01EB         ?C0090:
01EB 90000000    R     MOV     DPTR,#n
01EF 110000      R     ACALL   L?1350
01F2 90000000    R     MOV     DPTR,#i+01H
01F6 E0                MOVX    A,@DPTR
01F7 9F                SUBB    A,R7
01F8 90000000    R     MOV     DPTR,#i
01FC E0                MOVX    A,@DPTR
01FD 9E                SUBB    A,R6
01FE 5067              JNC     ?C0071
                                           ; SOURCE LINE # 873
0200 7400        E     MOV     A,#MBYTE SPI_Buffer
0202 110000      R     ACALL   L?1299
0205 7400        E     MOV     A,#HIGH SPI_Buffer
0207 F0                MOVX    @DPTR,A
0208 A3                INC     DPTR
0209 7400        E     MOV     A,#LOW SPI_Buffer
020B F0                MOVX    @DPTR,A
020C 7B00        R     MOV     R3,#MBYTE ?SC_801
020E 7A00        R     MOV     R2,#HIGH ?SC_801
0210 7900        R     MOV     R1,#LOW ?SC_801
0212 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 874
0215 90000000    R     MOV     DPTR,#i+01H
0219 E0                MOVX    A,@DPTR
021A 04                INC     A
021B F0                MOVX    @DPTR,A
021C 70CD              JNZ     ?C0090
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 112 

021E 90000000    R     MOV     DPTR,#i
0222 E0                MOVX    A,@DPTR
0223 04                INC     A
0224 F0                MOVX    @DPTR,A
0225         ?C0812:
0225 80C4              SJMP    ?C0090
                                           ; SOURCE LINE # 875
0227         ?C0088:
                                           ; SOURCE LINE # 876
0227 7400        R     MOV     A,#MBYTE ?SC_808
0229 110000      R     ACALL   L?1046
022C 7400        R     MOV     A,#HIGH ?SC_808
022E F0                MOVX    @DPTR,A
022F A3                INC     DPTR
0230 7400        R     MOV     A,#LOW ?SC_808
0232 110000      R     ACALL   L?1002
0235 110000      E     ACALL   _stricmp
0238 EF                MOV     A,R7
0239 4E                ORL     A,R6
023A 702B              JNZ     ?C0071
                                           ; SOURCE LINE # 878
023C 90000000    R     MOV     DPTR,#id
0240 7402              MOV     A,#02H
0242 F0                MOVX    @DPTR,A
0243         ?C0095:
0243 110000      R     ACALL   L?1349
0246 601F              JZ      ?C0071
                                           ; SOURCE LINE # 879
0248 110000      R     ACALL   L?1290
                                           ; SOURCE LINE # 880
024B 7010              JNZ     ?C0097
                                           ; SOURCE LINE # 881
024D 7B00        R     MOV     R3,#MBYTE ?SC_815
024F 7A00        R     MOV     R2,#HIGH ?SC_815
0251 7900        R     MOV     R1,#LOW ?SC_815
0253 90000000    R     MOV     DPTR,#id
0257 110000      R     ACALL   L?1092
025A 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 882
025D         ?C0097:
025D 90000000    R     MOV     DPTR,#id
0261 E0                MOVX    A,@DPTR
0262 2402              ADD     A,#02H
0264 F0                MOVX    @DPTR,A
0265 80DC              SJMP    ?C0095
                                           ; SOURCE LINE # 883
                                           ; SOURCE LINE # 884
0267         ?C0071:
0267 22                RET     
0268         L?1290:
0268 110000      E     ACALL   _CheckI2C
026B 90000000    R     MOV     DPTR,#temp
026F EF                MOV     A,R7
0270 F0                MOVX    @DPTR,A
0271 22                RET     
0272         L?1366:
0272 110000      E     ACALL   _a2h
0275 90000000    R     MOV     DPTR,#id
0279 EF                MOV     A,R7
027A F0                MOVX    @DPTR,A
027B 22                RET     
             ; FUNCTION monitor_i2c (END)
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 113 


             ; FUNCTION monitor_i2cspi (BEGIN)
                                           ; SOURCE LINE # 958
                                           ; SOURCE LINE # 959
                                           ; SOURCE LINE # 962
0000 90000000    R     MOV     DPTR,#argc
0004 E0                MOVX    A,@DPTR
0005 6401              XRL     A,#01H
0007 707B              JNZ     ?C0099
                                           ; SOURCE LINE # 963
0009 7B00        R     MOV     R3,#MBYTE ?SC_838
000B 7A00        R     MOV     R2,#HIGH ?SC_838
000D 7900        R     MOV     R1,#LOW ?SC_838
000F 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 964
0012 110000      R     ACALL   L?1257
0015 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 965
0018 7B00        R     MOV     R3,#MBYTE ?SC_907
001A 7A00        R     MOV     R2,#HIGH ?SC_907
001C 7900        R     MOV     R1,#LOW ?SC_907
001E 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 966
0021 7B00        R     MOV     R3,#MBYTE ?SC_933
0023 7A00        R     MOV     R2,#HIGH ?SC_933
0025 7900        R     MOV     R1,#LOW ?SC_933
0027 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 967
002A 7B00        R     MOV     R3,#MBYTE ?SC_956
002C 7A00        R     MOV     R2,#HIGH ?SC_956
002E 7900        R     MOV     R1,#LOW ?SC_956
0030 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 968
0033 7B00        R     MOV     R3,#MBYTE ?SC_985
0035 7A00        R     MOV     R2,#HIGH ?SC_985
0037 7900        R     MOV     R1,#LOW ?SC_985
0039 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 969
003C 7B00        R     MOV     R3,#MBYTE ?SC_1015
003E 7A00        R     MOV     R2,#HIGH ?SC_1015
0040 7900        R     MOV     R1,#LOW ?SC_1015
0042 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 970
0045 7B00        R     MOV     R3,#MBYTE ?SC_1045
0047 7A00        R     MOV     R2,#HIGH ?SC_1045
0049 7900        R     MOV     R1,#LOW ?SC_1045
004B 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 971
004E 7B00        R     MOV     R3,#MBYTE ?SC_1075
0050 7A00        R     MOV     R2,#HIGH ?SC_1075
0052 7900        R     MOV     R1,#LOW ?SC_1075
0054 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 972
0057 7B00        R     MOV     R3,#MBYTE ?SC_1102
0059 7A00        R     MOV     R2,#HIGH ?SC_1102
005B 7900        R     MOV     R1,#LOW ?SC_1102
005D 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 973
0060 7B00        R     MOV     R3,#MBYTE ?SC_1129
0062 7A00        R     MOV     R2,#HIGH ?SC_1129
0064 7900        R     MOV     R1,#LOW ?SC_1129
0066 110000      E     ACALL   _Puts
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 114 

                                           ; SOURCE LINE # 974
0069 7B00        R     MOV     R3,#MBYTE ?SC_1159
006B 7A00        R     MOV     R2,#HIGH ?SC_1159
006D 7900        R     MOV     R1,#LOW ?SC_1159
006F 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 975
0072 7B00        R     MOV     R3,#MBYTE ?SC_1179
0074 7A00        R     MOV     R2,#HIGH ?SC_1179
0076 7900        R     MOV     R1,#LOW ?SC_1179
0078 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 976
007B 7B00        R     MOV     R3,#MBYTE ?SC_1228
007D 7A00        R     MOV     R2,#HIGH ?SC_1228
007F 7900        R     MOV     R1,#LOW ?SC_1228
0081 010000      R     AJMP    ?C0888
                                           ; SOURCE LINE # 979
0084         ?C0099:
                                           ; SOURCE LINE # 980
0084 7400        R     MOV     A,#MBYTE ?SC_1270
0086 110000      R     ACALL   L?1046
0089 7400        R     MOV     A,#HIGH ?SC_1270
008B F0                MOVX    @DPTR,A
008C A3                INC     DPTR
008D 7400        R     MOV     A,#LOW ?SC_1270
008F 110000      R     ACALL   L?1002
0092 110000      E     ACALL   _stricmp
0095 EF                MOV     A,R7
0096 4E                ORL     A,R6
0097 6003              JZ      $ + 5H
0099 010000      R     AJMP    ?C0101
                                           ; SOURCE LINE # 981
009C 110000      R     ACALL   L?1183
009F 9402              SUBB    A,#02H
00A1 501D              JNC     ?C0102
                                           ; SOURCE LINE # 982
00A3 110000      R     ACALL   L?1215
                                           ; SOURCE LINE # 983
00A6 7FC4              MOV     R7,#0C4H
00A8 110000      R     ACALL   L?1241
                                           ; SOURCE LINE # 984
00AB 20E709            JB      ACC.7,?C0103
00AE 7B00        R     MOV     R3,#MBYTE ?SC_1274
00B0 7A00        R     MOV     R2,#HIGH ?SC_1274
00B2 7900        R     MOV     R1,#LOW ?SC_1274
00B4         ?C0847:
00B4 010000      R     AJMP    ?C0888
00B7         ?C0103:
                                           ; SOURCE LINE # 985
00B7 7B00        R     MOV     R3,#MBYTE ?SC_1283
00B9 7A00        R     MOV     R2,#HIGH ?SC_1283
00BB 7900        R     MOV     R1,#LOW ?SC_1283
00BD         ?C0848:
                                           ; SOURCE LINE # 986
00BD 010000      R     AJMP    ?C0888
00C0         ?C0102:
                                           ; SOURCE LINE # 987
00C0 7400        R     MOV     A,#MBYTE ?SC_1292
00C2 110000      R     ACALL   L?1047
00C5 7400        R     MOV     A,#HIGH ?SC_1292
00C7 F0                MOVX    @DPTR,A
00C8 7400        R     MOV     A,#LOW ?SC_1292
00CA 110000      R     ACALL   L?1149
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 115 

00CD 110000      R     ACALL   L?1004
00D0 110000      E     ACALL   _stricmp
00D3 EF                MOV     A,R7
00D4 4E                ORL     A,R6
00D5 7035              JNZ     ?C0106
                                           ; SOURCE LINE # 990
00D7 110000      R     ACALL   L?1215
                                           ; SOURCE LINE # 991
                                           ; SOURCE LINE # 992
00DA 110000      R     ACALL   L?1292
                                           ; SOURCE LINE # 993
00DD E4                CLR     A
00DE FD                MOV     R5,A
                                           ; SOURCE LINE # 996
00DF 110000      R     ACALL   L?1298
00E2         ?C0107:
                                           ; SOURCE LINE # 997
00E2 110000      R     ACALL   L?1246
                                           ; SOURCE LINE # 998
00E5 20E70E            JB      ACC.7,?C0109
                                           ; SOURCE LINE # 999
00E8 7B00        R     MOV     R3,#MBYTE ?SC_1297
00EA 7A00        R     MOV     R2,#HIGH ?SC_1297
00EC 7900        R     MOV     R1,#LOW ?SC_1297
00EE A3                INC     DPTR
00EF 110000      R     ACALL   L?1060
00F2 F0                MOVX    @DPTR,A
00F3 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 1000
00F6         ?C0109:
00F6 90000000    R     MOV     DPTR,#i+01H
00FA E0                MOVX    A,@DPTR
00FB 04                INC     A
00FC F0                MOVX    @DPTR,A
00FD 7007              JNZ     ?C0813
00FF 90000000    R     MOV     DPTR,#i
0103 E0                MOVX    A,@DPTR
0104 04                INC     A
0105 F0                MOVX    @DPTR,A
0106         ?C0813:
0106 110000      R     ACALL   L?1275
0109 40D7              JC      ?C0107
010B 22                RET     
                                           ; SOURCE LINE # 1001
010C         ?C0106:
                                           ; SOURCE LINE # 1002
010C 7400        R     MOV     A,#MBYTE ?SC_1311
010E 110000      R     ACALL   L?1047
0111 7400        R     MOV     A,#HIGH ?SC_1311
0113 F0                MOVX    @DPTR,A
0114 7400        R     MOV     A,#LOW ?SC_1311
0116 110000      R     ACALL   L?1173
0119 110000      R     ACALL   L?1004
011C 110000      E     ACALL   _stricmp
011F EF                MOV     A,R7
0120 4E                ORL     A,R6
0121 7035              JNZ     ?C0112
                                           ; SOURCE LINE # 1005
0123 110000      R     ACALL   L?1255
                                           ; SOURCE LINE # 1006
                                           ; SOURCE LINE # 1007
0126 110000      R     ACALL   L?1292
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 116 

                                           ; SOURCE LINE # 1008
0129 7D01              MOV     R5,#01H
                                           ; SOURCE LINE # 1009
012B 110000      R     ACALL   L?1298
012E         ?C0113:
                                           ; SOURCE LINE # 1010
012E 110000      R     ACALL   L?1246
                                           ; SOURCE LINE # 1011
0131 30E70E            JNB     ACC.7,?C0115
                                           ; SOURCE LINE # 1012
0134 7B00        R     MOV     R3,#MBYTE ?SC_1297
0136 7A00        R     MOV     R2,#HIGH ?SC_1297
0138 7900        R     MOV     R1,#LOW ?SC_1297
013A A3                INC     DPTR
013B 110000      R     ACALL   L?1060
013E F0                MOVX    @DPTR,A
013F 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 1013
0142         ?C0115:
0142 90000000    R     MOV     DPTR,#i+01H
0146 E0                MOVX    A,@DPTR
0147 04                INC     A
0148 F0                MOVX    @DPTR,A
0149 7007              JNZ     ?C0814
014B 90000000    R     MOV     DPTR,#i
014F E0                MOVX    A,@DPTR
0150 04                INC     A
0151 F0                MOVX    @DPTR,A
0152         ?C0814:
0152 110000      R     ACALL   L?1275
0155 40D7              JC      ?C0113
0157         ?C0850:
0157 22                RET     
                                           ; SOURCE LINE # 1014
0158         ?C0112:
                                           ; SOURCE LINE # 1015
                                           ; SOURCE LINE # 1016
0158 90000000    R     MOV     DPTR,#argv+06H
015C 110000      R     ACALL   L?1076
015F C9                XCH     A,R1
0160 110000      R     ACALL   L?1248
0163 7B00        R     MOV     R3,#MBYTE ?SC_1317
0165 7A00        R     MOV     R2,#HIGH ?SC_1317
0167 7900        R     MOV     R1,#LOW ?SC_1317
                                           ; SOURCE LINE # 1017
                                           ; SOURCE LINE # 1018
0169 010000      R     AJMP    ?C0868
016C         ?C0101:
                                           ; SOURCE LINE # 1019
016C 7400        R     MOV     A,#MBYTE ?SC_1340
016E 110000      R     ACALL   L?1048
0171 7400        R     MOV     A,#HIGH ?SC_1340
0173 F0                MOVX    @DPTR,A
0174 A3                INC     DPTR
0175 7400        R     MOV     A,#LOW ?SC_1340
0177 110000      R     ACALL   L?1002
017A 110000      E     ACALL   _stricmp
017D EF                MOV     A,R7
017E 4E                ORL     A,R6
017F 6003              JZ      $ + 5H
0181 010000      R     AJMP    ?C0119
                                           ; SOURCE LINE # 1020
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 117 

0184 110000      R     ACALL   L?1183
0187 9402              SUBB    A,#02H
0189 5018              JNC     ?C0120
                                           ; SOURCE LINE # 1021
                                           ; SOURCE LINE # 1022
018B 110000      R     ACALL   L?1043
                                           ; SOURCE LINE # 1023
018E 20E109            JB      ACC.1,?C0121
0191 7B00        R     MOV     R3,#MBYTE ?SC_1345
0193 7A00        R     MOV     R2,#HIGH ?SC_1345
0195 7900        R     MOV     R1,#LOW ?SC_1345
0197         ?C0849:
0197 010000      R     AJMP    ?C0888
019A         ?C0121:
                                           ; SOURCE LINE # 1024
019A 7B00        R     MOV     R3,#MBYTE ?SC_1356
019C 7A00        R     MOV     R2,#HIGH ?SC_1356
019E 7900        R     MOV     R1,#LOW ?SC_1356
01A0         ?C0852:
                                           ; SOURCE LINE # 1025
01A0 010000      R     AJMP    ?C0888
01A3         ?C0120:
                                           ; SOURCE LINE # 1026
01A3 110000      R     ACALL   L?1014
01A6 110000      R     ACALL   L?1200
01A9 110000      R     ACALL   L?1004
01AC 110000      E     ACALL   _stricmp
01AF EF                MOV     A,R7
01B0 4E                ORL     A,R6
01B1 7008              JNZ     ?C0124
                                           ; SOURCE LINE # 1027
                                           ; SOURCE LINE # 1028
01B3 110000      R     ACALL   L?1043
                                           ; SOURCE LINE # 1029
01B6 4401              ORL     A,#01H
                                           ; SOURCE LINE # 1030
01B8 010000      R     AJMP    ?C0858
01BB         ?C0124:
                                           ; SOURCE LINE # 1031
01BB 110000      R     ACALL   L?1024
01BE 7400        R     MOV     A,#HIGH ?SC_315
01C0 F0                MOVX    @DPTR,A
01C1 7400        R     MOV     A,#LOW ?SC_315
01C3 110000      R     ACALL   L?1201
01C6 110000      R     ACALL   L?1004
01C9 110000      E     ACALL   _stricmp
01CC EF                MOV     A,R7
01CD 4E                ORL     A,R6
01CE 7008              JNZ     ?C0126
                                           ; SOURCE LINE # 1032
                                           ; SOURCE LINE # 1033
01D0 110000      R     ACALL   L?1050
                                           ; SOURCE LINE # 1034
01D3 54FE              ANL     A,#0FEH
01D5         ?C0854:
                                           ; SOURCE LINE # 1035
01D5 010000      R     AJMP    ?C0858
01D8         ?C0126:
                                           ; SOURCE LINE # 1036
01D8 7400        R     MOV     A,#MBYTE ?SC_1369
01DA 110000      R     ACALL   L?1048
01DD 7400        R     MOV     A,#HIGH ?SC_1369
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 118 

01DF F0                MOVX    @DPTR,A
01E0 7400        R     MOV     A,#LOW ?SC_1369
01E2 110000      R     ACALL   L?1276
01E5 110000      R     ACALL   L?1004
01E8 110000      E     ACALL   _stricmp
01EB EF                MOV     A,R7
01EC 4E                ORL     A,R6
01ED 6003              JZ      $ + 5H
01EF 010000      R     AJMP    ?C0128
                                           ; SOURCE LINE # 1038
01F2 110000      R     ACALL   L?1184
01F5 9404              SUBB    A,#04H
01F7 5009              JNC     ?C0129
                                           ; SOURCE LINE # 1039
01F9 7B00        R     MOV     R3,#MBYTE ?SC_1371
01FB 7A00        R     MOV     R2,#HIGH ?SC_1371
01FD 7900        R     MOV     R1,#LOW ?SC_1371
01FF         ?C0853:
01FF 010000      R     AJMP    ?C0888
                                           ; SOURCE LINE # 1041
0202         ?C0129:
                                           ; SOURCE LINE # 1042
                                           ; SOURCE LINE # 1043
0202 110000      R     ACALL   L?1050
                                           ; SOURCE LINE # 1044
0205 20E12C            JB      ACC.1,?C0130
                                           ; SOURCE LINE # 1045
                                           ; SOURCE LINE # 1046
0208 110000      R     ACALL   L?1195
020B         ?C0131:
                                           ; SOURCE LINE # 1047
020B 110000      R     ACALL   L?1189
                                           ; SOURCE LINE # 1048
020E 20E10D            JB      ACC.1,?C0132
                                           ; SOURCE LINE # 1049
0211         ?C0134:
                                           ; SOURCE LINE # 1050
                                           ; SOURCE LINE # 1051
0211 110000      R     ACALL   L?1217
0214 7003              JNZ     ?C0815
0216 110000      R     ACALL   L?1250
0219         ?C0815:
0219 110000      R     ACALL   L?1277
021C 40ED              JC      ?C0131
021E         ?C0132:
                                           ; SOURCE LINE # 1052
021E 90000000    R     MOV     DPTR,#i
0222 E0                MOVX    A,@DPTR
0223 7004              JNZ     ?C0816
0225 A3                INC     DPTR
0226 E0                MOVX    A,@DPTR
0227 6464              XRL     A,#064H
0229         ?C0816:
0229 7009              JNZ     ?C0130
                                           ; SOURCE LINE # 1053
022B 7B00        R     MOV     R3,#MBYTE ?SC_1418
022D 7A00        R     MOV     R2,#HIGH ?SC_1418
022F 7900        R     MOV     R1,#LOW ?SC_1418
0231         ?C0856:
0231 010000      R     AJMP    ?C0888
                                           ; SOURCE LINE # 1055
                                           ; SOURCE LINE # 1056
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 119 

0234         ?C0130:
                                           ; SOURCE LINE # 1058
0234 90000000    R     MOV     DPTR,#argv+09H
0238 110000      R     ACALL   L?1004
                                           ; SOURCE LINE # 1059
                                           ; SOURCE LINE # 1060
                                           ; SOURCE LINE # 1061
023B 110000      R     ACALL   L?1137
023E 110000      R     ACALL   L?1329
                                           ; SOURCE LINE # 1062
0241 7B00        R     MOV     R3,#MBYTE ?SC_1436
0243 7A00        R     MOV     R2,#HIGH ?SC_1436
0245 7900        R     MOV     R1,#LOW ?SC_1436
0247 90000000    R     MOV     DPTR,#wTemp
024B 110000      R     ACALL   L?1060
024E F0                MOVX    @DPTR,A
024F 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 1063
0252 90000000    R     MOV     DPTR,#argv+0CH
0256 110000      R     ACALL   L?1004
                                           ; SOURCE LINE # 1064
0259 110000      R     ACALL   L?1261
025C EE                MOV     A,R6
025D 110000      R     ACALL   L?1061
0260 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1065
0261 110000      R     ACALL   L?1256
0264         ?C0136:
0264 110000      R     ACALL   L?1252
0267 5035              JNC     ?C0137
                                           ; SOURCE LINE # 1066
0269 ED                MOV     A,R5
026A 540F              ANL     A,#0FH
026C 700F              JNZ     ?C0139
026E 7B00        R     MOV     R3,#MBYTE ?SC_1467
0270 7A00        R     MOV     R2,#HIGH ?SC_1467
0272 7900        R     MOV     R1,#LOW ?SC_1467
0274 EC                MOV     A,R4
0275 110000      R     ACALL   L?1299
0278 ED                MOV     A,R5
0279 F0                MOVX    @DPTR,A
027A 110000      E     ACALL   _Printf
027D         ?C0139:
                                           ; SOURCE LINE # 1067
027D 7FDD              MOV     R7,#0DDH
027F 110000      R     ACALL   L?1241
                                           ; SOURCE LINE # 1068
0282 7B00        R     MOV     R3,#MBYTE ?SC_1475
0284 7A00        R     MOV     R2,#HIGH ?SC_1475
0286 7900        R     MOV     R1,#LOW ?SC_1475
0288 90000000    E     MOV     DPTR,#?_Printf?BYTE+03H
028C F0                MOVX    @DPTR,A
028D 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 1069
0290 90000000    R     MOV     DPTR,#i+01H
0294 E0                MOVX    A,@DPTR
0295 04                INC     A
0296 F0                MOVX    @DPTR,A
0297 70CB              JNZ     ?C0136
0299 110000      R     ACALL   L?1250
029C         ?C0817:
029C 80C6              SJMP    ?C0136
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 120 

029E         ?C0137:
                                           ; SOURCE LINE # 1071
                                           ; SOURCE LINE # 1072
029E 110000      R     ACALL   L?1069
                                           ; SOURCE LINE # 1073
02A1 54FE              ANL     A,#0FEH
02A3         ?C0855:
                                           ; SOURCE LINE # 1074
02A3 010000      R     AJMP    ?C0858
02A6         ?C0128:
                                           ; SOURCE LINE # 1075
02A6 7400        R     MOV     A,#MBYTE ?SC_1482
02A8 110000      R     ACALL   L?1051
02AB 7400        R     MOV     A,#HIGH ?SC_1482
02AD F0                MOVX    @DPTR,A
02AE 7400        R     MOV     A,#LOW ?SC_1482
02B0 110000      R     ACALL   L?1276
02B3 110000      R     ACALL   L?1004
02B6 110000      E     ACALL   _stricmp
02B9 EF                MOV     A,R7
02BA 4E                ORL     A,R6
02BB 6031              JZ      ?C0142
02BD 7400        R     MOV     A,#MBYTE ?SC_1485
02BF 110000      R     ACALL   L?1051
02C2 7400        R     MOV     A,#HIGH ?SC_1485
02C4 F0                MOVX    @DPTR,A
02C5 7400        R     MOV     A,#LOW ?SC_1485
02C7 110000      R     ACALL   L?1352
02CA 110000      R     ACALL   L?1004
02CD 110000      E     ACALL   _stricmp
02D0 EF                MOV     A,R7
02D1 4E                ORL     A,R6
02D2 601A              JZ      ?C0142
02D4 7400        R     MOV     A,#MBYTE ?SC_1488
02D6 110000      R     ACALL   L?1052
02D9 7400        R     MOV     A,#HIGH ?SC_1488
02DB F0                MOVX    @DPTR,A
02DC 7400        R     MOV     A,#LOW ?SC_1488
02DE 110000      R     ACALL   L?1352
02E1 110000      R     ACALL   L?1004
02E4 110000      E     ACALL   _stricmp
02E7 EF                MOV     A,R7
02E8 4E                ORL     A,R6
02E9 6003              JZ      $ + 5H
02EB 010000      R     AJMP    ?C0100
02EE         ?C0142:
                                           ; SOURCE LINE # 1077
                                           ; SOURCE LINE # 1080
02EE 110000      R     ACALL   L?1184
02F1 9404              SUBB    A,#04H
02F3 5009              JNC     ?C0143
                                           ; SOURCE LINE # 1081
02F5 7B00        R     MOV     R3,#MBYTE ?SC_1491
02F7 7A00        R     MOV     R2,#HIGH ?SC_1491
02F9 7900        R     MOV     R1,#LOW ?SC_1491
02FB         ?C0857:
02FB 010000      R     AJMP    ?C0888
                                           ; SOURCE LINE # 1083
02FE         ?C0143:
                                           ; SOURCE LINE # 1084
02FE 90000000    R     MOV     DPTR,#argv+06H
0302 110000      R     ACALL   L?1004
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 121 

0305 110000      R     ACALL   L?1230
0308 EF                MOV     A,R7
0309 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1086
                                           ; SOURCE LINE # 1087
030A 110000      R     ACALL   L?1069
                                           ; SOURCE LINE # 1088
030D 20E12C            JB      ACC.1,?C0144
                                           ; SOURCE LINE # 1089
                                           ; SOURCE LINE # 1090
0310 110000      R     ACALL   L?1195
0313         ?C0145:
                                           ; SOURCE LINE # 1091
0313 110000      R     ACALL   L?1189
                                           ; SOURCE LINE # 1092
0316 20E10D            JB      ACC.1,?C0146
                                           ; SOURCE LINE # 1093
0319         ?C0148:
                                           ; SOURCE LINE # 1094
                                           ; SOURCE LINE # 1095
0319 110000      R     ACALL   L?1217
031C 7003              JNZ     ?C0818
031E 110000      R     ACALL   L?1251
0321         ?C0818:
0321 110000      R     ACALL   L?1277
0324 40ED              JC      ?C0145
0326         ?C0146:
                                           ; SOURCE LINE # 1096
0326 90000000    R     MOV     DPTR,#i
032A E0                MOVX    A,@DPTR
032B 7004              JNZ     ?C0819
032D A3                INC     DPTR
032E E0                MOVX    A,@DPTR
032F 6464              XRL     A,#064H
0331         ?C0819:
0331 7009              JNZ     ?C0144
                                           ; SOURCE LINE # 1097
0333 7B00        R     MOV     R3,#MBYTE ?SC_1418
0335 7A00        R     MOV     R2,#HIGH ?SC_1418
0337 7900        R     MOV     R1,#LOW ?SC_1418
0339         ?C0859:
0339 010000      R     AJMP    ?C0888
                                           ; SOURCE LINE # 1099
                                           ; SOURCE LINE # 1100
033C         ?C0144:
                                           ; SOURCE LINE # 1102
033C 90000000    R     MOV     DPTR,#argv+09H
0340 110000      R     ACALL   L?1004
                                           ; SOURCE LINE # 1103
                                           ; SOURCE LINE # 1104
                                           ; SOURCE LINE # 1105
0343 110000      R     ACALL   L?1137
0346 110000      R     ACALL   L?1329
                                           ; SOURCE LINE # 1106
0349 7B00        R     MOV     R3,#MBYTE ?SC_1544
034B 7A00        R     MOV     R2,#HIGH ?SC_1544
034D 7900        R     MOV     R1,#LOW ?SC_1544
034F 90000000    R     MOV     DPTR,#wTemp
0353 110000      R     ACALL   L?1060
0356 F0                MOVX    @DPTR,A
0357 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 1107
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 122 

035A 90000000    R     MOV     DPTR,#argv+0CH
035E 110000      R     ACALL   L?1004
                                           ; SOURCE LINE # 1108
0361 110000      R     ACALL   L?1261
0364 90000000    E     MOV     DPTR,#?_Printf?BYTE+03H
0368 EE                MOV     A,R6
0369 F0                MOVX    @DPTR,A
036A A3                INC     DPTR
036B EF                MOV     A,R7
036C F0                MOVX    @DPTR,A
036D 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 1109
0370 90000000    R     MOV     DPTR,#pattern
0374 E0                MOVX    A,@DPTR
0375 640F              XRL     A,#0FH
0377 7018              JNZ     ?C0150
                                           ; SOURCE LINE # 1110
0379 7B00        R     MOV     R3,#MBYTE ?SC_1561
037B 7A00        R     MOV     R2,#HIGH ?SC_1561
037D 7900        R     MOV     R1,#LOW ?SC_1561
                                           ; SOURCE LINE # 1111
037F 110000      R     ACALL   L?1256
0382         ?C0151:
0382 110000      R     ACALL   L?1252
0385 5047              JNC     ?C0154
                                           ; SOURCE LINE # 1112
                                           ; SOURCE LINE # 1113
0387 110000      R     ACALL   L?1273
038A 70F6              JNZ     ?C0151
038C 110000      R     ACALL   L?1251
038F         ?C0820:
038F 80F1              SJMP    ?C0151
                                           ; SOURCE LINE # 1114
0391         ?C0150:
                                           ; SOURCE LINE # 1115
                                           ; SOURCE LINE # 1116
0391 7B00        R     MOV     R3,#MBYTE ?SC_1579
0393 7A00        R     MOV     R2,#HIGH ?SC_1579
0395 7900        R     MOV     R1,#LOW ?SC_1579
0397 90000000    R     MOV     DPTR,#pattern
039B 110000      R     ACALL   L?1092
039E 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 1117
03A1 E4                CLR     A
03A2 90000000    R     MOV     DPTR,#i
03A6 F0                MOVX    @DPTR,A
03A7 A3                INC     DPTR
03A8 F0                MOVX    @DPTR,A
03A9         ?C0155:
03A9 90000000    R     MOV     DPTR,#wTemp
03AD 110000      R     ACALL   L?1350
03B0 90000000    R     MOV     DPTR,#i+01H
03B4 E0                MOVX    A,@DPTR
03B5 9F                SUBB    A,R7
03B6 90000000    R     MOV     DPTR,#i
03BA E0                MOVX    A,@DPTR
03BB 9E                SUBB    A,R6
03BC 5010              JNC     ?C0154
                                           ; SOURCE LINE # 1118
03BE 90000000    R     MOV     DPTR,#pattern
03C2 E0                MOVX    A,@DPTR
03C3 FD                MOV     R5,A
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 123 

                                           ; SOURCE LINE # 1119
03C4 110000      R     ACALL   L?1273
03C7 70E0              JNZ     ?C0155
03C9 110000      R     ACALL   L?1251
03CC         ?C0821:
03CC 80DB              SJMP    ?C0155
                                           ; SOURCE LINE # 1120
03CE         ?C0154:
                                           ; SOURCE LINE # 1122
                                           ; SOURCE LINE # 1123
03CE 110000      R     ACALL   L?1079
                                           ; SOURCE LINE # 1124
03D1 54FE              ANL     A,#0FEH
03D3         ?C0858:
03D3 FD                MOV     R5,A
03D4 7FC2              MOV     R7,#0C2H
03D6 010000      E     AJMP    _WriteI2C_8A
                                           ; SOURCE LINE # 1125
                                           ; SOURCE LINE # 1126
03D9         ?C0119:
                                           ; SOURCE LINE # 1127
03D9 7400        R     MOV     A,#MBYTE ?SC_1594
03DB 110000      R     ACALL   L?1052
03DE 7400        R     MOV     A,#HIGH ?SC_1594
03E0 F0                MOVX    @DPTR,A
03E1 A3                INC     DPTR
03E2 7400        R     MOV     A,#LOW ?SC_1594
03E4 110000      R     ACALL   L?1002
03E7 110000      E     ACALL   _stricmp
03EA EF                MOV     A,R7
03EB 4E                ORL     A,R6
03EC 6003              JZ      $ + 5H
03EE 010000      R     AJMP    ?C0159
                                           ; SOURCE LINE # 1133
03F1 110000      R     ACALL   L?1184
03F4 9403              SUBB    A,#03H
03F6 5009              JNC     ?C0160
                                           ; SOURCE LINE # 1134
03F8 7B00        R     MOV     R3,#MBYTE ?SC_1597
03FA 7A00        R     MOV     R2,#HIGH ?SC_1597
03FC 7900        R     MOV     R1,#LOW ?SC_1597
03FE         ?C0860:
03FE 010000      R     AJMP    ?C0888
                                           ; SOURCE LINE # 1136
0401         ?C0160:
                                           ; SOURCE LINE # 1138
                                           ; SOURCE LINE # 1139
0401 110000      R     ACALL   L?1079
                                           ; SOURCE LINE # 1140
0404 30E103            JNB     ACC.1,?C0161
                                           ; SOURCE LINE # 1141
0407 110000      R     ACALL   L?1242
040A         ?C0161:
                                           ; SOURCE LINE # 1143
040A 90000000    R     MOV     DPTR,#argv+06H
040E 110000      R     ACALL   L?1004
                                           ; SOURCE LINE # 1144
0411 110000      R     ACALL   L?1169
0414 110000      R     ACALL   L?1004
0417 110000      R     ACALL   L?1230
                                           ; SOURCE LINE # 1145
041A 110000      R     ACALL   L?1319
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 124 

041D 4005              JC      ?C0162
                                           ; SOURCE LINE # 1146
                                           ; SOURCE LINE # 1147
041F 110000      R     ACALL   L?1247
0422 E4                CLR     A
0423 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1148
0424         ?C0162:
                                           ; SOURCE LINE # 1150
0424 7B00        R     MOV     R3,#MBYTE ?SC_1691
0426 7A00        R     MOV     R2,#HIGH ?SC_1691
0428 7900        R     MOV     R1,#LOW ?SC_1691
042A 90000000    R     MOV     DPTR,#spiaddr
042E 110000      R     ACALL   L?1009
0431 110000      R     ACALL   L?1056
                                           ; SOURCE LINE # 1151
                                           ; SOURCE LINE # 1152
                                           ; SOURCE LINE # 1153
                                           ; SOURCE LINE # 1154
                                           ; SOURCE LINE # 1155
0434 110000      R     ACALL   L?1123
0437 E0                MOVX    A,@DPTR
0438 FE                MOV     R6,A
0439 A3                INC     DPTR
043A E0                MOVX    A,@DPTR
043B 7810              MOV     R0,#010H
043D         ?C0822:
043D CE                XCH     A,R6
043E C3                CLR     C
043F 13                RRC     A
0440 CE                XCH     A,R6
0441 13                RRC     A
0442 D8F9              DJNZ    R0,?C0822
                                           ; SOURCE LINE # 1156
                                           ; SOURCE LINE # 1157
0444 110000      R     ACALL   L?1163
                                           ; SOURCE LINE # 1158
                                           ; SOURCE LINE # 1159
0447 110000      R     ACALL   L?1220
044A 110000      R     ACALL   L?1009
044D 110000      R     ACALL   L?1164
                                           ; SOURCE LINE # 1160
0450 90000000    R     MOV     DPTR,#spiaddr
0454 110000      R     ACALL   L?1009
                                           ; SOURCE LINE # 1161
0457 110000      R     ACALL   L?1121
                                           ; SOURCE LINE # 1162
045A 7D05              MOV     R5,#05H
                                           ; SOURCE LINE # 1163
045C 110000      R     ACALL   L?1237
                                           ; SOURCE LINE # 1164
045F 6005              JZ      ?C0163
0461 110000      R     ACALL   L?1353
0464 8006              SJMP    ?C0862
0466         ?C0163:
                                           ; SOURCE LINE # 1165
0466 7B00        R     MOV     R3,#MBYTE ?SC_1713
0468 7A00        R     MOV     R2,#HIGH ?SC_1713
046A 7900        R     MOV     R1,#LOW ?SC_1713
046C         ?C0862:
046C 110000      E     ACALL   _Puts
046F         ?C0164:
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 125 

                                           ; SOURCE LINE # 1167
046F 7B00        R     MOV     R3,#MBYTE ?SC_1720
0471 7A00        R     MOV     R2,#HIGH ?SC_1720
0473 7900        R     MOV     R1,#LOW ?SC_1720
0475 90000000    R     MOV     DPTR,#length
0479 110000      R     ACALL   L?1060
047C F0                MOVX    @DPTR,A
047D         ?C0851:
                                           ; SOURCE LINE # 1168
047D 010000      R     AJMP    ?C0868
0480         ?C0159:
                                           ; SOURCE LINE # 1169
0480 7400        R     MOV     A,#MBYTE ?SC_1754
0482 110000      R     ACALL   L?1062
0485 7400        R     MOV     A,#HIGH ?SC_1754
0487 F0                MOVX    @DPTR,A
0488 A3                INC     DPTR
0489 7400        R     MOV     A,#LOW ?SC_1754
048B 110000      R     ACALL   L?1002
048E 110000      E     ACALL   _stricmp
0491 EF                MOV     A,R7
0492 4E                ORL     A,R6
0493 6003              JZ      $ + 5H
0495 010000      R     AJMP    ?C0166
                                           ; SOURCE LINE # 1180
0498 110000      R     ACALL   L?1184
049B 9403              SUBB    A,#03H
049D 5009              JNC     ?C0167
                                           ; SOURCE LINE # 1181
049F 7B00        R     MOV     R3,#MBYTE ?SC_1757
04A1 7A00        R     MOV     R2,#HIGH ?SC_1757
04A3 7900        R     MOV     R1,#LOW ?SC_1757
04A5         ?C0861:
04A5 010000      R     AJMP    ?C0888
                                           ; SOURCE LINE # 1183
04A8         ?C0167:
                                           ; SOURCE LINE # 1185
                                           ; SOURCE LINE # 1186
04A8 110000      R     ACALL   L?1105
                                           ; SOURCE LINE # 1187
04AB 30E103            JNB     ACC.1,?C0168
                                           ; SOURCE LINE # 1188
04AE 110000      R     ACALL   L?1242
04B1         ?C0168:
                                           ; SOURCE LINE # 1190
04B1 90000000    R     MOV     DPTR,#argv+06H
04B5 110000      R     ACALL   L?1004
                                           ; SOURCE LINE # 1191
04B8 110000      R     ACALL   L?1169
04BB 110000      R     ACALL   L?1004
04BE 110000      E     ACALL   _a2h
04C1 90000000    R     MOV     DPTR,#length
                                           ; SOURCE LINE # 1192
04C5 110000      R     ACALL   L?1319
04C8 4005              JC      ?C0169
                                           ; SOURCE LINE # 1193
                                           ; SOURCE LINE # 1194
04CA 110000      R     ACALL   L?1247
04CD E4                CLR     A
04CE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1195
04CF         ?C0169:
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 126 

                                           ; SOURCE LINE # 1197
04CF 110000      R     ACALL   L?1255
                                           ; SOURCE LINE # 1198
04D2 7D01              MOV     R5,#01H
04D4 7FF3              MOV     R7,#0F3H
04D6 110000      E     ACALL   _WriteI2C_8A
                                           ; SOURCE LINE # 1199
04D9 E4                CLR     A
04DA FD                MOV     R5,A
04DB 7FF5              MOV     R7,#0F5H
04DD 110000      E     ACALL   _WriteI2C_8A
                                           ; SOURCE LINE # 1200
04E0 E4                CLR     A
04E1 FD                MOV     R5,A
04E2 7FF8              MOV     R7,#0F8H
04E4 110000      E     ACALL   _WriteI2C_8A
                                           ; SOURCE LINE # 1201
04E7 E4                CLR     A
04E8 FD                MOV     R5,A
04E9 7FF9              MOV     R7,#0F9H
04EB 110000      E     ACALL   _WriteI2C_8A
                                           ; SOURCE LINE # 1202
04EE 7D06              MOV     R5,#06H
04F0 7FFA              MOV     R7,#0FAH
04F2 110000      E     ACALL   _WriteI2C_8A
                                           ; SOURCE LINE # 1203
04F5 7D01              MOV     R5,#01H
                                           ; SOURCE LINE # 1204
04F7 110000      R     ACALL   L?1237
                                           ; SOURCE LINE # 1205
04FA 6009              JZ      ?C0170
                                           ; SOURCE LINE # 1206
04FC 7B00        R     MOV     R3,#MBYTE ?SC_1800
04FE 7A00        R     MOV     R2,#HIGH ?SC_1800
0500 7900        R     MOV     R1,#LOW ?SC_1800
0502         ?C0864:
0502 010000      R     AJMP    ?C0888
                                           ; SOURCE LINE # 1208
0505         ?C0170:
                                           ; SOURCE LINE # 1210
0505 7B00        R     MOV     R3,#MBYTE ?SC_1811
0507 7A00        R     MOV     R2,#HIGH ?SC_1811
0509 7900        R     MOV     R1,#LOW ?SC_1811
050B 90000000    R     MOV     DPTR,#spiaddr
050F 110000      R     ACALL   L?1009
0512 110000      R     ACALL   L?1056
                                           ; SOURCE LINE # 1211
                                           ; SOURCE LINE # 1212
                                           ; SOURCE LINE # 1213
                                           ; SOURCE LINE # 1214
                                           ; SOURCE LINE # 1215
0515 110000      R     ACALL   L?1123
0518 E0                MOVX    A,@DPTR
0519 FE                MOV     R6,A
051A A3                INC     DPTR
051B E0                MOVX    A,@DPTR
051C 7810              MOV     R0,#010H
051E         ?C0823:
051E CE                XCH     A,R6
051F C3                CLR     C
0520 13                RRC     A
0521 CE                XCH     A,R6
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 127 

0522 13                RRC     A
0523 D8F9              DJNZ    R0,?C0823
                                           ; SOURCE LINE # 1216
                                           ; SOURCE LINE # 1217
0525 110000      R     ACALL   L?1163
                                           ; SOURCE LINE # 1218
0528 7D02              MOV     R5,#02H
052A 7FFA              MOV     R7,#0FAH
052C 110000      E     ACALL   _WriteI2C_8A
                                           ; SOURCE LINE # 1219
052F 90000000    R     MOV     DPTR,#spiaddr
0533 110000      R     ACALL   L?1009
0536 110000      R     ACALL   L?1164
                                           ; SOURCE LINE # 1220
0539 90000000    R     MOV     DPTR,#spiaddr
053D 110000      R     ACALL   L?1009
                                           ; SOURCE LINE # 1221
0540 110000      R     ACALL   L?1121
                                           ; SOURCE LINE # 1222
0543 7D07              MOV     R5,#07H
0545 7FF4              MOV     R7,#0F4H
0547 110000      E     ACALL   _WriteI2C_8A
                                           ; SOURCE LINE # 1223
054A 7F2C              MOV     R7,#02CH
054C 110000      E     ACALL   _I2cSpiFlashDmaWait
054F 90000000    R     MOV     DPTR,#ret
0553 EF                MOV     A,R7
0554 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1224
0555 6006              JZ      ?C0171
0557 110000      R     ACALL   L?1353
055A         ?C0865:
055A 010000      R     AJMP    ?C0888
055D         ?C0171:
                                           ; SOURCE LINE # 1225
055D 7B00        R     MOV     R3,#MBYTE ?SC_1713
055F 7A00        R     MOV     R2,#HIGH ?SC_1713
0561 7900        R     MOV     R1,#LOW ?SC_1713
0563         ?C0866:
                                           ; SOURCE LINE # 1227
0563 010000      R     AJMP    ?C0888
0566         ?C0166:
                                           ; SOURCE LINE # 1228
0566 7400        R     MOV     A,#MBYTE ?SC_1824
0568 110000      R     ACALL   L?1062
056B 7400        R     MOV     A,#HIGH ?SC_1824
056D F0                MOVX    @DPTR,A
056E A3                INC     DPTR
056F 7400        R     MOV     A,#LOW ?SC_1824
0571 110000      R     ACALL   L?1002
0574 110000      E     ACALL   _stricmp
0577 EF                MOV     A,R7
0578 4E                ORL     A,R6
0579 6003              JZ      $ + 5H
057B 010000      R     AJMP    ?C0174
                                           ; SOURCE LINE # 1238
057E 110000      R     ACALL   L?1184
0581 9403              SUBB    A,#03H
0583 5009              JNC     ?C0175
                                           ; SOURCE LINE # 1240
                                           ; SOURCE LINE # 1241
                                           ; SOURCE LINE # 1242
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 128 

0585 110000      R     ACALL   L?1122
                                           ; SOURCE LINE # 1243
                                           ; SOURCE LINE # 1244
                                           ; SOURCE LINE # 1245
0588 110000      R     ACALL   L?1158
058B         ?C0863:
058B 010000      R     AJMP    ?C0868
                                           ; SOURCE LINE # 1247
058E         ?C0175:
                                           ; SOURCE LINE # 1248
058E 90000000    R     MOV     DPTR,#argv+06H
0592 110000      R     ACALL   L?1004
                                           ; SOURCE LINE # 1249
0595 110000      R     ACALL   L?1221
0598 110000      R     ACALL   L?1004
059B 110000      R     ACALL   L?1269
                                           ; SOURCE LINE # 1250
059E 7B00        R     MOV     R3,#MBYTE ?SC_1841
05A0 7A00        R     MOV     R2,#HIGH ?SC_1841
05A2 7900        R     MOV     R1,#LOW ?SC_1841
05A4 90000000    R     MOV     DPTR,#start
05A8 110000      R     ACALL   L?1009
05AB 110000      R     ACALL   L?1056
05AE 90000000    R     MOV     DPTR,#length
05B2 110000      R     ACALL   L?1009
05B5 110000      R     ACALL   L?1207
05B8 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 1251
05BB 110000      R     ACALL   L?1330
                                           ; SOURCE LINE # 1252
05BE 7D64              MOV     R5,#064H
05C0 7FF3              MOV     R7,#0F3H
05C2 110000      E     ACALL   _WriteI2C_8A
                                           ; SOURCE LINE # 1253
05C5 7D04              MOV     R5,#04H
05C7 7FF6              MOV     R7,#0F6H
05C9 110000      E     ACALL   _WriteI2C_8A
                                           ; SOURCE LINE # 1254
05CC 7DD0              MOV     R5,#0D0H
05CE 7FF7              MOV     R7,#0F7H
                                           ; SOURCE LINE # 1255
05D0 110000      R     ACALL   L?1331
05D3 110000      R     ACALL   L?1009
05D6 7810              MOV     R0,#010H
05D8 110000      E     ACALL   ?C?ULSHR
05DB AD07              MOV     R5,AR7
05DD 7FF5              MOV     R7,#0F5H
                                           ; SOURCE LINE # 1256
05DF 110000      R     ACALL   L?1331
05E2 110000      R     ACALL   L?1009
05E5 7808              MOV     R0,#08H
05E7 110000      E     ACALL   ?C?ULSHR
05EA AD07              MOV     R5,AR7
05EC 7FF8              MOV     R7,#0F8H
05EE 110000      E     ACALL   _WriteI2C_8A
                                           ; SOURCE LINE # 1257
05F1 90000000    R     MOV     DPTR,#length
05F5 7FF9              MOV     R7,#0F9H
05F7 110000      R     ACALL   L?1238
                                           ; SOURCE LINE # 1258
                                           ; SOURCE LINE # 1259
05FA 110000      R     ACALL   L?1220
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 129 

05FD 110000      R     ACALL   L?1009
0600 110000      R     ACALL   L?1317
                                           ; SOURCE LINE # 1260
0603 90000000    R     MOV     DPTR,#start
0607 110000      R     ACALL   L?1009
060A 110000      R     ACALL   L?1318
                                           ; SOURCE LINE # 1261
060D 90000000    R     MOV     DPTR,#start
0611 7FFD              MOV     R7,#0FDH
0613 110000      R     ACALL   L?1238
                                           ; SOURCE LINE # 1262
0616 7D05              MOV     R5,#05H
0618 7FF4              MOV     R7,#0F4H
061A 110000      E     ACALL   _WriteI2C_8A
                                           ; SOURCE LINE # 1264
061D E4                CLR     A
061E 90000000    R     MOV     DPTR,#ret
0622 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1265
0623 90000000    R     MOV     DPTR,#length
0627 110000      R     ACALL   L?1009
062A 780C              MOV     R0,#0CH
062C 110000      E     ACALL   ?C?ULSHR
062F 90000000    R     MOV     DPTR,#loop
0633 EF                MOV     A,R7
0634 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1266
0635 E0                MOVX    A,@DPTR
0636 04                INC     A
0637 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1267
0638 E4                CLR     A
0639 90000000    R     MOV     DPTR,#i
063D F0                MOVX    @DPTR,A
063E         ?C0176:
063E 90000000    R     MOV     DPTR,#loop
0642 E0                MOVX    A,@DPTR
0643 FF                MOV     R7,A
0644 90000000    R     MOV     DPTR,#i
0648 E0                MOVX    A,@DPTR
0649 C3                CLR     C
064A 9F                SUBB    A,R7
064B 5016              JNC     ?C0177
                                           ; SOURCE LINE # 1268
064D 7FC8              MOV     R7,#0C8H
064F 110000      E     ACALL   _I2cSpiFlashDmaWait
0652 90000000    R     MOV     DPTR,#ret
0656 EF                MOV     A,R7
0657 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1269
0658 6009              JZ      ?C0177
                                           ; SOURCE LINE # 1270
065A         ?C0179:
                                           ; SOURCE LINE # 1271
065A         ?C0178:
065A 90000000    R     MOV     DPTR,#i
065E E0                MOVX    A,@DPTR
065F 04                INC     A
0660 F0                MOVX    @DPTR,A
0661 80DB              SJMP    ?C0176
0663         ?C0177:
                                           ; SOURCE LINE # 1272
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 130 

0663 90000000    R     MOV     DPTR,#ret
0667 E0                MOVX    A,@DPTR
0668 6006              JZ      ?C0180
                                           ; SOURCE LINE # 1273
066A 110000      R     ACALL   L?1354
066D         ?C0867:
066D 010000      R     AJMP    ?C0888
                                           ; SOURCE LINE # 1275
0670         ?C0180:
                                           ; SOURCE LINE # 1283
                                           ; SOURCE LINE # 1284
                                           ; SOURCE LINE # 1285
0670 110000      R     ACALL   L?1122
                                           ; SOURCE LINE # 1286
                                           ; SOURCE LINE # 1287
                                           ; SOURCE LINE # 1288
0673 110000      R     ACALL   L?1158
0676         ?C0868:
0676 010000      E     AJMP    _Printf
                                           ; SOURCE LINE # 1290
0679         ?C0174:
                                           ; SOURCE LINE # 1291
0679 7400        R     MOV     A,#MBYTE ?SC_1858
067B 110000      R     ACALL   L?1064
067E 7400        R     MOV     A,#HIGH ?SC_1858
0680 F0                MOVX    @DPTR,A
0681 A3                INC     DPTR
0682 7400        R     MOV     A,#LOW ?SC_1858
0684 110000      R     ACALL   L?1002
0687 110000      E     ACALL   _stricmp
068A EF                MOV     A,R7
068B 4E                ORL     A,R6
068C 7043              JNZ     ?C0182
                                           ; SOURCE LINE # 1294
068E 110000      R     ACALL   L?1184
0691 9402              SUBB    A,#02H
0693 5009              JNC     ?C0183
                                           ; SOURCE LINE # 1295
0695 7B00        R     MOV     R3,#MBYTE ?SC_1861
0697 7A00        R     MOV     R2,#HIGH ?SC_1861
0699 7900        R     MOV     R1,#LOW ?SC_1861
069B         ?C0869:
069B 010000      R     AJMP    ?C0888
                                           ; SOURCE LINE # 1297
069E         ?C0183:
                                           ; SOURCE LINE # 1299
                                           ; SOURCE LINE # 1300
069E 110000      R     ACALL   L?1105
                                           ; SOURCE LINE # 1301
06A1 30E106            JNB     ACC.1,?C0184
                                           ; SOURCE LINE # 1302
06A4 110000      R     ACALL   L?1355
06A7         ?C0870:
06A7 010000      R     AJMP    ?C0888
                                           ; SOURCE LINE # 1304
06AA         ?C0184:
                                           ; SOURCE LINE # 1306
06AA 90000000    R     MOV     DPTR,#argv+06H
06AE 110000      R     ACALL   L?1004
06B1 110000      R     ACALL   L?1341
                                           ; SOURCE LINE # 1307
06B4 7B00        R     MOV     R3,#MBYTE ?SC_1901
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 131 

06B6 7A00        R     MOV     R2,#HIGH ?SC_1901
06B8 7900        R     MOV     R1,#LOW ?SC_1901
06BA 90000000    R     MOV     DPTR,#spiaddr
06BE 110000      R     ACALL   L?1009
06C1 110000      R     ACALL   L?1056
06C4 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 1309
06C7 90000000    R     MOV     DPTR,#spiaddr
06CB 110000      R     ACALL   L?1009
06CE 010000      E     AJMP    _I2CSPI_sector_erase
                                           ; SOURCE LINE # 1310
06D1         ?C0182:
                                           ; SOURCE LINE # 1311
06D1 7400        R     MOV     A,#MBYTE ?SC_1911
06D3 110000      R     ACALL   L?1064
06D6 7400        R     MOV     A,#HIGH ?SC_1911
06D8 F0                MOVX    @DPTR,A
06D9 A3                INC     DPTR
06DA 7400        R     MOV     A,#LOW ?SC_1911
06DC 110000      R     ACALL   L?1002
06DF 110000      E     ACALL   _stricmp
06E2 EF                MOV     A,R7
06E3 4E                ORL     A,R6
06E4 6003              JZ      $ + 5H
06E6 010000      R     AJMP    ?C0186
                                           ; SOURCE LINE # 1319
06E9 110000      R     ACALL   L?1184
06EC 9402              SUBB    A,#02H
06EE 5009              JNC     ?C0187
                                           ; SOURCE LINE # 1320
06F0 7B00        R     MOV     R3,#MBYTE ?SC_1916
06F2 7A00        R     MOV     R2,#HIGH ?SC_1916
06F4 7900        R     MOV     R1,#LOW ?SC_1916
06F6         ?C0871:
06F6 010000      R     AJMP    ?C0888
                                           ; SOURCE LINE # 1322
06F9         ?C0187:
                                           ; SOURCE LINE # 1326
                                           ; SOURCE LINE # 1327
06F9 110000      R     ACALL   L?1138
                                           ; SOURCE LINE # 1328
06FC 30E106            JNB     ACC.1,?C0188
                                           ; SOURCE LINE # 1329
06FF 110000      R     ACALL   L?1355
0702 110000      E     ACALL   _Puts
0705         ?C0188:
                                           ; SOURCE LINE # 1331
0705 90000000    R     MOV     DPTR,#argv+06H
0709 110000      R     ACALL   L?1004
070C 110000      R     ACALL   L?1342
                                           ; SOURCE LINE # 1332
070F 7B00        R     MOV     R3,#MBYTE ?SC_1959
0711 7A00        R     MOV     R2,#HIGH ?SC_1959
0713 7900        R     MOV     R1,#LOW ?SC_1959
0715 90000000    R     MOV     DPTR,#spiaddr
0719 110000      R     ACALL   L?1009
071C 110000      R     ACALL   L?1056
071F 90000000    R     MOV     DPTR,#spiaddr
0723 110000      R     ACALL   L?1136
0726 90000000    E     MOV     DPTR,#?_Printf?BYTE+07H
072A 110000      R     ACALL   L?1155
                                           ; SOURCE LINE # 1335
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 132 

                                           ; SOURCE LINE # 1336
                                           ; SOURCE LINE # 1337
                                           ; SOURCE LINE # 1338
                                           ; SOURCE LINE # 1339
                                           ; SOURCE LINE # 1340
                                           ; SOURCE LINE # 1341
072D 110000      R     ACALL   L?1065
                                           ; SOURCE LINE # 1342
0730 110000      R     ACALL   L?1293
                                           ; SOURCE LINE # 1343
0733 6009              JZ      ?C0189
                                           ; SOURCE LINE # 1344
0735 7B00        R     MOV     R3,#MBYTE ?SC_1978
0737 7A00        R     MOV     R2,#HIGH ?SC_1978
0739 7900        R     MOV     R1,#LOW ?SC_1978
073B         ?C0872:
073B 010000      R     AJMP    ?C0888
                                           ; SOURCE LINE # 1346
073E         ?C0189:
                                           ; SOURCE LINE # 1349
073E 110000      R     ACALL   L?1330
                                           ; SOURCE LINE # 1350
0741 7D44              MOV     R5,#044H
                                           ; SOURCE LINE # 1351
                                           ; SOURCE LINE # 1352
                                           ; SOURCE LINE # 1353
                                           ; SOURCE LINE # 1354
                                           ; SOURCE LINE # 1355
0743 110000      R     ACALL   L?1106
                                           ; SOURCE LINE # 1356
0746 7DD8              MOV     R5,#0D8H
0748 7FFA              MOV     R7,#0FAH
074A 110000      E     ACALL   _WriteI2C_8A
                                           ; SOURCE LINE # 1357
074D 90000000    R     MOV     DPTR,#spiaddr
0751 110000      R     ACALL   L?1009
                                           ; SOURCE LINE # 1358
0754 110000      R     ACALL   L?1176
0757 110000      R     ACALL   L?1009
                                           ; SOURCE LINE # 1359
075A 110000      R     ACALL   L?1133
                                           ; SOURCE LINE # 1367
075D 7D07              MOV     R5,#07H
075F 7FF4              MOV     R7,#0F4H
0761 110000      E     ACALL   _WriteI2C_8A
                                           ; SOURCE LINE # 1368
0764 7F06              MOV     R7,#06H
0766 110000      R     ACALL   L?1204
                                           ; SOURCE LINE # 1369
0769 BFC809            CJNE    R7,#0C8H,?C0190
                                           ; SOURCE LINE # 1370
076C 7B00        R     MOV     R3,#MBYTE ?SC_1999
076E 7A00        R     MOV     R2,#HIGH ?SC_1999
0770 7900        R     MOV     R1,#LOW ?SC_1999
0772         ?C0873:
0772 010000      R     AJMP    ?C0888
                                           ; SOURCE LINE # 1372
0775         ?C0190:
                                           ; SOURCE LINE # 1373
                                           ; SOURCE LINE # 1374
                                           ; SOURCE LINE # 1375
                                           ; SOURCE LINE # 1376
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 133 

0775 110000      R     ACALL   L?1063
                                           ; SOURCE LINE # 1377
0778         ?C0191:
                                           ; SOURCE LINE # 1385
0778 7D41              MOV     R5,#041H
077A 7FF3              MOV     R7,#0F3H
077C 110000      E     ACALL   _WriteI2C_8A
                                           ; SOURCE LINE # 1386
077F 7D05              MOV     R5,#05H
0781 7FFA              MOV     R7,#0FAH
0783 110000      E     ACALL   _WriteI2C_8A
                                           ; SOURCE LINE # 1387
0786 7D01              MOV     R5,#01H
0788 7FF9              MOV     R7,#0F9H
078A 110000      E     ACALL   _WriteI2C_8A
                                           ; SOURCE LINE # 1388
078D 7D01              MOV     R5,#01H
078F 7FF4              MOV     R7,#0F4H
0791 110000      E     ACALL   _WriteI2C_8A
                                           ; SOURCE LINE # 1389
0794 7DC8              MOV     R5,#0C8H
0796 E4                CLR     A
0797 FF                MOV     R7,A
0798 110000      E     ACALL   _I2cSpiFlashDmaWait_loop
079B 90000000    R     MOV     DPTR,#ret
079F EF                MOV     A,R7
07A0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1390
07A1 BFC80B            CJNE    R7,#0C8H,?C0192
                                           ; SOURCE LINE # 1391
07A4 7B00        R     MOV     R3,#MBYTE ?SC_2037
07A6 7A00        R     MOV     R2,#HIGH ?SC_2037
07A8 7900        R     MOV     R1,#LOW ?SC_2037
07AA 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 1392
07AD 8010              SJMP    ?C0193
07AF         ?C0192:
                                           ; SOURCE LINE # 1393
                                           ; SOURCE LINE # 1394
07AF 7B00        R     MOV     R3,#MBYTE ?SC_2051
07B1 7A00        R     MOV     R2,#HIGH ?SC_2051
07B3 7900        R     MOV     R1,#LOW ?SC_2051
07B5 90000000    R     MOV     DPTR,#ret
07B9 110000      R     ACALL   L?1092
                                           ; SOURCE LINE # 1395
                                           ; SOURCE LINE # 1396
07BC 110000      R     ACALL   L?1145
                                           ; SOURCE LINE # 1397
07BF         ?C0193:
                                           ; SOURCE LINE # 1398
07BF 7FD0              MOV     R7,#0D0H
07C1 110000      R     ACALL   L?1367
                                           ; SOURCE LINE # 1399
07C4 7B00        R     MOV     R3,#MBYTE ?SC_2072
07C6 7A00        R     MOV     R2,#HIGH ?SC_2072
07C8 7900        R     MOV     R1,#LOW ?SC_2072
07CA 110000      R     ACALL   L?1092
07CD 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 1402
07D0 90000000    R     MOV     DPTR,#spiaddr
07D4 110000      R     ACALL   L?1136
07D7 90000000    R     MOV     DPTR,#spiaddr
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 134 

07DB 110000      R     ACALL   L?1155
                                           ; SOURCE LINE # 1406
                                           ; SOURCE LINE # 1407
                                           ; SOURCE LINE # 1408
                                           ; SOURCE LINE # 1409
                                           ; SOURCE LINE # 1410
                                           ; SOURCE LINE # 1411
                                           ; SOURCE LINE # 1412
                                           ; SOURCE LINE # 1415
07DE 110000      R     ACALL   L?1107
                                           ; SOURCE LINE # 1416
07E1 BFC809            CJNE    R7,#0C8H,?C0194
                                           ; SOURCE LINE # 1417
07E4 7B00        R     MOV     R3,#MBYTE ?SC_2082
07E6 7A00        R     MOV     R2,#HIGH ?SC_2082
07E8 7900        R     MOV     R1,#LOW ?SC_2082
07EA         ?C0874:
07EA 010000      R     AJMP    ?C0888
                                           ; SOURCE LINE # 1419
07ED         ?C0194:
                                           ; SOURCE LINE # 1420
                                           ; SOURCE LINE # 1421
07ED 110000      R     ACALL   L?1334
07F0 110000      R     ACALL   L?1092
                                           ; SOURCE LINE # 1422
                                           ; SOURCE LINE # 1423
07F3 110000      R     ACALL   L?1145
                                           ; SOURCE LINE # 1424
07F6         ?C0195:
                                           ; SOURCE LINE # 1427
07F6 110000      R     ACALL   L?1335
07F9 110000      R     ACALL   L?1009
                                           ; SOURCE LINE # 1428
                                           ; SOURCE LINE # 1429
                                           ; SOURCE LINE # 1430
                                           ; SOURCE LINE # 1431
                                           ; SOURCE LINE # 1432
                                           ; SOURCE LINE # 1433
                                           ; SOURCE LINE # 1434
07FC 110000      R     ACALL   L?1040
                                           ; SOURCE LINE # 1435
                                           ; SOURCE LINE # 1436
07FF 110000      R     ACALL   L?1222
0802 110000      R     ACALL   L?1009
                                           ; SOURCE LINE # 1437
0805 110000      R     ACALL   L?1176
0808 110000      R     ACALL   L?1009
                                           ; SOURCE LINE # 1438
080B 110000      R     ACALL   L?1133
                                           ; SOURCE LINE # 1439
                                           ; SOURCE LINE # 1440
080E 110000      R     ACALL   L?1177
                                           ; SOURCE LINE # 1441
0811 6009              JZ      ?C0196
0813 7B00        R     MOV     R3,#MBYTE ?SC_2140
0815 7A00        R     MOV     R2,#HIGH ?SC_2140
0817 7900        R     MOV     R1,#LOW ?SC_2140
0819         ?C0875:
0819 010000      R     AJMP    ?C0888
081C         ?C0196:
                                           ; SOURCE LINE # 1442
081C 7B00        R     MOV     R3,#MBYTE ?SC_2152
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 135 

081E 7A00        R     MOV     R2,#HIGH ?SC_2152
0820 7900        R     MOV     R1,#LOW ?SC_2152
0822         ?C0876:
                                           ; SOURCE LINE # 1443
0822 010000      R     AJMP    ?C0888
0825         ?C0186:
                                           ; SOURCE LINE # 1444
0825 7400        R     MOV     A,#MBYTE ?SC_2166
0827 110000      R     ACALL   L?1066
082A 7400        R     MOV     A,#HIGH ?SC_2166
082C F0                MOVX    @DPTR,A
082D A3                INC     DPTR
082E 7400        R     MOV     A,#LOW ?SC_2166
0830 110000      R     ACALL   L?1002
0833 110000      E     ACALL   _stricmp
0836 EF                MOV     A,R7
0837 4E                ORL     A,R6
0838 6003              JZ      $ + 5H
083A 010000      R     AJMP    ?C0199
                                           ; SOURCE LINE # 1452
083D 110000      R     ACALL   L?1184
0840 9402              SUBB    A,#02H
0842 5009              JNC     ?C0200
                                           ; SOURCE LINE # 1453
0844 7B00        R     MOV     R3,#MBYTE ?SC_2171
0846 7A00        R     MOV     R2,#HIGH ?SC_2171
0848 7900        R     MOV     R1,#LOW ?SC_2171
084A         ?C0877:
084A 010000      R     AJMP    ?C0888
                                           ; SOURCE LINE # 1455
084D         ?C0200:
                                           ; SOURCE LINE # 1459
                                           ; SOURCE LINE # 1460
084D 110000      R     ACALL   L?1138
                                           ; SOURCE LINE # 1461
0850 30E106            JNB     ACC.1,?C0201
                                           ; SOURCE LINE # 1462
0853 110000      R     ACALL   L?1356
0856 110000      E     ACALL   _Puts
0859         ?C0201:
                                           ; SOURCE LINE # 1464
0859 90000000    R     MOV     DPTR,#argv+06H
085D 110000      R     ACALL   L?1004
0860 110000      R     ACALL   L?1342
                                           ; SOURCE LINE # 1465
0863 7B00        R     MOV     R3,#MBYTE ?SC_2214
0865 7A00        R     MOV     R2,#HIGH ?SC_2214
0867 7900        R     MOV     R1,#LOW ?SC_2214
0869 90000000    R     MOV     DPTR,#spiaddr
086D 110000      R     ACALL   L?1009
0870 110000      R     ACALL   L?1056
                                           ; SOURCE LINE # 1468
                                           ; SOURCE LINE # 1469
                                           ; SOURCE LINE # 1470
                                           ; SOURCE LINE # 1471
                                           ; SOURCE LINE # 1472
                                           ; SOURCE LINE # 1473
                                           ; SOURCE LINE # 1474
0873 110000      R     ACALL   L?1065
                                           ; SOURCE LINE # 1475
0876 110000      R     ACALL   L?1293
                                           ; SOURCE LINE # 1476
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 136 

0879 6009              JZ      ?C0202
                                           ; SOURCE LINE # 1477
087B 7B00        R     MOV     R3,#MBYTE ?SC_1978
087D 7A00        R     MOV     R2,#HIGH ?SC_1978
087F 7900        R     MOV     R1,#LOW ?SC_1978
0881         ?C0878:
0881 010000      R     AJMP    ?C0888
                                           ; SOURCE LINE # 1479
0884         ?C0202:
                                           ; SOURCE LINE # 1482
0884 7D04              MOV     R5,#04H
0886 7FFF              MOV     R7,#0FFH
0888 110000      E     ACALL   _WriteI2C_8A
                                           ; SOURCE LINE # 1486
088B 7D41              MOV     R5,#041H
                                           ; SOURCE LINE # 1487
                                           ; SOURCE LINE # 1488
                                           ; SOURCE LINE # 1489
                                           ; SOURCE LINE # 1490
                                           ; SOURCE LINE # 1491
088D 110000      R     ACALL   L?1106
                                           ; SOURCE LINE # 1492
0890 7D60              MOV     R5,#060H
0892 7FFA              MOV     R7,#0FAH
0894 110000      E     ACALL   _WriteI2C_8A
                                           ; SOURCE LINE # 1497
0897 C2A9              CLR     SFRB_ET0
                                           ; SOURCE LINE # 1498
0899 90000000    R     MOV     DPTR,#UsedTime
                                           ; SOURCE LINE # 1499
089D 110000      R     ACALL   L?1162
                                           ; SOURCE LINE # 1503
08A0 7D17              MOV     R5,#017H
08A2 7FF4              MOV     R7,#0F4H
08A4 110000      E     ACALL   _WriteI2C_8A
                                           ; SOURCE LINE # 1505
08A7 7F16              MOV     R7,#016H
08A9 110000      R     ACALL   L?1204
                                           ; SOURCE LINE # 1506
08AC BFC809            CJNE    R7,#0C8H,?C0203
                                           ; SOURCE LINE # 1507
08AF 7B00        R     MOV     R3,#MBYTE ?SC_1999
08B1 7A00        R     MOV     R2,#HIGH ?SC_1999
08B3 7900        R     MOV     R1,#LOW ?SC_1999
08B5         ?C0879:
08B5 010000      R     AJMP    ?C0888
                                           ; SOURCE LINE # 1509
08B8         ?C0203:
                                           ; SOURCE LINE # 1510
                                           ; SOURCE LINE # 1511
                                           ; SOURCE LINE # 1512
                                           ; SOURCE LINE # 1513
08B8 110000      R     ACALL   L?1063
                                           ; SOURCE LINE # 1514
08BB         ?C0204:
                                           ; SOURCE LINE # 1515
08BB C2A9              CLR     SFRB_ET0
                                           ; SOURCE LINE # 1516
08BD 90000000    R     MOV     DPTR,#UsedTime
08C1 110000      R     ACALL   L?1075
08C4 FB                MOV     R3,A
08C5 C3                CLR     C
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 137 

08C6 E500        E     MOV     A,SystemClock+03H
08C8 9B                SUBB    A,R3
08C9 FF                MOV     R7,A
08CA E500        E     MOV     A,SystemClock+02H
08CC 9A                SUBB    A,R2
08CD FE                MOV     R6,A
08CE E500        E     MOV     A,SystemClock+01H
08D0 99                SUBB    A,R1
08D1 FD                MOV     R5,A
08D2 E500        E     MOV     A,SystemClock
08D4 98                SUBB    A,R0
08D5 FC                MOV     R4,A
08D6 90000000    R     MOV     DPTR,#UsedTime
08DA 110000      E     ACALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1517
08DD D2A9              SETB    SFRB_ET0
                                           ; SOURCE LINE # 1518
08DF 110000      R     ACALL   L?1336
08E2 110000      R     ACALL   L?1009
08E5 110000      E     ACALL   ?C?ULDIV
08E8 110000      R     ACALL   L?1056
08EB 110000      R     ACALL   L?1336
08EE 110000      R     ACALL   L?1009
08F1 110000      E     ACALL   ?C?ULDIV
08F4 AC00              MOV     R4,AR0
08F6 AD01              MOV     R5,AR1
08F8 AE02              MOV     R6,AR2
08FA AF03              MOV     R7,AR3
08FC 110000      R     ACALL   L?1207
08FF 7B00        R     MOV     R3,#MBYTE ?SC_2228
0901 7A00        R     MOV     R2,#HIGH ?SC_2228
0903 7900        R     MOV     R1,#LOW ?SC_2228
0905 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 1526
                                           ; SOURCE LINE # 1527
                                           ; SOURCE LINE # 1528
                                           ; SOURCE LINE # 1529
                                           ; SOURCE LINE # 1530
                                           ; SOURCE LINE # 1531
                                           ; SOURCE LINE # 1532
                                           ; SOURCE LINE # 1535
0908 110000      R     ACALL   L?1107
                                           ; SOURCE LINE # 1536
090B BFC809            CJNE    R7,#0C8H,?C0205
                                           ; SOURCE LINE # 1537
090E 7B00        R     MOV     R3,#MBYTE ?SC_2082
0910 7A00        R     MOV     R2,#HIGH ?SC_2082
0912 7900        R     MOV     R1,#LOW ?SC_2082
0914         ?C0880:
0914 010000      R     AJMP    ?C0888
                                           ; SOURCE LINE # 1539
0917         ?C0205:
                                           ; SOURCE LINE # 1540
                                           ; SOURCE LINE # 1541
0917 110000      R     ACALL   L?1334
091A 110000      R     ACALL   L?1092
091D 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 1542
0920 7FF4              MOV     R7,#0F4H
0922 110000      R     ACALL   L?1367
                                           ; SOURCE LINE # 1543
0925 7B00        R     MOV     R3,#MBYTE ?SC_2027
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 138 

0927 7A00        R     MOV     R2,#HIGH ?SC_2027
0929 7900        R     MOV     R1,#LOW ?SC_2027
092B 90000000    E     MOV     DPTR,#?_Printf?BYTE+03H
092F F0                MOVX    @DPTR,A
0930 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 1544
0933         ?C0206:
                                           ; SOURCE LINE # 1547
0933 110000      R     ACALL   L?1335
0936 110000      R     ACALL   L?1009
                                           ; SOURCE LINE # 1548
                                           ; SOURCE LINE # 1549
                                           ; SOURCE LINE # 1550
                                           ; SOURCE LINE # 1551
                                           ; SOURCE LINE # 1552
                                           ; SOURCE LINE # 1553
                                           ; SOURCE LINE # 1554
0939 110000      R     ACALL   L?1040
                                           ; SOURCE LINE # 1555
                                           ; SOURCE LINE # 1556
093C 110000      R     ACALL   L?1222
093F 110000      R     ACALL   L?1009
0942 110000      R     ACALL   L?1317
                                           ; SOURCE LINE # 1557
0945 90000000    R     MOV     DPTR,#spiaddr
0949 110000      R     ACALL   L?1009
094C 110000      R     ACALL   L?1318
                                           ; SOURCE LINE # 1558
094F 90000000    R     MOV     DPTR,#spiaddr
0953 A3                INC     DPTR
0954 A3                INC     DPTR
0955 A3                INC     DPTR
0956 E0                MOVX    A,@DPTR
0957 FD                MOV     R5,A
0958 7FFD              MOV     R7,#0FDH
095A 110000      E     ACALL   _WriteI2C_8A
                                           ; SOURCE LINE # 1559
                                           ; SOURCE LINE # 1560
095D 110000      R     ACALL   L?1177
                                           ; SOURCE LINE # 1561
0960 6009              JZ      ?C0207
0962 7B00        R     MOV     R3,#MBYTE ?SC_2140
0964 7A00        R     MOV     R2,#HIGH ?SC_2140
0966 7900        R     MOV     R1,#LOW ?SC_2140
0968         ?C0881:
0968 010000      R     AJMP    ?C0888
096B         ?C0207:
                                           ; SOURCE LINE # 1562
096B 7B00        R     MOV     R3,#MBYTE ?SC_2152
096D 7A00        R     MOV     R2,#HIGH ?SC_2152
096F 7900        R     MOV     R1,#LOW ?SC_2152
0971         ?C0882:
                                           ; SOURCE LINE # 1563
0971 010000      R     AJMP    ?C0888
0974         ?C0199:
                                           ; SOURCE LINE # 1564
0974 7400        R     MOV     A,#MBYTE ?SC_2250
0976 110000      R     ACALL   L?1066
0979 7400        R     MOV     A,#HIGH ?SC_2250
097B F0                MOVX    @DPTR,A
097C A3                INC     DPTR
097D 7400        R     MOV     A,#LOW ?SC_2250
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 139 

097F 110000      R     ACALL   L?1002
0982 110000      E     ACALL   _stricmp
0985 EF                MOV     A,R7
0986 4E                ORL     A,R6
0987 7066              JNZ     ?C0210
                                           ; SOURCE LINE # 1568
0989 110000      R     ACALL   L?1184
098C 9404              SUBB    A,#04H
098E 5009              JNC     ?C0211
                                           ; SOURCE LINE # 1569
0990 7B00        R     MOV     R3,#MBYTE ?SC_2257
0992 7A00        R     MOV     R2,#HIGH ?SC_2257
0994 7900        R     MOV     R1,#LOW ?SC_2257
0996         ?C0883:
0996 010000      R     AJMP    ?C0888
                                           ; SOURCE LINE # 1571
0999         ?C0211:
                                           ; SOURCE LINE # 1572
0999 90000000    R     MOV     DPTR,#argv+06H
099D 110000      R     ACALL   L?1004
                                           ; SOURCE LINE # 1573
09A0 110000      R     ACALL   L?1221
09A3 110000      R     ACALL   L?1004
09A6 110000      R     ACALL   L?1269
                                           ; SOURCE LINE # 1574
09A9 90000000    R     MOV     DPTR,#argv+0CH
09AD 110000      R     ACALL   L?1004
                                           ; SOURCE LINE # 1576
09B0 110000      R     ACALL   L?1294
09B3 110000      R     ACALL   L?1009
09B6 90000000    E     MOV     DPTR,#?_I2CSPI_upload?BYTE+04H
09BA 110000      E     ACALL   ?C?LSTXDATA
09BD 90000000    R     MOV     DPTR,#upload_len
09C1 110000      R     ACALL   L?1009
09C4 90000000    E     MOV     DPTR,#?_I2CSPI_upload?BYTE+08H
09C8 110000      E     ACALL   ?C?LSTXDATA
09CB 90000000    R     MOV     DPTR,#src_addr
09CF 110000      R     ACALL   L?1009
09D2 110000      E     ACALL   _I2CSPI_upload
09D5 90000000    R     MOV     DPTR,#ret
09D9 EF                MOV     A,R7
09DA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1577
09DB 6009              JZ      ?C0212
09DD 7B00        R     MOV     R3,#MBYTE ?SC_2291
09DF 7A00        R     MOV     R2,#HIGH ?SC_2291
09E1 7900        R     MOV     R1,#LOW ?SC_2291
09E3         ?C0884:
09E3 010000      R     AJMP    ?C0888
09E6         ?C0212:
                                           ; SOURCE LINE # 1578
09E6 7B00        R     MOV     R3,#MBYTE ?SC_2299
09E8 7A00        R     MOV     R2,#HIGH ?SC_2299
09EA 7900        R     MOV     R1,#LOW ?SC_2299
09EC         ?C0885:
                                           ; SOURCE LINE # 1579
09EC 010000      R     AJMP    ?C0888
09EF         ?C0210:
                                           ; SOURCE LINE # 1580
09EF 7400        R     MOV     A,#MBYTE ?SC_2310
09F1 110000      R     ACALL   L?1067
09F4 7400        R     MOV     A,#HIGH ?SC_2310
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 140 

09F6 F0                MOVX    @DPTR,A
09F7 A3                INC     DPTR
09F8 7400        R     MOV     A,#LOW ?SC_2310
09FA 110000      R     ACALL   L?1002
09FD 110000      E     ACALL   _stricmp
0A00 EF                MOV     A,R7
0A01 4E                ORL     A,R6
0A02 706F              JNZ     ?C0100
                                           ; SOURCE LINE # 1584
0A04 110000      R     ACALL   L?1184
0A07 9404              SUBB    A,#04H
0A09 5008              JNC     ?C0216
                                           ; SOURCE LINE # 1585
0A0B 7B00        R     MOV     R3,#MBYTE ?SC_2257
0A0D 7A00        R     MOV     R2,#HIGH ?SC_2257
0A0F 7900        R     MOV     R1,#LOW ?SC_2257
0A11         ?C0886:
0A11 805D              SJMP    ?C0888
                                           ; SOURCE LINE # 1587
0A13         ?C0216:
                                           ; SOURCE LINE # 1588
0A13 90000000    R     MOV     DPTR,#argv+06H
0A17 110000      R     ACALL   L?1004
0A1A 110000      R     ACALL   L?1341
                                           ; SOURCE LINE # 1589
0A1D 90000000    R     MOV     DPTR,#argv+09H
0A21 110000      R     ACALL   L?1004
0A24 110000      E     ACALL   _a2h
0A27 90000000    R     MOV     DPTR,#dest_addr
0A2B 110000      E     ACALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1590
0A2E 90000000    R     MOV     DPTR,#argv+0CH
0A32 110000      R     ACALL   L?1004
                                           ; SOURCE LINE # 1592
0A35 110000      R     ACALL   L?1294
0A38 110000      R     ACALL   L?1009
0A3B 90000000    E     MOV     DPTR,#?_I2CSPI_upload_faster?BYTE+04H
0A3F 110000      E     ACALL   ?C?LSTXDATA
0A42 90000000    R     MOV     DPTR,#upload_len
0A46 110000      R     ACALL   L?1009
0A49 90000000    E     MOV     DPTR,#?_I2CSPI_upload_faster?BYTE+08H
0A4D 110000      E     ACALL   ?C?LSTXDATA
0A50 90000000    R     MOV     DPTR,#src_addr
0A54 110000      R     ACALL   L?1009
0A57 110000      E     ACALL   _I2CSPI_upload_faster
0A5A 90000000    R     MOV     DPTR,#ret
0A5E EF                MOV     A,R7
0A5F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1593
0A60 6008              JZ      ?C0217
0A62 7B00        R     MOV     R3,#MBYTE ?SC_2291
0A64 7A00        R     MOV     R2,#HIGH ?SC_2291
0A66 7900        R     MOV     R1,#LOW ?SC_2291
0A68         ?C0887:
0A68 8006              SJMP    ?C0888
0A6A         ?C0217:
                                           ; SOURCE LINE # 1594
0A6A 7B00        R     MOV     R3,#MBYTE ?SC_2299
0A6C 7A00        R     MOV     R2,#HIGH ?SC_2299
0A6E 7900        R     MOV     R1,#LOW ?SC_2299
0A70         ?C0888:
0A70 110000      E     ACALL   _Puts
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 141 

                                           ; SOURCE LINE # 1595
                                           ; SOURCE LINE # 1596
0A73         ?C0100:
0A73 22                RET     
0A74         L?1040:
0A74 90000000    E     MOV     DPTR,#?_Printf?BYTE+03H
0A78 110000      E     ACALL   ?C?LSTXDATA
0A7B 110000      E     ACALL   _Printf
0A7E 7D04              MOV     R5,#04H
0A80 7FFF              MOV     R7,#0FFH
0A82 110000      E     ACALL   _WriteI2C_8A
0A85 7D44              MOV     R5,#044H
0A87 7FF3              MOV     R7,#0F3H
0A89 110000      E     ACALL   _WriteI2C_8A
0A8C 7D04              MOV     R5,#04H
0A8E 7FF6              MOV     R7,#0F6H
0A90 110000      E     ACALL   _WriteI2C_8A
0A93 7DD0              MOV     R5,#0D0H
0A95 7FF7              MOV     R7,#0F7H
0A97 110000      E     ACALL   _WriteI2C_8A
0A9A E4                CLR     A
0A9B FD                MOV     R5,A
0A9C 7FF5              MOV     R7,#0F5H
0A9E 110000      E     ACALL   _WriteI2C_8A
0AA1 E4                CLR     A
0AA2 FD                MOV     R5,A
0AA3 7FF8              MOV     R7,#0F8H
0AA5 110000      E     ACALL   _WriteI2C_8A
0AA8 E4                CLR     A
0AA9 FD                MOV     R5,A
0AAA 7FF9              MOV     R7,#0F9H
0AAC 110000      E     ACALL   _WriteI2C_8A
0AAF 22                RET     
0AB0         L?1043:
0AB0 7D04              MOV     R5,#04H
0AB2 7FFF              MOV     R7,#0FFH
0AB4 110000      E     ACALL   _WriteI2C_8A
0AB7 7FC2              MOV     R7,#0C2H
0AB9 110000      E     ACALL   _ReadI2C_8A
0ABC 90000000    R     MOV     DPTR,#bTemp
0AC0 EF                MOV     A,R7
0AC1 F0                MOVX    @DPTR,A
0AC2 22                RET     
0AC3         L?1050:
0AC3 7D04              MOV     R5,#04H
0AC5 7FFF              MOV     R7,#0FFH
0AC7 110000      E     ACALL   _WriteI2C_8A
0ACA 7FC2              MOV     R7,#0C2H
0ACC 110000      E     ACALL   _ReadI2C_8A
0ACF 90000000    R     MOV     DPTR,#bTemp
0AD3 EF                MOV     A,R7
0AD4 F0                MOVX    @DPTR,A
0AD5 22                RET     
0AD6         L?1063:
0AD6 7B00        R     MOV     R3,#MBYTE ?SC_2008
0AD8 7A00        R     MOV     R2,#HIGH ?SC_2008
0ADA 7900        R     MOV     R1,#LOW ?SC_2008
0ADC 90000000    R     MOV     DPTR,#ret
0AE0 E0                MOVX    A,@DPTR
0AE1 90000000    E     MOV     DPTR,#?_Printf?BYTE+03H
0AE5 F0                MOVX    @DPTR,A
0AE6 110000      E     ACALL   _Printf
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 142 

0AE9 7FF4              MOV     R7,#0F4H
0AEB 110000      E     ACALL   _ReadI2C_8A
0AEE 90000000    R     MOV     DPTR,#bTemp
0AF2 EF                MOV     A,R7
0AF3 F0                MOVX    @DPTR,A
0AF4 7B00        R     MOV     R3,#MBYTE ?SC_2027
0AF6 7A00        R     MOV     R2,#HIGH ?SC_2027
0AF8 7900        R     MOV     R1,#LOW ?SC_2027
0AFA 90000000    E     MOV     DPTR,#?_Printf?BYTE+03H
0AFE F0                MOVX    @DPTR,A
0AFF 110000      E     ACALL   _Printf
0B02 22                RET     
0B03         L?1065:
0B03 110000      E     ACALL   _Printf
0B06 7D04              MOV     R5,#04H
0B08 7FFF              MOV     R7,#0FFH
0B0A 110000      E     ACALL   _WriteI2C_8A
0B0D 7D41              MOV     R5,#041H
0B0F 7FF3              MOV     R7,#0F3H
0B11 110000      E     ACALL   _WriteI2C_8A
0B14 E4                CLR     A
0B15 FD                MOV     R5,A
0B16 7FF5              MOV     R7,#0F5H
0B18 110000      E     ACALL   _WriteI2C_8A
0B1B E4                CLR     A
0B1C FD                MOV     R5,A
0B1D 7FF8              MOV     R7,#0F8H
0B1F 110000      E     ACALL   _WriteI2C_8A
0B22 E4                CLR     A
0B23 FD                MOV     R5,A
0B24 7FF9              MOV     R7,#0F9H
0B26 110000      E     ACALL   _WriteI2C_8A
0B29 7D06              MOV     R5,#06H
0B2B 7FFA              MOV     R7,#0FAH
0B2D 110000      E     ACALL   _WriteI2C_8A
0B30 7D01              MOV     R5,#01H
0B32 7FF4              MOV     R7,#0F4H
0B34 110000      E     ACALL   _WriteI2C_8A
0B37 22                RET     
0B38         L?1069:
0B38 7D04              MOV     R5,#04H
0B3A 7FFF              MOV     R7,#0FFH
0B3C 110000      E     ACALL   _WriteI2C_8A
0B3F 7FC2              MOV     R7,#0C2H
0B41 110000      E     ACALL   _ReadI2C_8A
0B44 90000000    R     MOV     DPTR,#bTemp
0B48 EF                MOV     A,R7
0B49 F0                MOVX    @DPTR,A
0B4A 22                RET     
0B4B         L?1079:
0B4B 7D04              MOV     R5,#04H
0B4D 7FFF              MOV     R7,#0FFH
0B4F 110000      E     ACALL   _WriteI2C_8A
0B52 7FC2              MOV     R7,#0C2H
0B54 110000      E     ACALL   _ReadI2C_8A
0B57 90000000    R     MOV     DPTR,#bTemp
0B5B EF                MOV     A,R7
0B5C F0                MOVX    @DPTR,A
0B5D 22                RET     
0B5E         L?1105:
0B5E 7D04              MOV     R5,#04H
0B60 7FFF              MOV     R7,#0FFH
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 143 

0B62 110000      E     ACALL   _WriteI2C_8A
0B65 7FC2              MOV     R7,#0C2H
0B67 110000      E     ACALL   _ReadI2C_8A
0B6A 90000000    R     MOV     DPTR,#bTemp
0B6E EF                MOV     A,R7
0B6F F0                MOVX    @DPTR,A
0B70 22                RET     
0B71         L?1106:
0B71 7FF3              MOV     R7,#0F3H
0B73 110000      E     ACALL   _WriteI2C_8A
0B76 7D04              MOV     R5,#04H
0B78 7FF6              MOV     R7,#0F6H
0B7A 110000      E     ACALL   _WriteI2C_8A
0B7D 7DD0              MOV     R5,#0D0H
0B7F 7FF7              MOV     R7,#0F7H
0B81 110000      E     ACALL   _WriteI2C_8A
0B84 E4                CLR     A
0B85 FD                MOV     R5,A
0B86 7FF5              MOV     R7,#0F5H
0B88 110000      E     ACALL   _WriteI2C_8A
0B8B E4                CLR     A
0B8C FD                MOV     R5,A
0B8D 7FF8              MOV     R7,#0F8H
0B8F 110000      E     ACALL   _WriteI2C_8A
0B92 E4                CLR     A
0B93 FD                MOV     R5,A
0B94 7FF9              MOV     R7,#0F9H
0B96 110000      E     ACALL   _WriteI2C_8A
0B99 22                RET     
0B9A         L?1107:
0B9A 7D04              MOV     R5,#04H
0B9C 7FFF              MOV     R7,#0FFH
0B9E 110000      E     ACALL   _WriteI2C_8A
0BA1 7D41              MOV     R5,#041H
0BA3 7FF3              MOV     R7,#0F3H
0BA5 110000      E     ACALL   _WriteI2C_8A
0BA8 E4                CLR     A
0BA9 FD                MOV     R5,A
0BAA 7FF5              MOV     R7,#0F5H
0BAC 110000      E     ACALL   _WriteI2C_8A
0BAF E4                CLR     A
0BB0 FD                MOV     R5,A
0BB1 7FF8              MOV     R7,#0F8H
0BB3 110000      E     ACALL   _WriteI2C_8A
0BB6 E4                CLR     A
0BB7 FD                MOV     R5,A
0BB8 7FF9              MOV     R7,#0F9H
0BBA 110000      E     ACALL   _WriteI2C_8A
0BBD 7D06              MOV     R5,#06H
0BBF 7FFA              MOV     R7,#0FAH
0BC1 110000      E     ACALL   _WriteI2C_8A
0BC4 7D01              MOV     R5,#01H
0BC6 7FF4              MOV     R7,#0F4H
0BC8 110000      E     ACALL   _WriteI2C_8A
0BCB 7DC8              MOV     R5,#0C8H
0BCD E4                CLR     A
0BCE FF                MOV     R7,A
0BCF 110000      E     ACALL   _I2cSpiFlashDmaWait_loop
0BD2 90000000    R     MOV     DPTR,#ret
0BD6 EF                MOV     A,R7
0BD7 F0                MOVX    @DPTR,A
0BD8 22                RET     
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 144 

0BD9         L?1121:
0BD9 7808              MOV     R0,#08H
0BDB 110000      E     ACALL   ?C?ULSHR
0BDE AD07              MOV     R5,AR7
0BE0 7FFC              MOV     R7,#0FCH
0BE2 110000      E     ACALL   _WriteI2C_8A
0BE5 90000000    R     MOV     DPTR,#spiaddr
0BE9 A3                INC     DPTR
0BEA A3                INC     DPTR
0BEB A3                INC     DPTR
0BEC E0                MOVX    A,@DPTR
0BED FD                MOV     R5,A
0BEE 7FFD              MOV     R7,#0FDH
0BF0 110000      E     ACALL   _WriteI2C_8A
0BF3 22                RET     
0BF4         L?1122:
0BF4 7D04              MOV     R5,#04H
0BF6 7FFF              MOV     R7,#0FFH
0BF8 110000      E     ACALL   _WriteI2C_8A
0BFB 7B00        R     MOV     R3,#MBYTE ?SC_1828
0BFD 7A00        R     MOV     R2,#HIGH ?SC_1828
0BFF 7900        R     MOV     R1,#LOW ?SC_1828
0C01 110000      E     ACALL   _Puts
0C04 7FEE              MOV     R7,#0EEH
0C06 110000      E     ACALL   _ReadI2C_8A
0C09 90000000    R     MOV     DPTR,#bTemp
0C0D EF                MOV     A,R7
0C0E F0                MOVX    @DPTR,A
0C0F 22                RET     
0C10         L?1123:
0C10 90000000    R     MOV     DPTR,#length
0C14 E0                MOVX    A,@DPTR
0C15 FF                MOV     R7,A
0C16 A3                INC     DPTR
0C17 E0                MOVX    A,@DPTR
0C18 90000000    E     MOV     DPTR,#?_Printf?BYTE+07H
0C1C CF                XCH     A,R7
0C1D F0                MOVX    @DPTR,A
0C1E A3                INC     DPTR
0C1F EF                MOV     A,R7
0C20 F0                MOVX    @DPTR,A
0C21 110000      E     ACALL   _Printf
0C24 7D04              MOV     R5,#04H
0C26 7FFF              MOV     R7,#0FFH
0C28 110000      E     ACALL   _WriteI2C_8A
0C2B 7DC4              MOV     R5,#0C4H
0C2D 7FF3              MOV     R7,#0F3H
0C2F 110000      E     ACALL   _WriteI2C_8A
0C32 E4                CLR     A
0C33 FD                MOV     R5,A
0C34 7FF6              MOV     R7,#0F6H
0C36 110000      E     ACALL   _WriteI2C_8A
0C39 E4                CLR     A
0C3A FD                MOV     R5,A
0C3B 7FF7              MOV     R7,#0F7H
0C3D 110000      E     ACALL   _WriteI2C_8A
0C40 90000000    R     MOV     DPTR,#length
0C44 22                RET     
0C45         L?1133:
0C45 7808              MOV     R0,#08H
0C47 110000      E     ACALL   ?C?ULSHR
0C4A AD07              MOV     R5,AR7
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 145 

0C4C 7FFC              MOV     R7,#0FCH
0C4E 110000      E     ACALL   _WriteI2C_8A
0C51 90000000    R     MOV     DPTR,#spiaddr
0C55 A3                INC     DPTR
0C56 A3                INC     DPTR
0C57 A3                INC     DPTR
0C58 E0                MOVX    A,@DPTR
0C59 FD                MOV     R5,A
0C5A 7FFD              MOV     R7,#0FDH
0C5C 110000      E     ACALL   _WriteI2C_8A
0C5F 22                RET     
0C60         L?1137:
0C60 110000      E     ACALL   _a2h
0C63 90000000    R     MOV     DPTR,#wTemp
0C67 EE                MOV     A,R6
0C68 F0                MOVX    @DPTR,A
0C69 A3                INC     DPTR
0C6A EF                MOV     A,R7
0C6B F0                MOVX    @DPTR,A
0C6C 7D04              MOV     R5,#04H
0C6E 7FFF              MOV     R7,#0FFH
0C70 110000      E     ACALL   _WriteI2C_8A
0C73 90000000    R     MOV     DPTR,#wTemp
0C77 E0                MOVX    A,@DPTR
0C78 FD                MOV     R5,A
0C79 7FDB              MOV     R7,#0DBH
0C7B 110000      E     ACALL   _WriteI2C_8A
0C7E 90000000    R     MOV     DPTR,#wTemp
0C82 22                RET     
0C83         L?1138:
0C83 7D04              MOV     R5,#04H
0C85 7FFF              MOV     R7,#0FFH
0C87 110000      E     ACALL   _WriteI2C_8A
0C8A 7FC2              MOV     R7,#0C2H
0C8C 110000      E     ACALL   _ReadI2C_8A
0C8F 90000000    R     MOV     DPTR,#bTemp
0C93 EF                MOV     A,R7
0C94 F0                MOVX    @DPTR,A
0C95 22                RET     
0C96         L?1145:
0C96 110000      E     ACALL   _Printf
0C99 7FF4              MOV     R7,#0F4H
0C9B 110000      E     ACALL   _ReadI2C_8A
0C9E 90000000    R     MOV     DPTR,#bTemp
0CA2 EF                MOV     A,R7
0CA3 F0                MOVX    @DPTR,A
0CA4 7B00        R     MOV     R3,#MBYTE ?SC_2027
0CA6 7A00        R     MOV     R2,#HIGH ?SC_2027
0CA8 7900        R     MOV     R1,#LOW ?SC_2027
0CAA 90000000    E     MOV     DPTR,#?_Printf?BYTE+03H
0CAE F0                MOVX    @DPTR,A
0CAF 110000      E     ACALL   _Printf
0CB2 22                RET     
0CB3         L?1158:
0CB3 7B00        R     MOV     R3,#MBYTE ?SC_1835
0CB5 7A00        R     MOV     R2,#HIGH ?SC_1835
0CB7 7900        R     MOV     R1,#LOW ?SC_1835
0CB9 90000000    E     MOV     DPTR,#?_Printf?BYTE+03H
0CBD F0                MOVX    @DPTR,A
0CBE 110000      E     ACALL   _Printf
0CC1 7FEF              MOV     R7,#0EFH
0CC3 110000      E     ACALL   _ReadI2C_8A
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 146 

0CC6 90000000    R     MOV     DPTR,#ret
0CCA EF                MOV     A,R7
0CCB F0                MOVX    @DPTR,A
0CCC 7B00        R     MOV     R3,#MBYTE ?SC_1835
0CCE 7A00        R     MOV     R2,#HIGH ?SC_1835
0CD0 7900        R     MOV     R1,#LOW ?SC_1835
0CD2 90000000    E     MOV     DPTR,#?_Printf?BYTE+03H
0CD6 F0                MOVX    @DPTR,A
0CD7 22                RET     
0CD8         L?1163:
0CD8 FD                MOV     R5,A
0CD9 7FF5              MOV     R7,#0F5H
0CDB 110000      E     ACALL   _WriteI2C_8A
0CDE 90000000    R     MOV     DPTR,#length
0CE2 E0                MOVX    A,@DPTR
0CE3 FD                MOV     R5,A
0CE4 7FF8              MOV     R7,#0F8H
0CE6 110000      E     ACALL   _WriteI2C_8A
0CE9 90000000    R     MOV     DPTR,#length
0CED A3                INC     DPTR
0CEE E0                MOVX    A,@DPTR
0CEF FD                MOV     R5,A
0CF0 7FF9              MOV     R7,#0F9H
0CF2 110000      E     ACALL   _WriteI2C_8A
0CF5 22                RET     
0CF6         L?1164:
0CF6 7810              MOV     R0,#010H
0CF8 110000      E     ACALL   ?C?ULSHR
0CFB AD07              MOV     R5,AR7
0CFD 7FFB              MOV     R7,#0FBH
0CFF 110000      E     ACALL   _WriteI2C_8A
0D02 22                RET     
0D03         L?1169:
0D03 110000      E     ACALL   _a2h
0D06 90000000    R     MOV     DPTR,#spiaddr
0D0A 110000      E     ACALL   ?C?LSTXDATA
0D0D 90000000    R     MOV     DPTR,#argv+09H
0D11 22                RET     
0D12         L?1176:
0D12 7810              MOV     R0,#010H
0D14 110000      E     ACALL   ?C?ULSHR
0D17 AD07              MOV     R5,AR7
0D19 7FFB              MOV     R7,#0FBH
0D1B 110000      E     ACALL   _WriteI2C_8A
0D1E 90000000    R     MOV     DPTR,#spiaddr
0D22 22                RET     
0D23         L?1177:
0D23 7D07              MOV     R5,#07H
0D25 7FF4              MOV     R7,#0F4H
0D27 110000      E     ACALL   _WriteI2C_8A
0D2A 7FC8              MOV     R7,#0C8H
0D2C 110000      E     ACALL   _I2cSpiFlashDmaWait
0D2F 90000000    R     MOV     DPTR,#ret
0D33 EF                MOV     A,R7
0D34 F0                MOVX    @DPTR,A
0D35 22                RET     
0D36         L?1189:
0D36 7FC2              MOV     R7,#0C2H
0D38 110000      E     ACALL   _ReadI2C_8A
0D3B 90000000    R     MOV     DPTR,#bTemp
0D3F EF                MOV     A,R7
0D40 F0                MOVX    @DPTR,A
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 147 

0D41 22                RET     
0D42         L?1195:
0D42 E0                MOVX    A,@DPTR
0D43 4401              ORL     A,#01H
0D45 FD                MOV     R5,A
0D46 7FC2              MOV     R7,#0C2H
0D48 110000      E     ACALL   _WriteI2C_8A
0D4B E4                CLR     A
0D4C 90000000    R     MOV     DPTR,#i
0D50 F0                MOVX    @DPTR,A
0D51 A3                INC     DPTR
0D52 F0                MOVX    @DPTR,A
0D53 22                RET     
0D54         L?1204:
0D54 7DC8              MOV     R5,#0C8H
0D56 110000      E     ACALL   _I2cSpiFlashDmaWait_loop
0D59 90000000    R     MOV     DPTR,#ret
0D5D EF                MOV     A,R7
0D5E F0                MOVX    @DPTR,A
0D5F 22                RET     
0D60         L?1215:
0D60 7D04              MOV     R5,#04H
0D62 7FFF              MOV     R7,#0FFH
0D64 110000      E     ACALL   _WriteI2C_8A
0D67 22                RET     
0D68         L?1217:
0D68 7F0A              MOV     R7,#0AH
0D6A 7E00              MOV     R6,#00H
0D6C 110000      E     ACALL   _delay1ms
0D6F 90000000    R     MOV     DPTR,#i+01H
0D73 E0                MOVX    A,@DPTR
0D74 04                INC     A
0D75 F0                MOVX    @DPTR,A
0D76 22                RET     
0D77         L?1220:
0D77 7D03              MOV     R5,#03H
0D79 7FFA              MOV     R7,#0FAH
0D7B 110000      E     ACALL   _WriteI2C_8A
0D7E 90000000    R     MOV     DPTR,#spiaddr
0D82 22                RET     
0D83         L?1221:
0D83 110000      E     ACALL   _a2h
0D86 90000000    R     MOV     DPTR,#start
0D8A 110000      E     ACALL   ?C?LSTXDATA
0D8D 90000000    R     MOV     DPTR,#argv+09H
0D91 22                RET     
0D92         L?1222:
0D92 7D20              MOV     R5,#020H
0D94 7FFA              MOV     R7,#0FAH
0D96 110000      E     ACALL   _WriteI2C_8A
0D99 90000000    R     MOV     DPTR,#spiaddr
0D9D 22                RET     
0D9E         L?1230:
0D9E 110000      E     ACALL   _a2h
0DA1 90000000    R     MOV     DPTR,#pattern
0DA5 22                RET     
0DA6         L?1237:
0DA6 7FF4              MOV     R7,#0F4H
0DA8 110000      E     ACALL   _WriteI2C_8A
0DAB 7FC8              MOV     R7,#0C8H
0DAD 110000      E     ACALL   _I2cSpiFlashDmaWait
0DB0 90000000    R     MOV     DPTR,#ret
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 148 

0DB4 EF                MOV     A,R7
0DB5 F0                MOVX    @DPTR,A
0DB6 22                RET     
0DB7         L?1238:
0DB7 A3                INC     DPTR
0DB8 A3                INC     DPTR
0DB9 A3                INC     DPTR
0DBA E0                MOVX    A,@DPTR
0DBB FD                MOV     R5,A
0DBC 110000      E     ACALL   _WriteI2C_8A
0DBF 22                RET     
0DC0         L?1241:
0DC0 110000      E     ACALL   _ReadI2C_8A
0DC3 90000000    R     MOV     DPTR,#bTemp
0DC7 EF                MOV     A,R7
0DC8 F0                MOVX    @DPTR,A
0DC9 22                RET     
0DCA         L?1242:
0DCA 7B00        R     MOV     R3,#MBYTE ?SC_1640
0DCC 7A00        R     MOV     R2,#HIGH ?SC_1640
0DCE 7900        R     MOV     R1,#LOW ?SC_1640
0DD0 110000      E     ACALL   _Puts
0DD3 22                RET     
0DD4         L?1246:
0DD4 7FC4              MOV     R7,#0C4H
0DD6 110000      E     ACALL   _ReadI2C_8A
0DD9 90000000    R     MOV     DPTR,#bTemp
0DDD EF                MOV     A,R7
0DDE F0                MOVX    @DPTR,A
0DDF 22                RET     
0DE0         L?1247:
0DE0 7B00        R     MOV     R3,#MBYTE ?SC_1670
0DE2 7A00        R     MOV     R2,#HIGH ?SC_1670
0DE4 7900        R     MOV     R1,#LOW ?SC_1670
0DE6 110000      E     ACALL   _Puts
0DE9 90000000    R     MOV     DPTR,#length
0DED 7408              MOV     A,#08H
0DEF F0                MOVX    @DPTR,A
0DF0 A3                INC     DPTR
0DF1 22                RET     
0DF2         L?1255:
0DF2 7D04              MOV     R5,#04H
0DF4 7FFF              MOV     R7,#0FFH
0DF6 110000      E     ACALL   _WriteI2C_8A
0DF9 22                RET     
0DFA         L?1256:
0DFA 110000      E     ACALL   _Printf
0DFD E4                CLR     A
0DFE 90000000    R     MOV     DPTR,#i
0E02 F0                MOVX    @DPTR,A
0E03 A3                INC     DPTR
0E04 F0                MOVX    @DPTR,A
0E05 22                RET     
0E06         L?1261:
0E06 110000      E     ACALL   _a2h
0E09 90000000    R     MOV     DPTR,#wTemp
0E0D EE                MOV     A,R6
0E0E F0                MOVX    @DPTR,A
0E0F A3                INC     DPTR
0E10 EF                MOV     A,R7
0E11 F0                MOVX    @DPTR,A
0E12 7B00        R     MOV     R3,#MBYTE ?SC_1454
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 149 

0E14 7A00        R     MOV     R2,#HIGH ?SC_1454
0E16 7900        R     MOV     R1,#LOW ?SC_1454
0E18 22                RET     
0E19         L?1269:
0E19 110000      E     ACALL   _a2h
0E1C 90000000    R     MOV     DPTR,#length
0E20 110000      E     ACALL   ?C?LSTXDATA
0E23 22                RET     
0E24         L?1273:
0E24 7FDD              MOV     R7,#0DDH
0E26 110000      E     ACALL   _WriteI2C_8A
0E29 90000000    R     MOV     DPTR,#i+01H
0E2D E0                MOVX    A,@DPTR
0E2E 04                INC     A
0E2F F0                MOVX    @DPTR,A
0E30 22                RET     
0E31         L?1292:
0E31 7D55              MOV     R5,#055H
0E33 7FED              MOV     R7,#0EDH
0E35 110000      E     ACALL   _WriteI2C_8A
0E38 7DAA              MOV     R5,#0AAH
0E3A 7FED              MOV     R7,#0EDH
0E3C 110000      E     ACALL   _WriteI2C_8A
0E3F 22                RET     
0E40         L?1293:
0E40 7F02              MOV     R7,#02H
0E42 110000      E     ACALL   _I2cSpiFlashDmaWait
0E45 90000000    R     MOV     DPTR,#ret
0E49 EF                MOV     A,R7
0E4A F0                MOVX    @DPTR,A
0E4B 22                RET     
0E4C         L?1294:
0E4C 110000      E     ACALL   _a2h
0E4F 90000000    R     MOV     DPTR,#upload_len
0E53 110000      E     ACALL   ?C?LSTXDATA
0E56 90000000    R     MOV     DPTR,#dest_addr
0E5A 22                RET     
0E5B         L?1298:
0E5B 7FEC              MOV     R7,#0ECH
0E5D 110000      E     ACALL   _WriteI2C_8A
0E60 E4                CLR     A
0E61 90000000    R     MOV     DPTR,#i
0E65 F0                MOVX    @DPTR,A
0E66 A3                INC     DPTR
0E67 F0                MOVX    @DPTR,A
0E68 22                RET     
0E69         L?1317:
0E69 7810              MOV     R0,#010H
0E6B 110000      E     ACALL   ?C?ULSHR
0E6E AD07              MOV     R5,AR7
0E70 7FFB              MOV     R7,#0FBH
0E72 110000      E     ACALL   _WriteI2C_8A
0E75 22                RET     
0E76         L?1318:
0E76 7808              MOV     R0,#08H
0E78 110000      E     ACALL   ?C?ULSHR
0E7B AD07              MOV     R5,AR7
0E7D 7FFC              MOV     R7,#0FCH
0E7F 110000      E     ACALL   _WriteI2C_8A
0E82 22                RET     
0E83         L?1329:
0E83 A3                INC     DPTR
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 150 

0E84 E0                MOVX    A,@DPTR
0E85 FD                MOV     R5,A
0E86 7FDC              MOV     R7,#0DCH
0E88 110000      E     ACALL   _WriteI2C_8A
0E8B 22                RET     
0E8C         L?1330:
0E8C 7D04              MOV     R5,#04H
0E8E 7FFF              MOV     R7,#0FFH
0E90 110000      E     ACALL   _WriteI2C_8A
0E93 22                RET     
0E94         L?1331:
0E94 110000      E     ACALL   _WriteI2C_8A
0E97 90000000    R     MOV     DPTR,#length
0E9B 22                RET     
0E9C         L?1341:
0E9C 110000      E     ACALL   _a2h
0E9F 90000000    R     MOV     DPTR,#spiaddr
0EA3 110000      E     ACALL   ?C?LSTXDATA
0EA6 22                RET     
0EA7         L?1342:
0EA7 110000      E     ACALL   _a2h
0EAA 90000000    R     MOV     DPTR,#spiaddr
0EAE 110000      E     ACALL   ?C?LSTXDATA
0EB1 22                RET     
0EB2         L?1367:
0EB2 110000      E     ACALL   _ReadI2C_8A
0EB5 90000000    R     MOV     DPTR,#bTemp
0EB9 EF                MOV     A,R7
0EBA F0                MOVX    @DPTR,A
0EBB 22                RET     
             ; FUNCTION monitor_i2cspi (END)

             ; FUNCTION monitor_i2cspic (BEGIN)
                                           ; SOURCE LINE # 1599
                                           ; SOURCE LINE # 1600
                                           ; SOURCE LINE # 1610
0000 110000      R     ACALL   L?1086
0003 9402              SUBB    A,#02H
0005 5009              JNC     ?C0219
                                           ; SOURCE LINE # 1611
0007 7B00        R     MOV     R3,#MBYTE ?SC_2318
0009 7A00        R     MOV     R2,#HIGH ?SC_2318
000B 7900        R     MOV     R1,#LOW ?SC_2318
000D 010000      R     AJMP    ?C0900
                                           ; SOURCE LINE # 1613
0010         ?C0219:
                                           ; SOURCE LINE # 1615
0010 E4                CLR     A
0011 90000000    R     MOV     DPTR,#index
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1616
                                           ; SOURCE LINE # 1617
0016 110000      R     ACALL   L?1001
0019 110000      E     ACALL   ?C?CLDPTR
001C B47221            CJNE    A,#072H,?C0221
                                           ; SOURCE LINE # 1618
001F E9                MOV     A,R1
0020 110000      R     ACALL   L?1263
0023 C3                CLR     C
0024 9430              SUBB    A,#030H
0026 90000000    R     MOV     DPTR,#read_byte
002A F0                MOVX    @DPTR,A
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 151 

                                           ; SOURCE LINE # 1619
002B D3                SETB    C
002C 9408              SUBB    A,#08H
002E 4009              JC      ?C0222
                                           ; SOURCE LINE # 1622
0030 7B00        R     MOV     R3,#MBYTE ?SC_2329
0032 7A00        R     MOV     R2,#HIGH ?SC_2329
0034 7900        R     MOV     R1,#LOW ?SC_2329
0036         ?C0889:
0036 010000      R     AJMP    ?C0900
                                           ; SOURCE LINE # 1624
0039         ?C0222:
                                           ; SOURCE LINE # 1625
0039 90000000    R     MOV     DPTR,#index
003D 7401              MOV     A,#01H
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1626
0040         ?C0221:
                                           ; SOURCE LINE # 1629
0040 110000      R     ACALL   L?1357
0043 2400        R     ADD     A,#LOW argv+03H
0045 F582              MOV     DPL,A
0047 E4                CLR     A
0048 3400        R     ADDC    A,#HIGH argv+03H
004A F583              MOV     DPH,A
004C 759300      E     MOV     DPX,#?C?XDATASEG
004F 110000      R     ACALL   L?1004
0052 110000      E     ACALL   _a2h
0055 90000000    R     MOV     DPTR,#cmd
0059 EF                MOV     A,R7
005A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1631
005B E0                MOVX    A,@DPTR
005C 649F              XRL     A,#09FH
005E 6003              JZ      $ + 5H
0060 010000      R     AJMP    ?C0223
                                           ; SOURCE LINE # 1632
0063 90000000    R     MOV     DPTR,#read_byte
0067 E0                MOVX    A,@DPTR
0068 6403              XRL     A,#03H
006A 6009              JZ      ?C0224
                                           ; SOURCE LINE # 1633
006C 7B00        R     MOV     R3,#MBYTE ?SC_2371
006E 7A00        R     MOV     R2,#HIGH ?SC_2371
0070 7900        R     MOV     R1,#LOW ?SC_2371
0072         ?C0890:
0072 010000      R     AJMP    ?C0900
                                           ; SOURCE LINE # 1635
0075         ?C0224:
                                           ; SOURCE LINE # 1636
0075 7B00        R     MOV     R3,#MBYTE ?SC_2390
0077 7A00        R     MOV     R2,#HIGH ?SC_2390
0079 7900        R     MOV     R1,#LOW ?SC_2390
007B 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 1637
007E 90000000    E     MOV     DPTR,#?_SpiFlash_DmaCmd?BYTE+04H
0082 E4                CLR     A
0083 F0                MOVX    @DPTR,A
0084 A3                INC     DPTR
0085 7403              MOV     A,#03H
0087 F0                MOVX    @DPTR,A
0088 E4                CLR     A
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 152 

0089 A3                INC     DPTR
008A F0                MOVX    @DPTR,A
008B 7BD0              MOV     R3,#0D0H
008D 7A04              MOV     R2,#04H
008F 7D40              MOV     R5,#040H
0091 7F9F              MOV     R7,#09FH
                                           ; SOURCE LINE # 1638
0093 110000      R     ACALL   L?1274
                                           ; SOURCE LINE # 1639
0096 6003              JZ      $ + 5H
0098 010000      R     AJMP    ?C0220
                                           ; SOURCE LINE # 1640
009B 110000      R     ACALL   L?1332
                                           ; SOURCE LINE # 1644
009E 7FD0              MOV     R7,#0D0H
00A0 110000      E     ACALL   _ReadI2C_8A
00A3 90000000    E     MOV     DPTR,#SPI_CmdBuffer
00A7 EF                MOV     A,R7
00A8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1645
00A9 7FD1              MOV     R7,#0D1H
00AB 110000      E     ACALL   _ReadI2C_8A
00AE 90000000    E     MOV     DPTR,#SPI_CmdBuffer+01H
00B2 EF                MOV     A,R7
00B3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1646
00B4 7FD2              MOV     R7,#0D2H
00B6 110000      E     ACALL   _ReadI2C_8A
00B9 90000000    E     MOV     DPTR,#SPI_CmdBuffer+02H
00BD EF                MOV     A,R7
00BE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1648
00BF 7B00        R     MOV     R3,#MBYTE ?SC_2405
00C1 7A00        R     MOV     R2,#HIGH ?SC_2405
00C3 7900        R     MOV     R1,#LOW ?SC_2405
00C5 90000000    E     MOV     DPTR,#SPI_CmdBuffer
00C9 110000      R     ACALL   L?1092
00CC 90000000    E     MOV     DPTR,#SPI_CmdBuffer+01H
00D0 110000      R     ACALL   L?1300
00D3 A3                INC     DPTR
00D4 EF                MOV     A,R7
00D5 F0                MOVX    @DPTR,A
00D6 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 1649
00D9 90000000    E     MOV     DPTR,#SPI_CmdBuffer
00DD E0                MOVX    A,@DPTR
00DE B4C209            CJNE    A,#0C2H,?C0226
                                           ; SOURCE LINE # 1650
00E1 7B00        R     MOV     R3,#MBYTE ?SC_2425
00E3 7A00        R     MOV     R2,#HIGH ?SC_2425
00E5 7900        R     MOV     R1,#LOW ?SC_2425
00E7         ?C0891:
                                           ; SOURCE LINE # 1652
00E7 010000      R     AJMP    ?C0900
00EA         ?C0226:
                                           ; SOURCE LINE # 1653
00EA 90000000    E     MOV     DPTR,#SPI_CmdBuffer
00EE E0                MOVX    A,@DPTR
00EF B41C09            CJNE    A,#01CH,?C0228
                                           ; SOURCE LINE # 1654
00F2 7B00        R     MOV     R3,#MBYTE ?SC_2434
00F4 7A00        R     MOV     R2,#HIGH ?SC_2434
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 153 

00F6 7900        R     MOV     R1,#LOW ?SC_2434
00F8         ?C0892:
                                           ; SOURCE LINE # 1656
00F8 010000      R     AJMP    ?C0900
00FB         ?C0228:
                                           ; SOURCE LINE # 1657
00FB 90000000    E     MOV     DPTR,#SPI_CmdBuffer
00FF E0                MOVX    A,@DPTR
0100 B4EF09            CJNE    A,#0EFH,?C0230
                                           ; SOURCE LINE # 1658
0103 7B00        R     MOV     R3,#MBYTE ?SC_2438
0105 7A00        R     MOV     R2,#HIGH ?SC_2438
0107 7900        R     MOV     R1,#LOW ?SC_2438
0109         ?C0893:
                                           ; SOURCE LINE # 1660
0109 010000      R     AJMP    ?C0900
010C         ?C0230:
                                           ; SOURCE LINE # 1661
010C 90000000    E     MOV     DPTR,#SPI_CmdBuffer
0110 E0                MOVX    A,@DPTR
0111 B42009            CJNE    A,#020H,?C0232
                                           ; SOURCE LINE # 1662
0114 7B00        R     MOV     R3,#MBYTE ?SC_2446
0116 7A00        R     MOV     R2,#HIGH ?SC_2446
0118 7900        R     MOV     R1,#LOW ?SC_2446
011A         ?C0894:
                                           ; SOURCE LINE # 1664
011A 010000      R     AJMP    ?C0900
011D         ?C0232:
                                           ; SOURCE LINE # 1665
011D 90000000    E     MOV     DPTR,#SPI_CmdBuffer
0121 E0                MOVX    A,@DPTR
0122 B40109            CJNE    A,#01H,?C0234
0125 7B00        R     MOV     R3,#MBYTE ?SC_2453
0127 7A00        R     MOV     R2,#HIGH ?SC_2453
0129 7900        R     MOV     R1,#LOW ?SC_2453
012B         ?C0895:
012B 010000      R     AJMP    ?C0900
012E         ?C0234:
                                           ; SOURCE LINE # 1666
012E 90000000    E     MOV     DPTR,#SPI_CmdBuffer
0132 E0                MOVX    A,@DPTR
0133 B4C809            CJNE    A,#0C8H,?C0236
0136 7B00        R     MOV     R3,#MBYTE ?SC_2462
0138 7A00        R     MOV     R2,#HIGH ?SC_2462
013A 7900        R     MOV     R1,#LOW ?SC_2462
013C         ?C0896:
013C 010000      R     AJMP    ?C0900
013F         ?C0236:
                                           ; SOURCE LINE # 1667
013F 7B00        R     MOV     R3,#MBYTE ?SC_2467
0141 7A00        R     MOV     R2,#HIGH ?SC_2467
0143 7900        R     MOV     R1,#LOW ?SC_2467
0145         ?C0897:
                                           ; SOURCE LINE # 1668
                                           ; SOURCE LINE # 1669
0145 010000      R     AJMP    ?C0900
0148         ?C0223:
                                           ; SOURCE LINE # 1670
0148 90000000    R     MOV     DPTR,#cmd
014C E0                MOVX    A,@DPTR
014D 6406              XRL     A,#06H
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 154 

014F 6005              JZ      ?C0240
0151 E0                MOVX    A,@DPTR
0152 6404              XRL     A,#04H
0154 702E              JNZ     ?C0239
0156         ?C0240:
                                           ; SOURCE LINE # 1671
                                           ; SOURCE LINE # 1672
0156 90000000    R     MOV     DPTR,#cmd
015A E0                MOVX    A,@DPTR
015B B40408            CJNE    A,#04H,?C0241
015E 7B00        R     MOV     R3,#MBYTE ?SC_2475
0160 7A00        R     MOV     R2,#HIGH ?SC_2475
0162 7900        R     MOV     R1,#LOW ?SC_2475
0164 8006              SJMP    ?C0899
0166         ?C0241:
                                           ; SOURCE LINE # 1673
0166 7B00        R     MOV     R3,#MBYTE ?SC_2483
0168 7A00        R     MOV     R2,#HIGH ?SC_2483
016A 7900        R     MOV     R1,#LOW ?SC_2483
016C         ?C0899:
016C 110000      E     ACALL   _Puts
016F         ?C0242:
                                           ; SOURCE LINE # 1674
016F 110000      R     ACALL   L?1223
0172 E4                CLR     A
0173 90000000    E     MOV     DPTR,#?_SpiFlash_DmaCmd?BYTE+04H
0177 F0                MOVX    @DPTR,A
0178 A3                INC     DPTR
0179 F0                MOVX    @DPTR,A
017A A3                INC     DPTR
017B F0                MOVX    @DPTR,A
017C FB                MOV     R3,A
017D FA                MOV     R2,A
017E 7D40              MOV     R5,#040H
                                           ; SOURCE LINE # 1675
0180 110000      R     ACALL   L?1274
                                           ; SOURCE LINE # 1676
0183 22                RET     
0184         ?C0239:
                                           ; SOURCE LINE # 1677
0184 90000000    R     MOV     DPTR,#cmd
0188 E0                MOVX    A,@DPTR
0189 6405              XRL     A,#05H
018B 7048              JNZ     ?C0244
                                           ; SOURCE LINE # 1678
018D 90000000    R     MOV     DPTR,#read_byte
0191 E0                MOVX    A,@DPTR
0192 7009              JNZ     ?C0245
                                           ; SOURCE LINE # 1679
0194 7B00        R     MOV     R3,#MBYTE ?SC_2491
0196 7A00        R     MOV     R2,#HIGH ?SC_2491
0198 7900        R     MOV     R1,#LOW ?SC_2491
019A         ?C0898:
019A 010000      R     AJMP    ?C0900
                                           ; SOURCE LINE # 1681
019D         ?C0245:
                                           ; SOURCE LINE # 1682
019D 110000      R     ACALL   L?1223
01A0 110000      R     ACALL   L?1281
01A3 E4                CLR     A
01A4 110000      R     ACALL   L?1228
01A7 E4                CLR     A
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 155 

01A8 FD                MOV     R5,A
01A9 110000      E     ACALL   _I2cSpiFlashChipRegCmd
01AC 110000      R     ACALL   L?1278
                                           ; SOURCE LINE # 1683
01AF 110000      R     ACALL   L?1332
                                           ; SOURCE LINE # 1684
01B2 110000      R     ACALL   L?1302
01B5         ?C0246:
01B5 110000      R     ACALL   L?1180
01B8 4003              JC      $ + 5H
01BA 010000      R     AJMP    ?C0220
                                           ; SOURCE LINE # 1685
01BD EE                MOV     A,R6
01BE 24D0              ADD     A,#0D0H
01C0 FF                MOV     R7,A
01C1 110000      E     ACALL   _ReadI2C_8A
01C4 90000000    E     MOV     DPTR,#?_Printf?BYTE+03H
01C8 EF                MOV     A,R7
01C9 F0                MOVX    @DPTR,A
01CA 7B00        R     MOV     R3,#MBYTE ?SC_801
01CC 7A00        R     MOV     R2,#HIGH ?SC_801
01CE 7900        R     MOV     R1,#LOW ?SC_801
01D0 110000      R     ACALL   L?1196
01D3 80E0              SJMP    ?C0246
                                           ; SOURCE LINE # 1686
01D5         ?C0244:
                                           ; SOURCE LINE # 1687
01D5 90000000    R     MOV     DPTR,#cmd
01D9 E0                MOVX    A,@DPTR
01DA 6401              XRL     A,#01H
01DC 7042              JNZ     ?C0250
                                           ; SOURCE LINE # 1688
01DE 110000      R     ACALL   L?1084
01E1 110000      R     ACALL   L?1205
01E4 5003              JNC     ?C0251
                                           ; SOURCE LINE # 1689
01E6 010000      R     AJMP    ?C0904
                                           ; SOURCE LINE # 1691
01E9         ?C0251:
                                           ; SOURCE LINE # 1692
01E9 110000      R     ACALL   L?1126
01EC 110000      R     ACALL   L?1004
01EF 110000      E     ACALL   _a2h
01F2 90000000    E     MOV     DPTR,#SPI_CmdBuffer
01F6 EF                MOV     A,R7
01F7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1693
01F8 110000      R     ACALL   L?1357
01FB 2400        R     ADD     A,#LOW argv+09H
01FD F582              MOV     DPL,A
01FF E4                CLR     A
0200 3400        R     ADDC    A,#HIGH argv+09H
0202 F583              MOV     DPH,A
0204 759300      E     MOV     DPX,#?C?XDATASEG
0207 110000      R     ACALL   L?1004
020A 110000      E     ACALL   _a2h
020D 90000000    E     MOV     DPTR,#SPI_CmdBuffer+01H
0211 EF                MOV     A,R7
0212 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1694
0213 110000      R     ACALL   L?1224
0216 110000      R     ACALL   L?1227
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 156 

0219 E4                CLR     A
021A FB                MOV     R3,A
021B 7D02              MOV     R5,#02H
                                           ; SOURCE LINE # 1695
021D 010000      R     AJMP    ?C0902
0220         ?C0250:
                                           ; SOURCE LINE # 1696
0220 90000000    R     MOV     DPTR,#cmd
0224 E0                MOVX    A,@DPTR
0225 6402              XRL     A,#02H
0227 6003              JZ      $ + 5H
0229 010000      R     AJMP    ?C0253
                                           ; SOURCE LINE # 1697
022C 110000      R     ACALL   L?1084
022F 110000      R     ACALL   L?1205
0232 5003              JNC     ?C0254
                                           ; SOURCE LINE # 1698
0234         ?C0901:
0234 010000      R     AJMP    ?C0904
                                           ; SOURCE LINE # 1700
0237         ?C0254:
                                           ; SOURCE LINE # 1701
0237 90000000    R     MOV     DPTR,#index
023B E0                MOVX    A,@DPTR
023C 240B              ADD     A,#0BH
023E FF                MOV     R7,A
023F E4                CLR     A
0240 33                RLC     A
0241 FE                MOV     R6,A
0242 110000      R     ACALL   L?1184
0245 110000      R     ACALL   L?1206
0248 4010              JC      ?C0255
                                           ; SOURCE LINE # 1702
024A 7B00        R     MOV     R3,#MBYTE ?SC_2531
024C 7A00        R     MOV     R2,#HIGH ?SC_2531
024E 7900        R     MOV     R1,#LOW ?SC_2531
0250 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 1703
0253 90000000    R     MOV     DPTR,#argc
0257 740B              MOV     A,#0BH
0259 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1704
025A         ?C0255:
                                           ; SOURCE LINE # 1705
025A 110000      R     ACALL   L?1126
025D 110000      R     ACALL   L?1004
0260 110000      R     ACALL   L?1270
                                           ; SOURCE LINE # 1706
0263 7B00        R     MOV     R3,#MBYTE ?SC_2558
0265 7A00        R     MOV     R2,#HIGH ?SC_2558
0267 7900        R     MOV     R1,#LOW ?SC_2558
0269 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 1707
026C 110000      R     ACALL   L?1265
026F 110000      R     ACALL   L?1009
0272 110000      R     ACALL   L?1056
                                           ; SOURCE LINE # 1709
0275 110000      R     ACALL   L?1333
0278 110000      R     ACALL   L?1009
027B 110000      E     ACALL   _I2cSpiFlashSetAddress2CmdBuffer
                                           ; SOURCE LINE # 1714
027E 90000000    R     MOV     DPTR,#i
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 157 

0282 7403              MOV     A,#03H
0284 F0                MOVX    @DPTR,A
0285 E4                CLR     A
0286 A3                INC     DPTR
0287 F0                MOVX    @DPTR,A
0288         ?C0256:
0288 90000000    R     MOV     DPTR,#argc
028C 110000      R     ACALL   L?1182
028F 502C              JNC     ?C0257
                                           ; SOURCE LINE # 1715
0291 90000000    R     MOV     DPTR,#index
0295 E0                MOVX    A,@DPTR
0296 2E                ADD     A,R6
0297 110000      R     ACALL   L?1202
029A 110000      R     ACALL   L?1004
029D 110000      E     ACALL   _a2h
;---- Variable 'dat0' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1716
02A0 90000000    R     MOV     DPTR,#cnt
02A4 E0                MOVX    A,@DPTR
02A5 2400        E     ADD     A,#LOW SPI_Buffer
02A7 F582              MOV     DPL,A
02A9 E4                CLR     A
02AA 3400        E     ADDC    A,#HIGH SPI_Buffer
02AC 110000      R     ACALL   L?1130
02AF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1717
02B0 90000000    R     MOV     DPTR,#i
02B4 E0                MOVX    A,@DPTR
02B5 04                INC     A
02B6 F0                MOVX    @DPTR,A
02B7 A3                INC     DPTR
02B8 E0                MOVX    A,@DPTR
02B9 04                INC     A
02BA F0                MOVX    @DPTR,A
02BB 80CB              SJMP    ?C0256
02BD         ?C0257:
                                           ; SOURCE LINE # 1722
02BD 110000      R     ACALL   L?1224
02C0 90000000    R     MOV     DPTR,#cnt
02C4 E0                MOVX    A,@DPTR
02C5 FB                MOV     R3,A
02C6 7402              MOV     A,#02H
02C8 110000      R     ACALL   L?1228
02CB 7D03              MOV     R5,#03H
02CD         ?C0902:
02CD 110000      E     ACALL   _I2cSpiFlashChipRegCmd
02D0 110000      R     ACALL   L?1278
                                           ; SOURCE LINE # 1727
02D3 22                RET     
02D4         ?C0253:
                                           ; SOURCE LINE # 1728
02D4 90000000    R     MOV     DPTR,#cmd
02D8 E0                MOVX    A,@DPTR
02D9 6420              XRL     A,#020H
02DB 6005              JZ      ?C0261
02DD E0                MOVX    A,@DPTR
02DE 64D8              XRL     A,#0D8H
02E0 707A              JNZ     ?C0260
02E2         ?C0261:
                                           ; SOURCE LINE # 1729
02E2 90000000    R     MOV     DPTR,#index
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 158 

02E6 E0                MOVX    A,@DPTR
02E7 2403              ADD     A,#03H
02E9 110000      R     ACALL   L?1085
02EC 110000      R     ACALL   L?1206
02EF 5003              JNC     ?C0262
                                           ; SOURCE LINE # 1730
02F1         ?C0903:
02F1 010000      R     AJMP    ?C0904
                                           ; SOURCE LINE # 1732
02F4         ?C0262:
                                           ; SOURCE LINE # 1733
02F4 110000      R     ACALL   L?1127
02F7 110000      R     ACALL   L?1004
02FA 110000      R     ACALL   L?1270
                                           ; SOURCE LINE # 1734
02FD 110000      R     ACALL   L?1224
0300 E0                MOVX    A,@DPTR
0301 7E00              MOV     R6,#00H
0303 B50704            CJNE    A,AR7,?C0264
0306 7F01              MOV     R7,#01H
0308 8002              SJMP    ?C0265
030A         ?C0264:
030A 7F00              MOV     R7,#00H
030C         ?C0265:
030C EF                MOV     A,R7
030D 64D8              XRL     A,#0D8H
030F 4E                ORL     A,R6
0310 7008              JNZ     ?C0263
0312 7B00        R     MOV     R3,#MBYTE ?SC_2571
0314 7A00        R     MOV     R2,#HIGH ?SC_2571
0316 7900        R     MOV     R1,#LOW ?SC_2571
0318 8006              SJMP    ?C0905
031A         ?C0263:
                                           ; SOURCE LINE # 1735
031A 7B00        R     MOV     R3,#MBYTE ?SC_2577
031C 7A00        R     MOV     R2,#HIGH ?SC_2577
031E 7900        R     MOV     R1,#LOW ?SC_2577
0320         ?C0905:
0320 110000      E     ACALL   _Puts
0323         ?C0266:
                                           ; SOURCE LINE # 1736
0323 110000      R     ACALL   L?1265
0326 110000      R     ACALL   L?1009
0329 110000      R     ACALL   L?1056
                                           ; SOURCE LINE # 1738
032C 110000      R     ACALL   L?1333
032F 110000      R     ACALL   L?1009
0332 110000      E     ACALL   _I2cSpiFlashSetAddress2CmdBuffer
                                           ; SOURCE LINE # 1740
0335 110000      R     ACALL   L?1224
0338 90000000    E     MOV     DPTR,#?_I2cSpiFlashChipRegCmd?BYTE+03H
033C 7406              MOV     A,#06H
033E F0                MOVX    @DPTR,A
033F A3                INC     DPTR
0340 74C8              MOV     A,#0C8H
0342 F0                MOVX    @DPTR,A
0343 E4                CLR     A
0344 FB                MOV     R3,A
0345 7D03              MOV     R5,#03H
0347 110000      E     ACALL   _I2cSpiFlashChipRegCmd
034A 110000      R     ACALL   L?1279
                                           ; SOURCE LINE # 1741
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 159 

034D E0                MOVX    A,@DPTR
034E 7003              JNZ     $ + 5H
0350 010000      R     AJMP    ?C0220
                                           ; SOURCE LINE # 1742
0353 7B00        R     MOV     R3,#MBYTE ?SC_2583
0355 7A00        R     MOV     R2,#HIGH ?SC_2583
0357 7900        R     MOV     R1,#LOW ?SC_2583
0359         ?C0900:
0359 010000      E     AJMP    _Puts
                                           ; SOURCE LINE # 1743
035C         ?C0260:
                                           ; SOURCE LINE # 1744
035C 90000000    R     MOV     DPTR,#cmd
0360 E0                MOVX    A,@DPTR
0361 6403              XRL     A,#03H
0363 601C              JZ      ?C0270
0365 E0                MOVX    A,@DPTR
0366 640B              XRL     A,#0BH
0368 6017              JZ      ?C0270
036A E0                MOVX    A,@DPTR
036B 643B              XRL     A,#03BH
036D 6012              JZ      ?C0270
036F E0                MOVX    A,@DPTR
0370 646B              XRL     A,#06BH
0372 600D              JZ      ?C0270
0374 E0                MOVX    A,@DPTR
0375 64BB              XRL     A,#0BBH
0377 6008              JZ      ?C0270
0379 E0                MOVX    A,@DPTR
037A 64EB              XRL     A,#0EBH
037C 6003              JZ      $ + 5H
037E 010000      R     AJMP    ?C0269
0381         ?C0270:
                                           ; SOURCE LINE # 1749
                                           ; SOURCE LINE # 1754
0381 110000      R     ACALL   L?1086
0384 9404              SUBB    A,#04H
0386 5008              JNC     ?C0271
                                           ; SOURCE LINE # 1755
0388         ?C0904:
0388 7B00        R     MOV     R3,#MBYTE ?SC_2506
038A 7A00        R     MOV     R2,#HIGH ?SC_2506
038C 7900        R     MOV     R1,#LOW ?SC_2506
038E 8048              SJMP    ?C0907
                                           ; SOURCE LINE # 1757
0390         ?C0271:
                                           ; SOURCE LINE # 1758
0390 90000000    R     MOV     DPTR,#read_byte
0394 E0                MOVX    A,@DPTR
0395 7008              JNZ     ?C0272
                                           ; SOURCE LINE # 1759
0397 7B00        R     MOV     R3,#MBYTE ?SC_2590
0399 7A00        R     MOV     R2,#HIGH ?SC_2590
039B 7900        R     MOV     R1,#LOW ?SC_2590
039D         ?C0906:
039D 8039              SJMP    ?C0907
                                           ; SOURCE LINE # 1761
039F         ?C0272:
                                           ; SOURCE LINE # 1763
039F 7D04              MOV     R5,#04H
03A1 7FFF              MOV     R7,#0FFH
03A3 110000      E     ACALL   _WriteI2C_8A
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 160 

                                           ; SOURCE LINE # 1764
03A6 7FF0              MOV     R7,#0F0H
03A8 110000      E     ACALL   _ReadI2C_8A
03AB 90000000    R     MOV     DPTR,#SPI_mode_Reg
03AF EF                MOV     A,R7
03B0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1765
03B1 90000000    R     MOV     DPTR,#cmd
03B5 E0                MOVX    A,@DPTR
03B6 B40322            CJNE    A,#03H,?C0273
                                           ; SOURCE LINE # 1766
03B9 E4                CLR     A
03BA 90000000    R     MOV     DPTR,#SPI_mode
03BE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1767
03BF 90000000    R     MOV     DPTR,#w_len
03C3 7403              MOV     A,#03H
03C5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1768
03C6 7FE1              MOV     R7,#0E1H
03C8 110000      E     ACALL   _ReadI2C_8A
03CB EF                MOV     A,R7
03CC 54C0              ANL     A,#0C0H
03CE 64C0              XRL     A,#0C0H
03D0 7060              JNZ     ?C0275
                                           ; SOURCE LINE # 1769
03D2 7B00        R     MOV     R3,#MBYTE ?SC_2616
03D4 7A00        R     MOV     R2,#HIGH ?SC_2616
03D6 7900        R     MOV     R1,#LOW ?SC_2616
03D8         ?C0907:
03D8 010000      E     AJMP    _Printf
                                           ; SOURCE LINE # 1771
                                           ; SOURCE LINE # 1772
03DB         ?C0273:
                                           ; SOURCE LINE # 1773
03DB 90000000    R     MOV     DPTR,#cmd
03DF E0                MOVX    A,@DPTR
03E0 B40B08            CJNE    A,#0BH,?C0276
                                           ; SOURCE LINE # 1774
03E3 90000000    R     MOV     DPTR,#SPI_mode
03E7 7401              MOV     A,#01H
                                           ; SOURCE LINE # 1775
                                           ; SOURCE LINE # 1776
03E9 800E              SJMP    ?C0908
03EB         ?C0276:
                                           ; SOURCE LINE # 1777
03EB 90000000    R     MOV     DPTR,#cmd
03EF E0                MOVX    A,@DPTR
03F0 B43B10            CJNE    A,#03BH,?C0278
                                           ; SOURCE LINE # 1778
03F3 90000000    R     MOV     DPTR,#SPI_mode
03F7 7402              MOV     A,#02H
03F9         ?C0908:
03F9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1779
03FA 90000000    R     MOV     DPTR,#w_len
03FE 7404              MOV     A,#04H
0400 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1780
0401 802F              SJMP    ?C0275
0403         ?C0278:
                                           ; SOURCE LINE # 1781
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 161 

0403 90000000    R     MOV     DPTR,#cmd
0407 E0                MOVX    A,@DPTR
0408 B46B08            CJNE    A,#06BH,?C0280
                                           ; SOURCE LINE # 1782
040B 90000000    R     MOV     DPTR,#SPI_mode
040F 7403              MOV     A,#03H
                                           ; SOURCE LINE # 1783
                                           ; SOURCE LINE # 1784
0411 8018              SJMP    ?C0909
0413         ?C0280:
                                           ; SOURCE LINE # 1785
0413 90000000    R     MOV     DPTR,#cmd
0417 E0                MOVX    A,@DPTR
0418 90000000    R     MOV     DPTR,#SPI_mode
041C B4BB0A            CJNE    A,#0BBH,?C0282
                                           ; SOURCE LINE # 1786
041F 7404              MOV     A,#04H
0421 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1787
0422 90000000    R     MOV     DPTR,#w_len
0426 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1788
0427 8009              SJMP    ?C0275
0429         ?C0282:
                                           ; SOURCE LINE # 1789
                                           ; SOURCE LINE # 1791
0429 7405              MOV     A,#05H
042B         ?C0909:
042B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1792
042C 90000000    R     MOV     DPTR,#w_len
0430 04                INC     A
0431 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1793
0432         ?C0275:
                                           ; SOURCE LINE # 1795
0432 110000      R     ACALL   L?1127
0435 110000      R     ACALL   L?1004
0438 110000      E     ACALL   _a2h
043B 90000000    R     MOV     DPTR,#spiaddr
043F 110000      E     ACALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1796
0442 110000      R     ACALL   L?1266
0445 110000      R     ACALL   L?1009
0448 110000      R     ACALL   L?1056
044B 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 1802
044E 90000000    R     MOV     DPTR,#spiaddr
0452 110000      R     ACALL   L?1009
0455 110000      E     ACALL   _I2cSpiFlashSetAddress2CmdBuffer
                                           ; SOURCE LINE # 1804
0458 90000000    R     MOV     DPTR,#SPI_mode_Reg
045C E0                MOVX    A,@DPTR
045D 54F8              ANL     A,#0F8H
045F FF                MOV     R7,A
0460 90000000    R     MOV     DPTR,#SPI_mode
0464 E0                MOVX    A,@DPTR
0465 4F                ORL     A,R7
0466 FD                MOV     R5,A
0467 7FF0              MOV     R7,#0F0H
0469 110000      E     ACALL   _WriteI2C_8A
                                           ; SOURCE LINE # 1805
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 162 

046C 110000      R     ACALL   L?1224
046F 110000      R     ACALL   L?1280
0472 110000      R     ACALL   L?1227
0475 110000      E     ACALL   _I2cSpiFlashChipRegCmd
0478 110000      R     ACALL   L?1279
                                           ; SOURCE LINE # 1806
047B E0                MOVX    A,@DPTR
047C 6003              JZ      $ + 5H
047E 010000      R     AJMP    ?C0220
                                           ; SOURCE LINE # 1807
0481 90000000    R     MOV     DPTR,#cmd
0485 E0                MOVX    A,@DPTR
0486 643B              XRL     A,#03BH
0488 600E              JZ      ?C0286
048A E0                MOVX    A,@DPTR
048B 646B              XRL     A,#06BH
048D 6009              JZ      ?C0286
048F E0                MOVX    A,@DPTR
0490 64BB              XRL     A,#0BBH
0492 6004              JZ      ?C0286
0494 E0                MOVX    A,@DPTR
0495 B4EB1A            CJNE    A,#0EBH,?C0285
0498         ?C0286:
                                           ; SOURCE LINE # 1810
                                           ; SOURCE LINE # 1811
0498 110000      R     ACALL   L?1302
049B         ?C0287:
049B 110000      R     ACALL   L?1180
049E 4003              JC      $ + 5H
04A0 010000      R     AJMP    ?C0220
                                           ; SOURCE LINE # 1812
04A3 7400        E     MOV     A,#LOW SPI_Buffer
04A5 110000      R     ACALL   L?1254
04A8 3400        E     ADDC    A,#HIGH SPI_Buffer
04AA 110000      R     ACALL   L?1091
04AD 110000      R     ACALL   L?1196
04B0 80E9              SJMP    ?C0287
                                           ; SOURCE LINE # 1813
04B2         ?C0285:
                                           ; SOURCE LINE # 1814
                                           ; SOURCE LINE # 1815
04B2 110000      R     ACALL   L?1303
04B5         ?C0291:
04B5 110000      R     ACALL   L?1181
04B8 4003              JC      $ + 5H
04BA 010000      R     AJMP    ?C0220
                                           ; SOURCE LINE # 1816
04BD 110000      R     ACALL   L?1253
04C0 3400        E     ADDC    A,#HIGH SPI_CmdBuffer
04C2 110000      R     ACALL   L?1091
04C5 110000      R     ACALL   L?1262
04C8 80EB              SJMP    ?C0291
                                           ; SOURCE LINE # 1817
                                           ; SOURCE LINE # 1818
                                           ; SOURCE LINE # 1821
04CA         ?C0269:
                                           ; SOURCE LINE # 1822
                                           ; SOURCE LINE # 1824
04CA 90000000    R     MOV     DPTR,#read_byte
04CE E0                MOVX    A,@DPTR
04CF 6005              JZ      ?C0295
04D1 E4                CLR     A
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 163 

04D2 A3                INC     DPTR
04D3 F0                MOVX    @DPTR,A
04D4 800A              SJMP    ?C0296
04D6         ?C0295:
                                           ; SOURCE LINE # 1825
                                           ; SOURCE LINE # 1826
04D6 110000      R     ACALL   L?1086
04D9 9402              SUBB    A,#02H
04DB 90000000    R     MOV     DPTR,#w_len
04DF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1827
04E0         ?C0296:
                                           ; SOURCE LINE # 1828
04E0 110000      R     ACALL   L?1303
04E3         ?C0297:
04E3 90000000    R     MOV     DPTR,#w_len
04E7 E0                MOVX    A,@DPTR
04E8 FF                MOV     R7,A
04E9 90000000    R     MOV     DPTR,#i
04ED E0                MOVX    A,@DPTR
04EE C3                CLR     C
04EF 9F                SUBB    A,R7
04F0 5022              JNC     ?C0298
                                           ; SOURCE LINE # 1829
04F2 110000      R     ACALL   L?1127
04F5 110000      R     ACALL   L?1004
04F8 110000      E     ACALL   _a2h
04FB 90000000    R     MOV     DPTR,#i
04FF E0                MOVX    A,@DPTR
0500 2400        E     ADD     A,#LOW SPI_CmdBuffer
0502 F582              MOV     DPL,A
0504 E4                CLR     A
0505 3400        E     ADDC    A,#HIGH SPI_CmdBuffer
0507 110000      R     ACALL   L?1130
050A F0                MOVX    @DPTR,A
050B 90000000    R     MOV     DPTR,#i
050F E0                MOVX    A,@DPTR
0510 04                INC     A
0511 F0                MOVX    @DPTR,A
0512 80CF              SJMP    ?C0297
0514         ?C0298:
                                           ; SOURCE LINE # 1831
0514 110000      R     ACALL   L?1224
0517 110000      R     ACALL   L?1280
051A E4                CLR     A
051B 110000      R     ACALL   L?1228
051E 110000      E     ACALL   _I2cSpiFlashChipRegCmd
0521 110000      R     ACALL   L?1279
                                           ; SOURCE LINE # 1832
0524 E0                MOVX    A,@DPTR
0525 7017              JNZ     ?C0220
                                           ; SOURCE LINE # 1833
0527 90000000    R     MOV     DPTR,#i
052B F0                MOVX    @DPTR,A
052C         ?C0301:
052C 110000      R     ACALL   L?1181
052F 500D              JNC     ?C0220
                                           ; SOURCE LINE # 1834
0531 110000      R     ACALL   L?1253
0534 3400        E     ADDC    A,#HIGH SPI_CmdBuffer
0536 110000      R     ACALL   L?1091
0539 110000      R     ACALL   L?1262
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 164 

053C 80EE              SJMP    ?C0301
                                           ; SOURCE LINE # 1835
                                           ; SOURCE LINE # 1836
                                           ; SOURCE LINE # 1837
053E         ?C0220:
053E 22                RET     
053F         L?1196:
053F 110000      E     ACALL   _Printf
0542 90000000    R     MOV     DPTR,#i
0546 E0                MOVX    A,@DPTR
0547 04                INC     A
0548 F0                MOVX    @DPTR,A
0549 22                RET     
054A         L?1262:
054A 110000      E     ACALL   _Printf
054D 90000000    R     MOV     DPTR,#i
0551 E0                MOVX    A,@DPTR
0552 04                INC     A
0553 F0                MOVX    @DPTR,A
0554 22                RET     
0555         L?1270:
0555 110000      E     ACALL   _a2h
0558 90000000    R     MOV     DPTR,#spiaddr
055C 110000      E     ACALL   ?C?LSTXDATA
055F 22                RET     
0560         L?1274:
0560 110000      E     ACALL   _SpiFlash_DmaCmd
0563 7D0A              MOV     R5,#0AH
0565 7F0A              MOV     R7,#0AH
0567 110000      E     ACALL   _SpiFlash_wait_done
056A 90000000    R     MOV     DPTR,#ret
056E EF                MOV     A,R7
056F F0                MOVX    @DPTR,A
0570 22                RET     
0571         L?1332:
0571 7D04              MOV     R5,#04H
0573 7FFF              MOV     R7,#0FFH
0575 110000      E     ACALL   _WriteI2C_8A
0578 22                RET     
0579         L?1333:
0579 110000      E     ACALL   _Printf
057C 90000000    R     MOV     DPTR,#spiaddr
0580 22                RET     
             ; FUNCTION monitor_i2cspic (END)

             ; FUNCTION monitor_ibt656 (BEGIN)
                                           ; SOURCE LINE # 1842
                                           ; SOURCE LINE # 1843
                                           ; SOURCE LINE # 1844
0000 110000      R     ACALL   L?1086
0003 9402              SUBB    A,#02H
0005 5012              JNC     ?C0304
                                           ; SOURCE LINE # 1846
0007 7B00        R     MOV     R3,#MBYTE ?SC_2645
0009 7A00        R     MOV     R2,#HIGH ?SC_2645
000B 7900        R     MOV     R1,#LOW ?SC_2645
000D 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 1852
0010 7B00        R     MOV     R3,#MBYTE ?SC_2659
0012 7A00        R     MOV     R2,#HIGH ?SC_2659
0014 7900        R     MOV     R1,#LOW ?SC_2659
0016 010000      E     AJMP    _Printf
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 165 

                                           ; SOURCE LINE # 1854
0019         ?C0304:
                                           ; SOURCE LINE # 1855
                                           ; SOURCE LINE # 1860
0019 110000      R     ACALL   L?1026
001C 7400        R     MOV     A,#HIGH ?SC_2710
001E F0                MOVX    @DPTR,A
001F A3                INC     DPTR
0020 7400        R     MOV     A,#LOW ?SC_2710
0022 110000      R     ACALL   L?1002
0025 110000      E     ACALL   _stricmp
0028 EF                MOV     A,R7
0029 4E                ORL     A,R6
002A 700A              JNZ     ?C0306
002C 90000000    E     MOV     DPTR,#InputBT656
0030 7405              MOV     A,#05H
0032 F0                MOVX    @DPTR,A
0033 010000      R     AJMP    ?C0307
0036         ?C0306:
                                           ; SOURCE LINE # 1861
0036 7400        R     MOV     A,#MBYTE ?SC_2714
0038 110000      R     ACALL   L?1067
003B 7400        R     MOV     A,#HIGH ?SC_2714
003D F0                MOVX    @DPTR,A
003E A3                INC     DPTR
003F 7400        R     MOV     A,#LOW ?SC_2714
0041 110000      R     ACALL   L?1002
0044 110000      E     ACALL   _stricmp
0047 EF                MOV     A,R7
0048 4E                ORL     A,R6
0049 7003              JNZ     ?C0308
004B 010000      R     AJMP    ?C0910
004E         ?C0308:
                                           ; SOURCE LINE # 1862
004E 7400        R     MOV     A,#MBYTE ?SC_2718
0050 110000      R     ACALL   L?1068
0053 7400        R     MOV     A,#HIGH ?SC_2718
0055 F0                MOVX    @DPTR,A
0056 A3                INC     DPTR
0057 7400        R     MOV     A,#LOW ?SC_2718
0059 110000      R     ACALL   L?1002
005C 110000      E     ACALL   _stricmp
005F EF                MOV     A,R7
0060 4E                ORL     A,R6
0061 7009              JNZ     ?C0310
0063 90000000    E     MOV     DPTR,#InputBT656
0067 04                INC     A
0068 F0                MOVX    @DPTR,A
0069 010000      R     AJMP    ?C0307
006C         ?C0310:
                                           ; SOURCE LINE # 1863
006C 7400        R     MOV     A,#MBYTE ?SC_2723
006E 110000      R     ACALL   L?1068
0071 7400        R     MOV     A,#HIGH ?SC_2723
0073 F0                MOVX    @DPTR,A
0074 A3                INC     DPTR
0075 7400        R     MOV     A,#LOW ?SC_2723
0077 110000      R     ACALL   L?1002
007A 110000      E     ACALL   _stricmp
007D EF                MOV     A,R7
007E 4E                ORL     A,R6
007F 700A              JNZ     ?C0312
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 166 

0081 90000000    E     MOV     DPTR,#InputBT656
0085 7402              MOV     A,#02H
0087 F0                MOVX    @DPTR,A
0088 010000      R     AJMP    ?C0307
008B         ?C0312:
                                           ; SOURCE LINE # 1864
008B 110000      R     ACALL   L?1029
008E 7400        R     MOV     A,#HIGH ?SC_2727
0090 F0                MOVX    @DPTR,A
0091 A3                INC     DPTR
0092 7400        R     MOV     A,#LOW ?SC_2727
0094 110000      R     ACALL   L?1002
0097 110000      E     ACALL   _stricmp
009A EF                MOV     A,R7
009B 4E                ORL     A,R6
009C 7002              JNZ     ?C0314
009E 8060              SJMP    ?C0911
00A0         ?C0314:
                                           ; SOURCE LINE # 1865
00A0 7400        R     MOV     A,#MBYTE ?SC_2732
00A2 110000      R     ACALL   L?1070
00A5 7400        R     MOV     A,#HIGH ?SC_2732
00A7 F0                MOVX    @DPTR,A
00A8 A3                INC     DPTR
00A9 7400        R     MOV     A,#LOW ?SC_2732
00AB 110000      R     ACALL   L?1002
00AE 110000      E     ACALL   _stricmp
00B1 EF                MOV     A,R7
00B2 4E                ORL     A,R6
00B3 7009              JNZ     ?C0316
00B5 90000000    E     MOV     DPTR,#InputBT656
00B9 7404              MOV     A,#04H
00BB F0                MOVX    @DPTR,A
00BC 8070              SJMP    ?C0307
00BE         ?C0316:
                                           ; SOURCE LINE # 1866
00BE 7400        R     MOV     A,#MBYTE ?SC_2738
00C0 110000      R     ACALL   L?1070
00C3 7400        R     MOV     A,#HIGH ?SC_2738
00C5 F0                MOVX    @DPTR,A
00C6 A3                INC     DPTR
00C7 7400        R     MOV     A,#LOW ?SC_2738
00C9 110000      R     ACALL   L?1002
00CC 110000      E     ACALL   _stricmp
00CF EF                MOV     A,R7
00D0 4E                ORL     A,R6
00D1 7052              JNZ     ?C0318
                                           ; SOURCE LINE # 1868
00D3 110000      R     ACALL   L?1259
00D6 6012              JZ      ?C0320
00D8 6401              XRL     A,#01H
00DA 600E              JZ      ?C0320
00DC EF                MOV     A,R7
00DD 6402              XRL     A,#02H
00DF 6009              JZ      ?C0320
00E1 EF                MOV     A,R7
00E2 6403              XRL     A,#03H
00E4 6004              JZ      ?C0320
00E6 EF                MOV     A,R7
00E7 B40827            CJNE    A,#08H,?C0319
00EA         ?C0320:
                                           ; SOURCE LINE # 1872
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 167 

                                           ; SOURCE LINE # 1873
00EA EF                MOV     A,R7
00EB 24FD              ADD     A,#0FDH
00ED 6008              JZ      ?C0323
00EF 24FB              ADD     A,#0FBH
00F1 600D              JZ      ?C0324
00F3 2406              ADD     A,#06H
00F5 7012              JNZ     ?C0325
                                           ; SOURCE LINE # 1874
                                           ; SOURCE LINE # 1875
00F7         ?C0323:
                                           ; SOURCE LINE # 1876
00F7 90000000    E     MOV     DPTR,#InputBT656
00FB 7401              MOV     A,#01H
00FD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1877
00FE 802E              SJMP    ?C0307
                                           ; SOURCE LINE # 1878
0100         ?C0324:
                                           ; SOURCE LINE # 1879
0100         ?C0911:
0100 90000000    E     MOV     DPTR,#InputBT656
0104 7403              MOV     A,#03H
0106 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1880
0107 8025              SJMP    ?C0307
                                           ; SOURCE LINE # 1881
0109         ?C0325:
                                           ; SOURCE LINE # 1882
0109 E4                CLR     A
010A         ?C0910:
010A 90000000    E     MOV     DPTR,#InputBT656
010E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1883
010F 801D              SJMP    ?C0307
                                           ; SOURCE LINE # 1884
                                           ; SOURCE LINE # 1891
0111         ?C0319:
                                           ; SOURCE LINE # 1892
                                           ; SOURCE LINE # 1893
0111 7B00        R     MOV     R3,#MBYTE ?SC_2743
0113 7A00        R     MOV     R2,#HIGH ?SC_2743
0115 7900        R     MOV     R1,#LOW ?SC_2743
0117 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 1894
011A 7B00        R     MOV     R3,#MBYTE ?SC_2801
011C 7A00        R     MOV     R2,#HIGH ?SC_2801
011E 7900        R     MOV     R1,#LOW ?SC_2801
0120 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 1895
                                           ; SOURCE LINE # 1896
0123 8009              SJMP    ?C0307
0125         ?C0318:
                                           ; SOURCE LINE # 1897
                                           ; SOURCE LINE # 1898
0125 110000      R     ACALL   L?1358
0128 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 1899
012B 010000      R     AJMP    Prompt
                                           ; SOURCE LINE # 1901
012E         ?C0307:
                                           ; SOURCE LINE # 1902
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 168 

012E 110000      E     ACALL   GetInputBT656EE
0131 AE07              MOV     R6,AR7
0133 90000000    E     MOV     DPTR,#InputBT656
0137 E0                MOVX    A,@DPTR
0138 FF                MOV     R7,A
0139 6E                XRL     A,R6
013A 6003              JZ      ?C0329
                                           ; SOURCE LINE # 1903
013C 110000      E     ACALL   _SaveInputBT656EE
013F         ?C0329:
                                           ; SOURCE LINE # 1907
013F 90000000    E     MOV     DPTR,#InputBT656
0143 E0                MOVX    A,@DPTR
0144 FF                MOV     R7,A
0145 110000      E     ACALL   _ChangeBT656__MAIN
                                           ; SOURCE LINE # 1908
                                           ; SOURCE LINE # 1909
0148         ?C0328:
0148 22                RET     
             ; FUNCTION monitor_ibt656 (END)

             ; FUNCTION monitor_imain (BEGIN)
                                           ; SOURCE LINE # 1911
                                           ; SOURCE LINE # 1912
                                           ; SOURCE LINE # 1913
0000 110000      R     ACALL   L?1086
0003 9402              SUBB    A,#02H
0005 502B              JNC     ?C0330
                                           ; SOURCE LINE # 1915
0007 7B00        R     MOV     R3,#MBYTE ?SC_2849
0009 7A00        R     MOV     R2,#HIGH ?SC_2849
000B 7900        R     MOV     R1,#LOW ?SC_2849
000D 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 1916
0010 110000      R     ACALL   L?1259
0013 7D01              MOV     R5,#01H
0015 110000      E     ACALL   _PrintfInput
                                           ; SOURCE LINE # 1917
0018 7B00        R     MOV     R3,#MBYTE ?SC_2862
001A 7A00        R     MOV     R2,#HIGH ?SC_2862
001C 7900        R     MOV     R1,#LOW ?SC_2862
001E 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 1918
0021 110000      E     ACALL   GetInputMainEE
0024 7D01              MOV     R5,#01H
0026 110000      E     ACALL   _PrintfInput
                                           ; SOURCE LINE # 1920
0029 7B00        R     MOV     R3,#MBYTE ?SC_2877
002B 7A00        R     MOV     R2,#HIGH ?SC_2877
002D 7900        R     MOV     R1,#LOW ?SC_2877
002F 010000      E     AJMP    _Printf
                                           ; SOURCE LINE # 1921
0032         ?C0330:
                                           ; SOURCE LINE # 1922
                                           ; SOURCE LINE # 1924
0032 7400        R     MOV     A,#MBYTE ?SC_2930
0034 110000      R     ACALL   L?1071
0037 7400        R     MOV     A,#HIGH ?SC_2930
0039 F0                MOVX    @DPTR,A
003A A3                INC     DPTR
003B 7400        R     MOV     A,#LOW ?SC_2930
003D 110000      R     ACALL   L?1002
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 169 

0040 110000      E     ACALL   _stricmp
0043 EF                MOV     A,R7
0044 4E                ORL     A,R6
0045 7003              JNZ     ?C0332
0047 010000      R     AJMP    ?C0912
004A         ?C0332:
                                           ; SOURCE LINE # 1925
004A 7400        R     MOV     A,#MBYTE ?SC_2935
004C 110000      R     ACALL   L?1071
004F 7400        R     MOV     A,#HIGH ?SC_2935
0051 F0                MOVX    @DPTR,A
0052 A3                INC     DPTR
0053 7400        R     MOV     A,#LOW ?SC_2935
0055 110000      R     ACALL   L?1002
0058 110000      E     ACALL   _stricmp
005B EF                MOV     A,R7
005C 4E                ORL     A,R6
005D 7009              JNZ     ?C0334
005F 90000000    E     MOV     DPTR,#InputMain
0063 04                INC     A
0064 F0                MOVX    @DPTR,A
0065 010000      R     AJMP    ?C0333
0068         ?C0334:
                                           ; SOURCE LINE # 1926
0068 7400        R     MOV     A,#MBYTE ?SC_2942
006A 110000      R     ACALL   L?1072
006D 7400        R     MOV     A,#HIGH ?SC_2942
006F F0                MOVX    @DPTR,A
0070 A3                INC     DPTR
0071 7400        R     MOV     A,#LOW ?SC_2942
0073 110000      R     ACALL   L?1002
0076 110000      E     ACALL   _stricmp
0079 EF                MOV     A,R7
007A 4E                ORL     A,R6
007B 700A              JNZ     ?C0336
007D 90000000    E     MOV     DPTR,#InputMain
0081 7402              MOV     A,#02H
0083 F0                MOVX    @DPTR,A
0084 010000      R     AJMP    ?C0333
0087         ?C0336:
                                           ; SOURCE LINE # 1927
0087 7400        R     MOV     A,#MBYTE ?SC_2947
0089 110000      R     ACALL   L?1072
008C 7400        R     MOV     A,#HIGH ?SC_2947
008E F0                MOVX    @DPTR,A
008F A3                INC     DPTR
0090 7400        R     MOV     A,#LOW ?SC_2947
0092 110000      R     ACALL   L?1002
0095 110000      E     ACALL   _stricmp
0098 EF                MOV     A,R7
0099 4E                ORL     A,R6
009A 700A              JNZ     ?C0338
009C 90000000    E     MOV     DPTR,#InputMain
00A0 7403              MOV     A,#03H
00A2 F0                MOVX    @DPTR,A
00A3 010000      R     AJMP    ?C0333
00A6         ?C0338:
                                           ; SOURCE LINE # 1928
00A6 7400        R     MOV     A,#MBYTE ?SC_2950
00A8 110000      R     ACALL   L?1077
00AB 7400        R     MOV     A,#HIGH ?SC_2950
00AD F0                MOVX    @DPTR,A
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 170 

00AE A3                INC     DPTR
00AF 7400        R     MOV     A,#LOW ?SC_2950
00B1 110000      R     ACALL   L?1002
00B4 110000      E     ACALL   _stricmp
00B7 EF                MOV     A,R7
00B8 4E                ORL     A,R6
00B9 7009              JNZ     ?C0340
00BB 90000000    E     MOV     DPTR,#InputMain
00BF 7404              MOV     A,#04H
00C1 F0                MOVX    @DPTR,A
00C2 8067              SJMP    ?C0333
00C4         ?C0340:
                                           ; SOURCE LINE # 1929
00C4 110000      R     ACALL   L?1031
00C7 7400        R     MOV     A,#HIGH ?SC_2954
00C9 F0                MOVX    @DPTR,A
00CA A3                INC     DPTR
00CB 7400        R     MOV     A,#LOW ?SC_2954
00CD 110000      R     ACALL   L?1002
00D0 110000      E     ACALL   _stricmp
00D3 EF                MOV     A,R7
00D4 4E                ORL     A,R6
00D5 7014              JNZ     ?C0342
                                           ; SOURCE LINE # 1930
00D7 110000      E     ACALL   GetHdmiModeEE
00DA EF                MOV     A,R7
00DB 90000000    E     MOV     DPTR,#InputMain
00DF 6005              JZ      ?C0343
00E1 7406              MOV     A,#06H
00E3 F0                MOVX    @DPTR,A
00E4 8045              SJMP    ?C0333
00E6         ?C0343:
                                           ; SOURCE LINE # 1931
00E6 7405              MOV     A,#05H
00E8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1932
00E9 8040              SJMP    ?C0333
00EB         ?C0342:
                                           ; SOURCE LINE # 1933
00EB 7400        R     MOV     A,#MBYTE ?SC_2959
00ED 110000      R     ACALL   L?1077
00F0 7400        R     MOV     A,#HIGH ?SC_2959
00F2 F0                MOVX    @DPTR,A
00F3 A3                INC     DPTR
00F4 7400        R     MOV     A,#LOW ?SC_2959
00F6 110000      R     ACALL   L?1002
00F9 110000      E     ACALL   _stricmp
00FC EF                MOV     A,R7
00FD 4E                ORL     A,R6
00FE 7009              JNZ     ?C0346
0100 90000000    E     MOV     DPTR,#InputMain
0104 7407              MOV     A,#07H
0106 F0                MOVX    @DPTR,A
0107 8022              SJMP    ?C0333
0109         ?C0346:
                                           ; SOURCE LINE # 1934
0109 110000      R     ACALL   L?1029
010C 7400        R     MOV     A,#HIGH ?SC_2727
010E F0                MOVX    @DPTR,A
010F A3                INC     DPTR
0110 7400        R     MOV     A,#LOW ?SC_2727
0112 110000      R     ACALL   L?1002
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 171 

0115 110000      E     ACALL   _stricmp
0118 EF                MOV     A,R7
0119 4E                ORL     A,R6
011A 7009              JNZ     ?C0348
011C 90000000    E     MOV     DPTR,#InputMain
0120 7408              MOV     A,#08H
0122 F0                MOVX    @DPTR,A
0123 8006              SJMP    ?C0333
0125         ?C0348:
                                           ; SOURCE LINE # 1935
0125 E4                CLR     A
0126         ?C0912:
0126 90000000    E     MOV     DPTR,#InputMain
012A F0                MOVX    @DPTR,A
012B         ?C0333:
                                           ; SOURCE LINE # 1936
012B 90000000    E     MOV     DPTR,#InputSubMode
012F 7407              MOV     A,#07H
0131 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1938
0132 110000      E     ACALL   LinkCheckAndSetInput
                                           ; SOURCE LINE # 1940
0135 110000      E     ACALL   GetInputMainEE
0138 AE07              MOV     R6,AR7
013A 110000      R     ACALL   L?1260
013D 6E                XRL     A,R6
013E 6003              JZ      ?C0350
                                           ; SOURCE LINE # 1941
0140 110000      E     ACALL   _SaveInputMainEE
0143         ?C0350:
                                           ; SOURCE LINE # 1943
0143 110000      R     ACALL   L?1260
0146 90000000    R     MOV     DPTR,#new_InputMain
014A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1944
014B 90000000    E     MOV     DPTR,#InputMain
014F 74FF              MOV     A,#0FFH
0151 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1945
0152 110000      E     ACALL   _ChangeInput
                                           ; SOURCE LINE # 1946
                                           ; SOURCE LINE # 1947
0155         ?C0351:
0155 22                RET     
             ; FUNCTION monitor_imain (END)

             ; FUNCTION HelpMonitorInit (BEGIN)
                                           ; SOURCE LINE # 1949
                                           ; SOURCE LINE # 1950
                                           ; SOURCE LINE # 1951
0000 7B00        R     MOV     R3,#MBYTE ?SC_2965
0002 7A00        R     MOV     R2,#HIGH ?SC_2965
0004 7900        R     MOV     R1,#LOW ?SC_2965
0006 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 1953
0009 7B00        R     MOV     R3,#MBYTE ?SC_3037
000B 7A00        R     MOV     R2,#HIGH ?SC_3037
000D 7900        R     MOV     R1,#LOW ?SC_3037
000F 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 1954
0012 7B00        R     MOV     R3,#MBYTE ?SC_3055
0014 7A00        R     MOV     R2,#HIGH ?SC_3055
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 172 

0016 7900        R     MOV     R1,#LOW ?SC_3055
0018 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 1955
001B 7B00        R     MOV     R3,#MBYTE ?SC_3068
001D 7A00        R     MOV     R2,#HIGH ?SC_3068
001F 7900        R     MOV     R1,#LOW ?SC_3068
0021 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 1956
0024 7B00        R     MOV     R3,#MBYTE ?SC_3088
0026 7A00        R     MOV     R2,#HIGH ?SC_3088
0028 7900        R     MOV     R1,#LOW ?SC_3088
002A 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 1957
002D 7B00        R     MOV     R3,#MBYTE ?SC_3109
002F 7A00        R     MOV     R2,#HIGH ?SC_3109
0031 7900        R     MOV     R1,#LOW ?SC_3109
0033 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 1958
0036 7B00        R     MOV     R3,#MBYTE ?SC_3114
0038 7A00        R     MOV     R2,#HIGH ?SC_3114
003A 7900        R     MOV     R1,#LOW ?SC_3114
003C 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 1959
003F 7B00        R     MOV     R3,#MBYTE ?SC_3127
0041 7A00        R     MOV     R2,#HIGH ?SC_3127
0043 7900        R     MOV     R1,#LOW ?SC_3127
0045 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 1960
0048 7B00        R     MOV     R3,#MBYTE ?SC_3151
004A 7A00        R     MOV     R2,#HIGH ?SC_3151
004C 7900        R     MOV     R1,#LOW ?SC_3151
004E 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 1961
0051 7B00        R     MOV     R3,#MBYTE ?SC_3193
0053 7A00        R     MOV     R2,#HIGH ?SC_3193
0055 7900        R     MOV     R1,#LOW ?SC_3193
0057 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 1962
005A 7B00        R     MOV     R3,#MBYTE ?SC_3199
005C 7A00        R     MOV     R2,#HIGH ?SC_3199
005E 7900        R     MOV     R1,#LOW ?SC_3199
0060 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 1963
0063 7B00        R     MOV     R3,#MBYTE ?SC_3245
0065 7A00        R     MOV     R2,#HIGH ?SC_3245
0067 7900        R     MOV     R1,#LOW ?SC_3245
0069 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 1964
006C 7B00        R     MOV     R3,#MBYTE ?SC_3261
006E 7A00        R     MOV     R2,#HIGH ?SC_3261
0070 7900        R     MOV     R1,#LOW ?SC_3261
0072 010000      E     AJMP    _Puts
             ; FUNCTION HelpMonitorInit (END)

             ; FUNCTION monitor_init (BEGIN)
                                           ; SOURCE LINE # 1967
                                           ; SOURCE LINE # 1968
                                           ; SOURCE LINE # 1969
0000 110000      R     ACALL   L?1086
0003 9402              SUBB    A,#02H
0005 5013              JNC     ?C0353
                                           ; SOURCE LINE # 1971
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 173 

0007 110000      R     ACALL   L?1260
000A 7D01              MOV     R5,#01H
000C 110000      E     ACALL   _Init8836AsDefault
                                           ; SOURCE LINE # 1973
000F 110000      E     ACALL   InitGpioDefault
                                           ; SOURCE LINE # 1974
0012 7F01              MOV     R7,#01H
0014 110000      E     ACALL   _Sspll1PowerUp
                                           ; SOURCE LINE # 1976
                                           ; SOURCE LINE # 1978
                                           ; SOURCE LINE # 1979
                                           ; SOURCE LINE # 1980
0017 010000      R     AJMP    ?C0913
001A         ?C0353:
                                           ; SOURCE LINE # 1981
                                           ; SOURCE LINE # 1982
001A 110000      R     ACALL   L?1033
001D 7400        R     MOV     A,#HIGH ?SC_284
001F F0                MOVX    @DPTR,A
0020 A3                INC     DPTR
0021 7400        R     MOV     A,#LOW ?SC_284
0023 110000      R     ACALL   L?1002
0026 110000      E     ACALL   _stricmp
0029 EF                MOV     A,R7
002A 4E                ORL     A,R6
002B 6015              JZ      ?C0356
002D 7400        R     MOV     A,#MBYTE ?SC_3276
002F 110000      R     ACALL   L?1078
0032 7400        R     MOV     A,#HIGH ?SC_3276
0034 F0                MOVX    @DPTR,A
0035 A3                INC     DPTR
0036 7400        R     MOV     A,#LOW ?SC_3276
0038 110000      R     ACALL   L?1002
003B 110000      E     ACALL   _stricmp
003E EF                MOV     A,R7
003F 4E                ORL     A,R6
0040 7003              JNZ     ?C0355
0042         ?C0356:
                                           ; SOURCE LINE # 1983
0042 010000      R     AJMP    HelpMonitorInit
                                           ; SOURCE LINE # 1984
0045         ?C0355:
                                           ; SOURCE LINE # 1985
0045 7400        R     MOV     A,#MBYTE ?SC_3281
0047 110000      R     ACALL   L?1078
004A 7400        R     MOV     A,#HIGH ?SC_3281
004C F0                MOVX    @DPTR,A
004D A3                INC     DPTR
004E 7400        R     MOV     A,#LOW ?SC_3281
0050 110000      R     ACALL   L?1002
0053 110000      E     ACALL   _stricmp
0056 EF                MOV     A,R7
0057 4E                ORL     A,R6
0058 702F              JNZ     ?C0358
                                           ; SOURCE LINE # 1986
005A 7F01              MOV     R7,#01H
005C 110000      E     ACALL   _InitCore
                                           ; SOURCE LINE # 1987
005F 110000      E     ACALL   CheckEEPROM
                                           ; SOURCE LINE # 1988
0062 110000      R     ACALL   L?1260
0065 7D01              MOV     R5,#01H
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 174 

0067 110000      E     ACALL   _Init8836AsDefault
                                           ; SOURCE LINE # 1990
006A 110000      E     ACALL   FrontPanel_StartUP
                                           ; SOURCE LINE # 1991
006D E4                CLR     A
006E FF                MOV     R7,A
006F 110000      E     ACALL   _ScalerSetMuteManual
                                           ; SOURCE LINE # 1992
0072 110000      E     ACALL   PowerUpLedBackLight
                                           ; SOURCE LINE # 1993
0075 7F01              MOV     R7,#01H
0077 110000      E     ACALL   _PllClkSetDividerReg
                                           ; SOURCE LINE # 1994
007A 7F01              MOV     R7,#01H
007C 110000      E     ACALL   _SpiOsdEnable
                                           ; SOURCE LINE # 1995
007F 110000      E     ACALL   SpiOsdSetDeValue
                                           ; SOURCE LINE # 1996
0082 E4                CLR     A
0083 90000000    R     MOV     DPTR,#DebugLevel
0087 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1997
0088 22                RET     
0089         ?C0358:
                                           ; SOURCE LINE # 1998
0089 7400        R     MOV     A,#MBYTE ?SC_3286
008B 110000      R     ACALL   L?1080
008E 7400        R     MOV     A,#HIGH ?SC_3286
0090 F0                MOVX    @DPTR,A
0091 A3                INC     DPTR
0092 7400        R     MOV     A,#LOW ?SC_3286
0094 110000      R     ACALL   L?1002
0097 110000      E     ACALL   _stricmp
009A EF                MOV     A,R7
009B 4E                ORL     A,R6
009C 7005              JNZ     ?C0360
                                           ; SOURCE LINE # 1999
009E 7F01              MOV     R7,#01H
00A0 010000      E     AJMP    _InitCore
                                           ; SOURCE LINE # 2000
00A3         ?C0360:
                                           ; SOURCE LINE # 2001
00A3 7400        R     MOV     A,#MBYTE ?SC_3291
00A5 110000      R     ACALL   L?1080
00A8 7400        R     MOV     A,#HIGH ?SC_3291
00AA F0                MOVX    @DPTR,A
00AB A3                INC     DPTR
00AC 7400        R     MOV     A,#LOW ?SC_3291
00AE 110000      R     ACALL   L?1002
00B1 110000      E     ACALL   _stricmp
00B4 EF                MOV     A,R7
00B5 4E                ORL     A,R6
00B6 703B              JNZ     ?C0362
                                           ; SOURCE LINE # 2002
00B8 7D01              MOV     R5,#01H
00BA FF                MOV     R7,A
00BB 110000      E     ACALL   _Init8836AsDefault
                                           ; SOURCE LINE # 2003
00BE 110000      E     ACALL   InitGpioDefault
                                           ; SOURCE LINE # 2005
00C1 7B00        R     MOV     R3,#MBYTE ?SC_3296
00C3 7A00        R     MOV     R2,#HIGH ?SC_3296
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 175 

00C5 7900        R     MOV     R1,#LOW ?SC_3296
00C7 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 2006
00CA 7D01              MOV     R5,#01H
00CC E4                CLR     A
00CD FF                MOV     R7,A
00CE 110000      E     ACALL   _OutputEnablePin
                                           ; SOURCE LINE # 2007
00D1 7F01              MOV     R7,#01H
00D3 110000      E     ACALL   _Sspll1PowerUp
                                           ; SOURCE LINE # 2008
00D6 110000      E     ACALL   SOsd_init
                                           ; SOURCE LINE # 2011
00D9 E4                CLR     A
00DA 90000000    E     MOV     DPTR,#InputMain
00DE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2012
00DF 110000      E     ACALL   InitInputAsDefault
                                           ; SOURCE LINE # 2013
00E2 110000      E     ACALL   CheckAndSetDecoderScaler
                                           ; SOURCE LINE # 2014
00E5 E4                CLR     A
00E6 FD                MOV     R5,A
00E7 7F01              MOV     R7,#01H
00E9 110000      E     ACALL   _ScalerSetFreerunAutoManual
                                           ; SOURCE LINE # 2015
00EC E4                CLR     A
00ED FD                MOV     R5,A
00EE 7F01              MOV     R7,#01H
00F0 010000      E     AJMP    _ScalerSetMuteAutoManual
                                           ; SOURCE LINE # 2016
00F3         ?C0362:
                                           ; SOURCE LINE # 2017
00F3 7400        R     MOV     A,#MBYTE ?SC_3314
00F5 110000      R     ACALL   L?1081
00F8 7400        R     MOV     A,#HIGH ?SC_3314
00FA F0                MOVX    @DPTR,A
00FB A3                INC     DPTR
00FC 7400        R     MOV     A,#LOW ?SC_3314
00FE 110000      R     ACALL   L?1002
0101 110000      E     ACALL   _stricmp
0104 EF                MOV     A,R7
0105 4E                ORL     A,R6
0106 7019              JNZ     ?C0364
                                           ; SOURCE LINE # 2020
0108 A200        R     MOV     C,g_access
010A 33                RLC     A
010B 90000000    R     MOV     DPTR,#old_access
010F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2021
0110 D200        R     SETB    g_access
                                           ; SOURCE LINE # 2022
0112 7F01              MOV     R7,#01H
0114 110000      E     ACALL   _InitSystem
                                           ; SOURCE LINE # 2023
0117 90000000    R     MOV     DPTR,#old_access
011B E0                MOVX    A,@DPTR
011C 24FF              ADD     A,#0FFH
011E 9200        R     MOV     g_access,C
                                           ; SOURCE LINE # 2024
0120 22                RET     
0121         ?C0364:
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 176 

                                           ; SOURCE LINE # 2025
0121 110000      R     ACALL   L?1020
0124 7400        R     MOV     A,#HIGH ?SC_337
0126 F0                MOVX    @DPTR,A
0127 A3                INC     DPTR
0128 7400        R     MOV     A,#LOW ?SC_337
012A 110000      R     ACALL   L?1002
012D 110000      E     ACALL   _stricmp
0130 EF                MOV     A,R7
0131 4E                ORL     A,R6
0132 700B              JNZ     ?C0366
                                           ; SOURCE LINE # 2026
0134         ?C0913:
0134 110000      E     ACALL   FrontPanel_StartUP
                                           ; SOURCE LINE # 2027
0137 E4                CLR     A
0138 FF                MOV     R7,A
0139 110000      E     ACALL   _ScalerSetMuteManual
                                           ; SOURCE LINE # 2028
013C 010000      E     AJMP    PowerUpLedBackLight
                                           ; SOURCE LINE # 2029
013F         ?C0366:
                                           ; SOURCE LINE # 2030
013F 7400        R     MOV     A,#MBYTE ?SC_3321
0141 110000      R     ACALL   L?1081
0144 7400        R     MOV     A,#HIGH ?SC_3321
0146 F0                MOVX    @DPTR,A
0147 A3                INC     DPTR
0148 7400        R     MOV     A,#LOW ?SC_3321
014A 110000      R     ACALL   L?1002
014D 110000      E     ACALL   _stricmp
0150 EF                MOV     A,R7
0151 4E                ORL     A,R6
0152 700C              JNZ     ?C0368
                                           ; SOURCE LINE # 2031
0154 7B00        R     MOV     R3,#MBYTE ?SC_3324
0156 7A00        R     MOV     R2,#HIGH ?SC_3324
0158 7900        R     MOV     R1,#LOW ?SC_3324
015A 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 2033
015D 010000      E     AJMP    E3P_Configure
                                           ; SOURCE LINE # 2034
0160         ?C0368:
                                           ; SOURCE LINE # 2035
0160 7400        R     MOV     A,#MBYTE ?SC_3351
0162 110000      R     ACALL   L?1087
0165 7400        R     MOV     A,#HIGH ?SC_3351
0167 F0                MOVX    @DPTR,A
0168 A3                INC     DPTR
0169 7400        R     MOV     A,#LOW ?SC_3351
016B 110000      R     ACALL   L?1002
016E 110000      E     ACALL   _stricmp
0171 EF                MOV     A,R7
0172 4E                ORL     A,R6
0173 700F              JNZ     ?C0370
                                           ; SOURCE LINE # 2036
0175 110000      E     ACALL   SpiClkRecover27MSource
                                           ; SOURCE LINE # 2046
0178 90000000    E     MOV     DPTR,#?_Sspll2SetFreq?BYTE+04H
017C 7401              MOV     A,#01H
017E 110000      R     ACALL   L?1347
0181 010000      E     AJMP    _Sspll2SetFreq
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 177 

                                           ; SOURCE LINE # 2053
0184         ?C0370:
                                           ; SOURCE LINE # 2063
0184 7400        R     MOV     A,#MBYTE ?SC_3357
0186 110000      R     ACALL   L?1087
0189 7400        R     MOV     A,#HIGH ?SC_3357
018B F0                MOVX    @DPTR,A
018C A3                INC     DPTR
018D 7400        R     MOV     A,#LOW ?SC_3357
018F 110000      R     ACALL   L?1002
0192 110000      E     ACALL   _stricmp
0195 EF                MOV     A,R7
0196 4E                ORL     A,R6
0197 7042              JNZ     ?C0372
                                           ; SOURCE LINE # 2064
0199 110000      R     ACALL   L?1086
019C 9403              SUBB    A,#03H
019E 4033              JC      ?C0373
                                           ; SOURCE LINE # 2065
01A0 110000      R     ACALL   L?1014
01A3 110000      R     ACALL   L?1200
01A6 110000      R     ACALL   L?1004
01A9 110000      E     ACALL   _stricmp
01AC EF                MOV     A,R7
01AD 4E                ORL     A,R6
01AE 7003              JNZ     ?C0374
                                           ; SOURCE LINE # 2066
01B0 010000      E     AJMP    InitLogo1
01B3         ?C0374:
                                           ; SOURCE LINE # 2067
01B3 110000      R     ACALL   L?1024
01B6 7400        R     MOV     A,#HIGH ?SC_315
01B8 F0                MOVX    @DPTR,A
01B9 A3                INC     DPTR
01BA 7400        R     MOV     A,#LOW ?SC_315
01BC F0                MOVX    @DPTR,A
01BD 90000000    R     MOV     DPTR,#argv+06H
01C1 110000      R     ACALL   L?1004
01C4 110000      E     ACALL   _stricmp
01C7 EF                MOV     A,R7
01C8 4E                ORL     A,R6
01C9 7002              JNZ     ?C0376
                                           ; SOURCE LINE # 2068
01CB 8009              SJMP    ?C0914
01CD         ?C0376:
                                           ; SOURCE LINE # 2070
01CD 110000      R     ACALL   L?1358
01D0 010000      E     AJMP    _Printf
                                           ; SOURCE LINE # 2071
01D3         ?C0373:
                                           ; SOURCE LINE # 2072
                                           ; SOURCE LINE # 2074
01D3 110000      E     ACALL   InitLogo1
                                           ; SOURCE LINE # 2075
                                           ; SOURCE LINE # 2076
01D6         ?C0914:
01D6 7F01              MOV     R7,#01H
01D8 010000      E     AJMP    _RemoveLogoWithWait
                                           ; SOURCE LINE # 2077
                                           ; SOURCE LINE # 2078
                                           ; SOURCE LINE # 2079
01DB         ?C0372:
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 178 

                                           ; SOURCE LINE # 2080
01DB 7400        R     MOV     A,#MBYTE ?SC_3362
01DD 110000      R     ACALL   L?1096
01E0 7400        R     MOV     A,#HIGH ?SC_3362
01E2 F0                MOVX    @DPTR,A
01E3 A3                INC     DPTR
01E4 7400        R     MOV     A,#LOW ?SC_3362
01E6 110000      R     ACALL   L?1002
01E9 110000      E     ACALL   _stricmp
01EC EF                MOV     A,R7
01ED 4E                ORL     A,R6
01EE 7003              JNZ     ?C0382
                                           ; SOURCE LINE # 2081
01F0 110000      E     ACALL   InitInputAsDefault
                                           ; SOURCE LINE # 2082
                                           ; SOURCE LINE # 2083
                                           ; SOURCE LINE # 2084
01F3         ?C0382:
01F3 22                RET     
             ; FUNCTION monitor_init (END)

             ; FUNCTION monitor_isr (BEGIN)
                                           ; SOURCE LINE # 2086
                                           ; SOURCE LINE # 2087
                                           ; SOURCE LINE # 2088
0000 110000      R     ACALL   L?1086
0003 9402              SUBB    A,#02H
0005 5040              JNC     ?C0383
                                           ; SOURCE LINE # 2089
0007 7B00        R     MOV     R3,#MBYTE ?SC_3370
0009 7A00        R     MOV     R2,#HIGH ?SC_3370
000B 7900        R     MOV     R1,#LOW ?SC_3370
000D 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 2090
0010 30A809            JNB     SFRB_EX0,?C0384
0013 7B00        R     MOV     R3,#MBYTE ?SC_3384
0015 7A00        R     MOV     R2,#HIGH ?SC_3384
0017 7900        R     MOV     R1,#LOW ?SC_3384
0019 110000      E     ACALL   _Printf
001C         ?C0384:
                                           ; SOURCE LINE # 2091
001C 30AB09            JNB     SFRB_ET1,?C0385
001F 7B00        R     MOV     R3,#MBYTE ?SC_3389
0021 7A00        R     MOV     R2,#HIGH ?SC_3389
0023 7900        R     MOV     R1,#LOW ?SC_3389
0025 110000      E     ACALL   _Printf
0028         ?C0385:
                                           ; SOURCE LINE # 2092
0028 30AD09            JNB     SFRB_ET2,?C0386
002B 7B00        R     MOV     R3,#MBYTE ?SC_3394
002D 7A00        R     MOV     R2,#HIGH ?SC_3394
002F 7900        R     MOV     R1,#LOW ?SC_3394
0031 110000      E     ACALL   _Printf
0034         ?C0386:
                                           ; SOURCE LINE # 2093
0034 E5FB              MOV     A,SFR_E2IE
0036 605B              JZ      ?C0396
0038 7B00        R     MOV     R3,#MBYTE ?SC_3399
003A 7A00        R     MOV     R2,#HIGH ?SC_3399
003C 7900        R     MOV     R1,#LOW ?SC_3399
003E 90000000    E     MOV     DPTR,#?_Printf?BYTE+03H
0042 E5FB              MOV     A,SFR_E2IE
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 179 

0044 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2094
0045 8042              SJMP    ?C0916
0047         ?C0383:
                                           ; SOURCE LINE # 2095
0047 110000      R     ACALL   L?1017
004A 7400        R     MOV     A,#HIGH ?SC_3411
004C F0                MOVX    @DPTR,A
004D A3                INC     DPTR
004E 7400        R     MOV     A,#LOW ?SC_3411
0050 110000      R     ACALL   L?1002
0053 110000      E     ACALL   _stricmp
0056 EF                MOV     A,R7
0057 4E                ORL     A,R6
0058 7013              JNZ     ?C0389
                                           ; SOURCE LINE # 2096
005A 30A808            JNB     SFRB_EX0,?C0390
005D 7B00        R     MOV     R3,#MBYTE ?SC_3414
005F 7A00        R     MOV     R2,#HIGH ?SC_3414
0061 7900        R     MOV     R1,#LOW ?SC_3414
0063         ?C0915:
0063 8024              SJMP    ?C0916
0065         ?C0390:
                                           ; SOURCE LINE # 2097
                                           ; SOURCE LINE # 2098
0065 D2A8              SETB    SFRB_EX0
                                           ; SOURCE LINE # 2100
0067 D2AB              SETB    SFRB_ET1
                                           ; SOURCE LINE # 2102
0069 43FB04            ORL     SFR_E2IE,#04H
                                           ; SOURCE LINE # 2103
                                           ; SOURCE LINE # 2104
006C 22                RET     
006D         ?C0389:
                                           ; SOURCE LINE # 2105
006D 110000      R     ACALL   L?1026
0070 7400        R     MOV     A,#HIGH ?SC_2710
0072 F0                MOVX    @DPTR,A
0073 A3                INC     DPTR
0074 7400        R     MOV     A,#LOW ?SC_2710
0076 110000      R     ACALL   L?1002
0079 110000      E     ACALL   _stricmp
007C EF                MOV     A,R7
007D 4E                ORL     A,R6
007E 7013              JNZ     ?C0396
                                           ; SOURCE LINE # 2106
0080 20A809            JB      SFRB_EX0,?C0394
0083 7B00        R     MOV     R3,#MBYTE ?SC_3414
0085 7A00        R     MOV     R2,#HIGH ?SC_3414
0087 7900        R     MOV     R1,#LOW ?SC_3414
0089         ?C0916:
0089 010000      E     AJMP    _Printf
008C         ?C0394:
                                           ; SOURCE LINE # 2107
                                           ; SOURCE LINE # 2108
008C C2A8              CLR     SFRB_EX0
                                           ; SOURCE LINE # 2109
008E C2AB              CLR     SFRB_ET1
                                           ; SOURCE LINE # 2110
0090 E4                CLR     A
0091 F5FB              MOV     SFR_E2IE,A
                                           ; SOURCE LINE # 2111
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 180 

                                           ; SOURCE LINE # 2112
                                           ; SOURCE LINE # 2113
0093         ?C0396:
0093 22                RET     
             ; FUNCTION monitor_isr (END)

             ; FUNCTION monitor_rpixel (BEGIN)
                                           ; SOURCE LINE # 2143
                                           ; SOURCE LINE # 2144
                                           ; SOURCE LINE # 2146
0000 110000      R     ACALL   L?1086
0003 9405              SUBB    A,#05H
0005 500C              JNC     ?C0397
                                           ; SOURCE LINE # 2147
0007 7B00        R     MOV     R3,#MBYTE ?SC_3422
0009 7A00        R     MOV     R2,#HIGH ?SC_3422
000B 7900        R     MOV     R1,#LOW ?SC_3422
000D 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 2148
0010 010000      R     AJMP    Prompt
                                           ; SOURCE LINE # 2150
0013         ?C0397:
                                           ; SOURCE LINE # 2151
0013 110000      R     ACALL   L?1003
0016 110000      E     ACALL   _a2i
0019 90000000    R     MOV     DPTR,#x0
                                           ; SOURCE LINE # 2152
001D 110000      R     ACALL   L?1148
0020 110000      R     ACALL   L?1004
0023 110000      E     ACALL   _a2i
0026 90000000    R     MOV     DPTR,#y0
002A EE                MOV     A,R6
002B F0                MOVX    @DPTR,A
002C A3                INC     DPTR
                                           ; SOURCE LINE # 2153
002D 110000      R     ACALL   L?1232
0030 110000      R     ACALL   L?1004
0033 110000      E     ACALL   _a2i
0036 90000000    R     MOV     DPTR,#x1
003A EE                MOV     A,R6
003B F0                MOVX    @DPTR,A
003C A3                INC     DPTR
003D EF                MOV     A,R7
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2154
003F 90000000    R     MOV     DPTR,#argv+0CH
0043 110000      R     ACALL   L?1004
0046 110000      E     ACALL   _a2i
0049 90000000    R     MOV     DPTR,#y1
004D EE                MOV     A,R6
004E F0                MOVX    @DPTR,A
004F A3                INC     DPTR
0050 EF                MOV     A,R7
0051 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2155
0052 90000000    R     MOV     DPTR,#y0
0056 E0                MOVX    A,@DPTR
0057 FC                MOV     R4,A
0058 A3                INC     DPTR
0059 E0                MOVX    A,@DPTR
005A FD                MOV     R5,A
005B 90000000    R     MOV     DPTR,#x1
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 181 

005F E0                MOVX    A,@DPTR
0060 FA                MOV     R2,A
0061 A3                INC     DPTR
0062 E0                MOVX    A,@DPTR
0063 FB                MOV     R3,A
0064 90000000    R     MOV     DPTR,#y1
0068 E0                MOVX    A,@DPTR
0069 FF                MOV     R7,A
006A A3                INC     DPTR
006B E0                MOVX    A,@DPTR
006C 90000000    E     MOV     DPTR,#?_ReadOutputPixel?BYTE+06H
0070 CF                XCH     A,R7
0071 F0                MOVX    @DPTR,A
0072 A3                INC     DPTR
0073 EF                MOV     A,R7
0074 F0                MOVX    @DPTR,A
0075 90000000    R     MOV     DPTR,#x0
0079 E0                MOVX    A,@DPTR
007A FE                MOV     R6,A
007B A3                INC     DPTR
007C E0                MOVX    A,@DPTR
007D FF                MOV     R7,A
007E 110000      E     ACALL   _ReadOutputPixel
                                           ; SOURCE LINE # 2156
0081         ?C0398:
0081 22                RET     
             ; FUNCTION monitor_rpixel (END)

             ; FUNCTION monitor_scaler (BEGIN)
                                           ; SOURCE LINE # 2165
                                           ; SOURCE LINE # 2166
                                           ; SOURCE LINE # 2174
0000 22                RET     
             ; FUNCTION monitor_scaler (END)

             ; FUNCTION monitor_sosd (BEGIN)
                                           ; SOURCE LINE # 2177
                                           ; SOURCE LINE # 2178
                                           ; SOURCE LINE # 2179
0000 110000      R     ACALL   L?1086
0003 9402              SUBB    A,#02H
0005 5009              JNC     ?C0400
                                           ; SOURCE LINE # 2180
0007 7B00        R     MOV     R3,#MBYTE ?SC_3449
0009 7A00        R     MOV     R2,#HIGH ?SC_3449
000B 7900        R     MOV     R1,#LOW ?SC_3449
000D 010000      E     AJMP    _Puts
                                           ; SOURCE LINE # 2186
0010         ?C0400:
                                           ; SOURCE LINE # 2187
0010 7400        R     MOV     A,#MBYTE ?SC_3458
0012 110000      R     ACALL   L?1096
0015 7400        R     MOV     A,#HIGH ?SC_3458
0017 F0                MOVX    @DPTR,A
0018 A3                INC     DPTR
0019 7400        R     MOV     A,#LOW ?SC_3458
001B 110000      R     ACALL   L?1002
001E 110000      E     ACALL   _stricmp
0021 EF                MOV     A,R7
0022 4E                ORL     A,R6
0023 6003              JZ      $ + 5H
0025 010000      R     AJMP    ?C0405
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 182 

                                           ; SOURCE LINE # 2191
0028 90000000    R     MOV     DPTR,#argc
002C E0                MOVX    A,@DPTR
002D B40315            CJNE    A,#03H,?C0403
0030 90000000    R     MOV     DPTR,#argv+06H
0034 110000      R     ACALL   L?1004
0037 110000      E     ACALL   _a2i
003A 90000000    R     MOV     DPTR,#offset
003E EE                MOV     A,R6
003F F0                MOVX    @DPTR,A
0040 A3                INC     DPTR
0041 EF                MOV     A,R7
0042 F0                MOVX    @DPTR,A
0043 8008              SJMP    ?C0404
0045         ?C0403:
                                           ; SOURCE LINE # 2192
0045 E4                CLR     A
0046 90000000    R     MOV     DPTR,#offset
004A F0                MOVX    @DPTR,A
004B A3                INC     DPTR
004C F0                MOVX    @DPTR,A
004D         ?C0404:
                                           ; SOURCE LINE # 2194
004D 90000000    R     MOV     DPTR,#offset+01H
0051 E0                MOVX    A,@DPTR
0052 7F00              MOV     R7,#00H
0054 25E0              ADD     A,ACC
0056 25E0              ADD     A,ACC
0058 FE                MOV     R6,A
0059 E4                CLR     A
005A FC                MOV     R4,A
005B FD                MOV     R5,A
005C 90000000    R     MOV     DPTR,#addr
0060 110000      E     ACALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 2195
0063 90000000    R     MOV     DPTR,#addr
0067 110000      R     ACALL   L?1136
006A 2400              ADD     A,#00H
006C FF                MOV     R7,A
006D E4                CLR     A
006E 3E                ADDC    A,R6
006F FE                MOV     R6,A
0070 ED                MOV     A,R5
0071 3410              ADDC    A,#010H
0073 FD                MOV     R5,A
0074 E4                CLR     A
0075 3C                ADDC    A,R4
0076 FC                MOV     R4,A
0077 90000000    R     MOV     DPTR,#addr
007B 110000      E     ACALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 2198
007E 90000000    E     MOV     DPTR,#?_SOsd_SetLut?BYTE+04H
0082 7404              MOV     A,#04H
0084 F0                MOVX    @DPTR,A
0085 A3                INC     DPTR
0086 E4                CLR     A
0087 F0                MOVX    @DPTR,A
0088 90000000    R     MOV     DPTR,#addr
008C 110000      R     ACALL   L?1009
008F 90000000    E     MOV     DPTR,#?_SOsd_SetLut?BYTE+06H
0093 110000      E     ACALL   ?C?LSTXDATA
0096 90000000    E     MOV     DPTR,#?_SOsd_SetLut?BYTE+0AH
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 183 

009A 74FF              MOV     A,#0FFH
009C F0                MOVX    @DPTR,A
009D E4                CLR     A
009E FB                MOV     R3,A
009F FA                MOV     R2,A
00A0 FD                MOV     R5,A
00A1 7F01              MOV     R7,#01H
00A3 110000      E     ACALL   _SOsd_SetLut
                                           ; SOURCE LINE # 2199
00A6 E4                CLR     A
00A7 FD                MOV     R5,A
00A8 7F01              MOV     R7,#01H
00AA 110000      E     ACALL   _SOsd_UpdateLut
                                           ; SOURCE LINE # 2200
                                           ; SOURCE LINE # 2243
00AD         ?C0405:
00AD 22                RET     
             ; FUNCTION monitor_sosd (END)

             ; FUNCTION monitor_task (BEGIN)
                                           ; SOURCE LINE # 2247
                                           ; SOURCE LINE # 2248
                                           ; SOURCE LINE # 2249
0000 110000      R     ACALL   L?1086
0003 9402              SUBB    A,#02H
0005 501E              JNC     ?C0406
                                           ; SOURCE LINE # 2250
0007 7B00        R     MOV     R3,#MBYTE ?SC_3466
0009 7A00        R     MOV     R2,#HIGH ?SC_3466
000B 7900        R     MOV     R1,#LOW ?SC_3466
000D 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 2251
0010 110000      E     ACALL   TaskNoSignal_getCmd
0013 90000000    E     MOV     DPTR,#?_Printf?BYTE+03H
0017 EF                MOV     A,R7
0018 F0                MOVX    @DPTR,A
0019 7B00        R     MOV     R3,#MBYTE ?SC_3481
001B 7A00        R     MOV     R2,#HIGH ?SC_3481
001D 7900        R     MOV     R1,#LOW ?SC_3481
001F 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 2252
0022 010000      R     AJMP    Prompt
                                           ; SOURCE LINE # 2254
0025         ?C0406:
                                           ; SOURCE LINE # 2256
0025 110000      R     ACALL   L?1015
0028 7400        R     MOV     A,#HIGH ?SC_1366
002A F0                MOVX    @DPTR,A
002B A3                INC     DPTR
002C 7400        R     MOV     A,#LOW ?SC_1366
002E 110000      R     ACALL   L?1002
0031 110000      E     ACALL   _stricmp
0034 EF                MOV     A,R7
0035 4E                ORL     A,R6
0036 700A              JNZ     ?C0408
                                           ; SOURCE LINE # 2257
0038 750003      E     MOV     tic_task,#03H
003B 7500E8      E     MOV     tic_task+01H,#0E8H
                                           ; SOURCE LINE # 2258
003E 7F03              MOV     R7,#03H
                                           ; SOURCE LINE # 2259
0040 8007              SJMP    ?C0917
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 184 

0042         ?C0408:
                                           ; SOURCE LINE # 2260
                                           ; SOURCE LINE # 2261
0042 E4                CLR     A
0043 FF                MOV     R7,A
0044 110000      E     ACALL   _TaskSetGrid
                                           ; SOURCE LINE # 2263
0047 E4                CLR     A
0048 FF                MOV     R7,A
0049         ?C0917:
0049 110000      E     ACALL   _TaskNoSignal_setCmd
                                           ; SOURCE LINE # 2265
                                           ; SOURCE LINE # 2266
004C         ?C0407:
004C 22                RET     
             ; FUNCTION monitor_task (END)

             ; FUNCTION monitor_time (BEGIN)
                                           ; SOURCE LINE # 2270
                                           ; SOURCE LINE # 2271
                                           ; SOURCE LINE # 2275
0000 C2A9              CLR     SFRB_ET0
                                           ; SOURCE LINE # 2276
0002 90000000    R     MOV     DPTR,#time
                                           ; SOURCE LINE # 2277
0006 110000      R     ACALL   L?1162
                                           ; SOURCE LINE # 2278
0009 7B00        R     MOV     R3,#MBYTE ?SC_3491
000B 7A00        R     MOV     R2,#HIGH ?SC_3491
000D 7900        R     MOV     R1,#LOW ?SC_3491
000F 110000      R     ACALL   L?1008
0012 110000      R     ACALL   L?1056
0015 90000000    E     MOV     DPTR,#?_Printf?BYTE+07H
0019 E500        E     MOV     A,tic01
001B F0                MOVX    @DPTR,A
001C 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 2279
001F 7B64              MOV     R3,#064H
0021 110000      R     ACALL   L?1007
0024 110000      E     ACALL   ?C?ULDIV
0027 90000000    R     MOV     DPTR,#ms
002B EB                MOV     A,R3
002C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2280
002D 110000      R     ACALL   L?1008
0030 7B64              MOV     R3,#064H
                                           ; SOURCE LINE # 2281
0032 110000      R     ACALL   L?1073
0035 FB                MOV     R3,A
0036 C3                CLR     C
0037 110000      E     ACALL   ?C?ULCMP
003A 7007              JNZ     ?C0410
                                           ; SOURCE LINE # 2282
003C 90000000    R     MOV     DPTR,#sec
0040 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2283
                                           ; SOURCE LINE # 2284
                                           ; SOURCE LINE # 2285
0041 801B              SJMP    ?C0918
0043         ?C0410:
                                           ; SOURCE LINE # 2286
                                           ; SOURCE LINE # 2287
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 185 

0043 110000      R     ACALL   L?1005
0046 110000      E     ACALL   ?C?ULDIV
0049 90000000    R     MOV     DPTR,#sec
004D EB                MOV     A,R3
004E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2288
004F 110000      R     ACALL   L?1008
0052 7B3C              MOV     R3,#03CH
                                           ; SOURCE LINE # 2289
0054 110000      R     ACALL   L?1073
0057 FB                MOV     R3,A
0058 C3                CLR     C
0059 110000      E     ACALL   ?C?ULCMP
005C 700C              JNZ     ?C0412
                                           ; SOURCE LINE # 2290
005E         ?C0918:
005E 90000000    R     MOV     DPTR,#min
0062 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2291
0063 90000000    R     MOV     DPTR,#hour
0067 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2292
0068 8018              SJMP    ?C0411
006A         ?C0412:
                                           ; SOURCE LINE # 2293
                                           ; SOURCE LINE # 2294
006A 110000      R     ACALL   L?1005
006D 110000      E     ACALL   ?C?ULDIV
0070 90000000    R     MOV     DPTR,#min
0074 EB                MOV     A,R3
0075 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2295
0076 110000      R     ACALL   L?1006
0079 110000      E     ACALL   ?C?ULDIV
007C 90000000    R     MOV     DPTR,#hour
0080 EF                MOV     A,R7
0081 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2296
                                           ; SOURCE LINE # 2297
0082         ?C0411:
                                           ; SOURCE LINE # 2298
0082 7B00        R     MOV     R3,#MBYTE ?SC_3518
0084 7A00        R     MOV     R2,#HIGH ?SC_3518
0086 7900        R     MOV     R1,#LOW ?SC_3518
0088 90000000    R     MOV     DPTR,#hour
008C 110000      R     ACALL   L?1092
008F 90000000    R     MOV     DPTR,#min
0093 110000      R     ACALL   L?1300
0096 90000000    R     MOV     DPTR,#sec
009A 110000      R     ACALL   L?1360
009D 90000000    R     MOV     DPTR,#ms
00A1 E0                MOVX    A,@DPTR
00A2 90000000    E     MOV     DPTR,#?_Printf?BYTE+06H
00A6 F0                MOVX    @DPTR,A
00A7 010000      E     AJMP    _Printf
             ; FUNCTION monitor_time (END)

             ; FUNCTION monitor_touch (BEGIN)
                                           ; SOURCE LINE # 2302
                                           ; SOURCE LINE # 2303
                                           ; SOURCE LINE # 2305
0000 7400        R     MOV     A,#MBYTE ?SC_3541
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 186 

0002 110000      R     ACALL   L?1102
0005 7400        R     MOV     A,#HIGH ?SC_3541
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 7400        R     MOV     A,#LOW ?SC_3541
000B 110000      R     ACALL   L?1002
000E 110000      E     ACALL   _stricmp
0011 EF                MOV     A,R7
0012 4E                ORL     A,R6
0013 702D              JNZ     ?C0415
                                           ; SOURCE LINE # 2307
0015 90000000    R     MOV     DPTR,#argc
0019 E0                MOVX    A,@DPTR
001A 6402              XRL     A,#02H
001C 6003              JZ      $ + 5H
001E 010000      R     AJMP    ?C0449
                                           ; SOURCE LINE # 2308
0021 90000000    R     MOV     DPTR,#argv+06H
0025 110000      R     ACALL   L?1004
0028 110000      E     ACALL   _a2h
002B 90000000    R     MOV     DPTR,#n
002F EF                MOV     A,R7
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2309
0031 D3                SETB    C
0032 9404              SUBB    A,#04H
0034 4003              JC      ?C0417
0036 7404              MOV     A,#04H
0038 F0                MOVX    @DPTR,A
0039         ?C0417:
                                           ; SOURCE LINE # 2310
0039 90000000    R     MOV     DPTR,#n
003D E0                MOVX    A,@DPTR
003E FF                MOV     R7,A
003F 010000      E     AJMP    _CalibTouch
                                           ; SOURCE LINE # 2311
                                           ; SOURCE LINE # 2312
0042         ?C0415:
                                           ; SOURCE LINE # 2313
0042 7400        R     MOV     A,#MBYTE ?SC_3547
0044 110000      R     ACALL   L?1102
0047 7400        R     MOV     A,#HIGH ?SC_3547
0049 F0                MOVX    @DPTR,A
004A A3                INC     DPTR
004B 7400        R     MOV     A,#LOW ?SC_3547
004D 110000      R     ACALL   L?1002
0050 110000      E     ACALL   _stricmp
0053 EF                MOV     A,R7
0054 4E                ORL     A,R6
0055 7029              JNZ     ?C0419
                                           ; SOURCE LINE # 2314
0057 90000000    E     MOV     DPTR,#CpuTouchSkipCount
005B F0                MOVX    @DPTR,A
005C A3                INC     DPTR
005D 7464              MOV     A,#064H
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2315
0060 90000000    R     MOV     DPTR,#argc
0064 E0                MOVX    A,@DPTR
0065 6403              XRL     A,#03H
0067 6003              JZ      $ + 5H
0069 010000      R     AJMP    ?C0449
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 187 

                                           ; SOURCE LINE # 2316
006C 90000000    R     MOV     DPTR,#argv+06H
0070 110000      R     ACALL   L?1004
0073 110000      E     ACALL   _a2i
0076 90000000    E     MOV     DPTR,#CpuTouchSkipCount
007A EE                MOV     A,R6
007B F0                MOVX    @DPTR,A
007C A3                INC     DPTR
007D EF                MOV     A,R7
007E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2317
                                           ; SOURCE LINE # 2318
007F 22                RET     
0080         ?C0419:
                                           ; SOURCE LINE # 2319
0080 7400        R     MOV     A,#MBYTE ?SC_3554
0082 110000      R     ACALL   L?1108
0085 7400        R     MOV     A,#HIGH ?SC_3554
0087 F0                MOVX    @DPTR,A
0088 A3                INC     DPTR
0089 7400        R     MOV     A,#LOW ?SC_3554
008B 110000      R     ACALL   L?1002
008E 110000      E     ACALL   _stricmp
0091 EF                MOV     A,R7
0092 4E                ORL     A,R6
0093 700C              JNZ     ?C0422
                                           ; SOURCE LINE # 2320
0095 7B00        R     MOV     R3,#MBYTE ?SC_3560
0097 7A00        R     MOV     R2,#HIGH ?SC_3560
0099 7900        R     MOV     R1,#LOW ?SC_3560
009B 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 2321
009E 010000      E     AJMP    TouchDump
                                           ; SOURCE LINE # 2322
00A1         ?C0422:
                                           ; SOURCE LINE # 2324
00A1 7400        R     MOV     A,#MBYTE ?SC_3573
00A3 110000      R     ACALL   L?1108
00A6 7400        R     MOV     A,#HIGH ?SC_3573
00A8 F0                MOVX    @DPTR,A
00A9 A3                INC     DPTR
00AA 7400        R     MOV     A,#LOW ?SC_3573
00AC 110000      R     ACALL   L?1002
00AF 110000      E     ACALL   _stricmp
00B2 EF                MOV     A,R7
00B3 4E                ORL     A,R6
00B4 703B              JNZ     ?C0424
                                           ; SOURCE LINE # 2325
00B6 90000000    R     MOV     DPTR,#argc
00BA E0                MOVX    A,@DPTR
00BB 6402              XRL     A,#02H
00BD 702F              JNZ     ?C0425
                                           ; SOURCE LINE # 2326
00BF 110000      R     ACALL   L?1017
00C2 110000      R     ACALL   L?1171
00C5 110000      R     ACALL   L?1004
00C8 110000      E     ACALL   _stricmp
00CB EF                MOV     A,R7
00CC 4E                ORL     A,R6
00CD 700F              JNZ     ?C0426
                                           ; SOURCE LINE # 2327
00CF D2AB              SETB    SFRB_ET1
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 188 

                                           ; SOURCE LINE # 2328
00D1 7F01              MOV     R7,#01H
00D3 110000      E     ACALL   _SetTouchAuto
                                           ; SOURCE LINE # 2329
00D6 7B00        R     MOV     R3,#MBYTE ?SC_3579
00D8 7A00        R     MOV     R2,#HIGH ?SC_3579
00DA 7900        R     MOV     R1,#LOW ?SC_3579
                                           ; SOURCE LINE # 2330
00DC 800D              SJMP    ?C0919
00DE         ?C0426:
                                           ; SOURCE LINE # 2336
                                           ; SOURCE LINE # 2337
00DE E4                CLR     A
00DF FF                MOV     R7,A
00E0 110000      E     ACALL   _SetTouchAuto
                                           ; SOURCE LINE # 2338
00E3 C2AB              CLR     SFRB_ET1
                                           ; SOURCE LINE # 2339
00E5 7B00        R     MOV     R3,#MBYTE ?SC_3601
00E7 7A00        R     MOV     R2,#HIGH ?SC_3601
00E9 7900        R     MOV     R1,#LOW ?SC_3601
00EB         ?C0919:
00EB 010000      E     AJMP    _Puts
                                           ; SOURCE LINE # 2340
                                           ; SOURCE LINE # 2341
00EE         ?C0425:
                                           ; SOURCE LINE # 2342
                                           ; SOURCE LINE # 2343
00EE 010000      E     AJMP    GetTouch2
                                           ; SOURCE LINE # 2344
                                           ; SOURCE LINE # 2345
00F1         ?C0424:
                                           ; SOURCE LINE # 2348
00F1 7400        R     MOV     A,#MBYTE ?SC_3624
00F3 110000      R     ACALL   L?1112
00F6 7400        R     MOV     A,#HIGH ?SC_3624
00F8 F0                MOVX    @DPTR,A
00F9 A3                INC     DPTR
00FA 7400        R     MOV     A,#LOW ?SC_3624
00FC 110000      R     ACALL   L?1002
00FF 110000      E     ACALL   _stricmp
0102 EF                MOV     A,R7
0103 4E                ORL     A,R6
0104 6003              JZ      $ + 5H
0106 010000      R     AJMP    ?C0430
                                           ; SOURCE LINE # 2349
0109 90000000    R     MOV     DPTR,#argc
010D E0                MOVX    A,@DPTR
010E 6403              XRL     A,#03H
0110 702F              JNZ     ?C0431
                                           ; SOURCE LINE # 2350
0112 110000      R     ACALL   L?1018
0115 110000      R     ACALL   L?1171
0118 110000      R     ACALL   L?1004
011B 110000      E     ACALL   _stricmp
011E EF                MOV     A,R7
011F 4E                ORL     A,R6
0120 700F              JNZ     ?C0432
                                           ; SOURCE LINE # 2351
0122 7B00        R     MOV     R3,#MBYTE ?SC_3630
0124 7A00        R     MOV     R2,#HIGH ?SC_3630
0126 7900        R     MOV     R1,#LOW ?SC_3630
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 189 

0128 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 2352
012B C2AB              CLR     SFRB_ET1
                                           ; SOURCE LINE # 2353
012D 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 2354
012F 800D              SJMP    ?C0920
0131         ?C0432:
                                           ; SOURCE LINE # 2355
                                           ; SOURCE LINE # 2356
0131 7B00        R     MOV     R3,#MBYTE ?SC_3652
0133 7A00        R     MOV     R2,#HIGH ?SC_3652
0135 7900        R     MOV     R1,#LOW ?SC_3652
0137 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 2357
013A D2AB              SETB    SFRB_ET1
                                           ; SOURCE LINE # 2358
013C E4                CLR     A
013D FF                MOV     R7,A
013E         ?C0920:
013E 010000      E     AJMP    _SetTraceAuto
                                           ; SOURCE LINE # 2359
                                           ; SOURCE LINE # 2360
0141         ?C0431:
                                           ; SOURCE LINE # 2361
                                           ; SOURCE LINE # 2367
0141 110000      R     ACALL   L?1337
                                           ; SOURCE LINE # 2368
0144 110000      R     ACALL   L?1338
                                           ; SOURCE LINE # 2369
0147 110000      R     ACALL   L?1339
                                           ; SOURCE LINE # 2370
014A 110000      R     ACALL   L?1340
                                           ; SOURCE LINE # 2371
014D 010000      R     AJMP    ?C0921
0150         ?C0435:
                                           ; SOURCE LINE # 2372
0150 110000      E     ACALL   RS_ready
0153 EF                MOV     A,R7
0154 6003              JZ      $ + 5H
0156 010000      R     AJMP    ?C0449
                                           ; SOURCE LINE # 2373
0159 7FF4              MOV     R7,#0F4H
015B 7E01              MOV     R6,#01H
015D 110000      E     ACALL   _delay1ms
                                           ; SOURCE LINE # 2374
0160 90000000    E     MOV     DPTR,#CpuTouchPressed
0164 E0                MOVX    A,@DPTR
0165 6044              JZ      ?C0437
                                           ; SOURCE LINE # 2375
0167 90000000    R     MOV     DPTR,#temp
016B E0                MOVX    A,@DPTR
016C FF                MOV     R7,A
016D 90000000    E     MOV     DPTR,#CpuTouchChanged
0171 E0                MOVX    A,@DPTR
0172 6F                XRL     A,R7
0173 6036              JZ      ?C0437
                                           ; SOURCE LINE # 2376
0175 7B00        R     MOV     R3,#MBYTE ?SC_3675
0177 7A00        R     MOV     R2,#HIGH ?SC_3675
0179 7900        R     MOV     R1,#LOW ?SC_3675
017B 90000000    E     MOV     DPTR,#TouchX
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 190 

017F 110000      R     ACALL   L?1060
0182 F0                MOVX    @DPTR,A
0183 90000000    E     MOV     DPTR,#TouchY
0187 E0                MOVX    A,@DPTR
0188 FF                MOV     R7,A
0189 A3                INC     DPTR
018A E0                MOVX    A,@DPTR
018B 90000000    E     MOV     DPTR,#?_Printf?BYTE+05H
018F CF                XCH     A,R7
0190 F0                MOVX    @DPTR,A
0191 A3                INC     DPTR
0192 EF                MOV     A,R7
0193 F0                MOVX    @DPTR,A
0194 90000000    E     MOV     DPTR,#TouchZ1
0198 E0                MOVX    A,@DPTR
0199 FF                MOV     R7,A
019A A3                INC     DPTR
019B E0                MOVX    A,@DPTR
019C 90000000    E     MOV     DPTR,#?_Printf?BYTE+07H
01A0 CF                XCH     A,R7
01A1 F0                MOVX    @DPTR,A
01A2 A3                INC     DPTR
01A3 EF                MOV     A,R7
01A4 F0                MOVX    @DPTR,A
01A5 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 2377
01A8 110000      R     ACALL   L?1337
                                           ; SOURCE LINE # 2378
                                           ; SOURCE LINE # 2379
01AB         ?C0437:
                                           ; SOURCE LINE # 2380
01AB 90000000    E     MOV     DPTR,#CpuAUX0_Changed
01AF E0                MOVX    A,@DPTR
01B0 FF                MOV     R7,A
01B1 90000000    R     MOV     DPTR,#atemp
01B5 E0                MOVX    A,@DPTR
01B6 6F                XRL     A,R7
01B7 6013              JZ      ?C0439
                                           ; SOURCE LINE # 2381
01B9 7B00        R     MOV     R3,#MBYTE ?SC_3720
01BB 7A00        R     MOV     R2,#HIGH ?SC_3720
01BD 7900        R     MOV     R1,#LOW ?SC_3720
01BF 110000      R     ACALL   L?1088
01C2 90000000    E     MOV     DPTR,#CpuAUX0
01C6 110000      R     ACALL   L?1170
                                           ; SOURCE LINE # 2382
01C9 110000      R     ACALL   L?1338
                                           ; SOURCE LINE # 2383
01CC         ?C0439:
                                           ; SOURCE LINE # 2384
01CC 90000000    E     MOV     DPTR,#CpuAUX1_Changed
01D0 E0                MOVX    A,@DPTR
01D1 FF                MOV     R7,A
01D2 90000000    R     MOV     DPTR,#atemp+01H
01D6 E0                MOVX    A,@DPTR
01D7 6F                XRL     A,R7
01D8 6013              JZ      ?C0440
                                           ; SOURCE LINE # 2385
01DA 7B00        R     MOV     R3,#MBYTE ?SC_3747
01DC 7A00        R     MOV     R2,#HIGH ?SC_3747
01DE 7900        R     MOV     R1,#LOW ?SC_3747
01E0 110000      R     ACALL   L?1088
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 191 

01E3 90000000    E     MOV     DPTR,#CpuAUX1
01E7 110000      R     ACALL   L?1170
                                           ; SOURCE LINE # 2386
01EA 110000      R     ACALL   L?1339
                                           ; SOURCE LINE # 2387
01ED         ?C0440:
                                           ; SOURCE LINE # 2388
01ED 90000000    E     MOV     DPTR,#CpuAUX2_Changed
01F1 E0                MOVX    A,@DPTR
01F2 FF                MOV     R7,A
01F3 90000000    R     MOV     DPTR,#atemp+02H
01F7 E0                MOVX    A,@DPTR
01F8 6F                XRL     A,R7
01F9 6013              JZ      ?C0441
                                           ; SOURCE LINE # 2389
01FB 7B00        R     MOV     R3,#MBYTE ?SC_3774
01FD 7A00        R     MOV     R2,#HIGH ?SC_3774
01FF 7900        R     MOV     R1,#LOW ?SC_3774
0201 110000      R     ACALL   L?1089
0204 90000000    E     MOV     DPTR,#CpuAUX2
0208 110000      R     ACALL   L?1243
                                           ; SOURCE LINE # 2390
020B 110000      R     ACALL   L?1340
                                           ; SOURCE LINE # 2391
020E         ?C0441:
                                           ; SOURCE LINE # 2392
020E 90000000    E     MOV     DPTR,#CpuAUX3_Changed
0212 E0                MOVX    A,@DPTR
0213 FF                MOV     R7,A
0214 90000000    R     MOV     DPTR,#atemp+03H
0218 E0                MOVX    A,@DPTR
0219 6F                XRL     A,R7
021A 7003              JNZ     $ + 5H
021C 010000      R     AJMP    ?C0435
                                           ; SOURCE LINE # 2393
021F 7B00        R     MOV     R3,#MBYTE ?SC_3801
0221 7A00        R     MOV     R2,#HIGH ?SC_3801
0223 7900        R     MOV     R1,#LOW ?SC_3801
0225 A3                INC     DPTR
0226 110000      R     ACALL   L?1090
0229 90000000    E     MOV     DPTR,#CpuAUX3
022D 110000      R     ACALL   L?1243
                                           ; SOURCE LINE # 2394
0230         ?C0921:
0230 90000000    E     MOV     DPTR,#CpuAUX3_Changed
0234 E0                MOVX    A,@DPTR
0235 90000000    R     MOV     DPTR,#atemp+03H
0239 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2395
                                           ; SOURCE LINE # 2396
023A 010000      R     AJMP    ?C0435
                                           ; SOURCE LINE # 2397
                                           ; SOURCE LINE # 2398
023D         ?C0430:
                                           ; SOURCE LINE # 2400
023D 7400        R     MOV     A,#MBYTE ?SC_3828
023F 110000      R     ACALL   L?1112
0242 7400        R     MOV     A,#HIGH ?SC_3828
0244 F0                MOVX    @DPTR,A
0245 A3                INC     DPTR
0246 7400        R     MOV     A,#LOW ?SC_3828
0248 110000      R     ACALL   L?1002
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 192 

024B 110000      E     ACALL   _stricmp
024E EF                MOV     A,R7
024F 4E                ORL     A,R6
0250 7025              JNZ     ?C0449
                                           ; SOURCE LINE # 2401
0252 C200        E     CLR     tsc_debug
                                           ; SOURCE LINE # 2402
0254 90000000    R     MOV     DPTR,#argc
0258 E0                MOVX    A,@DPTR
0259 B40212            CJNE    A,#02H,?C0445
                                           ; SOURCE LINE # 2403
025C 110000      R     ACALL   L?1018
025F 110000      R     ACALL   L?1172
0262 110000      R     ACALL   L?1004
0265 110000      E     ACALL   _stricmp
0268 EF                MOV     A,R7
0269 4E                ORL     A,R6
026A 7002              JNZ     ?C0445
                                           ; SOURCE LINE # 2404
026C D200        E     SETB    tsc_debug
                                           ; SOURCE LINE # 2405
026E         ?C0445:
                                           ; SOURCE LINE # 2406
026E 300003            JNB     tsc_debug,?C0447
                                           ; SOURCE LINE # 2407
0271 C2AB              CLR     SFRB_ET1
                                           ; SOURCE LINE # 2408
0273 22                RET     
0274         ?C0447:
                                           ; SOURCE LINE # 2409
                                           ; SOURCE LINE # 2410
0274 110000      E     ACALL   InitAuxADC
                                           ; SOURCE LINE # 2411
                                           ; SOURCE LINE # 2412
                                           ; SOURCE LINE # 2414
0277         ?C0449:
0277 22                RET     
0278         L?1170:
0278 E0                MOVX    A,@DPTR
0279 FF                MOV     R7,A
027A A3                INC     DPTR
027B E0                MOVX    A,@DPTR
027C 90000000    E     MOV     DPTR,#?_Printf?BYTE+04H
0280 CF                XCH     A,R7
0281 F0                MOVX    @DPTR,A
0282 A3                INC     DPTR
0283 EF                MOV     A,R7
0284 F0                MOVX    @DPTR,A
0285 110000      E     ACALL   _Printf
0288 22                RET     
0289         L?1243:
0289 E0                MOVX    A,@DPTR
028A FF                MOV     R7,A
028B A3                INC     DPTR
028C E0                MOVX    A,@DPTR
028D 90000000    E     MOV     DPTR,#?_Printf?BYTE+04H
0291 CF                XCH     A,R7
0292 F0                MOVX    @DPTR,A
0293 A3                INC     DPTR
0294 EF                MOV     A,R7
0295 F0                MOVX    @DPTR,A
0296 110000      E     ACALL   _Printf
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 193 

0299 22                RET     
             ; FUNCTION monitor_touch (END)

             ; FUNCTION Prompt (BEGIN)
                                           ; SOURCE LINE # 2454
                                           ; SOURCE LINE # 2455
                                           ; SOURCE LINE # 2461
0000 90000000    R     MOV     DPTR,#MonAddress
0004 E0                MOVX    A,@DPTR
0005 FF                MOV     R7,A
0006 B48A08            CJNE    A,#08AH,?C0450
                                           ; SOURCE LINE # 2462
0009 7B00        R     MOV     R3,#MBYTE ?SC_3838
000B 7A00        R     MOV     R2,#HIGH ?SC_3838
000D 7900        R     MOV     R1,#LOW ?SC_3838
000F 800B              SJMP    ?C0922
0011         ?C0450:
                                           ; SOURCE LINE # 2465
0011 7B00        R     MOV     R3,#MBYTE ?SC_3856
0013 7A00        R     MOV     R2,#HIGH ?SC_3856
0015 7900        R     MOV     R1,#LOW ?SC_3856
0017 90000000    R     MOV     DPTR,#MonAddress
001B E0                MOVX    A,@DPTR
001C         ?C0922:
001C 90000000    E     MOV     DPTR,#?_Printf?BYTE+03H
0020 F0                MOVX    @DPTR,A
0021 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 2466
0024         ?C0452:
0024 22                RET     
             ; FUNCTION Prompt (END)

             ; FUNCTION _Mon_tx (BEGIN)
                                           ; SOURCE LINE # 2486
;---- Variable 'ch' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 2487
                                           ; SOURCE LINE # 2488
0000 010000      E     AJMP    _RS_tx
             ; FUNCTION _Mon_tx (END)

             ; FUNCTION _SetMonAddress (BEGIN)
                                           ; SOURCE LINE # 2525
;---- Variable 'addr' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 2526
                                           ; SOURCE LINE # 2527
0000 90000000    R     MOV     DPTR,#MonAddress
0004 EF                MOV     A,R7
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2528
0006 22                RET     
             ; FUNCTION _SetMonAddress (END)

             ; FUNCTION _MonIncDecI2C (BEGIN)
                                           ; SOURCE LINE # 2545
;---- Variable 'inc' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 2546
                                           ; SOURCE LINE # 2549
0000 EF                MOV     A,R7
0001 14                DEC     A
0002 601E              JZ      ?C0457
0004 24F7              ADD     A,#0F7H
0006 6022              JZ      ?C0458
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 194 

0008 14                DEC     A
0009 6033              JZ      ?C0459
000B 240B              ADD     A,#0BH
000D 703A              JNZ     ?C0455
                                           ; SOURCE LINE # 2550
000F         ?C0456:
000F 110000      R     ACALL   L?1134
0012 24FF              ADD     A,#0FFH
0014 FF                MOV     R7,A
0015 EE                MOV     A,R6
0016 34FF              ADDC    A,#0FFH
0018 FE                MOV     R6,A
0019 ED                MOV     A,R5
001A 34FF              ADDC    A,#0FFH
001C FD                MOV     R5,A
001D EC                MOV     A,R4
001E 34FF              ADDC    A,#0FFH
0020 8024              SJMP    ?C0930
                                           ; SOURCE LINE # 2551
0022         ?C0457:
0022 110000      R     ACALL   L?1134
0025 110000      R     ACALL   L?1267
0028         ?C0928:
0028 801C              SJMP    ?C0930
                                           ; SOURCE LINE # 2552
002A         ?C0458:
002A 110000      R     ACALL   L?1135
002D C3                CLR     C
002E 9410              SUBB    A,#010H
0030 FF                MOV     R7,A
0031 EE                MOV     A,R6
0032 9400              SUBB    A,#00H
0034 FE                MOV     R6,A
0035 ED                MOV     A,R5
0036 9400              SUBB    A,#00H
0038 FD                MOV     R5,A
0039 EC                MOV     A,R4
003A 9400              SUBB    A,#00H
003C         ?C0929:
003C 8008              SJMP    ?C0930
                                           ; SOURCE LINE # 2553
003E         ?C0459:
003E 110000      R     ACALL   L?1135
0041 2410              ADD     A,#010H
0043 110000      R     ACALL   L?1268
0046         ?C0930:
0046 110000      R     ACALL   L?1193
                                           ; SOURCE LINE # 2554
0049         ?C0455:
                                           ; SOURCE LINE # 2556
0049 90000000    R     MOV     DPTR,#MonAddress
004D E0                MOVX    A,@DPTR
004E F9                MOV     R1,A
004F B48A06            CJNE    A,#08AH,?C0460
                                           ; SOURCE LINE # 2557
0052 110000      R     ACALL   L?1128
0055 F0                MOVX    @DPTR,A
0056 8021              SJMP    ?C0461
0058         ?C0460:
                                           ; SOURCE LINE # 2560
0058 AF01              MOV     R7,AR1
005A C007              PUSH    AR7
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 195 

005C 90000000    R     MOV     DPTR,#MonIndexLen
0060 110000      R     ACALL   L?1282
0063 C005              PUSH    AR5
0065 110000      R     ACALL   L?1111
0068 90000000    R     MOV     DPTR,#MonWdata
006C 110000      R     ACALL   L?1009
006F 110000      R     ACALL   L?1320
0072 D005              POP     AR5
0074 D007              POP     AR7
0076 110000      E     ACALL   _WriteI2C_multi
0079         ?C0461:
                                           ; SOURCE LINE # 2563
0079 200003      R     JB      echo,$ + 6H
007C 010000      R     AJMP    ?C0462
                                           ; SOURCE LINE # 2564
007F 7B00        R     MOV     R3,#MBYTE ?SC_3870
0081 7A00        R     MOV     R2,#HIGH ?SC_3870
0083 7900        R     MOV     R1,#LOW ?SC_3870
0085 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 2565
0088 90000000    R     MOV     DPTR,#MonIndexLen
008C E0                MOVX    A,@DPTR
008D B4020B            CJNE    A,#02H,?C0463
0090 7B00        R     MOV     R3,#MBYTE ?SC_3877
0092 7A00        R     MOV     R2,#HIGH ?SC_3877
0094 7900        R     MOV     R1,#LOW ?SC_3877
0096 110000      R     ACALL   L?1059
0099 8009              SJMP    ?C0923
009B         ?C0463:
                                           ; SOURCE LINE # 2566
009B 7B00        R     MOV     R3,#MBYTE ?SC_3884
009D 7A00        R     MOV     R2,#HIGH ?SC_3884
009F 7900        R     MOV     R1,#LOW ?SC_3884
00A1 110000      R     ACALL   L?1143
00A4         ?C0923:
00A4 F0                MOVX    @DPTR,A
00A5 110000      E     ACALL   _Printf
00A8         ?C0464:
                                           ; SOURCE LINE # 2567
00A8 90000000    R     MOV     DPTR,#MonDataLen
00AC E0                MOVX    A,@DPTR
00AD B40412            CJNE    A,#04H,?C0465
00B0 7B00        R     MOV     R3,#MBYTE ?SC_3892
00B2 7A00        R     MOV     R2,#HIGH ?SC_3892
00B4 7900        R     MOV     R1,#LOW ?SC_3892
00B6 90000000    R     MOV     DPTR,#MonWdata
00BA 110000      R     ACALL   L?1009
00BD 110000      R     ACALL   L?1056
00C0 8024              SJMP    ?C0931
00C2         ?C0465:
                                           ; SOURCE LINE # 2568
00C2 90000000    R     MOV     DPTR,#MonDataLen
00C6 E0                MOVX    A,@DPTR
00C7 B4020C            CJNE    A,#02H,?C0467
00CA 90000000    R     MOV     DPTR,#MonWdata
00CE 110000      R     ACALL   L?1322
00D1 110000      R     ACALL   L?1060
00D4 800F              SJMP    ?C0924
00D6         ?C0467:
                                           ; SOURCE LINE # 2569
00D6 7B00        R     MOV     R3,#MBYTE ?SC_3905
00D8 7A00        R     MOV     R2,#HIGH ?SC_3905
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 196 

00DA 7900        R     MOV     R1,#LOW ?SC_3905
00DC 90000000    R     MOV     DPTR,#MonWdata
00E0 A3                INC     DPTR
00E1 A3                INC     DPTR
00E2 110000      R     ACALL   L?1144
00E5         ?C0924:
00E5 F0                MOVX    @DPTR,A
00E6         ?C0931:
00E6 110000      E     ACALL   _Printf
00E9         ?C0466:
                                           ; SOURCE LINE # 2571
00E9 90000000    R     MOV     DPTR,#MonAddress
00ED E0                MOVX    A,@DPTR
00EE FB                MOV     R3,A
00EF B48A05            CJNE    A,#08AH,?C0469
                                           ; SOURCE LINE # 2572
00F2 110000      R     ACALL   L?1082
00F5 800C              SJMP    ?C0925
00F7         ?C0469:
                                           ; SOURCE LINE # 2575
00F7 AF03              MOV     R7,AR3
00F9 90000000    R     MOV     DPTR,#MonIndexLen
00FD 110000      R     ACALL   L?1110
0100 110000      E     ACALL   _ReadI2C_multi
0103         ?C0925:
0103 90000000    R     MOV     DPTR,#dTemp
0107 110000      E     ACALL   ?C?LSTXDATA
010A         ?C0470:
                                           ; SOURCE LINE # 2577
010A 7B00        R     MOV     R3,#MBYTE ?SC_3912
010C 7A00        R     MOV     R2,#HIGH ?SC_3912
010E 7900        R     MOV     R1,#LOW ?SC_3912
0110 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 2578
0113 90000000    R     MOV     DPTR,#MonIndexLen
0117 E0                MOVX    A,@DPTR
0118 B4020B            CJNE    A,#02H,?C0471
011B 7B00        R     MOV     R3,#MBYTE ?SC_3877
011D 7A00        R     MOV     R2,#HIGH ?SC_3877
011F 7900        R     MOV     R1,#LOW ?SC_3877
0121 110000      R     ACALL   L?1059
0124 8009              SJMP    ?C0926
0126         ?C0471:
                                           ; SOURCE LINE # 2579
0126 7B00        R     MOV     R3,#MBYTE ?SC_3884
0128 7A00        R     MOV     R2,#HIGH ?SC_3884
012A 7900        R     MOV     R1,#LOW ?SC_3884
012C 110000      R     ACALL   L?1143
012F         ?C0926:
012F F0                MOVX    @DPTR,A
0130 110000      E     ACALL   _Printf
0133         ?C0472:
                                           ; SOURCE LINE # 2580
0133 90000000    R     MOV     DPTR,#MonDataLen
0137 E0                MOVX    A,@DPTR
0138 B40412            CJNE    A,#04H,?C0473
013B 7B00        R     MOV     R3,#MBYTE ?SC_3892
013D 7A00        R     MOV     R2,#HIGH ?SC_3892
013F 7900        R     MOV     R1,#LOW ?SC_3892
0141 90000000    R     MOV     DPTR,#dTemp
0145 110000      R     ACALL   L?1009
0148 110000      R     ACALL   L?1056
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 197 

014B 8024              SJMP    ?C0932
014D         ?C0473:
                                           ; SOURCE LINE # 2581
014D 90000000    R     MOV     DPTR,#MonDataLen
0151 E0                MOVX    A,@DPTR
0152 B4020C            CJNE    A,#02H,?C0475
0155 90000000    R     MOV     DPTR,#dTemp
0159 110000      R     ACALL   L?1322
015C 110000      R     ACALL   L?1060
015F 800F              SJMP    ?C0927
0161         ?C0475:
                                           ; SOURCE LINE # 2582
0161 7B00        R     MOV     R3,#MBYTE ?SC_3905
0163 7A00        R     MOV     R2,#HIGH ?SC_3905
0165 7900        R     MOV     R1,#LOW ?SC_3905
0167 90000000    R     MOV     DPTR,#dTemp
016B A3                INC     DPTR
016C A3                INC     DPTR
016D 110000      R     ACALL   L?1144
0170         ?C0927:
0170 F0                MOVX    @DPTR,A
0171         ?C0932:
0171 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 2583
0174         ?C0462:
                                           ; SOURCE LINE # 2584
0174 010000      R     AJMP    Prompt
             ; FUNCTION _MonIncDecI2C (END)

             ; FUNCTION _MonReadI2C_multi (BEGIN)
                                           ; SOURCE LINE # 2594
0000 90000000    R     MOV     DPTR,#idx_len
0004 ED                MOV     A,R5
0005 F0                MOVX    @DPTR,A
0006 A3                INC     DPTR
0007 EB                MOV     A,R3
0008 F0                MOVX    @DPTR,A
0009 90000000    R     MOV     DPTR,#f_id
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2595
                                           ; SOURCE LINE # 2603
000F 2402              ADD     A,#02H
0011 110000      R     ACALL   L?1085
0014 110000      R     ACALL   L?1206
0017 5006              JNC     ?C0478
                                           ; SOURCE LINE # 2604
0019 110000      R     ACALL   L?1304
001C 010000      E     AJMP    _Printf
                                           ; SOURCE LINE # 2611
001F         ?C0478:
                                           ; SOURCE LINE # 2613
001F 90000000    R     MOV     DPTR,#f_id
0023 E0                MOVX    A,@DPTR
0024 600F              JZ      ?C0480
                                           ; SOURCE LINE # 2614
0026 110000      R     ACALL   L?1003
0029 110000      E     ACALL   _a2h
002C 90000000    R     MOV     DPTR,#Slave
                                           ; SOURCE LINE # 2615
0030 110000      R     ACALL   L?1306
                                           ; SOURCE LINE # 2616
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 198 

0033 800E              SJMP    ?C0933
0035         ?C0480:
                                           ; SOURCE LINE # 2617
                                           ; SOURCE LINE # 2618
0035 90000000    R     MOV     DPTR,#MonAddress
0039 E0                MOVX    A,@DPTR
003A 90000000    R     MOV     DPTR,#Slave
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2619
003F 90000000    R     MOV     DPTR,#argv+03H
0043         ?C0933:
0043 110000      R     ACALL   L?1004
0046 110000      E     ACALL   _a2h
0049 110000      R     ACALL   L?1209
                                           ; SOURCE LINE # 2620
004C         ?C0481:
                                           ; SOURCE LINE # 2621
004C 90000000    R     MOV     DPTR,#Slave
0050 E0                MOVX    A,@DPTR
0051 FB                MOV     R3,A
0052 648A              XRL     A,#08AH
0054 7010              JNZ     ?C0482
                                           ; SOURCE LINE # 2622
0056 90000000    R     MOV     DPTR,#MonIndexLen
005A E0                MOVX    A,@DPTR
005B B40103            CJNE    A,#01H,?C0483
                                           ; SOURCE LINE # 2623
                                           ; SOURCE LINE # 2624
005E 110000      R     ACALL   L?1117
                                           ; SOURCE LINE # 2625
0061         ?C0483:
                                           ; SOURCE LINE # 2626
0061 110000      R     ACALL   L?1082
                                           ; SOURCE LINE # 2627
0064 800C              SJMP    ?C0936
0066         ?C0482:
                                           ; SOURCE LINE # 2629
                                           ; SOURCE LINE # 2630
0066 AF03              MOV     R7,AR3
0068 90000000    R     MOV     DPTR,#idx_len
006C 110000      R     ACALL   L?1110
006F 110000      E     ACALL   _ReadI2C_multi
0072         ?C0936:
0072 90000000    R     MOV     DPTR,#dTemp
0076 110000      E     ACALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 2631
0079         ?C0484:
                                           ; SOURCE LINE # 2633
0079 30005A            JNB     echo,?C0485
                                           ; SOURCE LINE # 2634
007C 110000      R     ACALL   L?1308
007F 90000000    R     MOV     DPTR,#Slave
0083 110000      R     ACALL   L?1092
0086 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 2635
0089 90000000    R     MOV     DPTR,#idx_len
008D E0                MOVX    A,@DPTR
008E B40205            CJNE    A,#02H,?C0486
0091 110000      R     ACALL   L?1057
0094 8003              SJMP    ?C0934
0096         ?C0486:
                                           ; SOURCE LINE # 2636
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 199 

0096 110000      R     ACALL   L?1141
0099         ?C0934:
0099 F0                MOVX    @DPTR,A
009A 110000      E     ACALL   _Printf
009D         ?C0487:
                                           ; SOURCE LINE # 2638
009D 90000000    R     MOV     DPTR,#data_len
00A1 E0                MOVX    A,@DPTR
00A2 B4040F            CJNE    A,#04H,?C0488
00A5 110000      R     ACALL   L?1362
00A8 90000000    R     MOV     DPTR,#dTemp
00AC 110000      R     ACALL   L?1009
00AF 110000      R     ACALL   L?1056
00B2 801F              SJMP    ?C0937
00B4         ?C0488:
                                           ; SOURCE LINE # 2639
00B4 90000000    R     MOV     DPTR,#data_len
00B8 E0                MOVX    A,@DPTR
00B9 B4020C            CJNE    A,#02H,?C0490
00BC 90000000    R     MOV     DPTR,#dTemp
00C0 110000      R     ACALL   L?1271
00C3 110000      R     ACALL   L?1060
00C6 800A              SJMP    ?C0935
00C8         ?C0490:
                                           ; SOURCE LINE # 2640
00C8 90000000    R     MOV     DPTR,#dTemp
00CC 110000      R     ACALL   L?1295
00CF 110000      R     ACALL   L?1144
00D2         ?C0935:
00D2 F0                MOVX    @DPTR,A
00D3         ?C0937:
00D3 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 2641
00D6         ?C0485:
                                           ; SOURCE LINE # 2642
00D6 90000000    R     MOV     DPTR,#dTemp
00DA 110000      R     ACALL   L?1009
00DD 110000      R     ACALL   L?1194
                                           ; SOURCE LINE # 2643
00E0         ?C0479:
00E0 22                RET     
             ; FUNCTION _MonReadI2C_multi (END)

             ; FUNCTION _MonWriteI2C_multi (BEGIN)
                                           ; SOURCE LINE # 2645
0000 90000000    R     MOV     DPTR,#idx_len
0004 ED                MOV     A,R5
0005 F0                MOVX    @DPTR,A
0006 A3                INC     DPTR
0007 EB                MOV     A,R3
0008 F0                MOVX    @DPTR,A
0009 90000000    R     MOV     DPTR,#f_id
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2646
                                           ; SOURCE LINE # 2650
000F 2403              ADD     A,#03H
0011 110000      R     ACALL   L?1085
0014 110000      R     ACALL   L?1206
0017 5006              JNC     ?C0492
                                           ; SOURCE LINE # 2651
0019 110000      R     ACALL   L?1304
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 200 

001C 010000      R     AJMP    ?C0943
                                           ; SOURCE LINE # 2656
001F         ?C0492:
                                           ; SOURCE LINE # 2657
001F 90000000    R     MOV     DPTR,#f_id
0023 E0                MOVX    A,@DPTR
0024 601C              JZ      ?C0494
                                           ; SOURCE LINE # 2658
0026 110000      R     ACALL   L?1003
0029 110000      E     ACALL   _a2h
002C 90000000    R     MOV     DPTR,#Slave
                                           ; SOURCE LINE # 2659
0030 110000      R     ACALL   L?1306
0033 110000      R     ACALL   L?1004
0036 110000      E     ACALL   _a2h
0039 110000      R     ACALL   L?1209
                                           ; SOURCE LINE # 2660
003C 90000000    R     MOV     DPTR,#argv+09H
                                           ; SOURCE LINE # 2661
0040 8016              SJMP    ?C0938
0042         ?C0494:
                                           ; SOURCE LINE # 2662
                                           ; SOURCE LINE # 2663
0042 90000000    R     MOV     DPTR,#MonAddress
0046 E0                MOVX    A,@DPTR
0047 90000000    R     MOV     DPTR,#Slave
                                           ; SOURCE LINE # 2664
004B 110000      R     ACALL   L?1002
004E 110000      E     ACALL   _a2h
0051 90000000    R     MOV     DPTR,#MonIndex
                                           ; SOURCE LINE # 2665
0055 110000      R     ACALL   L?1148
0058         ?C0938:
0058 110000      R     ACALL   L?1004
005B 110000      E     ACALL   _a2h
005E 110000      R     ACALL   L?1194
                                           ; SOURCE LINE # 2666
0061         ?C0495:
                                           ; SOURCE LINE # 2668
0061 90000000    R     MOV     DPTR,#Slave
0065 E0                MOVX    A,@DPTR
0066 F9                MOV     R1,A
0067 648A              XRL     A,#08AH
0069 7011              JNZ     ?C0496
                                           ; SOURCE LINE # 2669
006B 90000000    R     MOV     DPTR,#MonIndexLen
006F E0                MOVX    A,@DPTR
0070 B40103            CJNE    A,#01H,?C0497
                                           ; SOURCE LINE # 2670
                                           ; SOURCE LINE # 2671
0073 110000      R     ACALL   L?1117
                                           ; SOURCE LINE # 2672
0076         ?C0497:
                                           ; SOURCE LINE # 2673
0076 110000      R     ACALL   L?1128
0079 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2674
007A 8021              SJMP    ?C0498
007C         ?C0496:
                                           ; SOURCE LINE # 2676
                                           ; SOURCE LINE # 2677
007C AF01              MOV     R7,AR1
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 201 

007E C007              PUSH    AR7
0080 90000000    R     MOV     DPTR,#idx_len
0084 110000      R     ACALL   L?1282
0087 C005              PUSH    AR5
0089 110000      R     ACALL   L?1111
008C 90000000    R     MOV     DPTR,#MonWdata
0090 110000      R     ACALL   L?1009
0093 110000      R     ACALL   L?1320
0096 D005              POP     AR5
0098 D007              POP     AR7
009A 110000      E     ACALL   _WriteI2C_multi
                                           ; SOURCE LINE # 2678
009D         ?C0498:
                                           ; SOURCE LINE # 2680
009D 30007B            JNB     echo,?C0493
                                           ; SOURCE LINE # 2681
00A0 90000000    R     MOV     DPTR,#Slave
00A4 E0                MOVX    A,@DPTR
00A5 FB                MOV     R3,A
00A6 B48A05            CJNE    A,#08AH,?C0500
                                           ; SOURCE LINE # 2682
00A9 110000      R     ACALL   L?1083
00AC 800C              SJMP    ?C0939
00AE         ?C0500:
                                           ; SOURCE LINE # 2685
00AE AF03              MOV     R7,AR3
00B0 90000000    R     MOV     DPTR,#idx_len
00B4 110000      R     ACALL   L?1110
00B7 110000      E     ACALL   _ReadI2C_multi
00BA         ?C0939:
00BA 90000000    R     MOV     DPTR,#dTemp
00BE 110000      E     ACALL   ?C?LSTXDATA
00C1         ?C0501:
                                           ; SOURCE LINE # 2687
00C1 110000      R     ACALL   L?1308
00C4 90000000    R     MOV     DPTR,#Slave
00C8 110000      R     ACALL   L?1092
00CB 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 2688
00CE 90000000    R     MOV     DPTR,#idx_len
00D2 E0                MOVX    A,@DPTR
00D3 B40205            CJNE    A,#02H,?C0502
00D6 110000      R     ACALL   L?1057
00D9 8003              SJMP    ?C0940
00DB         ?C0502:
                                           ; SOURCE LINE # 2689
00DB 110000      R     ACALL   L?1141
00DE         ?C0940:
00DE F0                MOVX    @DPTR,A
00DF 110000      E     ACALL   _Printf
00E2         ?C0503:
                                           ; SOURCE LINE # 2690
00E2 90000000    R     MOV     DPTR,#data_len
00E6 E0                MOVX    A,@DPTR
00E7 B4040F            CJNE    A,#04H,?C0504
00EA 110000      R     ACALL   L?1362
00ED 90000000    R     MOV     DPTR,#dTemp
00F1 110000      R     ACALL   L?1009
00F4 110000      R     ACALL   L?1056
00F7         ?C0942:
00F7 801F              SJMP    ?C0943
00F9         ?C0504:
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 202 

                                           ; SOURCE LINE # 2691
00F9 90000000    R     MOV     DPTR,#data_len
00FD E0                MOVX    A,@DPTR
00FE B4020C            CJNE    A,#02H,?C0506
0101 90000000    R     MOV     DPTR,#dTemp
0105 110000      R     ACALL   L?1271
0108 110000      R     ACALL   L?1060
010B 800A              SJMP    ?C0941
010D         ?C0506:
                                           ; SOURCE LINE # 2692
010D 90000000    R     MOV     DPTR,#dTemp
0111 110000      R     ACALL   L?1295
0114 110000      R     ACALL   L?1144
0117         ?C0941:
0117 F0                MOVX    @DPTR,A
0118         ?C0943:
0118 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 2693
                                           ; SOURCE LINE # 2694
011B         ?C0493:
011B 22                RET     
             ; FUNCTION _MonWriteI2C_multi (END)

             ; FUNCTION _MonToggleBit_multi (BEGIN)
                                           ; SOURCE LINE # 2695
0000 90000000    R     MOV     DPTR,#idx_len
0004 ED                MOV     A,R5
0005 F0                MOVX    @DPTR,A
0006 A3                INC     DPTR
0007 EB                MOV     A,R3
0008 F0                MOVX    @DPTR,A
;---- Variable 'f_id' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 2696
                                           ; SOURCE LINE # 2703
0009 A3                INC     DPTR
000A EF                MOV     A,R7
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2705
000C 110000      R     ACALL   L?1086
000F 9405              SUBB    A,#05H
0011 5006              JNC     ?C0508
                                           ; SOURCE LINE # 2706
0013 110000      R     ACALL   L?1305
0016 010000      R     AJMP    ?C0951
                                           ; SOURCE LINE # 2711
0019         ?C0508:
                                           ; SOURCE LINE # 2712
0019 110000      R     ACALL   L?1003
001C 110000      E     ACALL   _a2h
001F 90000000    R     MOV     DPTR,#Slave
                                           ; SOURCE LINE # 2713
0023 110000      R     ACALL   L?1307
0026 110000      R     ACALL   L?1004
0029 110000      E     ACALL   _a2h
002C 110000      R     ACALL   L?1210
                                           ; SOURCE LINE # 2715
002F 90000000    R     MOV     DPTR,#idx_len
0033 E0                MOVX    A,@DPTR
0034 6401              XRL     A,#01H
0036 702C              JNZ     ?C0510
0038 A3                INC     DPTR
0039 E0                MOVX    A,@DPTR
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 203 

003A 6401              XRL     A,#01H
003C 7026              JNZ     ?C0510
                                           ; SOURCE LINE # 2716
003E 90000000    R     MOV     DPTR,#argv+09H
0042 110000      R     ACALL   L?1004
0045 110000      E     ACALL   _a2h
0048 7804              MOV     R0,#04H
004A 110000      E     ACALL   ?C?ULSHR
004D EF                MOV     A,R7
004E 540F              ANL     A,#0FH
0050 FF                MOV     R7,A
0051 90000000    R     MOV     DPTR,#FromBit
                                           ; SOURCE LINE # 2717
0055 110000      R     ACALL   L?1232
0058 110000      R     ACALL   L?1004
005B 110000      E     ACALL   _a2h
005E EF                MOV     A,R7
005F 540F              ANL     A,#0FH
0061 FF                MOV     R7,A
                                           ; SOURCE LINE # 2718
0062 801C              SJMP    ?C0948
0064         ?C0510:
                                           ; SOURCE LINE # 2719
                                           ; SOURCE LINE # 2720
0064 90000000    R     MOV     DPTR,#argv+09H
0068 110000      R     ACALL   L?1004
006B 110000      E     ACALL   _a2h
006E 7808              MOV     R0,#08H
0070 110000      E     ACALL   ?C?ULSHR
0073 90000000    R     MOV     DPTR,#FromBit
                                           ; SOURCE LINE # 2721
0077 110000      R     ACALL   L?1232
007A 110000      R     ACALL   L?1004
007D 110000      E     ACALL   _a2h
0080         ?C0948:
0080 90000000    R     MOV     DPTR,#ToBit
0084 EF                MOV     A,R7
0085 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2722
0086         ?C0511:
                                           ; SOURCE LINE # 2723
0086 90000000    R     MOV     DPTR,#argv+0CH
008A 110000      R     ACALL   L?1004
008D 110000      E     ACALL   _a2h
0090 90000000    R     MOV     DPTR,#MonMask
0094 110000      E     ACALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 2724
0097 90000000    R     MOV     DPTR,#data_len
009B E0                MOVX    A,@DPTR
009C FF                MOV     R7,A
009D 7404              MOV     A,#04H
009F 7E00              MOV     R6,#00H
00A1 A807              MOV     R0,AR7
00A3 08                INC     R0
00A4 8005              SJMP    ?C0825
00A6         ?C0824:
00A6 C3                CLR     C
00A7 33                RLC     A
00A8 CE                XCH     A,R6
00A9 33                RLC     A
00AA CE                XCH     A,R6
00AB         ?C0825:
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 204 

00AB D8F9              DJNZ    R0,?C0824
00AD FF                MOV     R7,A
00AE EE                MOV     A,R6
00AF 33                RLC     A
00B0 95E0              SUBB    A,ACC
00B2 110000      R     ACALL   L?1156
                                           ; SOURCE LINE # 2725
00B5 90000000    R     MOV     DPTR,#ToBit
00B9 E0                MOVX    A,@DPTR
00BA FE                MOV     R6,A
00BB 90000000    R     MOV     DPTR,#FromBit
00BF E0                MOVX    A,@DPTR
00C0 FF                MOV     R7,A
00C1 C3                CLR     C
00C2 9E                SUBB    A,R6
00C3 4029              JC      ?C0513
00C5 E4                CLR     A
00C6 FC                MOV     R4,A
00C7 FD                MOV     R5,A
00C8 FE                MOV     R6,A
00C9 90000000    R     MOV     DPTR,#mask
00CD 110000      R     ACALL   L?1075
00D0 FB                MOV     R3,A
00D1 D3                SETB    C
00D2 110000      E     ACALL   ?C?ULCMP
00D5 4017              JC      ?C0513
00D7 90000000    R     MOV     DPTR,#ToBit
00DB E0                MOVX    A,@DPTR
00DC FF                MOV     R7,A
00DD E4                CLR     A
00DE FC                MOV     R4,A
00DF FD                MOV     R5,A
00E0 FE                MOV     R6,A
00E1 A3                INC     DPTR
00E2 E0                MOVX    A,@DPTR
00E3 F8                MOV     R0,A
00E4 A3                INC     DPTR
00E5 A3                INC     DPTR
00E6 A3                INC     DPTR
00E7 E0                MOVX    A,@DPTR
00E8 D3                SETB    C
00E9 110000      E     ACALL   ?C?ULCMP
00EC 5009              JNC     ?C0512
00EE         ?C0513:
                                           ; SOURCE LINE # 2726
00EE 7B00        R     MOV     R3,#MBYTE ?SC_3998
00F0 7A00        R     MOV     R2,#HIGH ?SC_3998
00F2 7900        R     MOV     R1,#LOW ?SC_3998
00F4         ?C0947:
00F4 010000      R     AJMP    ?C0951
                                           ; SOURCE LINE # 2728
00F7         ?C0512:
                                           ; SOURCE LINE # 2730
00F7 90000000    R     MOV     DPTR,#data_len
00FB E0                MOVX    A,@DPTR
00FC 7009              JNZ     ?C0514
                                           ; SOURCE LINE # 2731
00FE 7B00        R     MOV     R3,#MBYTE ?SC_4040
0100 7A00        R     MOV     R2,#HIGH ?SC_4040
0102 7900        R     MOV     R1,#LOW ?SC_4040
0104         ?C0949:
0104 010000      R     AJMP    ?C0951
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 205 

                                           ; SOURCE LINE # 2733
0107         ?C0514:
                                           ; SOURCE LINE # 2734
0107 E4                CLR     A
0108 FF                MOV     R7,A
0109 FE                MOV     R6,A
010A 110000      R     ACALL   L?1156
                                           ; SOURCE LINE # 2735
010D 90000000    R     MOV     DPTR,#data_len
0111 E0                MOVX    A,@DPTR
0112 75F008            MOV     B,#08H
0115 A4                MUL     AB
0116 C3                CLR     C
0117 9401              SUBB    A,#01H
;---- Variable 'i' assigned to Register 'R3' ----
0119 FB                MOV     R3,A
011A         ?C0515:
                                           ; SOURCE LINE # 2736
                                           ; SOURCE LINE # 2737
011A 90000000    R     MOV     DPTR,#mask
011E 110000      R     ACALL   L?1009
0121 7801              MOV     R0,#01H
0123 110000      E     ACALL   ?C?LSHL
0126 110000      R     ACALL   L?1157
                                           ; SOURCE LINE # 2738
0129 90000000    R     MOV     DPTR,#FromBit
012D E0                MOVX    A,@DPTR
012E FF                MOV     R7,A
012F EB                MOV     A,R3
0130 D3                SETB    C
0131 9F                SUBB    A,R7
0132 5013              JNC     ?C0517
0134 A3                INC     DPTR
0135 E0                MOVX    A,@DPTR
0136 FF                MOV     R7,A
0137 EB                MOV     A,R3
0138 C3                CLR     C
0139 9F                SUBB    A,R7
013A 400B              JC      ?C0517
                                           ; SOURCE LINE # 2739
013C A3                INC     DPTR
013D 110000      R     ACALL   L?1136
0140 4401              ORL     A,#01H
0142 FF                MOV     R7,A
0143 EC                MOV     A,R4
0144 110000      R     ACALL   L?1157
0147         ?C0517:
                                           ; SOURCE LINE # 2740
0147 EB                MOV     A,R3
0148 6003              JZ      ?C0516
                                           ; SOURCE LINE # 2741
014A         ?C0518:
                                           ; SOURCE LINE # 2742
014A 1B                DEC     R3
                                           ; SOURCE LINE # 2743
014B 80CD              SJMP    ?C0515
014D         ?C0516:
                                           ; SOURCE LINE # 2745
014D 90000000    R     MOV     DPTR,#Slave
0151 E0                MOVX    A,@DPTR
0152 648A              XRL     A,#08AH
0154 704A              JNZ     ?C0519
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 206 

                                           ; SOURCE LINE # 2746
0156 90000000    R     MOV     DPTR,#MonIndexLen
015A E0                MOVX    A,@DPTR
015B B40103            CJNE    A,#01H,?C0520
                                           ; SOURCE LINE # 2747
                                           ; SOURCE LINE # 2748
015E 110000      R     ACALL   L?1118
                                           ; SOURCE LINE # 2749
0161         ?C0520:
                                           ; SOURCE LINE # 2750
0161 110000      R     ACALL   L?1083
0164 110000      R     ACALL   L?1323
                                           ; SOURCE LINE # 2751
0167 90000000    R     MOV     DPTR,#mask
016B 110000      R     ACALL   L?1009
016E 110000      E     ACALL   ?C?LNOT
0171 90000000    R     MOV     DPTR,#dTemp
0175 110000      R     ACALL   L?1075
0178 110000      R     ACALL   L?1211
017B C004              PUSH    AR4
017D C005              PUSH    AR5
017F C006              PUSH    AR6
0181 AB07              MOV     R3,AR7
0183 90000000    R     MOV     DPTR,#mask
0187 110000      R     ACALL   L?1009
018A A3                INC     DPTR
018B 110000      R     ACALL   L?1075
018E 110000      R     ACALL   L?1211
0191 D002              POP     AR2
0193 D001              POP     AR1
0195 D000              POP     AR0
0197 110000      R     ACALL   L?1192
                                           ; SOURCE LINE # 2752
019A 110000      R     ACALL   L?1129
019D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2753
019E 8063              SJMP    ?C0521
01A0         ?C0519:
                                           ; SOURCE LINE # 2755
                                           ; SOURCE LINE # 2756
01A0 90000000    R     MOV     DPTR,#Slave
01A4 E0                MOVX    A,@DPTR
01A5 FF                MOV     R7,A
01A6 110000      R     ACALL   L?1109
01A9 110000      E     ACALL   _ReadI2C_multi
01AC 110000      R     ACALL   L?1323
                                           ; SOURCE LINE # 2757
01AF 90000000    R     MOV     DPTR,#mask
01B3 110000      R     ACALL   L?1009
01B6 110000      E     ACALL   ?C?LNOT
01B9 90000000    R     MOV     DPTR,#dTemp
01BD 110000      R     ACALL   L?1075
01C0 110000      R     ACALL   L?1212
01C3 C004              PUSH    AR4
01C5 C005              PUSH    AR5
01C7 C006              PUSH    AR6
01C9 AB07              MOV     R3,AR7
01CB 90000000    R     MOV     DPTR,#mask
01CF 110000      R     ACALL   L?1009
01D2 A3                INC     DPTR
01D3 110000      R     ACALL   L?1075
01D6 110000      R     ACALL   L?1212
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 207 

01D9 D002              POP     AR2
01DB D001              POP     AR1
01DD D000              POP     AR0
01DF 110000      R     ACALL   L?1192
                                           ; SOURCE LINE # 2758
01E2 90000000    R     MOV     DPTR,#idx_len
01E6 110000      R     ACALL   L?1283
01E9 C005              PUSH    AR5
01EB 110000      R     ACALL   L?1111
01EE 90000000    R     MOV     DPTR,#MonWdata
01F2 110000      R     ACALL   L?1009
01F5 110000      R     ACALL   L?1321
01F8 90000000    R     MOV     DPTR,#Slave
01FC E0                MOVX    A,@DPTR
01FD FF                MOV     R7,A
01FE D005              POP     AR5
0200 110000      E     ACALL   _WriteI2C_multi
                                           ; SOURCE LINE # 2759
0203         ?C0521:
                                           ; SOURCE LINE # 2761
0203 300075            JNB     echo,?C0509
                                           ; SOURCE LINE # 2762
0206 90000000    R     MOV     DPTR,#Slave
020A E0                MOVX    A,@DPTR
020B FB                MOV     R3,A
020C B48A05            CJNE    A,#08AH,?C0523
                                           ; SOURCE LINE # 2763
020F 110000      R     ACALL   L?1083
0212 8008              SJMP    ?C0944
0214         ?C0523:
                                           ; SOURCE LINE # 2766
0214 AF03              MOV     R7,AR3
0216 110000      R     ACALL   L?1109
0219 110000      E     ACALL   _ReadI2C_multi
021C         ?C0944:
021C 110000      R     ACALL   L?1324
021F         ?C0524:
                                           ; SOURCE LINE # 2768
021F 110000      R     ACALL   L?1309
0222 90000000    R     MOV     DPTR,#Slave
0226 110000      R     ACALL   L?1092
0229 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 2769
022C 90000000    R     MOV     DPTR,#idx_len
0230 E0                MOVX    A,@DPTR
0231 B40205            CJNE    A,#02H,?C0525
0234 110000      R     ACALL   L?1058
0237 8003              SJMP    ?C0945
0239         ?C0525:
                                           ; SOURCE LINE # 2770
0239 110000      R     ACALL   L?1142
023C         ?C0945:
023C F0                MOVX    @DPTR,A
023D 110000      E     ACALL   _Printf
0240         ?C0526:
                                           ; SOURCE LINE # 2771
0240 90000000    R     MOV     DPTR,#data_len
0244 E0                MOVX    A,@DPTR
0245 B4040F            CJNE    A,#04H,?C0527
0248 110000      R     ACALL   L?1363
024B 90000000    R     MOV     DPTR,#dTemp
024F 110000      R     ACALL   L?1009
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 208 

0252 110000      R     ACALL   L?1056
0255         ?C0950:
0255 8021              SJMP    ?C0951
0257         ?C0527:
                                           ; SOURCE LINE # 2772
0257 90000000    R     MOV     DPTR,#data_len
025B E0                MOVX    A,@DPTR
025C B4020D            CJNE    A,#02H,?C0529
025F 90000000    R     MOV     DPTR,#dTemp
0263 110000      R     ACALL   L?1272
0266 A3                INC     DPTR
0267 110000      R     ACALL   L?1060
026A 800B              SJMP    ?C0946
026C         ?C0529:
                                           ; SOURCE LINE # 2773
026C 90000000    R     MOV     DPTR,#dTemp
0270 110000      R     ACALL   L?1296
0273 A3                INC     DPTR
0274 110000      R     ACALL   L?1144
0277         ?C0946:
0277 F0                MOVX    @DPTR,A
0278         ?C0951:
0278 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 2774
                                           ; SOURCE LINE # 2775
027B         ?C0509:
027B 22                RET     
             ; FUNCTION _MonToggleBit_multi (END)

             ; FUNCTION _MonDumpI2C_multi (BEGIN)
                                           ; SOURCE LINE # 2778
0000 90000000    R     MOV     DPTR,#idx_len
0004 ED                MOV     A,R5
0005 F0                MOVX    @DPTR,A
0006 A3                INC     DPTR
0007 EB                MOV     A,R3
0008 F0                MOVX    @DPTR,A
;---- Variable 'id' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 2779
                                           ; SOURCE LINE # 2781
0009 90000000    R     MOV     DPTR,#Slave
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2786
000F 602D              JZ      ?C0531
                                           ; SOURCE LINE # 2787
0011 110000      R     ACALL   L?1003
0014 110000      E     ACALL   _a2h
0017 90000000    R     MOV     DPTR,#Slave
001B EF                MOV     A,R7
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2788
001D 110000      R     ACALL   L?1086
0020 9403              SUBB    A,#03H
0022 400D              JC      ?C0532
0024 90000000    R     MOV     DPTR,#argv+06H
0028 110000      R     ACALL   L?1004
002B 110000      E     ACALL   _a2h
002E 110000      R     ACALL   L?1210
0031         ?C0532:
                                           ; SOURCE LINE # 2789
0031 110000      R     ACALL   L?1086
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 209 

0034 9404              SUBB    A,#04H
0036 403C              JC      ?C0956
0038 90000000    R     MOV     DPTR,#argv+09H
003C 8025              SJMP    ?C0955
003E         ?C0531:
                                           ; SOURCE LINE # 2793
                                           ; SOURCE LINE # 2794
003E 90000000    R     MOV     DPTR,#MonAddress
0042 E0                MOVX    A,@DPTR
0043 90000000    R     MOV     DPTR,#Slave
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2795
0048 110000      R     ACALL   L?1086
004B 9402              SUBB    A,#02H
004D 4009              JC      ?C0536
004F 110000      R     ACALL   L?1003
0052 110000      E     ACALL   _a2h
0055 110000      R     ACALL   L?1210
0058         ?C0536:
                                           ; SOURCE LINE # 2796
0058 110000      R     ACALL   L?1086
005B 9403              SUBB    A,#03H
005D 4015              JC      ?C0537
005F 90000000    R     MOV     DPTR,#argv+06H
0063         ?C0955:
0063 110000      R     ACALL   L?1004
0066 110000      E     ACALL   _a2h
0069 90000000    R     MOV     DPTR,#ToMonIndex
006D EE                MOV     A,R6
006E F0                MOVX    @DPTR,A
006F A3                INC     DPTR
0070 EF                MOV     A,R7
0071 F0                MOVX    @DPTR,A
0072 8017              SJMP    ?C0535
0074         ?C0537:
                                           ; SOURCE LINE # 2797
0074         ?C0956:
0074 90000000    R     MOV     DPTR,#MonIndex+01H
0078 E0                MOVX    A,@DPTR
0079 2407              ADD     A,#07H
007B FE                MOV     R6,A
007C 90000000    R     MOV     DPTR,#MonIndex
0080 E0                MOVX    A,@DPTR
0081 3400              ADDC    A,#00H
0083 90000000    R     MOV     DPTR,#ToMonIndex
0087 F0                MOVX    @DPTR,A
0088 A3                INC     DPTR
0089 CE                XCH     A,R6
008A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2799
008B         ?C0535:
                                           ; SOURCE LINE # 2801
008B 90000000    R     MOV     DPTR,#Slave
008F E0                MOVX    A,@DPTR
0090 648A              XRL     A,#08AH
0092 701C              JNZ     ?C0539
                                           ; SOURCE LINE # 2802
0094 90000000    R     MOV     DPTR,#MonIndexLen
0098 E0                MOVX    A,@DPTR
0099 6401              XRL     A,#01H
009B 7013              JNZ     ?C0539
                                           ; SOURCE LINE # 2803
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 210 

                                           ; SOURCE LINE # 2804
009D 110000      R     ACALL   L?1118
                                           ; SOURCE LINE # 2805
00A0 90000000    R     MOV     DPTR,#MonIndex
00A4 E0                MOVX    A,@DPTR
00A5 FE                MOV     R6,A
00A6 90000000    R     MOV     DPTR,#ToMonIndex
00AA E0                MOVX    A,@DPTR
00AB 4E                ORL     A,R6
00AC F0                MOVX    @DPTR,A
00AD A3                INC     DPTR
00AE E0                MOVX    A,@DPTR
00AF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2806
                                           ; SOURCE LINE # 2807
00B0         ?C0539:
                                           ; SOURCE LINE # 2808
00B0 90000000    R     MOV     DPTR,#MonIndex
00B4 E0                MOVX    A,@DPTR
00B5 FE                MOV     R6,A
00B6 A3                INC     DPTR
00B7 E0                MOVX    A,@DPTR
00B8 FF                MOV     R7,A
00B9 90000000    R     MOV     DPTR,#temp_MonIndex
00BD EE                MOV     A,R6
00BE F0                MOVX    @DPTR,A
00BF A3                INC     DPTR
00C0 EF                MOV     A,R7
00C1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2809
00C2 90000000    R     MOV     DPTR,#i
00C6 EE                MOV     A,R6
00C7 F0                MOVX    @DPTR,A
00C8 A3                INC     DPTR
00C9 EF                MOV     A,R7
00CA F0                MOVX    @DPTR,A
00CB         ?C0541:
00CB 90000000    R     MOV     DPTR,#ToMonIndex
00CF E0                MOVX    A,@DPTR
00D0 FE                MOV     R6,A
00D1 A3                INC     DPTR
00D2 E0                MOVX    A,@DPTR
00D3 FF                MOV     R7,A
00D4 D3                SETB    C
00D5 90000000    R     MOV     DPTR,#i+01H
00D9 E0                MOVX    A,@DPTR
00DA 9F                SUBB    A,R7
00DB 90000000    R     MOV     DPTR,#i
00DF E0                MOVX    A,@DPTR
00E0 9E                SUBB    A,R6
00E1 4003              JC      $ + 5H
00E3 010000      R     AJMP    ?C0552
                                           ; SOURCE LINE # 2810
00E6 90000000    R     MOV     DPTR,#Slave
00EA E0                MOVX    A,@DPTR
00EB FB                MOV     R3,A
00EC B48A05            CJNE    A,#08AH,?C0544
                                           ; SOURCE LINE # 2811
00EF 110000      R     ACALL   L?1083
00F2 800C              SJMP    ?C0952
00F4         ?C0544:
                                           ; SOURCE LINE # 2814
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 211 

00F4 AF03              MOV     R7,AR3
00F6 90000000    R     MOV     DPTR,#idx_len
00FA 110000      R     ACALL   L?1110
00FD 110000      E     ACALL   _ReadI2C_multi
0100         ?C0952:
0100 90000000    R     MOV     DPTR,#dTemp
0104 110000      E     ACALL   ?C?LSTXDATA
0107         ?C0545:
                                           ; SOURCE LINE # 2817
0107 110000      R     ACALL   L?1309
010A 90000000    R     MOV     DPTR,#Slave
010E 110000      R     ACALL   L?1092
0111 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 2818
0114 90000000    R     MOV     DPTR,#idx_len
0118 E0                MOVX    A,@DPTR
0119 B4020B            CJNE    A,#02H,?C0546
011C 7B00        R     MOV     R3,#MBYTE ?SC_4057
011E 7A00        R     MOV     R2,#HIGH ?SC_4057
0120 7900        R     MOV     R1,#LOW ?SC_4057
0122 110000      R     ACALL   L?1059
0125 8009              SJMP    ?C0953
0127         ?C0546:
                                           ; SOURCE LINE # 2819
0127 7B00        R     MOV     R3,#MBYTE ?SC_4065
0129 7A00        R     MOV     R2,#HIGH ?SC_4065
012B 7900        R     MOV     R1,#LOW ?SC_4065
012D 110000      R     ACALL   L?1143
0130         ?C0953:
0130 F0                MOVX    @DPTR,A
0131 110000      E     ACALL   _Printf
0134         ?C0547:
                                           ; SOURCE LINE # 2820
0134 90000000    R     MOV     DPTR,#data_len
0138 E0                MOVX    A,@DPTR
0139 B40412            CJNE    A,#04H,?C0548
013C 7B00        R     MOV     R3,#MBYTE ?SC_4074
013E 7A00        R     MOV     R2,#HIGH ?SC_4074
0140 7900        R     MOV     R1,#LOW ?SC_4074
0142 90000000    R     MOV     DPTR,#dTemp
0146 110000      R     ACALL   L?1009
0149 110000      R     ACALL   L?1056
014C 8029              SJMP    ?C0957
014E         ?C0548:
                                           ; SOURCE LINE # 2821
014E 90000000    R     MOV     DPTR,#data_len
0152 E0                MOVX    A,@DPTR
0153 B40211            CJNE    A,#02H,?C0550
0156 7B00        R     MOV     R3,#MBYTE ?SC_4080
0158 7A00        R     MOV     R2,#HIGH ?SC_4080
015A 7900        R     MOV     R1,#LOW ?SC_4080
015C 90000000    R     MOV     DPTR,#dTemp
0160 A3                INC     DPTR
0161 A3                INC     DPTR
0162 110000      R     ACALL   L?1060
0165 800F              SJMP    ?C0954
0167         ?C0550:
                                           ; SOURCE LINE # 2822
0167 7B00        R     MOV     R3,#MBYTE ?SC_1835
0169 7A00        R     MOV     R2,#HIGH ?SC_1835
016B 7900        R     MOV     R1,#LOW ?SC_1835
016D 90000000    R     MOV     DPTR,#dTemp
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 212 

0171 A3                INC     DPTR
0172 A3                INC     DPTR
0173 110000      R     ACALL   L?1144
0176         ?C0954:
0176 F0                MOVX    @DPTR,A
0177         ?C0957:
0177 110000      E     ACALL   _Printf
017A         ?C0549:
                                           ; SOURCE LINE # 2824
017A 90000000    R     MOV     DPTR,#data_len
017E E0                MOVX    A,@DPTR
017F FF                MOV     R7,A
0180 7E00              MOV     R6,#00H
0182 90000000    R     MOV     DPTR,#MonIndex+01H
0186 E0                MOVX    A,@DPTR
0187 2F                ADD     A,R7
0188 F0                MOVX    @DPTR,A
0189 90000000    R     MOV     DPTR,#MonIndex
018D E0                MOVX    A,@DPTR
018E 3E                ADDC    A,R6
018F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2825
0190 90000000    R     MOV     DPTR,#i+01H
0194 E0                MOVX    A,@DPTR
0195 2F                ADD     A,R7
0196 F0                MOVX    @DPTR,A
0197 90000000    R     MOV     DPTR,#i
019B E0                MOVX    A,@DPTR
019C 3E                ADDC    A,R6
019D F0                MOVX    @DPTR,A
019E 010000      R     AJMP    ?C0541
                                           ; SOURCE LINE # 2861
01A1         ?C0552:
01A1 22                RET     
             ; FUNCTION _MonDumpI2C_multi (END)

             ; FUNCTION MonWait (BEGIN)
                                           ; SOURCE LINE # 2866
                                           ; SOURCE LINE # 2867
                                           ; SOURCE LINE # 2870
0000 110000      R     ACALL   L?1086
0003 9405              SUBB    A,#05H
0005 5006              JNC     ?C0553
                                           ; SOURCE LINE # 2871
0007 110000      R     ACALL   L?1305
000A 010000      R     AJMP    ?C0958
                                           ; SOURCE LINE # 2876
000D         ?C0553:
                                           ; SOURCE LINE # 2877
000D 110000      R     ACALL   L?1003
0010 110000      E     ACALL   _a2h
0013 90000000    R     MOV     DPTR,#reg
                                           ; SOURCE LINE # 2878
0017 110000      R     ACALL   L?1307
001A 110000      R     ACALL   L?1004
001D 110000      E     ACALL   _a2h
0020 90000000    R     MOV     DPTR,#mask
                                           ; SOURCE LINE # 2879
0024 110000      R     ACALL   L?1232
0027 110000      R     ACALL   L?1004
002A 110000      E     ACALL   _a2h
002D 90000000    R     MOV     DPTR,#result
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 213 

0031 EF                MOV     A,R7
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2880
0033 90000000    R     MOV     DPTR,#argv+0CH
0037 110000      R     ACALL   L?1004
003A 110000      E     ACALL   _a2h
003D 90000000    R     MOV     DPTR,#max
0041 EE                MOV     A,R6
0042 F0                MOVX    @DPTR,A
0043 A3                INC     DPTR
0044 EF                MOV     A,R7
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2881
0046 E4                CLR     A
0047 90000000    R     MOV     DPTR,#i
004B F0                MOVX    @DPTR,A
004C A3                INC     DPTR
004D F0                MOVX    @DPTR,A
004E         ?C0555:
004E 110000      R     ACALL   L?1233
0051 504D              JNC     ?C0556
                                           ; SOURCE LINE # 2882
0053 90000000    R     MOV     DPTR,#reg
0057 E0                MOVX    A,@DPTR
0058 759300      E     MOV     DPX,#?C?XDATASEG
005B 2500        E     ADD     A,regTW88+01H
005D F582              MOV     DPL,A
005F E4                CLR     A
0060 3500        E     ADDC    A,regTW88
0062 110000      R     ACALL   L?1289
0065 FF                MOV     R7,A
0066 90000000    R     MOV     DPTR,#mask
006A E0                MOVX    A,@DPTR
006B FE                MOV     R6,A
006C EF                MOV     A,R7
006D 5E                ANL     A,R6
006E FF                MOV     R7,A
006F A3                INC     DPTR
0070 E0                MOVX    A,@DPTR
0071 B50713            CJNE    A,AR7,?C0558
                                           ; SOURCE LINE # 2883
0074 7B00        R     MOV     R3,#MBYTE ?SC_4085
0076 7A00        R     MOV     R2,#HIGH ?SC_4085
0078 7900        R     MOV     R1,#LOW ?SC_4085
007A 90000000    R     MOV     DPTR,#i
007E 110000      R     ACALL   L?1060
0081 F0                MOVX    @DPTR,A
0082 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 2884
0085 8019              SJMP    ?C0556
                                           ; SOURCE LINE # 2885
0087         ?C0558:
                                           ; SOURCE LINE # 2886
0087 7F02              MOV     R7,#02H
0089 7E00              MOV     R6,#00H
008B 110000      E     ACALL   _delay1ms
                                           ; SOURCE LINE # 2887
008E 90000000    R     MOV     DPTR,#i+01H
0092 E0                MOVX    A,@DPTR
0093 04                INC     A
0094 F0                MOVX    @DPTR,A
0095 70B7              JNZ     ?C0555
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 214 

0097 90000000    R     MOV     DPTR,#i
009B E0                MOVX    A,@DPTR
009C 04                INC     A
009D F0                MOVX    @DPTR,A
009E         ?C0826:
009E 80AE              SJMP    ?C0555
00A0         ?C0556:
                                           ; SOURCE LINE # 2888
00A0 110000      R     ACALL   L?1233
00A3 4027              JC      ?C0554
                                           ; SOURCE LINE # 2889
00A5 7B00        R     MOV     R3,#MBYTE ?SC_4094
00A7 7A00        R     MOV     R2,#HIGH ?SC_4094
00A9 7900        R     MOV     R1,#LOW ?SC_4094
00AB 90000000    R     MOV     DPTR,#reg
00AF 110000      R     ACALL   L?1092
00B2 90000000    R     MOV     DPTR,#mask
00B6 110000      R     ACALL   L?1301
00B9 90000000    R     MOV     DPTR,#result
00BD 110000      R     ACALL   L?1360
00C0 90000000    E     MOV     DPTR,#?_Printf?BYTE+06H
00C4 EE                MOV     A,R6
00C5 F0                MOVX    @DPTR,A
00C6 A3                INC     DPTR
00C7 EF                MOV     A,R7
00C8 F0                MOVX    @DPTR,A
00C9         ?C0958:
00C9 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 2890
00CC         ?C0554:
00CC 22                RET     
             ; FUNCTION MonWait (END)

             ; FUNCTION MonHelp (BEGIN)
                                           ; SOURCE LINE # 2895
                                           ; SOURCE LINE # 2896
                                           ; SOURCE LINE # 2897
0000 110000      R     ACALL   L?1310
0003 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 2898
0006 7B00        R     MOV     R3,#MBYTE ?SC_4185
0008 7A00        R     MOV     R2,#HIGH ?SC_4185
000A 7900        R     MOV     R1,#LOW ?SC_4185
                                           ; SOURCE LINE # 2899
000C 110000      R     ACALL   L?1216
                                           ; SOURCE LINE # 2900
000F 7B00        R     MOV     R3,#MBYTE ?SC_4243
0011 7A00        R     MOV     R2,#HIGH ?SC_4243
0013 7900        R     MOV     R1,#LOW ?SC_4243
0015 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 2901
0018 7B00        R     MOV     R3,#MBYTE ?SC_4279
001A 7A00        R     MOV     R2,#HIGH ?SC_4279
001C 7900        R     MOV     R1,#LOW ?SC_4279
001E 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 2902
0021 7B00        R     MOV     R3,#MBYTE ?SC_4316
0023 7A00        R     MOV     R2,#HIGH ?SC_4316
0025 7900        R     MOV     R1,#LOW ?SC_4316
0027 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 2903
002A 7B00        R     MOV     R3,#MBYTE ?SC_4347
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 215 

002C 7A00        R     MOV     R2,#HIGH ?SC_4347
002E 7900        R     MOV     R1,#LOW ?SC_4347
0030 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 2904
0033 7B00        R     MOV     R3,#MBYTE ?SC_4398
0035 7A00        R     MOV     R2,#HIGH ?SC_4398
0037 7900        R     MOV     R1,#LOW ?SC_4398
0039 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 2905
003C 7B00        R     MOV     R3,#MBYTE ?SC_4459
003E 7A00        R     MOV     R2,#HIGH ?SC_4459
0040 7900        R     MOV     R1,#LOW ?SC_4459
0042 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 2906
0045 7B00        R     MOV     R3,#MBYTE ?SC_4502
0047 7A00        R     MOV     R2,#HIGH ?SC_4502
0049 7900        R     MOV     R1,#LOW ?SC_4502
                                           ; SOURCE LINE # 2908
004B 110000      R     ACALL   L?1216
                                           ; SOURCE LINE # 2909
004E 7B00        R     MOV     R3,#MBYTE ?SC_4550
0050 7A00        R     MOV     R2,#HIGH ?SC_4550
0052 7900        R     MOV     R1,#LOW ?SC_4550
0054 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 2910
0057 7B00        R     MOV     R3,#MBYTE ?SC_4608
0059 7A00        R     MOV     R2,#HIGH ?SC_4608
005B 7900        R     MOV     R1,#LOW ?SC_4608
005D 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 2911
0060 7B00        R     MOV     R3,#MBYTE ?SC_4666
0062 7A00        R     MOV     R2,#HIGH ?SC_4666
0064 7900        R     MOV     R1,#LOW ?SC_4666
0066 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 2912
0069 7B00        R     MOV     R3,#MBYTE ?SC_4724
006B 7A00        R     MOV     R2,#HIGH ?SC_4724
006D 7900        R     MOV     R1,#LOW ?SC_4724
006F 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 2913
0072 7B00        R     MOV     R3,#MBYTE ?SC_4791
0074 7A00        R     MOV     R2,#HIGH ?SC_4791
0076 7900        R     MOV     R1,#LOW ?SC_4791
0078 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 2914
007B 7B00        R     MOV     R3,#MBYTE ?SC_4859
007D 7A00        R     MOV     R2,#HIGH ?SC_4859
007F 7900        R     MOV     R1,#LOW ?SC_4859
0081 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 2915
0084 110000      R     ACALL   L?1310
0087 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 2916
008A 110000      R     ACALL   L?1257
008D 010000      E     AJMP    _Puts
                                           ; SOURCE LINE # 2917
0090         L?1216:
0090 110000      E     ACALL   _Puts
0093 7B00        R     MOV     R3,#MBYTE ?SC_4127
0095 7A00        R     MOV     R2,#HIGH ?SC_4127
0097 7900        R     MOV     R1,#LOW ?SC_4127
0099 110000      E     ACALL   _Puts
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 216 

009C 22                RET     
             ; FUNCTION MonHelp (END)

             ; FUNCTION MonHelpHelp (BEGIN)
                                           ; SOURCE LINE # 2918
                                           ; SOURCE LINE # 2919
                                           ; SOURCE LINE # 2920
0000 110000      R     ACALL   L?1311
0003 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 2921
0006 7B00        R     MOV     R3,#MBYTE ?SC_4926
0008 7A00        R     MOV     R2,#HIGH ?SC_4926
000A 7900        R     MOV     R1,#LOW ?SC_4926
000C 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 2922
000F 110000      R     ACALL   L?1311
0012 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 2923
0015 7B00        R     MOV     R3,#MBYTE ?SC_4942
0017 7A00        R     MOV     R2,#HIGH ?SC_4942
0019 7900        R     MOV     R1,#LOW ?SC_4942
001B 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 2924
001E 7B00        R     MOV     R3,#MBYTE ?SC_4985
0020 7A00        R     MOV     R2,#HIGH ?SC_4985
0022 7900        R     MOV     R1,#LOW ?SC_4985
0024 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 2925
0027 7B00        R     MOV     R3,#MBYTE ?SC_5049
0029 7A00        R     MOV     R2,#HIGH ?SC_5049
002B 7900        R     MOV     R1,#LOW ?SC_5049
002D 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 2926
0030 7B00        R     MOV     R3,#MBYTE ?SC_5108
0032 7A00        R     MOV     R2,#HIGH ?SC_5108
0034 7900        R     MOV     R1,#LOW ?SC_5108
                                           ; SOURCE LINE # 2927
0036 110000      R     ACALL   L?1165
                                           ; SOURCE LINE # 2928
0039 7B00        R     MOV     R3,#MBYTE ?SC_5168
003B 7A00        R     MOV     R2,#HIGH ?SC_5168
003D 7900        R     MOV     R1,#LOW ?SC_5168
003F 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 2929
0042 7B00        R     MOV     R3,#MBYTE ?SC_5233
0044 7A00        R     MOV     R2,#HIGH ?SC_5233
0046 7900        R     MOV     R1,#LOW ?SC_5233
                                           ; SOURCE LINE # 2930
0048 110000      R     ACALL   L?1165
                                           ; SOURCE LINE # 2931
004B 7B00        R     MOV     R3,#MBYTE ?SC_5297
004D 7A00        R     MOV     R2,#HIGH ?SC_5297
004F 7900        R     MOV     R1,#LOW ?SC_5297
0051 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 2932
0054 7B00        R     MOV     R3,#MBYTE ?SC_5341
0056 7A00        R     MOV     R2,#HIGH ?SC_5341
0058 7900        R     MOV     R1,#LOW ?SC_5341
                                           ; SOURCE LINE # 2933
005A 110000      R     ACALL   L?1199
                                           ; SOURCE LINE # 2934
005D 7B00        R     MOV     R3,#MBYTE ?SC_5405
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 217 

005F 7A00        R     MOV     R2,#HIGH ?SC_5405
0061 7900        R     MOV     R1,#LOW ?SC_5405
0063 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 2935
0066 7B00        R     MOV     R3,#MBYTE ?SC_5472
0068 7A00        R     MOV     R2,#HIGH ?SC_5472
006A 7900        R     MOV     R1,#LOW ?SC_5472
                                           ; SOURCE LINE # 2936
006C 110000      R     ACALL   L?1199
                                           ; SOURCE LINE # 2937
006F 7B00        R     MOV     R3,#MBYTE ?SC_5536
0071 7A00        R     MOV     R2,#HIGH ?SC_5536
0073 7900        R     MOV     R1,#LOW ?SC_5536
0075 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 2938
0078 7B00        R     MOV     R3,#MBYTE ?SC_5580
007A 7A00        R     MOV     R2,#HIGH ?SC_5580
007C 7900        R     MOV     R1,#LOW ?SC_5580
007E 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 2939
0081 110000      R     ACALL   L?1258
0084 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 2940
0087 7B00        R     MOV     R3,#MBYTE ?SC_5643
0089 7A00        R     MOV     R2,#HIGH ?SC_5643
008B 7900        R     MOV     R1,#LOW ?SC_5643
008D 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 2941
0090 7B00        R     MOV     R3,#MBYTE ?SC_5710
0092 7A00        R     MOV     R2,#HIGH ?SC_5710
0094 7900        R     MOV     R1,#LOW ?SC_5710
0096 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 2942
0099 110000      R     ACALL   L?1258
009C 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 2943
009F 7B00        R     MOV     R3,#MBYTE ?SC_5773
00A1 7A00        R     MOV     R2,#HIGH ?SC_5773
00A3 7900        R     MOV     R1,#LOW ?SC_5773
00A5 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 2944
00A8 7B00        R     MOV     R3,#MBYTE ?SC_5813
00AA 7A00        R     MOV     R2,#HIGH ?SC_5813
00AC 7900        R     MOV     R1,#LOW ?SC_5813
00AE 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 2945
00B1 7B00        R     MOV     R3,#MBYTE ?SC_5867
00B3 7A00        R     MOV     R2,#HIGH ?SC_5867
00B5 7900        R     MOV     R1,#LOW ?SC_5867
00B7 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 2946
00BA 7B00        R     MOV     R3,#MBYTE ?SC_5918
00BC 7A00        R     MOV     R2,#HIGH ?SC_5918
00BE 7900        R     MOV     R1,#LOW ?SC_5918
00C0 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 2947
00C3 7B00        R     MOV     R3,#MBYTE ?SC_5981
00C5 7A00        R     MOV     R2,#HIGH ?SC_5981
00C7 7900        R     MOV     R1,#LOW ?SC_5981
00C9 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 2948
00CC 7B00        R     MOV     R3,#MBYTE ?SC_6046
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 218 

00CE 7A00        R     MOV     R2,#HIGH ?SC_6046
00D0 7900        R     MOV     R1,#LOW ?SC_6046
00D2 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 2949
00D5 7B00        R     MOV     R3,#MBYTE ?SC_6098
00D7 7A00        R     MOV     R2,#HIGH ?SC_6098
00D9 7900        R     MOV     R1,#LOW ?SC_6098
00DB 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 2950
00DE 110000      R     ACALL   L?1258
00E1 010000      E     AJMP    _Puts
                                           ; SOURCE LINE # 2952
00E4         L?1165:
00E4 110000      E     ACALL   _Puts
00E7 7B00        R     MOV     R3,#MBYTE ?SC_904
00E9 7A00        R     MOV     R2,#HIGH ?SC_904
00EB 7900        R     MOV     R1,#LOW ?SC_904
00ED 110000      E     ACALL   _Puts
00F0 22                RET     
00F1         L?1199:
00F1 110000      E     ACALL   _Puts
00F4 7B00        R     MOV     R3,#MBYTE ?SC_904
00F6 7A00        R     MOV     R2,#HIGH ?SC_904
00F8 7900        R     MOV     R1,#LOW ?SC_904
00FA 110000      E     ACALL   _Puts
00FD 22                RET     
             ; FUNCTION MonHelpHelp (END)

             ; FUNCTION MonGetCommand (BEGIN)
                                           ; SOURCE LINE # 2978
                                           ; SOURCE LINE # 2979
                                           ; SOURCE LINE # 2983
0000 E4                CLR     A
0001 90000000    R     MOV     DPTR,#ret
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2985
0006 110000      E     ACALL   RS_ready
0009 EF                MOV     A,R7
000A 7002              JNZ     ?C0562
000C FF                MOV     R7,A
000D 22                RET     
000E         ?C0562:
                                           ; SOURCE LINE # 2986
000E 110000      E     ACALL   RS_rx
0011 90000000    R     MOV     DPTR,#ch
0015 EF                MOV     A,R7
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2989
0017 90000000    R     MOV     DPTR,#comment
001B E0                MOVX    A,@DPTR
001C 6015              JZ      ?C0564
                                           ; SOURCE LINE # 2990
001E 110000      R     ACALL   L?1312
0021 640D              XRL     A,#0DH
0023 6004              JZ      ?C0566
0025 EF                MOV     A,R7
0026 B41B08            CJNE    A,#01BH,?C0565
0029         ?C0566:
0029 E4                CLR     A
002A 90000000    R     MOV     DPTR,#comment
002E F0                MOVX    @DPTR,A
002F 8015              SJMP    ?C0568
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 219 

0031         ?C0565:
                                           ; SOURCE LINE # 2991
                                           ; SOURCE LINE # 2992
                                           ; SOURCE LINE # 2993
0031 800D              SJMP    ?C0959
                                           ; SOURCE LINE # 2994
                                           ; SOURCE LINE # 2995
0033         ?C0564:
                                           ; SOURCE LINE # 2996
0033 110000      R     ACALL   L?1312
0036 B43B0D            CJNE    A,#03BH,?C0568
                                           ; SOURCE LINE # 2997
0039 90000000    R     MOV     DPTR,#comment
003D 7401              MOV     A,#01H
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2998
0040         ?C0959:
0040 110000      R     ACALL   _Mon_tx
                                           ; SOURCE LINE # 2999
0043 7F00              MOV     R7,#00H
0045 22                RET     
                                           ; SOURCE LINE # 3000
0046         ?C0568:
                                           ; SOURCE LINE # 3003
0046 90000000    R     MOV     DPTR,#ch
004A E0                MOVX    A,@DPTR
004B 110000      E     ACALL   ?C?CCASE
004E 0000        R     DW      ?C0598
0050 08                DB      08H
0051 0000        R     DW      ?C0572
0053 0D                DB      0DH
0054 0000        R     DW      ?C0571
0056 1B                DB      01BH
0057 0000        R     DW      ?C0600
0059 2C                DB      02CH
005A 0000        R     DW      ?C0606
005C 2E                DB      02EH
005D 0000        R     DW      ?C0587
005F 2F                DB      02FH
0060 0000        R     DW      ?C0603
0062 3C                DB      03CH
0063 0000        R     DW      ?C0609
0065 3E                DB      03EH
0066 0000        R     DW      ?C0588
0068 60                DB      060H
0069 0000              DW      00H
006B 0000        R     DW      ?C0612
                                           ; SOURCE LINE # 3005
006D         ?C0571:
                                           ; SOURCE LINE # 3006
006D E4                CLR     A
006E 90000000    R     MOV     DPTR,#argc
0072 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3007
                                           ; SOURCE LINE # 3008
                                           ; SOURCE LINE # 3009
                                           ; SOURCE LINE # 3010
0073 8040              SJMP    ?C0960
                                           ; SOURCE LINE # 3013
0075         ?C0572:
                                           ; SOURCE LINE # 3015
0075 90000000    R     MOV     DPTR,#incnt
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 220 

0079 E0                MOVX    A,@DPTR
007A 7006              JNZ     ?C0573
                                           ; SOURCE LINE # 3016
007C 110000      R     ACALL   Prompt
                                           ; SOURCE LINE # 3017
007F 010000      R     AJMP    ?C0570
                                           ; SOURCE LINE # 3018
0082         ?C0573:
                                           ; SOURCE LINE # 3020
0082 90000000    R     MOV     DPTR,#incnt
0086 E0                MOVX    A,@DPTR
0087 FF                MOV     R7,A
0088 04                INC     A
0089 F0                MOVX    @DPTR,A
008A 7400        R     MOV     A,#LOW monstr
008C 2F                ADD     A,R7
008D 110000      R     ACALL   L?1168
0090 E4                CLR     A
0091 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3021
0092 90000000    R     MOV     DPTR,#argc
0096 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3023
0097 90000000    R     MOV     DPTR,#i
009B F0                MOVX    @DPTR,A
009C         ?C0574:
009C 110000      R     ACALL   L?1291
009F 500E              JNC     ?C0575
                                           ; SOURCE LINE # 3024
00A1 110000      R     ACALL   L?1166
00A4 E0                MOVX    A,@DPTR
00A5 D3                SETB    C
00A6 9420              SUBB    A,#020H
00A8 5005              JNC     ?C0575
                                           ; SOURCE LINE # 3025
00AA         ?C0577:
00AA         ?C0576:
00AA 110000      R     ACALL   L?1325
00AD 80ED              SJMP    ?C0574
00AF         ?C0575:
                                           ; SOURCE LINE # 3027
00AF 110000      R     ACALL   L?1166
00B2 E0                MOVX    A,@DPTR
00B3 7010              JNZ     ?C0578
                                           ; SOURCE LINE # 3028
00B5         ?C0960:
00B5 90000000    R     MOV     DPTR,#incnt
00B9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3029
00BA 90000000    R     MOV     DPTR,#comment
00BE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3030
00BF 110000      R     ACALL   Prompt
                                           ; SOURCE LINE # 3031
00C2 7F00              MOV     R7,#00H
00C4 22                RET     
                                           ; SOURCE LINE # 3032
00C5         ?C0578:
                                           ; SOURCE LINE # 3033
00C5 110000      R     ACALL   L?1314
00C8 90000000    R     MOV     DPTR,#argv
00CC 7400        R     MOV     A,#MBYTE monstr
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 221 

00CE 110000      R     ACALL   L?1249
                                           ; SOURCE LINE # 3034
00D1         ?C0579:
00D1 110000      R     ACALL   L?1291
00D4 5048              JNC     ?C0580
                                           ; SOURCE LINE # 3035
00D6 110000      R     ACALL   L?1167
00D9 E0                MOVX    A,@DPTR
00DA D3                SETB    C
00DB 9420              SUBB    A,#020H
00DD 503A              JNC     ?C0581
                                           ; SOURCE LINE # 3036
00DF 110000      R     ACALL   L?1167
00E2 E4                CLR     A
00E3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3040
00E4 8014              SJMP    ?C0961
00E6         ?C0583:
                                           ; SOURCE LINE # 3041
00E6 90000000    R     MOV     DPTR,#i
00EA E0                MOVX    A,@DPTR
00EB 2400        R     ADD     A,#LOW monstr
00ED 110000      R     ACALL   L?1168
00F0 E0                MOVX    A,@DPTR
00F1 FF                MOV     R7,A
00F2 6420              XRL     A,#020H
00F4 6004              JZ      ?C0585
00F6 EF                MOV     A,R7
00F7 B40905            CJNE    A,#09H,?C0584
00FA         ?C0585:
00FA         ?C0961:
00FA 110000      R     ACALL   L?1325
00FD 80E7              SJMP    ?C0583
00FF         ?C0584:
                                           ; SOURCE LINE # 3042
00FF 90000000    R     MOV     DPTR,#argc
0103 E0                MOVX    A,@DPTR
0104 04                INC     A
0105 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3043
0106 EF                MOV     A,R7
0107 6010              JZ      ?C0581
                                           ; SOURCE LINE # 3044
0109 110000      R     ACALL   L?1314
010C 90000000    R     MOV     DPTR,#argc
0110 E0                MOVX    A,@DPTR
0111 110000      R     ACALL   L?1202
0114 7400        R     MOV     A,#MBYTE monstr
0116 110000      R     ACALL   L?1249
                                           ; SOURCE LINE # 3045
                                           ; SOURCE LINE # 3046
                                           ; SOURCE LINE # 3047
0119         ?C0581:
0119 110000      R     ACALL   L?1326
011C 80B3              SJMP    ?C0579
011E         ?C0580:
                                           ; SOURCE LINE # 3049
011E 90000000    R     MOV     DPTR,#ret
0122 7401              MOV     A,#01H
                                           ; SOURCE LINE # 3050
0124 110000      R     ACALL   L?1327
                                           ; SOURCE LINE # 3051
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 222 

0127 E4                CLR     A
0128 90000000    R     MOV     DPTR,#incnt
012C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3052
012D 010000      R     AJMP    ?C0570
                                           ; SOURCE LINE # 3055
0130         ?C0587:
                                           ; SOURCE LINE # 3056
0130 90000000    R     MOV     DPTR,#last_argc
0134 E0                MOVX    A,@DPTR
0135 A3                INC     DPTR
0136 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3057
0137 90000000    R     MOV     DPTR,#ret
013B 7401              MOV     A,#01H
013D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3058
013E 010000      R     AJMP    ?C0570
                                           ; SOURCE LINE # 3061
0141         ?C0588:
                                           ; SOURCE LINE # 3062
                                           ; SOURCE LINE # 3065
0141 E4                CLR     A
0142 90000000    R     MOV     DPTR,#j
0146 F0                MOVX    @DPTR,A
0147         ?C0589:
0147 90000000    R     MOV     DPTR,#last_argc
014B E0                MOVX    A,@DPTR
014C FF                MOV     R7,A
014D 90000000    R     MOV     DPTR,#j
0151 E0                MOVX    A,@DPTR
0152 C3                CLR     C
0153 9F                SUBB    A,R7
0154 4003              JC      $ + 5H
0156 010000      R     AJMP    ?C0570
                                           ; SOURCE LINE # 3066
0159 E4                CLR     A
015A 90000000    R     MOV     DPTR,#i
015E F0                MOVX    @DPTR,A
015F         ?C0592:
015F 90000000    R     MOV     DPTR,#i
0163 E0                MOVX    A,@DPTR
0164 FF                MOV     R7,A
0165 C3                CLR     C
0166 9464              SUBB    A,#064H
0168 5041              JNC     ?C0591
                                           ; SOURCE LINE # 3067
016A A3                INC     DPTR
016B E0                MOVX    A,@DPTR
016C FE                MOV     R6,A
016D 110000      R     ACALL   L?1203
0170 110000      R     ACALL   L?1285
0173 2F                ADD     A,R7
0174 110000      R     ACALL   L?1264
0177 90000000    R     MOV     DPTR,#ch
017B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3068
017C 701B              JNZ     ?C0595
                                           ; SOURCE LINE # 3069
017E 90000000    R     MOV     DPTR,#last_argc
0182 E0                MOVX    A,@DPTR
0183 C3                CLR     C
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 223 

0184 9401              SUBB    A,#01H
0186 B50603            CJNE    A,AR6,?C0596
0189 7F00              MOV     R7,#00H
018B 22                RET     
018C         ?C0596:
                                           ; SOURCE LINE # 3070
018C 90000000    R     MOV     DPTR,#ch
0190 7420              MOV     A,#020H
0192 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3071
0193 FF                MOV     R7,A
0194 110000      E     ACALL   _RS_ungetch
                                           ; SOURCE LINE # 3072
0197 8012              SJMP    ?C0591
                                           ; SOURCE LINE # 3073
0199         ?C0595:
                                           ; SOURCE LINE # 3074
                                           ; SOURCE LINE # 3075
0199 90000000    R     MOV     DPTR,#ch
019D E0                MOVX    A,@DPTR
019E FF                MOV     R7,A
019F 110000      E     ACALL   _RS_ungetch
                                           ; SOURCE LINE # 3076
                                           ; SOURCE LINE # 3077
01A2         ?C0594:
01A2 90000000    R     MOV     DPTR,#i
01A6 E0                MOVX    A,@DPTR
01A7 04                INC     A
01A8 F0                MOVX    @DPTR,A
01A9 80B4              SJMP    ?C0592
                                           ; SOURCE LINE # 3078
01AB         ?C0591:
01AB 90000000    R     MOV     DPTR,#j
01AF E0                MOVX    A,@DPTR
01B0 04                INC     A
01B1 F0                MOVX    @DPTR,A
01B2 8093              SJMP    ?C0589
                                           ; SOURCE LINE # 3079
                                           ; SOURCE LINE # 3080
                                           ; SOURCE LINE # 3083
01B4         ?C0598:
                                           ; SOURCE LINE # 3084
01B4 90000000    R     MOV     DPTR,#incnt
01B8 E0                MOVX    A,@DPTR
01B9 6063              JZ      ?C0570
                                           ; SOURCE LINE # 3085
01BB 14                DEC     A
01BC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3086
01BD 110000      R     ACALL   L?1313
01C0 110000      R     ACALL   _Mon_tx
                                           ; SOURCE LINE # 3087
01C3 7F20              MOV     R7,#020H
                                           ; SOURCE LINE # 3088
01C5 110000      R     ACALL   L?1244
01C8 110000      R     ACALL   _Mon_tx
                                           ; SOURCE LINE # 3089
                                           ; SOURCE LINE # 3090
01CB 8051              SJMP    ?C0570
                                           ; SOURCE LINE # 3093
01CD         ?C0600:
                                           ; SOURCE LINE # 3094
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 224 

01CD 90000000    R     MOV     DPTR,#incnt
01D1 E0                MOVX    A,@DPTR
01D2 6002              JZ      ?C0601
                                           ; SOURCE LINE # 3095
                                           ; SOURCE LINE # 3096
                                           ; SOURCE LINE # 3097
01D4 802E              SJMP    ?C0968
01D6         ?C0601:
                                           ; SOURCE LINE # 3099
01D6 E4                CLR     A
01D7 FF                MOV     R7,A
                                           ; SOURCE LINE # 3100
01D8 8025              SJMP    ?C0967
                                           ; SOURCE LINE # 3102
01DA         ?C0603:
                                           ; SOURCE LINE # 3103
01DA 90000000    R     MOV     DPTR,#incnt
01DE E0                MOVX    A,@DPTR
01DF 6002              JZ      ?C0604
                                           ; SOURCE LINE # 3104
01E1         ?C0962:
                                           ; SOURCE LINE # 3105
                                           ; SOURCE LINE # 3106
01E1 8021              SJMP    ?C0968
01E3         ?C0604:
                                           ; SOURCE LINE # 3108
01E3 7F0A              MOV     R7,#0AH
01E5         ?C0963:
                                           ; SOURCE LINE # 3109
01E5 8018              SJMP    ?C0967
                                           ; SOURCE LINE # 3112
01E7         ?C0606:
                                           ; SOURCE LINE # 3113
01E7 90000000    R     MOV     DPTR,#incnt
01EB E0                MOVX    A,@DPTR
01EC 6002              JZ      ?C0607
                                           ; SOURCE LINE # 3114
01EE         ?C0964:
                                           ; SOURCE LINE # 3115
                                           ; SOURCE LINE # 3116
01EE 8014              SJMP    ?C0968
01F0         ?C0607:
                                           ; SOURCE LINE # 3118
01F0 7F01              MOV     R7,#01H
01F2         ?C0965:
                                           ; SOURCE LINE # 3119
01F2 800B              SJMP    ?C0967
                                           ; SOURCE LINE # 3121
01F4         ?C0609:
                                           ; SOURCE LINE # 3122
01F4 90000000    R     MOV     DPTR,#incnt
01F8 E0                MOVX    A,@DPTR
01F9 6002              JZ      ?C0610
                                           ; SOURCE LINE # 3123
01FB         ?C0966:
                                           ; SOURCE LINE # 3124
                                           ; SOURCE LINE # 3125
01FB 8007              SJMP    ?C0968
01FD         ?C0610:
                                           ; SOURCE LINE # 3127
01FD 7F0B              MOV     R7,#0BH
01FF         ?C0967:
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 225 

01FF 110000      R     ACALL   _MonIncDecI2C
                                           ; SOURCE LINE # 3128
0202 801A              SJMP    ?C0570
                                           ; SOURCE LINE # 3130
0204         ?C0612:
                                           ; SOURCE LINE # 3131
0204         ?C0968:
0204 110000      R     ACALL   L?1313
                                           ; SOURCE LINE # 3132
0207 110000      R     ACALL   L?1244
020A 90000000    R     MOV     DPTR,#incnt
020E E0                MOVX    A,@DPTR
020F FE                MOV     R6,A
0210 04                INC     A
0211 F0                MOVX    @DPTR,A
0212 7400        R     MOV     A,#LOW monstr
0214 2E                ADD     A,R6
0215 F582              MOV     DPL,A
0217 E4                CLR     A
0218 3400        R     ADDC    A,#HIGH monstr
021A 110000      R     ACALL   L?1130
021D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3138
                                           ; SOURCE LINE # 3139
021E         ?C0570:
                                           ; SOURCE LINE # 3141
021E 90000000    R     MOV     DPTR,#ret
0222 E0                MOVX    A,@DPTR
0223 FF                MOV     R7,A
0224 6009              JZ      ?C0613
                                           ; SOURCE LINE # 3142
0226 E4                CLR     A
0227 90000000    R     MOV     DPTR,#comment
                                           ; SOURCE LINE # 3143
022B 110000      R     ACALL   L?1327
                                           ; SOURCE LINE # 3144
022E 22                RET     
                                           ; SOURCE LINE # 3145
022F         ?C0613:
                                           ; SOURCE LINE # 3146
                                           ; SOURCE LINE # 3147
022F 90000000    R     MOV     DPTR,#ret
0233 E0                MOVX    A,@DPTR
0234 FF                MOV     R7,A
                                           ; SOURCE LINE # 3148
                                           ; SOURCE LINE # 3149
0235         ?C0563:
0235 22                RET     
0236         L?1244:
0236 110000      R     ACALL   _Mon_tx
0239 90000000    R     MOV     DPTR,#ch
023D E0                MOVX    A,@DPTR
023E FF                MOV     R7,A
023F 22                RET     
             ; FUNCTION MonGetCommand (END)

             ; FUNCTION MonGetTwCmdLength (BEGIN)
                                           ; SOURCE LINE # 3336
                                           ; SOURCE LINE # 3337
                                           ; SOURCE LINE # 3338
0000 110000      R     ACALL   L?1284
0003 110000      R     ACALL   L?1263
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 226 

0006 FE                MOV     R6,A
0007 700A              JNZ     ?C0615
                                           ; SOURCE LINE # 3339
0009 90000000    R     MOV     DPTR,#MonIndexLen
000D 04                INC     A
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3340
000F A3                INC     DPTR
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3341
0011 FF                MOV     R7,A
0012 22                RET     
                                           ; SOURCE LINE # 3342
0013         ?C0615:
                                           ; SOURCE LINE # 3344
0013 EE                MOV     A,R6
0014 6431              XRL     A,#031H
0016 600A              JZ      ?C0617
0018 110000      E     ACALL   ?C?CLDPTR
001B 6432              XRL     A,#032H
001D 6003              JZ      ?C0617
                                           ; SOURCE LINE # 3345
001F 7F00              MOV     R7,#00H
0021 22                RET     
0022         ?C0617:
                                           ; SOURCE LINE # 3346
0022 110000      E     ACALL   ?C?CLDPTR
0025 C3                CLR     C
0026 9430              SUBB    A,#030H
0028 90000000    R     MOV     DPTR,#MonIndexLen
002C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3348
002D 110000      R     ACALL   L?1284
0030 2402              ADD     A,#02H
0032 110000      R     ACALL   L?1264
0035 FF                MOV     R7,A
0036 C3                CLR     C
0037 9431              SUBB    A,#031H
0039 5008              JNC     ?C0618
003B EF                MOV     A,R7
003C 9434              SUBB    A,#034H
003E 4003              JC      ?C0618
                                           ; SOURCE LINE # 3349
0040 7F00              MOV     R7,#00H
0042 22                RET     
0043         ?C0618:
                                           ; SOURCE LINE # 3350
0043 110000      E     ACALL   ?C?CLDPTR
0046 C3                CLR     C
0047 9430              SUBB    A,#030H
0049 90000000    R     MOV     DPTR,#MonDataLen
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3351
004E 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 3352
0050         ?C0616:
0050 22                RET     
             ; FUNCTION MonGetTwCmdLength (END)

             ; FUNCTION Monitor (BEGIN)
                                           ; SOURCE LINE # 3359
                                           ; SOURCE LINE # 3360
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 227 

                                           ; SOURCE LINE # 3363
0000 90000000    R     MOV     DPTR,#MonString
0004 110000      R     ACALL   L?1004
0007 EA                MOV     A,R2
0008 49                ORL     A,R1
0009 4B                ORL     A,R3
000A 602E              JZ      ?C0619
                                           ; SOURCE LINE # 3364
000C 90000000    R     MOV     DPTR,#MonString
0010 A3                INC     DPTR
0011 E4                CLR     A
0012 75F001            MOV     B,#01H
0015 110000      E     ACALL   ?C?ILDIX
0018 A9F0              MOV     R1,B
001A FA                MOV     R2,A
001B 110000      E     ACALL   ?C?CLDPTR
001E FF                MOV     R7,A
001F 110000      E     ACALL   _RS_ungetch
                                           ; SOURCE LINE # 3365
0022 90000000    R     MOV     DPTR,#MonString
0026 110000      R     ACALL   L?1004
0029 110000      E     ACALL   ?C?CLDPTR
002C 700C              JNZ     ?C0619
002E F9                MOV     R1,A
002F 90000000    R     MOV     DPTR,#MonString
0033 C9                XCH     A,R1
0034 F0                MOVX    @DPTR,A
0035 A3                INC     DPTR
0036 F0                MOVX    @DPTR,A
0037 A3                INC     DPTR
0038 E9                MOV     A,R1
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3366
003A         ?C0619:
                                           ; SOURCE LINE # 3368
003A 110000      R     ACALL   MonGetCommand
003D EF                MOV     A,R7
003E 7003              JNZ     $ + 5H
0040 010000      R     AJMP    ?C0622
0043         ?C0621:
                                           ; SOURCE LINE # 3383
0043 90000000    R     MOV     DPTR,#argv
0047 110000      R     ACALL   L?1004
004A 110000      E     ACALL   ?C?CLDPTR
004D FF                MOV     R7,A
004E 6472              XRL     A,#072H
0050 6004              JZ      ?C0624
0052 EF                MOV     A,R7
0053 B45210            CJNE    A,#052H,?C0623
0056         ?C0624:
                                           ; SOURCE LINE # 3384
0056 110000      R     ACALL   MonGetTwCmdLength
0059 EF                MOV     A,R7
005A 7003              JNZ     $ + 5H
005C 010000      R     AJMP    ?C0626
                                           ; SOURCE LINE # 3385
005F 110000      R     ACALL   L?1185
0062 E4                CLR     A
0063 FF                MOV     R7,A
                                           ; SOURCE LINE # 3386
0064 801B              SJMP    ?C0969
                                           ; SOURCE LINE # 3388
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 228 

                                           ; SOURCE LINE # 3389
0066         ?C0623:
                                           ; SOURCE LINE # 3390
0066 90000000    R     MOV     DPTR,#argv
006A 110000      R     ACALL   L?1004
006D 110000      E     ACALL   ?C?CLDPTR
0070 B42814            CJNE    A,#028H,?C0627
                                           ; SOURCE LINE # 3391
0073 110000      R     ACALL   MonGetTwCmdLength
0076 EF                MOV     A,R7
0077 7003              JNZ     $ + 5H
0079 010000      R     AJMP    ?C0626
                                           ; SOURCE LINE # 3392
007C 110000      R     ACALL   L?1185
007F 7F01              MOV     R7,#01H
0081         ?C0969:
0081 110000      R     ACALL   _MonReadI2C_multi
                                           ; SOURCE LINE # 3393
0084 010000      R     AJMP    ?C0971
                                           ; SOURCE LINE # 3395
                                           ; SOURCE LINE # 3396
0087         ?C0627:
                                           ; SOURCE LINE # 3405
0087 90000000    R     MOV     DPTR,#argv
008B 110000      R     ACALL   L?1004
008E 110000      E     ACALL   ?C?CLDPTR
0091 FF                MOV     R7,A
0092 6477              XRL     A,#077H
0094 6004              JZ      ?C0631
0096 EF                MOV     A,R7
0097 B45714            CJNE    A,#057H,?C0630
009A         ?C0631:
                                           ; SOURCE LINE # 3406
009A 110000      R     ACALL   MonGetTwCmdLength
009D EF                MOV     A,R7
009E 7003              JNZ     $ + 5H
00A0 010000      R     AJMP    ?C0626
                                           ; SOURCE LINE # 3407
00A3 110000      R     ACALL   L?1186
00A6 E4                CLR     A
00A7 FF                MOV     R7,A
00A8 110000      R     ACALL   _MonWriteI2C_multi
                                           ; SOURCE LINE # 3408
00AB         ?C0970:
00AB 010000      R     AJMP    ?C0971
                                           ; SOURCE LINE # 3410
                                           ; SOURCE LINE # 3411
00AE         ?C0630:
                                           ; SOURCE LINE # 3412
00AE 90000000    R     MOV     DPTR,#argv
00B2 110000      R     ACALL   L?1004
00B5 110000      E     ACALL   ?C?CLDPTR
00B8 B42911            CJNE    A,#029H,?C0634
                                           ; SOURCE LINE # 3413
00BB 110000      R     ACALL   MonGetTwCmdLength
00BE EF                MOV     A,R7
00BF 6071              JZ      ?C0626
                                           ; SOURCE LINE # 3414
00C1 110000      R     ACALL   L?1186
00C4 7F01              MOV     R7,#01H
00C6 110000      R     ACALL   _MonWriteI2C_multi
                                           ; SOURCE LINE # 3415
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 229 

00C9 010000      R     AJMP    ?C0973
                                           ; SOURCE LINE # 3417
                                           ; SOURCE LINE # 3418
00CC         ?C0634:
                                           ; SOURCE LINE # 3425
00CC 90000000    R     MOV     DPTR,#argv
00D0 110000      R     ACALL   L?1004
00D3 110000      E     ACALL   ?C?CLDPTR
00D6 FF                MOV     R7,A
00D7 6464              XRL     A,#064H
00D9 6004              JZ      ?C0638
00DB EF                MOV     A,R7
00DC B44411            CJNE    A,#044H,?C0637
00DF         ?C0638:
                                           ; SOURCE LINE # 3426
00DF 110000      R     ACALL   MonGetTwCmdLength
00E2 EF                MOV     A,R7
00E3 604D              JZ      ?C0626
                                           ; SOURCE LINE # 3427
00E5 110000      R     ACALL   L?1186
00E8 E4                CLR     A
00E9 FF                MOV     R7,A
00EA 110000      R     ACALL   _MonDumpI2C_multi
                                           ; SOURCE LINE # 3428
00ED         ?C0972:
00ED 010000      R     AJMP    ?C0973
                                           ; SOURCE LINE # 3430
                                           ; SOURCE LINE # 3431
00F0         ?C0637:
                                           ; SOURCE LINE # 3432
00F0 90000000    R     MOV     DPTR,#argv
00F4 110000      R     ACALL   L?1004
00F7 110000      E     ACALL   ?C?CLDPTR
00FA B42611            CJNE    A,#026H,?C0641
                                           ; SOURCE LINE # 3433
00FD 110000      R     ACALL   MonGetTwCmdLength
0100 EF                MOV     A,R7
0101 602F              JZ      ?C0626
                                           ; SOURCE LINE # 3434
0103 110000      R     ACALL   L?1186
0106 7F01              MOV     R7,#01H
0108 110000      R     ACALL   _MonDumpI2C_multi
                                           ; SOURCE LINE # 3435
010B 010000      R     AJMP    ?C0975
                                           ; SOURCE LINE # 3437
                                           ; SOURCE LINE # 3438
010E         ?C0641:
                                           ; SOURCE LINE # 3448
010E 90000000    R     MOV     DPTR,#argv
0112 110000      R     ACALL   L?1004
0115 110000      E     ACALL   ?C?CLDPTR
0118 FF                MOV     R7,A
0119 6462              XRL     A,#062H
011B 6004              JZ      ?C0645
011D EF                MOV     A,R7
011E B44211            CJNE    A,#042H,?C0626
0121         ?C0645:
                                           ; SOURCE LINE # 3449
0121 110000      R     ACALL   MonGetTwCmdLength
0124 EF                MOV     A,R7
0125 600B              JZ      ?C0626
                                           ; SOURCE LINE # 3450
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 230 

0127 110000      R     ACALL   L?1186
012A 7F01              MOV     R7,#01H
012C 110000      R     ACALL   _MonToggleBit_multi
                                           ; SOURCE LINE # 3451
012F         ?C0974:
012F 010000      R     AJMP    ?C0975
                                           ; SOURCE LINE # 3453
                                           ; SOURCE LINE # 3454
0132         ?C0626:
                                           ; SOURCE LINE # 3459
0132 7400        R     MOV     A,#MBYTE ?SC_6149
0134 110000      R     ACALL   L?1113
0137 7400        R     MOV     A,#HIGH ?SC_6149
0139 F0                MOVX    @DPTR,A
013A 7400        R     MOV     A,#LOW ?SC_6149
013C 110000      R     ACALL   L?1100
013F 110000      R     ACALL   L?1004
0142 110000      E     ACALL   _stricmp
0145 EF                MOV     A,R7
0146 4E                ORL     A,R6
0147 701F              JNZ     ?C0647
                                           ; SOURCE LINE # 3460
0149 110000      R     ACALL   L?1003
014C 110000      E     ACALL   _a2h
014F 90000000    R     MOV     DPTR,#MonAddress
0153 EF                MOV     A,R7
0154 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3461
0155 7B00        R     MOV     R3,#MBYTE ?SC_6151
0157 7A00        R     MOV     R2,#HIGH ?SC_6151
0159 7900        R     MOV     R1,#LOW ?SC_6151
015B 90000000    E     MOV     DPTR,#?_Printf?BYTE+03H
015F 740D              MOV     A,#0DH
0161 F0                MOVX    @DPTR,A
0162 A3                INC     DPTR
0163 7485              MOV     A,#085H
                                           ; SOURCE LINE # 3462
0165 010000      R     AJMP    ?C0977
0168         ?C0647:
                                           ; SOURCE LINE # 3464
0168 7400        R     MOV     A,#MBYTE ?SC_6170
016A 110000      R     ACALL   L?1113
016D 7400        R     MOV     A,#HIGH ?SC_6170
016F F0                MOVX    @DPTR,A
0170 7400        R     MOV     A,#LOW ?SC_6170
0172 110000      R     ACALL   L?1104
0175 110000      R     ACALL   L?1004
0178 110000      E     ACALL   _stricmp
017B EF                MOV     A,R7
017C 4E                ORL     A,R6
017D 7006              JNZ     ?C0649
                                           ; SOURCE LINE # 3465
017F 110000      R     ACALL   MonWait
                                           ; SOURCE LINE # 3466
0182 010000      R     AJMP    ?C0648
0185         ?C0649:
                                           ; SOURCE LINE # 3468
0185 7400        R     MOV     A,#MBYTE ?SC_6175
0187 110000      R     ACALL   L?1115
018A 7400        R     MOV     A,#HIGH ?SC_6175
018C F0                MOVX    @DPTR,A
018D 7400        R     MOV     A,#LOW ?SC_6175
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 231 

018F 110000      R     ACALL   L?1114
0192 110000      R     ACALL   L?1004
0195 110000      E     ACALL   _stricmp
0198 EF                MOV     A,R7
0199 4E                ORL     A,R6
019A 700C              JNZ     ?C0651
                                           ; SOURCE LINE # 3469
019C 110000      R     ACALL   L?1003
019F 110000      E     ACALL   _a2i
;---- Variable 'wValue' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 3470
01A2 110000      E     ACALL   _delay1ms
                                           ; SOURCE LINE # 3471
01A5 010000      R     AJMP    ?C0648
01A8         ?C0651:
                                           ; SOURCE LINE # 3473
01A8 7400        R     MOV     A,#MBYTE ?SC_6181
01AA 110000      R     ACALL   L?1115
01AD 7400        R     MOV     A,#HIGH ?SC_6181
01AF F0                MOVX    @DPTR,A
01B0 7400        R     MOV     A,#LOW ?SC_6181
01B2 110000      R     ACALL   L?1114
01B5 110000      R     ACALL   L?1004
01B8 110000      E     ACALL   _stricmp
01BB EF                MOV     A,R7
01BC 4E                ORL     A,R6
01BD 7025              JNZ     ?C0653
                                           ; SOURCE LINE # 3474
01BF 90000000    R     MOV     DPTR,#argc
01C3 E0                MOVX    A,@DPTR
01C4 B4020C            CJNE    A,#02H,?C0654
                                           ; SOURCE LINE # 3475
01C7 110000      R     ACALL   L?1003
01CA 110000      E     ACALL   _a2h
01CD 90000000    R     MOV     DPTR,#DebugLevel
01D1 EF                MOV     A,R7
01D2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3476
01D3         ?C0654:
                                           ; SOURCE LINE # 3477
01D3 7B00        R     MOV     R3,#MBYTE ?SC_6187
01D5 7A00        R     MOV     R2,#HIGH ?SC_6187
01D7 7900        R     MOV     R1,#LOW ?SC_6187
01D9 90000000    R     MOV     DPTR,#DebugLevel
01DD E0                MOVX    A,@DPTR
01DE 90000000    E     MOV     DPTR,#?_Printf?BYTE+03H
01E2         ?C0976:
                                           ; SOURCE LINE # 3478
01E2 803A              SJMP    ?C0977
01E4         ?C0653:
                                           ; SOURCE LINE # 3480
01E4 7400        R     MOV     A,#MBYTE ?SC_6208
01E6 110000      R     ACALL   L?1119
01E9 7400        R     MOV     A,#HIGH ?SC_6208
01EB F0                MOVX    @DPTR,A
01EC 7400        R     MOV     A,#LOW ?SC_6208
01EE 110000      R     ACALL   L?1116
01F1 110000      R     ACALL   L?1004
01F4 110000      E     ACALL   _stricmp
01F7 EF                MOV     A,R7
01F8 4E                ORL     A,R6
01F9 7027              JNZ     ?C0656
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 232 

                                           ; SOURCE LINE # 3481
01FB 90000000    R     MOV     DPTR,#argc
01FF E0                MOVX    A,@DPTR
0200 B4020C            CJNE    A,#02H,?C0657
                                           ; SOURCE LINE # 3482
0203 110000      R     ACALL   L?1003
0206 110000      E     ACALL   _a2h
0209 90000000    R     MOV     DPTR,#SW_key
020D EF                MOV     A,R7
020E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3483
020F         ?C0657:
                                           ; SOURCE LINE # 3484
020F 7B00        R     MOV     R3,#MBYTE ?SC_6212
0211 7A00        R     MOV     R2,#HIGH ?SC_6212
0213 7900        R     MOV     R1,#LOW ?SC_6212
0215 90000000    R     MOV     DPTR,#SW_key
0219 E0                MOVX    A,@DPTR
021A 90000000    E     MOV     DPTR,#?_Printf?BYTE+03H
021E         ?C0977:
021E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3485
021F 010000      R     AJMP    ?C0984
0222         ?C0656:
                                           ; SOURCE LINE # 3487
0222 7400        R     MOV     A,#MBYTE ?SC_6228
0224 110000      R     ACALL   L?1119
0227 7400        R     MOV     A,#HIGH ?SC_6228
0229 F0                MOVX    @DPTR,A
022A 7400        R     MOV     A,#LOW ?SC_6228
022C 110000      R     ACALL   L?1116
022F 110000      R     ACALL   L?1004
0232 110000      E     ACALL   _stricmp
0235 EF                MOV     A,R7
0236 4E                ORL     A,R6
0237 7020              JNZ     ?C0659
                                           ; SOURCE LINE # 3488
0239 110000      R     ACALL   L?0999
023C 110000      E     ACALL   _stricmp
023F EF                MOV     A,R7
0240 4E                ORL     A,R6
0241 700B              JNZ     ?C0660
                                           ; SOURCE LINE # 3489
0243 C200        R     CLR     echo
                                           ; SOURCE LINE # 3490
0245 7B00        R     MOV     R3,#MBYTE ?SC_6233
0247 7A00        R     MOV     R2,#HIGH ?SC_6233
0249 7900        R     MOV     R1,#LOW ?SC_6233
024B         ?C0978:
                                           ; SOURCE LINE # 3491
024B 010000      R     AJMP    ?C0984
024E         ?C0660:
                                           ; SOURCE LINE # 3492
                                           ; SOURCE LINE # 3493
024E D200        R     SETB    echo
                                           ; SOURCE LINE # 3494
0250 7B00        R     MOV     R3,#MBYTE ?SC_6244
0252 7A00        R     MOV     R2,#HIGH ?SC_6244
0254 7900        R     MOV     R1,#LOW ?SC_6244
0256         ?C0979:
                                           ; SOURCE LINE # 3495
                                           ; SOURCE LINE # 3496
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 233 

0256 010000      R     AJMP    ?C0984
0259         ?C0659:
                                           ; SOURCE LINE # 3498
0259 7400        R     MOV     A,#MBYTE ?SC_6254
025B 110000      R     ACALL   L?1124
025E 7400        R     MOV     A,#HIGH ?SC_6254
0260 F0                MOVX    @DPTR,A
0261 7400        R     MOV     A,#LOW ?SC_6254
0263 110000      R     ACALL   L?1120
0266 110000      R     ACALL   L?1004
0269 110000      E     ACALL   _stricmp
026C EF                MOV     A,R7
026D 4E                ORL     A,R6
026E 7062              JNZ     ?C0663
                                           ; SOURCE LINE # 3499
0270 110000      R     ACALL   L?1086
0273 9402              SUBB    A,#02H
0275 501E              JNC     ?C0664
                                           ; SOURCE LINE # 3500
0277 300008            JNB     g_access,?C0665
027A 7B00        R     MOV     R3,#MBYTE ?SC_1366
027C 7A00        R     MOV     R2,#HIGH ?SC_1366
027E 7900        R     MOV     R1,#LOW ?SC_1366
0280 8006              SJMP    ?C0666
0282         ?C0665:
0282 7B00        R     MOV     R3,#MBYTE ?SC_315
0284 7A00        R     MOV     R2,#HIGH ?SC_315
0286 7900        R     MOV     R1,#LOW ?SC_315
0288         ?C0666:
0288 EB                MOV     A,R3
0289 110000      R     ACALL   L?1248
028C 7B00        R     MOV     R3,#MBYTE ?SC_6261
028E 7A00        R     MOV     R2,#HIGH ?SC_6261
0290 7900        R     MOV     R1,#LOW ?SC_6261
0292         ?C0980:
                                           ; SOURCE LINE # 3501
0292 010000      R     AJMP    ?C0984
0295         ?C0664:
                                           ; SOURCE LINE # 3502
0295 7400        R     MOV     A,#MBYTE ?SC_6273
0297 110000      R     ACALL   L?1124
029A 7400        R     MOV     A,#HIGH ?SC_6273
029C F0                MOVX    @DPTR,A
029D A3                INC     DPTR
029E 7400        R     MOV     A,#LOW ?SC_6273
02A0 110000      R     ACALL   L?1002
02A3 110000      E     ACALL   _stricmp
02A6 EF                MOV     A,R7
02A7 4E                ORL     A,R6
02A8 701D              JNZ     ?C0668
                                           ; SOURCE LINE # 3503
02AA C200        R     CLR     g_access
                                           ; SOURCE LINE # 3504
02AC 7B00        R     MOV     R3,#MBYTE ?SC_6275
02AE 7A00        R     MOV     R2,#HIGH ?SC_6275
02B0 7900        R     MOV     R1,#LOW ?SC_6275
02B2 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 3506
02B5 850082      E     MOV     DPL,regTW88+01H
02B8 850083      E     MOV     DPH,regTW88
02BB 759300      E     MOV     DPX,#?C?XDATASEG
02BE A3                INC     DPTR
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 234 

02BF A3                INC     DPTR
02C0 A3                INC     DPTR
02C1 74FE              MOV     A,#0FEH
02C3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3507
02C4 010000      R     AJMP    ?C0648
02C7         ?C0668:
                                           ; SOURCE LINE # 3508
                                           ; SOURCE LINE # 3509
02C7 D200        R     SETB    g_access
                                           ; SOURCE LINE # 3510
02C9 7B00        R     MOV     R3,#MBYTE ?SC_6288
02CB 7A00        R     MOV     R2,#HIGH ?SC_6288
02CD 7900        R     MOV     R1,#LOW ?SC_6288
02CF         ?C0981:
                                           ; SOURCE LINE # 3511
                                           ; SOURCE LINE # 3512
02CF 010000      R     AJMP    ?C0984
02D2         ?C0663:
                                           ; SOURCE LINE # 3514
02D2 7400        R     MOV     A,#MBYTE ?SC_6300
02D4 110000      R     ACALL   L?1131
02D7 7400        R     MOV     A,#HIGH ?SC_6300
02D9 F0                MOVX    @DPTR,A
02DA 7400        R     MOV     A,#LOW ?SC_6300
02DC 110000      R     ACALL   L?1120
02DF 110000      R     ACALL   L?1004
02E2 110000      E     ACALL   _stricmp
02E5 EF                MOV     A,R7
02E6 4E                ORL     A,R6
02E7 704C              JNZ     ?C0671
                                           ; SOURCE LINE # 3515
02E9 110000      R     ACALL   L?1086
02EC 9402              SUBB    A,#02H
02EE 402F              JC      ?C0672
                                           ; SOURCE LINE # 3516
02F0 110000      R     ACALL   L?1015
02F3 7400        R     MOV     A,#HIGH ?SC_1366
02F5 F0                MOVX    @DPTR,A
02F6 A3                INC     DPTR
02F7 7400        R     MOV     A,#LOW ?SC_1366
02F9 110000      R     ACALL   L?1002
02FC 110000      E     ACALL   _stricmp
02FF EF                MOV     A,R7
0300 4E                ORL     A,R6
0301 7005              JNZ     ?C0673
                                           ; SOURCE LINE # 3517
0303 759C01            MOV     SFR_CACHE_EN,#01H
0306 8017              SJMP    ?C0672
0308         ?C0673:
                                           ; SOURCE LINE # 3518
0308 110000      R     ACALL   L?1000
030B 110000      E     ACALL   _stricmp
030E EF                MOV     A,R7
030F 4E                ORL     A,R6
0310 7004              JNZ     ?C0675
                                           ; SOURCE LINE # 3519
0312 F59C              MOV     SFR_CACHE_EN,A
0314 8009              SJMP    ?C0672
0316         ?C0675:
                                           ; SOURCE LINE # 3521
0316 7B00        R     MOV     R3,#MBYTE ?SC_6306
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 235 

0318 7A00        R     MOV     R2,#HIGH ?SC_6306
031A 7900        R     MOV     R1,#LOW ?SC_6306
031C 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 3522
031F         ?C0672:
                                           ; SOURCE LINE # 3524
031F E59C              MOV     A,SFR_CACHE_EN
0321 6009              JZ      ?C0677
0323 7B00        R     MOV     R3,#MBYTE ?SC_6329
0325 7A00        R     MOV     R2,#HIGH ?SC_6329
0327 7900        R     MOV     R1,#LOW ?SC_6329
0329         ?C0982:
0329 010000      R     AJMP    ?C0984
032C         ?C0677:
                                           ; SOURCE LINE # 3525
032C 7B00        R     MOV     R3,#MBYTE ?SC_6340
032E 7A00        R     MOV     R2,#HIGH ?SC_6340
0330 7900        R     MOV     R1,#LOW ?SC_6340
0332         ?C0983:
                                           ; SOURCE LINE # 3526
0332 010000      R     AJMP    ?C0984
0335         ?C0671:
                                           ; SOURCE LINE # 3528
0335 7400        R     MOV     A,#MBYTE ?SC_6352
0337 110000      R     ACALL   L?1131
033A 7400        R     MOV     A,#HIGH ?SC_6352
033C F0                MOVX    @DPTR,A
033D 7400        R     MOV     A,#LOW ?SC_6352
033F 110000      R     ACALL   L?1125
0342 110000      R     ACALL   L?1004
0345 110000      E     ACALL   _stricmp
0348 EF                MOV     A,R7
0349 4E                ORL     A,R6
034A 602C              JZ      ?C0681
034C 7400        R     MOV     A,#MBYTE ?SC_6354
034E 110000      R     ACALL   L?1139
0351 7400        R     MOV     A,#HIGH ?SC_6354
0353 F0                MOVX    @DPTR,A
0354 7400        R     MOV     A,#LOW ?SC_6354
0356 110000      R     ACALL   L?1125
0359 110000      R     ACALL   L?1004
035C 110000      E     ACALL   _stricmp
035F EF                MOV     A,R7
0360 4E                ORL     A,R6
0361 6015              JZ      ?C0681
0363 110000      R     ACALL   L?1033
0366 7400        R     MOV     A,#HIGH ?SC_284
0368 F0                MOVX    @DPTR,A
0369 7400        R     MOV     A,#LOW ?SC_284
036B 110000      R     ACALL   L?1132
036E 110000      R     ACALL   L?1004
0371 110000      E     ACALL   _stricmp
0374 EF                MOV     A,R7
0375 4E                ORL     A,R6
0376 7006              JNZ     ?C0680
0378         ?C0681:
                                           ; SOURCE LINE # 3530
                                           ; SOURCE LINE # 3531
0378 110000      R     ACALL   MonHelp
                                           ; SOURCE LINE # 3532
037B 010000      R     AJMP    ?C0648
037E         ?C0680:
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 236 

                                           ; SOURCE LINE # 3533
037E 7400        R     MOV     A,#MBYTE ?SC_6359
0380 110000      R     ACALL   L?1139
0383 7400        R     MOV     A,#HIGH ?SC_6359
0385 F0                MOVX    @DPTR,A
0386 7400        R     MOV     A,#LOW ?SC_6359
0388 110000      R     ACALL   L?1132
038B 110000      R     ACALL   L?1004
038E 110000      E     ACALL   _stricmp
0391 EF                MOV     A,R7
0392 4E                ORL     A,R6
0393 7006              JNZ     ?C0683
                                           ; SOURCE LINE # 3534
0395 110000      R     ACALL   MonHelpHelp
                                           ; SOURCE LINE # 3535
0398 010000      R     AJMP    ?C0648
039B         ?C0683:
                                           ; SOURCE LINE # 3545
039B 7400        R     MOV     A,#MBYTE ?SC_6362
039D 110000      R     ACALL   L?1146
03A0 7400        R     MOV     A,#HIGH ?SC_6362
03A2 F0                MOVX    @DPTR,A
03A3 7400        R     MOV     A,#LOW ?SC_6362
03A5 110000      R     ACALL   L?1140
03A8 110000      R     ACALL   L?1004
03AB 110000      E     ACALL   _stricmp
03AE EF                MOV     A,R7
03AF 4E                ORL     A,R6
03B0 7006              JNZ     ?C0685
03B2 110000      R     ACALL   monitor_bt656
03B5 010000      R     AJMP    ?C0648
03B8         ?C0685:
                                           ; SOURCE LINE # 3547
03B8 7400        R     MOV     A,#MBYTE ?SC_6368
03BA 110000      R     ACALL   L?1146
03BD 7400        R     MOV     A,#HIGH ?SC_6368
03BF F0                MOVX    @DPTR,A
03C0 7400        R     MOV     A,#LOW ?SC_6368
03C2 110000      R     ACALL   L?1140
03C5 110000      R     ACALL   L?1004
03C8 110000      E     ACALL   _stricmp
03CB EF                MOV     A,R7
03CC 4E                ORL     A,R6
03CD 7006              JNZ     ?C0687
03CF 110000      R     ACALL   monitor_bt656e
03D2 010000      R     AJMP    ?C0648
03D5         ?C0687:
                                           ; SOURCE LINE # 3548
03D5 7400        R     MOV     A,#MBYTE ?SC_6375
03D7 110000      R     ACALL   L?1150
03DA 7400        R     MOV     A,#HIGH ?SC_6375
03DC F0                MOVX    @DPTR,A
03DD 7400        R     MOV     A,#LOW ?SC_6375
03DF 110000      R     ACALL   L?1147
03E2 110000      R     ACALL   L?1004
03E5 110000      E     ACALL   _stricmp
03E8 EF                MOV     A,R7
03E9 4E                ORL     A,R6
03EA 7006              JNZ     ?C0689
03EC 110000      R     ACALL   monitor_compiler
03EF 010000      R     AJMP    ?C0648
03F2         ?C0689:
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 237 

                                           ; SOURCE LINE # 3549
03F2 110000      R     ACALL   L?1022
03F5 7400        R     MOV     A,#HIGH ?SC_644
03F7 F0                MOVX    @DPTR,A
03F8 7400        R     MOV     A,#LOW ?SC_644
03FA 110000      R     ACALL   L?1147
03FD 110000      R     ACALL   L?1004
0400 110000      E     ACALL   _stricmp
0403 EF                MOV     A,R7
0404 4E                ORL     A,R6
0405 7006              JNZ     ?C0691
0407 110000      R     ACALL   monitor_check
040A 010000      R     AJMP    ?C0648
040D         ?C0691:
                                           ; SOURCE LINE # 3550
040D 7400        R     MOV     A,#MBYTE ?SC_6392
040F 110000      R     ACALL   L?1150
0412 7400        R     MOV     A,#HIGH ?SC_6392
0414 F0                MOVX    @DPTR,A
0415 7400        R     MOV     A,#LOW ?SC_6392
0417 110000      R     ACALL   L?1151
041A 110000      R     ACALL   L?1004
041D 110000      E     ACALL   _stricmp
0420 EF                MOV     A,R7
0421 4E                ORL     A,R6
0422 7006              JNZ     ?C0693
0424 110000      R     ACALL   monitor_checkandset
0427 010000      R     AJMP    ?C0648
042A         ?C0693:
                                           ; SOURCE LINE # 3556
042A 7400        R     MOV     A,#MBYTE ?SC_6404
042C 110000      R     ACALL   L?1159
042F 7400        R     MOV     A,#HIGH ?SC_6404
0431 F0                MOVX    @DPTR,A
0432 7400        R     MOV     A,#LOW ?SC_6404
0434 110000      R     ACALL   L?1151
0437 110000      R     ACALL   L?1004
043A 110000      E     ACALL   _stricmp
043D EF                MOV     A,R7
043E 4E                ORL     A,R6
043F 7006              JNZ     ?C0695
0441 110000      E     ACALL   MonitorEE
0444 010000      R     AJMP    ?C0648
0447         ?C0695:
                                           ; SOURCE LINE # 3558
0447 110000      R     ACALL   L?1035
044A 110000      R     ACALL   L?1099
044D 110000      R     ACALL   L?1004
0450 110000      E     ACALL   _stricmp
0453 EF                MOV     A,R7
0454 4E                ORL     A,R6
0455 7006              JNZ     ?C0697
0457 110000      E     ACALL   MonitorFOsd
045A 010000      R     AJMP    ?C0648
045D         ?C0697:
                                           ; SOURCE LINE # 3559
045D 110000      R     ACALL   L?1035
0460 110000      R     ACALL   L?1099
0463 110000      R     ACALL   L?1004
0466 110000      E     ACALL   _stricmp
0469 EF                MOV     A,R7
046A 4E                ORL     A,R6
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 238 

046B 7006              JNZ     ?C0699
046D 110000      R     ACALL   monitor_fosd
0470 010000      R     AJMP    ?C0648
0473         ?C0699:
                                           ; SOURCE LINE # 3563
0473 110000      R     ACALL   L?1031
0476 7400        R     MOV     A,#HIGH ?SC_2954
0478 F0                MOVX    @DPTR,A
0479 7400        R     MOV     A,#LOW ?SC_2954
047B 110000      R     ACALL   L?1160
047E 110000      R     ACALL   L?1004
0481 110000      E     ACALL   _stricmp
0484 EF                MOV     A,R7
0485 4E                ORL     A,R6
0486 7006              JNZ     ?C0701
0488 110000      R     ACALL   monitor_hdmi
048B 010000      R     AJMP    ?C0648
048E         ?C0701:
                                           ; SOURCE LINE # 3567
048E 7400        R     MOV     A,#MBYTE ?SC_6412
0490 110000      R     ACALL   L?1159
0493 7400        R     MOV     A,#HIGH ?SC_6412
0495 F0                MOVX    @DPTR,A
0496 7400        R     MOV     A,#LOW ?SC_6412
0498 110000      R     ACALL   L?1160
049B 110000      R     ACALL   L?1004
049E 110000      E     ACALL   _stricmp
04A1 EF                MOV     A,R7
04A2 4E                ORL     A,R6
04A3 7006              JNZ     ?C0703
04A5 110000      R     ACALL   monitor_i2c
04A8 010000      R     AJMP    ?C0648
04AB         ?C0703:
                                           ; SOURCE LINE # 3569
04AB 7400        R     MOV     A,#MBYTE ?SC_6416
04AD 110000      R     ACALL   L?1174
04B0 7400        R     MOV     A,#HIGH ?SC_6416
04B2 F0                MOVX    @DPTR,A
04B3 7400        R     MOV     A,#LOW ?SC_6416
04B5 110000      R     ACALL   L?1175
04B8 110000      R     ACALL   L?1004
04BB 110000      E     ACALL   _stricmp
04BE EF                MOV     A,R7
04BF 4E                ORL     A,R6
04C0 7006              JNZ     ?C0705
04C2 110000      R     ACALL   monitor_i2cspi
04C5 010000      R     AJMP    ?C0648
04C8         ?C0705:
                                           ; SOURCE LINE # 3570
04C8 7400        R     MOV     A,#MBYTE ?SC_6423
04CA 110000      R     ACALL   L?1174
04CD 7400        R     MOV     A,#HIGH ?SC_6423
04CF F0                MOVX    @DPTR,A
04D0 7400        R     MOV     A,#LOW ?SC_6423
04D2 110000      R     ACALL   L?1175
04D5 110000      R     ACALL   L?1004
04D8 110000      E     ACALL   _stricmp
04DB EF                MOV     A,R7
04DC 4E                ORL     A,R6
04DD 7006              JNZ     ?C0707
04DF 110000      R     ACALL   monitor_i2cspic
04E2 010000      R     AJMP    ?C0648
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 239 

04E5         ?C0707:
                                           ; SOURCE LINE # 3571
04E5 7400        R     MOV     A,#MBYTE ?SC_6431
04E7 110000      R     ACALL   L?1187
04EA 7400        R     MOV     A,#HIGH ?SC_6431
04EC F0                MOVX    @DPTR,A
04ED 7400        R     MOV     A,#LOW ?SC_6431
04EF 110000      R     ACALL   L?1188
04F2 110000      R     ACALL   L?1004
04F5 110000      E     ACALL   _stricmp
04F8 EF                MOV     A,R7
04F9 4E                ORL     A,R6
04FA 7006              JNZ     ?C0709
04FC 110000      R     ACALL   monitor_isr
04FF 010000      R     AJMP    ?C0648
0502         ?C0709:
                                           ; SOURCE LINE # 3572
0502 7400        R     MOV     A,#MBYTE ?SC_6435
0504 110000      R     ACALL   L?1187
0507 7400        R     MOV     A,#HIGH ?SC_6435
0509 F0                MOVX    @DPTR,A
050A 7400        R     MOV     A,#LOW ?SC_6435
050C 110000      R     ACALL   L?1188
050F 110000      R     ACALL   L?1004
0512 110000      E     ACALL   _stricmp
0515 EF                MOV     A,R7
0516 4E                ORL     A,R6
0517 7006              JNZ     ?C0711
0519 110000      R     ACALL   monitor_init
051C 010000      R     AJMP    ?C0648
051F         ?C0711:
                                           ; SOURCE LINE # 3573
051F 7400        R     MOV     A,#MBYTE ?SC_6440
0521 110000      R     ACALL   L?1190
0524 7400        R     MOV     A,#HIGH ?SC_6440
0526 F0                MOVX    @DPTR,A
0527 7400        R     MOV     A,#LOW ?SC_6440
0529 110000      R     ACALL   L?1191
052C 110000      R     ACALL   L?1004
052F 110000      E     ACALL   _stricmp
0532 EF                MOV     A,R7
0533 4E                ORL     A,R6
0534 7006              JNZ     ?C0713
0536 110000      R     ACALL   monitor_imain
0539 010000      R     AJMP    ?C0648
053C         ?C0713:
                                           ; SOURCE LINE # 3575
053C 7400        R     MOV     A,#MBYTE ?SC_6446
053E 110000      R     ACALL   L?1190
0541 7400        R     MOV     A,#HIGH ?SC_6446
0543 F0                MOVX    @DPTR,A
0544 7400        R     MOV     A,#LOW ?SC_6446
0546 110000      R     ACALL   L?1191
0549 110000      R     ACALL   L?1004
054C 110000      E     ACALL   _stricmp
054F EF                MOV     A,R7
0550 4E                ORL     A,R6
0551 7006              JNZ     ?C0715
0553 110000      R     ACALL   monitor_ibt656
0556 010000      R     AJMP    ?C0648
0559         ?C0715:
                                           ; SOURCE LINE # 3577
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 240 

0559 7400        R     MOV     A,#MBYTE ?SC_6453
055B 110000      R     ACALL   L?1213
055E 7400        R     MOV     A,#HIGH ?SC_6453
0560 F0                MOVX    @DPTR,A
0561 7400        R     MOV     A,#LOW ?SC_6453
0563 110000      R     ACALL   L?1214
0566 110000      R     ACALL   L?1004
0569 110000      E     ACALL   _stricmp
056C EF                MOV     A,R7
056D 4E                ORL     A,R6
056E 7006              JNZ     ?C0717
0570 110000      E     ACALL   MonitorMCU
0573 010000      R     AJMP    ?C0648
0576         ?C0717:
                                           ; SOURCE LINE # 3578
0576 7400        R     MOV     A,#MBYTE ?SC_6457
0578 110000      R     ACALL   L?1213
057B 7400        R     MOV     A,#HIGH ?SC_6457
057D F0                MOVX    @DPTR,A
057E 7400        R     MOV     A,#LOW ?SC_6457
0580 110000      R     ACALL   L?1214
0583 110000      R     ACALL   L?1004
0586 110000      E     ACALL   _stricmp
0589 EF                MOV     A,R7
058A 4E                ORL     A,R6
058B 7006              JNZ     ?C0719
058D 110000      E     ACALL   MonitorMenu
0590 010000      R     AJMP    ?C0648
0593         ?C0719:
                                           ; SOURCE LINE # 3582
0593 7400        R     MOV     A,#MBYTE ?SC_6462
0595 110000      R     ACALL   L?1239
0598 7400        R     MOV     A,#HIGH ?SC_6462
059A F0                MOVX    @DPTR,A
059B 7400        R     MOV     A,#LOW ?SC_6462
059D 110000      R     ACALL   L?1240
05A0 110000      R     ACALL   L?1004
05A3 110000      E     ACALL   _stricmp
05A6 EF                MOV     A,R7
05A7 4E                ORL     A,R6
05A8 7006              JNZ     ?C0721
05AA 110000      R     ACALL   monitor_rpixel
05AD 010000      R     AJMP    ?C0648
05B0         ?C0721:
                                           ; SOURCE LINE # 3586
05B0 7400        R     MOV     A,#MBYTE ?SC_6469
05B2 110000      R     ACALL   L?1239
05B5 7400        R     MOV     A,#HIGH ?SC_6469
05B7 F0                MOVX    @DPTR,A
05B8 7400        R     MOV     A,#LOW ?SC_6469
05BA 110000      R     ACALL   L?1240
05BD 110000      R     ACALL   L?1004
05C0 110000      E     ACALL   _stricmp
05C3 EF                MOV     A,R7
05C4 4E                ORL     A,R6
05C5 7006              JNZ     ?C0723
05C7 110000      E     ACALL   MonitorSPI
05CA 010000      R     AJMP    ?C0648
05CD         ?C0723:
                                           ; SOURCE LINE # 3587
05CD 7400        R     MOV     A,#MBYTE ?SC_6473
05CF 110000      R     ACALL   L?1286
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 241 

05D2 7400        R     MOV     A,#HIGH ?SC_6473
05D4 F0                MOVX    @DPTR,A
05D5 7400        R     MOV     A,#LOW ?SC_6473
05D7 110000      R     ACALL   L?1287
05DA 110000      R     ACALL   L?1004
05DD 110000      E     ACALL   _stricmp
05E0 EF                MOV     A,R7
05E1 4E                ORL     A,R6
05E2 7006              JNZ     ?C0725
05E4 110000      E     ACALL   MonitorSPIC
05E7 010000      R     AJMP    ?C0648
05EA         ?C0725:
                                           ; SOURCE LINE # 3588
05EA 110000      R     ACALL   L?1037
05ED 110000      R     ACALL   L?1103
05F0 110000      R     ACALL   L?1004
05F3 110000      E     ACALL   _stricmp
05F6 EF                MOV     A,R7
05F7 4E                ORL     A,R6
05F8 7006              JNZ     ?C0727
05FA 110000      E     ACALL   MonitorSOsd
05FD 010000      R     AJMP    ?C0648
0600         ?C0727:
                                           ; SOURCE LINE # 3589
0600 110000      R     ACALL   L?1037
0603 110000      R     ACALL   L?1103
0606 110000      R     ACALL   L?1004
0609 110000      E     ACALL   _stricmp
060C EF                MOV     A,R7
060D 4E                ORL     A,R6
060E 7005              JNZ     ?C0729
0610 110000      R     ACALL   monitor_sosd
0613 807C              SJMP    ?C0648
0615         ?C0729:
                                           ; SOURCE LINE # 3590
0615 7400        R     MOV     A,#MBYTE ?SC_6483
0617 110000      R     ACALL   L?1286
061A 7400        R     MOV     A,#HIGH ?SC_6483
061C F0                MOVX    @DPTR,A
061D 7400        R     MOV     A,#LOW ?SC_6483
061F 110000      R     ACALL   L?1287
0622 110000      R     ACALL   L?1004
0625 110000      E     ACALL   _stricmp
0628 EF                MOV     A,R7
0629 4E                ORL     A,R6
062A 7005              JNZ     ?C0731
062C 110000      R     ACALL   monitor_scaler
062F 8060              SJMP    ?C0648
0631         ?C0731:
                                           ; SOURCE LINE # 3591
0631 7400        R     MOV     A,#MBYTE ?SC_6490
0633 110000      R     ACALL   L?1364
0636 7400        R     MOV     A,#HIGH ?SC_6490
0638 F0                MOVX    @DPTR,A
0639 7400        R     MOV     A,#LOW ?SC_6490
063B 110000      R     ACALL   L?1365
063E 110000      R     ACALL   L?1004
0641 110000      E     ACALL   _stricmp
0644 EF                MOV     A,R7
0645 4E                ORL     A,R6
0646 7005              JNZ     ?C0733
0648 110000      R     ACALL   monitor_task
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 242 

064B 8044              SJMP    ?C0648
064D         ?C0733:
                                           ; SOURCE LINE # 3592
064D 7400        R     MOV     A,#MBYTE ?SC_6495
064F 110000      R     ACALL   L?1364
0652 7400        R     MOV     A,#HIGH ?SC_6495
0654 F0                MOVX    @DPTR,A
0655 7400        R     MOV     A,#LOW ?SC_6495
0657 110000      R     ACALL   L?1365
065A 110000      R     ACALL   L?1004
065D 110000      E     ACALL   _stricmp
0660 EF                MOV     A,R7
0661 4E                ORL     A,R6
0662 7005              JNZ     ?C0735
0664 110000      R     ACALL   monitor_time
0667 8028              SJMP    ?C0648
0669         ?C0735:
                                           ; SOURCE LINE # 3594
0669 90000000    E     MOV     DPTR,#?_stricmp?BYTE+03H
066D 7400        R     MOV     A,#MBYTE ?SC_6500
066F F0                MOVX    @DPTR,A
0670 A3                INC     DPTR
0671 7400        R     MOV     A,#HIGH ?SC_6500
0673 F0                MOVX    @DPTR,A
0674 A3                INC     DPTR
0675 7400        R     MOV     A,#LOW ?SC_6500
0677 F0                MOVX    @DPTR,A
0678 90000000    R     MOV     DPTR,#argv
067C 110000      R     ACALL   L?1004
067F 110000      E     ACALL   _stricmp
0682 EF                MOV     A,R7
0683 4E                ORL     A,R6
0684 7005              JNZ     ?C0737
0686 110000      R     ACALL   monitor_touch
0689 8006              SJMP    ?C0648
068B         ?C0737:
                                           ; SOURCE LINE # 3600
                                           ; SOURCE LINE # 3601
068B 110000      R     ACALL   L?1359
068E         ?C0984:
068E 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 3602
0691         ?C0648:
                                           ; SOURCE LINE # 3603
0691         ?C0971:
0691         ?C0973:
0691         ?C0975:
0691 110000      R     ACALL   Prompt
                                           ; SOURCE LINE # 3604
0694         ?C0622:
0694 22                RET     
             ; FUNCTION Monitor (END)

             ; FUNCTION Test_Checkclock2 (BEGIN)
                                           ; SOURCE LINE # 3888
                                           ; SOURCE LINE # 3889
0000 22                RET     
             ; FUNCTION Test_Checkclock2 (END)

             ; FUNCTION Test_Checkclock (BEGIN)
                                           ; SOURCE LINE # 3890
                                           ; SOURCE LINE # 3891
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 243 

                                           ; SOURCE LINE # 3895
0000 90000000    R     MOV     DPTR,#count_72_low
                                           ; SOURCE LINE # 3896
0004 110000      R     ACALL   L?1178
0007 90000000    R     MOV     DPTR,#count_54_low
                                           ; SOURCE LINE # 3897
000B 110000      R     ACALL   L?1179
000E 90000000    R     MOV     DPTR,#count_36_low
                                           ; SOURCE LINE # 3898
0012 110000      R     ACALL   L?1179
0015 90000000    R     MOV     DPTR,#count_27_low
0019 110000      E     ACALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 3900
001C 90000000    R     MOV     DPTR,#WaitInterval
0020 E4                CLR     A
0021 F0                MOVX    @DPTR,A
0022 A3                INC     DPTR
0023 7432              MOV     A,#032H
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3904
0026 7B00        R     MOV     R3,#MBYTE ?SC_6504
0028 7A00        R     MOV     R2,#HIGH ?SC_6504
002A 7900        R     MOV     R1,#LOW ?SC_6504
002C 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 3906
002F 90000000    R     MOV     DPTR,#cache
0033 E59C              MOV     A,SFR_CACHE_EN
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3907
0036 E4                CLR     A
0037 F59C              MOV     SFR_CACHE_EN,A
                                           ; SOURCE LINE # 3908
0039 759300      E     MOV     DPX,#?C?XDATASEG
003C 2500        E     ADD     A,regTW88+01H
003E 110000      R     ACALL   L?1288
0041 54FB              ANL     A,#0FBH
0043 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3909
0044 C2A8              CLR     SFRB_EX0
                                           ; SOURCE LINE # 3910
0046 C2EA              CLR     SFRB_EINT4
                                           ; SOURCE LINE # 3911
0048 C2AB              CLR     SFRB_ET1
                                           ; SOURCE LINE # 3912
004A 53FBEF            ANL     SFR_E2IE,#0EFH
                                           ; SOURCE LINE # 3913
004D E4                CLR     A
004E FF                MOV     R7,A
004F FE                MOV     R6,A
0050 FD                MOV     R5,A
0051 110000      R     ACALL   L?1297
0054         ?C0740:
                                           ; SOURCE LINE # 3915
0054 110000      E     ACALL   RS_ready
0057 EF                MOV     A,R7
0058 6003              JZ      $ + 5H
005A 010000      R     AJMP    ?C0741
                                           ; SOURCE LINE # 3916
005D 7B00        R     MOV     R3,#MBYTE ?SC_6531
005F 7A00        R     MOV     R2,#HIGH ?SC_6531
0061 7900        R     MOV     R1,#LOW ?SC_6531
0063 90000000    R     MOV     DPTR,#lloopp
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 244 

0067 110000      R     ACALL   L?1009
006A 110000      R     ACALL   L?1056
006D 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 3917
0070 90000000    R     MOV     DPTR,#lloopp
0074 110000      R     ACALL   L?1136
0077 110000      R     ACALL   L?1267
007A 110000      R     ACALL   L?1297
                                           ; SOURCE LINE # 3920
007D 759300      E     MOV     DPX,#?C?XDATASEG
0080 E500        E     MOV     A,regTW88+01H
0082 24E1              ADD     A,#0E1H
0084 110000      R     ACALL   L?1288
0087 54CF              ANL     A,#0CFH
0089 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 3921
008A E4                CLR     A
008B FF                MOV     R7,A
008C FE                MOV     R6,A
008D FD                MOV     R5,A
008E FC                MOV     R4,A
008F 90000000    R     MOV     DPTR,#count
0093 110000      E     ACALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 3922
0096 110000      E     ACALL   WaitOneVBlank
                                           ; SOURCE LINE # 3923
0099 C2A9              CLR     SFRB_ET0
                                           ; SOURCE LINE # 3924
009B 90000000    R     MOV     DPTR,#CapturedSystemClock
                                           ; SOURCE LINE # 3925
009F 110000      R     ACALL   L?1229
                                           ; SOURCE LINE # 3926
00A2 90000000    R     MOV     DPTR,#WaitInterval
00A6 E0                MOVX    A,@DPTR
00A7 FE                MOV     R6,A
00A8 A3                INC     DPTR
00A9 E0                MOVX    A,@DPTR
00AA FF                MOV     R7,A
00AB E4                CLR     A
00AC FC                MOV     R4,A
00AD FD                MOV     R5,A
00AE 90000000    R     MOV     DPTR,#CapturedSystemClock
00B2 110000      R     ACALL   L?1012
00B5 110000      R     ACALL   L?1097
00B8         ?C0744:
                                           ; SOURCE LINE # 3927
                                           ; SOURCE LINE # 3928
                                           ; SOURCE LINE # 3929
                                           ; SOURCE LINE # 3930
                                           ; SOURCE LINE # 3931
                                           ; SOURCE LINE # 3932
00B8 110000      R     ACALL   L?1010
00BB FB                MOV     R3,A
00BC D3                SETB    C
00BD 110000      E     ACALL   ?C?ULCMP
00C0 50F6              JNC     ?C0744
                                           ; SOURCE LINE # 3934
00C2 90000000    R     MOV     DPTR,#count_27_low
00C6 110000      R     ACALL   L?1074
00C9 FB                MOV     R3,A
00CA C3                CLR     C
00CB 110000      E     ACALL   ?C?ULCMP
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 245 

00CE 703F              JNZ     ?C0745
                                           ; SOURCE LINE # 3935
00D0 110000      R     ACALL   L?1095
00D3 110000      R     ACALL   L?1152
00D6 90000000    R     MOV     DPTR,#count_27_low
                                           ; SOURCE LINE # 3936
00DA 110000      R     ACALL   L?1093
00DD 110000      R     ACALL   L?1315
00E0 110000      R     ACALL   L?1154
00E3 90000000    R     MOV     DPTR,#count_27_high
00E7 110000      E     ACALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 3937
00EA 7B00        R     MOV     R3,#MBYTE ?SC_6536
00EC 7A00        R     MOV     R2,#HIGH ?SC_6536
00EE 7900        R     MOV     R1,#LOW ?SC_6536
00F0 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 3938
00F3 110000      R     ACALL   L?1053
                                           ; SOURCE LINE # 3939
00F6 110000      R     ACALL   L?1245
00F9 90000000    R     MOV     DPTR,#count_27_low
00FD 110000      R     ACALL   L?1009
0100 110000      R     ACALL   L?1056
0103 90000000    R     MOV     DPTR,#count_27_high
0107 110000      R     ACALL   L?1009
010A 110000      R     ACALL   L?1208
                                           ; SOURCE LINE # 3940
010D 8036              SJMP    ?C0985
010F         ?C0745:
                                           ; SOURCE LINE # 3941
                                           ; SOURCE LINE # 3942
010F 90000000    R     MOV     DPTR,#count_27_low
0113 110000      R     ACALL   L?1009
0116 90000000    R     MOV     DPTR,#count
011A 110000      R     ACALL   L?1012
011D FB                MOV     R3,A
011E C3                CLR     C
011F 110000      E     ACALL   ?C?ULCMP
0122 4015              JC      ?C0748
0124 90000000    R     MOV     DPTR,#count_27_high
0128 110000      R     ACALL   L?1009
012B 90000000    R     MOV     DPTR,#count
012F 110000      R     ACALL   L?1012
0132 FB                MOV     R3,A
0133 D3                SETB    C
0134 110000      E     ACALL   ?C?ULCMP
0137 4009              JC      ?C0747
0139         ?C0748:
                                           ; SOURCE LINE # 3943
0139 7B00        R     MOV     R3,#MBYTE ?SC_6567
013B 7A00        R     MOV     R2,#HIGH ?SC_6567
013D 7900        R     MOV     R1,#LOW ?SC_6567
                                           ; SOURCE LINE # 3944
                                           ; SOURCE LINE # 3945
                                           ; SOURCE LINE # 3946
013F 010000      R     AJMP    ?C0996
                                           ; SOURCE LINE # 3947
0142         ?C0747:
                                           ; SOURCE LINE # 3948
0142 110000      R     ACALL   L?1225
0145         ?C0985:
0145 110000      E     ACALL   _Printf
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 246 

                                           ; SOURCE LINE # 3949
0148         ?C0746:
                                           ; SOURCE LINE # 3953
0148 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 3954
                                           ; SOURCE LINE # 3955
                                           ; SOURCE LINE # 3956
                                           ; SOURCE LINE # 3957
                                           ; SOURCE LINE # 3958
                                           ; SOURCE LINE # 3959
                                           ; SOURCE LINE # 3960
014A 110000      R     ACALL   L?1013
014D 110000      R     ACALL   L?1012
0150 110000      R     ACALL   L?1097
0153         ?C0751:
                                           ; SOURCE LINE # 3961
                                           ; SOURCE LINE # 3962
                                           ; SOURCE LINE # 3963
                                           ; SOURCE LINE # 3964
                                           ; SOURCE LINE # 3965
                                           ; SOURCE LINE # 3966
0153 110000      R     ACALL   L?1010
0156 FB                MOV     R3,A
0157 D3                SETB    C
0158 110000      E     ACALL   ?C?ULCMP
015B 50F6              JNC     ?C0751
                                           ; SOURCE LINE # 3968
015D E4                CLR     A
015E FF                MOV     R7,A
015F FE                MOV     R6,A
0160 FD                MOV     R5,A
0161 FC                MOV     R4,A
0162 90000000    R     MOV     DPTR,#count_72_low
0166 110000      R     ACALL   L?1075
0169 FB                MOV     R3,A
016A C3                CLR     C
016B 110000      E     ACALL   ?C?ULCMP
016E 703F              JNZ     ?C0752
                                           ; SOURCE LINE # 3969
0170 110000      R     ACALL   L?1095
0173 110000      R     ACALL   L?1152
0176 90000000    R     MOV     DPTR,#count_72_low
                                           ; SOURCE LINE # 3970
017A 110000      R     ACALL   L?1093
017D 110000      R     ACALL   L?1315
0180 110000      R     ACALL   L?1154
0183 90000000    R     MOV     DPTR,#count_72_high
0187 110000      E     ACALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 3971
018A 7B00        R     MOV     R3,#MBYTE ?SC_6614
018C 7A00        R     MOV     R2,#HIGH ?SC_6614
018E 7900        R     MOV     R1,#LOW ?SC_6614
0190 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 3972
0193 110000      R     ACALL   L?1053
                                           ; SOURCE LINE # 3973
0196 110000      R     ACALL   L?1245
0199 90000000    R     MOV     DPTR,#count_72_low
019D 110000      R     ACALL   L?1009
01A0 110000      R     ACALL   L?1056
01A3 90000000    R     MOV     DPTR,#count_72_high
01A7 110000      R     ACALL   L?1009
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 247 

01AA 110000      R     ACALL   L?1208
                                           ; SOURCE LINE # 3974
01AD 8036              SJMP    ?C0987
01AF         ?C0752:
                                           ; SOURCE LINE # 3975
                                           ; SOURCE LINE # 3976
01AF 90000000    R     MOV     DPTR,#count_72_low
01B3 110000      R     ACALL   L?1009
01B6 90000000    R     MOV     DPTR,#count
01BA 110000      R     ACALL   L?1012
01BD FB                MOV     R3,A
01BE C3                CLR     C
01BF 110000      E     ACALL   ?C?ULCMP
01C2 4015              JC      ?C0755
01C4 90000000    R     MOV     DPTR,#count_72_high
01C8 110000      R     ACALL   L?1009
01CB 90000000    R     MOV     DPTR,#count
01CF 110000      R     ACALL   L?1012
01D2 FB                MOV     R3,A
01D3 D3                SETB    C
01D4 110000      E     ACALL   ?C?ULCMP
01D7 4009              JC      ?C0754
01D9         ?C0755:
                                           ; SOURCE LINE # 3977
01D9 7B00        R     MOV     R3,#MBYTE ?SC_6625
01DB 7A00        R     MOV     R2,#HIGH ?SC_6625
01DD 7900        R     MOV     R1,#LOW ?SC_6625
01DF         ?C0986:
                                           ; SOURCE LINE # 3978
                                           ; SOURCE LINE # 3979
                                           ; SOURCE LINE # 3980
01DF 010000      R     AJMP    ?C0996
                                           ; SOURCE LINE # 3981
01E2         ?C0754:
                                           ; SOURCE LINE # 3982
01E2 110000      R     ACALL   L?1225
01E5         ?C0987:
01E5 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 3983
01E8         ?C0753:
                                           ; SOURCE LINE # 3987
                                           ; SOURCE LINE # 3988
                                           ; SOURCE LINE # 3989
                                           ; SOURCE LINE # 3990
                                           ; SOURCE LINE # 3991
                                           ; SOURCE LINE # 3992
                                           ; SOURCE LINE # 3993
01E8 110000      R     ACALL   L?1028
01EB 110000      R     ACALL   L?1012
01EE 110000      R     ACALL   L?1098
01F1         ?C0758:
                                           ; SOURCE LINE # 3994
                                           ; SOURCE LINE # 3995
                                           ; SOURCE LINE # 3996
                                           ; SOURCE LINE # 3997
                                           ; SOURCE LINE # 3998
                                           ; SOURCE LINE # 3999
01F1 110000      R     ACALL   L?1011
01F4 FB                MOV     R3,A
01F5 D3                SETB    C
01F6 110000      E     ACALL   ?C?ULCMP
01F9 50F6              JNC     ?C0758
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 248 

                                           ; SOURCE LINE # 4001
01FB E4                CLR     A
01FC FF                MOV     R7,A
01FD FE                MOV     R6,A
01FE FD                MOV     R5,A
01FF FC                MOV     R4,A
0200 90000000    R     MOV     DPTR,#count_54_low
0204 110000      R     ACALL   L?1075
0207 FB                MOV     R3,A
0208 C3                CLR     C
0209 110000      E     ACALL   ?C?ULCMP
020C 703F              JNZ     ?C0759
                                           ; SOURCE LINE # 4002
020E 110000      R     ACALL   L?1095
0211 110000      R     ACALL   L?1153
0214 90000000    R     MOV     DPTR,#count_54_low
                                           ; SOURCE LINE # 4003
0218 110000      R     ACALL   L?1094
021B 110000      R     ACALL   L?1316
021E 110000      R     ACALL   L?1154
0221 90000000    R     MOV     DPTR,#count_54_high
0225 110000      E     ACALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 4004
0228 7B00        R     MOV     R3,#MBYTE ?SC_6641
022A 7A00        R     MOV     R2,#HIGH ?SC_6641
022C 7900        R     MOV     R1,#LOW ?SC_6641
022E 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 4005
0231 110000      R     ACALL   L?1054
                                           ; SOURCE LINE # 4006
0234 110000      R     ACALL   L?1368
0237 90000000    R     MOV     DPTR,#count_54_low
023B 110000      R     ACALL   L?1009
023E 110000      R     ACALL   L?1056
0241 90000000    R     MOV     DPTR,#count_54_high
0245 110000      R     ACALL   L?1009
0248 110000      R     ACALL   L?1208
                                           ; SOURCE LINE # 4007
024B 8036              SJMP    ?C0989
024D         ?C0759:
                                           ; SOURCE LINE # 4008
                                           ; SOURCE LINE # 4009
024D 90000000    R     MOV     DPTR,#count_54_low
0251 110000      R     ACALL   L?1009
0254 90000000    R     MOV     DPTR,#count
0258 110000      R     ACALL   L?1012
025B FB                MOV     R3,A
025C C3                CLR     C
025D 110000      E     ACALL   ?C?ULCMP
0260 4015              JC      ?C0762
0262 90000000    R     MOV     DPTR,#count_54_high
0266 110000      R     ACALL   L?1009
0269 90000000    R     MOV     DPTR,#count
026D 110000      R     ACALL   L?1012
0270 FB                MOV     R3,A
0271 D3                SETB    C
0272 110000      E     ACALL   ?C?ULCMP
0275 4009              JC      ?C0761
0277         ?C0762:
                                           ; SOURCE LINE # 4010
0277 7B00        R     MOV     R3,#MBYTE ?SC_6652
0279 7A00        R     MOV     R2,#HIGH ?SC_6652
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 249 

027B 7900        R     MOV     R1,#LOW ?SC_6652
027D         ?C0988:
                                           ; SOURCE LINE # 4011
                                           ; SOURCE LINE # 4012
                                           ; SOURCE LINE # 4013
027D 010000      R     AJMP    ?C0996
                                           ; SOURCE LINE # 4014
0280         ?C0761:
                                           ; SOURCE LINE # 4015
0280 110000      R     ACALL   L?1226
0283         ?C0989:
0283 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 4016
0286         ?C0760:
                                           ; SOURCE LINE # 4022
                                           ; SOURCE LINE # 4023
                                           ; SOURCE LINE # 4024
                                           ; SOURCE LINE # 4025
                                           ; SOURCE LINE # 4026
                                           ; SOURCE LINE # 4027
                                           ; SOURCE LINE # 4028
0286 110000      R     ACALL   L?1049
0289 110000      R     ACALL   L?1012
028C 110000      R     ACALL   L?1098
028F         ?C0765:
                                           ; SOURCE LINE # 4029
                                           ; SOURCE LINE # 4030
                                           ; SOURCE LINE # 4031
                                           ; SOURCE LINE # 4032
                                           ; SOURCE LINE # 4033
                                           ; SOURCE LINE # 4034
028F 110000      R     ACALL   L?1011
0292 FB                MOV     R3,A
0293 D3                SETB    C
0294 110000      E     ACALL   ?C?ULCMP
0297 50F6              JNC     ?C0765
                                           ; SOURCE LINE # 4036
0299 E4                CLR     A
029A FF                MOV     R7,A
029B FE                MOV     R6,A
029C FD                MOV     R5,A
029D FC                MOV     R4,A
029E 90000000    R     MOV     DPTR,#count_36_low
02A2 110000      R     ACALL   L?1075
02A5 FB                MOV     R3,A
02A6 C3                CLR     C
02A7 110000      E     ACALL   ?C?ULCMP
02AA 7045              JNZ     ?C0766
                                           ; SOURCE LINE # 4037
02AC 110000      R     ACALL   L?1095
02AF 110000      R     ACALL   L?1153
02B2 90000000    R     MOV     DPTR,#count_36_low
                                           ; SOURCE LINE # 4038
02B6 110000      R     ACALL   L?1094
02B9 110000      R     ACALL   L?1316
02BC 110000      R     ACALL   L?1154
02BF 90000000    R     MOV     DPTR,#count_36_high
02C3 110000      E     ACALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 4039
02C6 7B00        R     MOV     R3,#MBYTE ?SC_6668
02C8 7A00        R     MOV     R2,#HIGH ?SC_6668
02CA 7900        R     MOV     R1,#LOW ?SC_6668
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 250 

02CC 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 4040
02CF 110000      R     ACALL   L?1054
                                           ; SOURCE LINE # 4041
02D2 110000      R     ACALL   L?1368
02D5 90000000    R     MOV     DPTR,#count_36_low
02D9 110000      R     ACALL   L?1009
02DC 110000      R     ACALL   L?1056
02DF 90000000    R     MOV     DPTR,#count_36_high
02E3 110000      R     ACALL   L?1009
02E6 110000      R     ACALL   L?1208
02E9 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 4043
02EC 110000      R     ACALL   L?1258
                                           ; SOURCE LINE # 4044
02EF 8036              SJMP    ?C0991
02F1         ?C0766:
                                           ; SOURCE LINE # 4045
                                           ; SOURCE LINE # 4046
02F1 90000000    R     MOV     DPTR,#count_36_low
02F5 110000      R     ACALL   L?1009
02F8 90000000    R     MOV     DPTR,#count
02FC 110000      R     ACALL   L?1012
02FF FB                MOV     R3,A
0300 C3                CLR     C
0301 110000      E     ACALL   ?C?ULCMP
0304 4015              JC      ?C0769
0306 90000000    R     MOV     DPTR,#count_36_high
030A 110000      R     ACALL   L?1009
030D 90000000    R     MOV     DPTR,#count
0311 110000      R     ACALL   L?1012
0314 FB                MOV     R3,A
0315 D3                SETB    C
0316 110000      E     ACALL   ?C?ULCMP
0319 4009              JC      ?C0768
031B         ?C0769:
                                           ; SOURCE LINE # 4047
031B 7B00        R     MOV     R3,#MBYTE ?SC_6679
031D 7A00        R     MOV     R2,#HIGH ?SC_6679
031F 7900        R     MOV     R1,#LOW ?SC_6679
0321         ?C0990:
                                           ; SOURCE LINE # 4048
                                           ; SOURCE LINE # 4049
                                           ; SOURCE LINE # 4050
0321 010000      R     AJMP    ?C0996
                                           ; SOURCE LINE # 4051
0324         ?C0768:
                                           ; SOURCE LINE # 4052
0324 110000      R     ACALL   L?1226
0327         ?C0991:
0327 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 4053
032A         ?C0767:
                                           ; SOURCE LINE # 4058
                                           ; SOURCE LINE # 4059
                                           ; SOURCE LINE # 4060
                                           ; SOURCE LINE # 4061
                                           ; SOURCE LINE # 4062
                                           ; SOURCE LINE # 4063
                                           ; SOURCE LINE # 4064
032A 110000      R     ACALL   L?1101
032D 110000      R     ACALL   L?1012
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 251 

0330 110000      R     ACALL   L?1098
0333         ?C0772:
                                           ; SOURCE LINE # 4065
                                           ; SOURCE LINE # 4066
                                           ; SOURCE LINE # 4067
                                           ; SOURCE LINE # 4068
                                           ; SOURCE LINE # 4069
                                           ; SOURCE LINE # 4070
0333 110000      R     ACALL   L?1011
0336 FB                MOV     R3,A
0337 D3                SETB    C
0338 110000      E     ACALL   ?C?ULCMP
033B 50F6              JNC     ?C0772
                                           ; SOURCE LINE # 4072
033D 90000000    R     MOV     DPTR,#count_27_low
0341 110000      R     ACALL   L?1009
0344 90000000    R     MOV     DPTR,#count
0348 110000      R     ACALL   L?1012
034B FB                MOV     R3,A
034C C3                CLR     C
034D 110000      E     ACALL   ?C?ULCMP
0350 4015              JC      ?C0774
0352 90000000    R     MOV     DPTR,#count_27_high
0356 110000      R     ACALL   L?1009
0359 90000000    R     MOV     DPTR,#count
035D 110000      R     ACALL   L?1012
0360 FB                MOV     R3,A
0361 D3                SETB    C
0362 110000      E     ACALL   ?C?ULCMP
0365 4009              JC      ?C0773
0367         ?C0774:
                                           ; SOURCE LINE # 4073
0367 7B00        R     MOV     R3,#MBYTE ?SC_6695
0369 7A00        R     MOV     R2,#HIGH ?SC_6695
036B 7900        R     MOV     R1,#LOW ?SC_6695
036D         ?C0992:
                                           ; SOURCE LINE # 4074
                                           ; SOURCE LINE # 4075
                                           ; SOURCE LINE # 4076
036D 010000      R     AJMP    ?C0996
                                           ; SOURCE LINE # 4077
0370         ?C0773:
                                           ; SOURCE LINE # 4078
                                           ; SOURCE LINE # 4084
0370 110000      R     ACALL   L?1161
0373 7401              MOV     A,#01H
0375 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 4085
0376 E4                CLR     A
0377 FF                MOV     R7,A
                                           ; SOURCE LINE # 4086
                                           ; SOURCE LINE # 4087
                                           ; SOURCE LINE # 4088
                                           ; SOURCE LINE # 4089
                                           ; SOURCE LINE # 4090
                                           ; SOURCE LINE # 4091
                                           ; SOURCE LINE # 4092
0378 110000      R     ACALL   L?1013
037B 110000      R     ACALL   L?1012
037E 110000      R     ACALL   L?1098
0381         ?C0777:
                                           ; SOURCE LINE # 4093
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 252 

                                           ; SOURCE LINE # 4094
                                           ; SOURCE LINE # 4095
                                           ; SOURCE LINE # 4096
                                           ; SOURCE LINE # 4097
                                           ; SOURCE LINE # 4098
0381 110000      R     ACALL   L?1011
0384 FB                MOV     R3,A
0385 D3                SETB    C
0386 110000      E     ACALL   ?C?ULCMP
0389 50F6              JNC     ?C0777
                                           ; SOURCE LINE # 4100
038B 90000000    R     MOV     DPTR,#count_72_low
038F 110000      R     ACALL   L?1009
0392 90000000    R     MOV     DPTR,#count
0396 110000      R     ACALL   L?1012
0399 FB                MOV     R3,A
039A C3                CLR     C
039B 110000      E     ACALL   ?C?ULCMP
039E 4015              JC      ?C0779
03A0 90000000    R     MOV     DPTR,#count_72_high
03A4 110000      R     ACALL   L?1009
03A7 90000000    R     MOV     DPTR,#count
03AB 110000      R     ACALL   L?1012
03AE FB                MOV     R3,A
03AF D3                SETB    C
03B0 110000      E     ACALL   ?C?ULCMP
03B3 4009              JC      ?C0778
03B5         ?C0779:
                                           ; SOURCE LINE # 4101
03B5 7B00        R     MOV     R3,#MBYTE ?SC_6711
03B7 7A00        R     MOV     R2,#HIGH ?SC_6711
03B9 7900        R     MOV     R1,#LOW ?SC_6711
03BB         ?C0993:
                                           ; SOURCE LINE # 4102
                                           ; SOURCE LINE # 4103
                                           ; SOURCE LINE # 4104
03BB 010000      R     AJMP    ?C0996
                                           ; SOURCE LINE # 4105
03BE         ?C0778:
                                           ; SOURCE LINE # 4106
03BE 110000      R     ACALL   L?1226
03C1 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 4110
                                           ; SOURCE LINE # 4111
                                           ; SOURCE LINE # 4112
                                           ; SOURCE LINE # 4113
                                           ; SOURCE LINE # 4114
                                           ; SOURCE LINE # 4115
                                           ; SOURCE LINE # 4116
03C4 110000      R     ACALL   L?1028
03C7 110000      R     ACALL   L?1012
03CA 110000      R     ACALL   L?1098
03CD         ?C0782:
                                           ; SOURCE LINE # 4117
                                           ; SOURCE LINE # 4118
                                           ; SOURCE LINE # 4119
                                           ; SOURCE LINE # 4120
                                           ; SOURCE LINE # 4121
                                           ; SOURCE LINE # 4122
03CD 110000      R     ACALL   L?1011
03D0 FB                MOV     R3,A
03D1 D3                SETB    C
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 253 

03D2 110000      E     ACALL   ?C?ULCMP
03D5 50F6              JNC     ?C0782
                                           ; SOURCE LINE # 4124
03D7 90000000    R     MOV     DPTR,#count_54_low
03DB 110000      R     ACALL   L?1009
03DE 90000000    R     MOV     DPTR,#count
03E2 110000      R     ACALL   L?1012
03E5 FB                MOV     R3,A
03E6 C3                CLR     C
03E7 110000      E     ACALL   ?C?ULCMP
03EA 4015              JC      ?C0784
03EC 90000000    R     MOV     DPTR,#count_54_high
03F0 110000      R     ACALL   L?1009
03F3 90000000    R     MOV     DPTR,#count
03F7 110000      R     ACALL   L?1012
03FA FB                MOV     R3,A
03FB D3                SETB    C
03FC 110000      E     ACALL   ?C?ULCMP
03FF 4009              JC      ?C0783
0401         ?C0784:
                                           ; SOURCE LINE # 4125
0401 7B00        R     MOV     R3,#MBYTE ?SC_6728
0403 7A00        R     MOV     R2,#HIGH ?SC_6728
0405 7900        R     MOV     R1,#LOW ?SC_6728
0407         ?C0994:
                                           ; SOURCE LINE # 4126
                                           ; SOURCE LINE # 4127
                                           ; SOURCE LINE # 4128
0407 010000      R     AJMP    ?C0996
                                           ; SOURCE LINE # 4129
040A         ?C0783:
                                           ; SOURCE LINE # 4130
040A 110000      R     ACALL   L?1226
040D 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 4134
                                           ; SOURCE LINE # 4135
                                           ; SOURCE LINE # 4136
                                           ; SOURCE LINE # 4137
                                           ; SOURCE LINE # 4138
                                           ; SOURCE LINE # 4139
                                           ; SOURCE LINE # 4140
0410 110000      R     ACALL   L?1049
0413 110000      R     ACALL   L?1012
0416 110000      R     ACALL   L?1098
0419         ?C0787:
                                           ; SOURCE LINE # 4141
                                           ; SOURCE LINE # 4142
                                           ; SOURCE LINE # 4143
                                           ; SOURCE LINE # 4144
                                           ; SOURCE LINE # 4145
                                           ; SOURCE LINE # 4146
0419 110000      R     ACALL   L?1011
041C FB                MOV     R3,A
041D D3                SETB    C
041E 110000      E     ACALL   ?C?ULCMP
0421 50F6              JNC     ?C0787
                                           ; SOURCE LINE # 4148
0423 90000000    R     MOV     DPTR,#count_36_low
0427 110000      R     ACALL   L?1009
042A 90000000    R     MOV     DPTR,#count
042E 110000      R     ACALL   L?1012
0431 FB                MOV     R3,A
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 254 

0432 C3                CLR     C
0433 110000      E     ACALL   ?C?ULCMP
0436 4015              JC      ?C0789
0438 90000000    R     MOV     DPTR,#count_36_high
043C 110000      R     ACALL   L?1009
043F 90000000    R     MOV     DPTR,#count
0443 110000      R     ACALL   L?1012
0446 FB                MOV     R3,A
0447 D3                SETB    C
0448 110000      E     ACALL   ?C?ULCMP
044B 4008              JC      ?C0788
044D         ?C0789:
                                           ; SOURCE LINE # 4149
044D 7B00        R     MOV     R3,#MBYTE ?SC_6745
044F 7A00        R     MOV     R2,#HIGH ?SC_6745
0451 7900        R     MOV     R1,#LOW ?SC_6745
0453         ?C0995:
                                           ; SOURCE LINE # 4150
                                           ; SOURCE LINE # 4151
                                           ; SOURCE LINE # 4152
0453 8049              SJMP    ?C0996
                                           ; SOURCE LINE # 4153
0455         ?C0788:
                                           ; SOURCE LINE # 4154
0455 110000      R     ACALL   L?1226
0458 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 4157
                                           ; SOURCE LINE # 4158
                                           ; SOURCE LINE # 4159
                                           ; SOURCE LINE # 4160
                                           ; SOURCE LINE # 4161
                                           ; SOURCE LINE # 4162
                                           ; SOURCE LINE # 4163
045B 110000      R     ACALL   L?1101
045E 110000      R     ACALL   L?1012
0461 110000      R     ACALL   L?1098
0464         ?C0792:
                                           ; SOURCE LINE # 4164
                                           ; SOURCE LINE # 4165
                                           ; SOURCE LINE # 4166
                                           ; SOURCE LINE # 4167
                                           ; SOURCE LINE # 4168
                                           ; SOURCE LINE # 4169
0464 110000      R     ACALL   L?1011
0467 FB                MOV     R3,A
0468 D3                SETB    C
0469 110000      E     ACALL   ?C?ULCMP
046C 50F6              JNC     ?C0792
                                           ; SOURCE LINE # 4171
046E 90000000    R     MOV     DPTR,#count_27_low
0472 110000      R     ACALL   L?1009
0475 90000000    R     MOV     DPTR,#count
0479 110000      R     ACALL   L?1012
047C FB                MOV     R3,A
047D C3                CLR     C
047E 110000      E     ACALL   ?C?ULCMP
0481 4015              JC      ?C0794
0483 90000000    R     MOV     DPTR,#count_27_high
0487 110000      R     ACALL   L?1009
048A 90000000    R     MOV     DPTR,#count
048E 110000      R     ACALL   L?1012
0491 FB                MOV     R3,A
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 255 

0492 D3                SETB    C
0493 110000      E     ACALL   ?C?ULCMP
0496 4033              JC      ?C0793
0498         ?C0794:
                                           ; SOURCE LINE # 4172
0498 7B00        R     MOV     R3,#MBYTE ?SC_6762
049A 7A00        R     MOV     R2,#HIGH ?SC_6762
049C 7900        R     MOV     R1,#LOW ?SC_6762
049E         ?C0996:
049E 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 4173
04A1 110000      R     ACALL   L?1054
04A4 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 4174
04A7 7B00        R     MOV     R3,#MBYTE ?SC_6582
04A9 7A00        R     MOV     R2,#HIGH ?SC_6582
04AB 7900        R     MOV     R1,#LOW ?SC_6582
04AD 90000000    R     MOV     DPTR,#WaitTime
04B1 110000      R     ACALL   L?1055
04B4 90000000    R     MOV     DPTR,#CapturedSystemClock
04B8 E0                MOVX    A,@DPTR
04B9 FC                MOV     R4,A
04BA A3                INC     DPTR
04BB E0                MOVX    A,@DPTR
04BC FD                MOV     R5,A
04BD A3                INC     DPTR
04BE E0                MOVX    A,@DPTR
04BF FE                MOV     R6,A
04C0 A3                INC     DPTR
04C1 E0                MOVX    A,@DPTR
04C2 FF                MOV     R7,A
04C3 110000      R     ACALL   L?1208
04C6 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 4175
04C9 8009              SJMP    ?C0741
                                           ; SOURCE LINE # 4176
04CB         ?C0793:
                                           ; SOURCE LINE # 4177
                                           ; SOURCE LINE # 4181
04CB 110000      R     ACALL   L?1161
04CE 7401              MOV     A,#01H
04D0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 4185
04D1 010000      R     AJMP    ?C0740
04D4         ?C0741:
                                           ; SOURCE LINE # 4186
04D4 90000000    R     MOV     DPTR,#cache
04D8 E0                MOVX    A,@DPTR
04D9 F59C              MOV     SFR_CACHE_EN,A
                                           ; SOURCE LINE # 4187
04DB 22                RET     
04DC         L?1013:
04DC 110000      E     ACALL   _PllClkSetSource
04DF 759300      E     MOV     DPX,#?C?XDATASEG
04E2 E500        E     MOV     A,regTW88+01H
04E4 24E1              ADD     A,#0E1H
04E6 F582              MOV     DPL,A
04E8 E500        E     MOV     A,regTW88
04EA 3404              ADDC    A,#04H
04EC F583              MOV     DPH,A
04EE 759300      E     MOV     DPX,#?C?XDATASEG
04F1 7421              MOV     A,#021H
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 256 

04F3 F0                MOVX    @DPTR,A
04F4 E4                CLR     A
04F5 FF                MOV     R7,A
04F6 FE                MOV     R6,A
04F7 FD                MOV     R5,A
04F8 FC                MOV     R4,A
04F9 90000000    R     MOV     DPTR,#count
04FD 110000      E     ACALL   ?C?LSTXDATA
0500 110000      E     ACALL   WaitOneVBlank
0503 C2A9              CLR     SFRB_ET0
0505 AF00        E     MOV     R7,SystemClock+03H
0507 AE00        E     MOV     R6,SystemClock+02H
0509 AD00        E     MOV     R5,SystemClock+01H
050B AC00        E     MOV     R4,SystemClock
050D 90000000    R     MOV     DPTR,#CapturedSystemClock
0511 110000      E     ACALL   ?C?LSTXDATA
0514 D2A9              SETB    SFRB_ET0
0516 90000000    R     MOV     DPTR,#WaitInterval
051A E0                MOVX    A,@DPTR
051B FE                MOV     R6,A
051C A3                INC     DPTR
051D E0                MOVX    A,@DPTR
051E FF                MOV     R7,A
051F E4                CLR     A
0520 FC                MOV     R4,A
0521 FD                MOV     R5,A
0522 90000000    R     MOV     DPTR,#CapturedSystemClock
0526 22                RET     
0527         L?1028:
0527 759300      E     MOV     DPX,#?C?XDATASEG
052A E500        E     MOV     A,regTW88+01H
052C 24E1              ADD     A,#0E1H
052E F582              MOV     DPL,A
0530 E500        E     MOV     A,regTW88
0532 3404              ADDC    A,#04H
0534 F583              MOV     DPH,A
0536 759300      E     MOV     DPX,#?C?XDATASEG
0539 7422              MOV     A,#022H
053B F0                MOVX    @DPTR,A
053C E4                CLR     A
053D FF                MOV     R7,A
053E FE                MOV     R6,A
053F FD                MOV     R5,A
0540 FC                MOV     R4,A
0541 90000000    R     MOV     DPTR,#count
0545 110000      E     ACALL   ?C?LSTXDATA
0548 110000      E     ACALL   WaitOneVBlank
054B C2A9              CLR     SFRB_ET0
054D AF00        E     MOV     R7,SystemClock+03H
054F AE00        E     MOV     R6,SystemClock+02H
0551 AD00        E     MOV     R5,SystemClock+01H
0553 AC00        E     MOV     R4,SystemClock
0555 90000000    R     MOV     DPTR,#CapturedSystemClock
0559 110000      E     ACALL   ?C?LSTXDATA
055C D2A9              SETB    SFRB_ET0
055E 90000000    R     MOV     DPTR,#WaitInterval
0562 E0                MOVX    A,@DPTR
0563 FE                MOV     R6,A
0564 A3                INC     DPTR
0565 E0                MOVX    A,@DPTR
0566 FF                MOV     R7,A
0567 E4                CLR     A
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 257 

0568 FC                MOV     R4,A
0569 FD                MOV     R5,A
056A 90000000    R     MOV     DPTR,#CapturedSystemClock
056E 22                RET     
056F         L?1049:
056F 759300      E     MOV     DPX,#?C?XDATASEG
0572 E500        E     MOV     A,regTW88+01H
0574 24E1              ADD     A,#0E1H
0576 F582              MOV     DPL,A
0578 E500        E     MOV     A,regTW88
057A 3404              ADDC    A,#04H
057C F583              MOV     DPH,A
057E 759300      E     MOV     DPX,#?C?XDATASEG
0581 7424              MOV     A,#024H
0583 F0                MOVX    @DPTR,A
0584 E4                CLR     A
0585 FF                MOV     R7,A
0586 FE                MOV     R6,A
0587 FD                MOV     R5,A
0588 FC                MOV     R4,A
0589 90000000    R     MOV     DPTR,#count
058D 110000      E     ACALL   ?C?LSTXDATA
0590 110000      E     ACALL   WaitOneVBlank
0593 C2A9              CLR     SFRB_ET0
0595 AF00        E     MOV     R7,SystemClock+03H
0597 AE00        E     MOV     R6,SystemClock+02H
0599 AD00        E     MOV     R5,SystemClock+01H
059B AC00        E     MOV     R4,SystemClock
059D 90000000    R     MOV     DPTR,#CapturedSystemClock
05A1 110000      E     ACALL   ?C?LSTXDATA
05A4 D2A9              SETB    SFRB_ET0
05A6 90000000    R     MOV     DPTR,#WaitInterval
05AA E0                MOVX    A,@DPTR
05AB FE                MOV     R6,A
05AC A3                INC     DPTR
05AD E0                MOVX    A,@DPTR
05AE FF                MOV     R7,A
05AF E4                CLR     A
05B0 FC                MOV     R4,A
05B1 FD                MOV     R5,A
05B2 90000000    R     MOV     DPTR,#CapturedSystemClock
05B6 22                RET     
05B7         L?1101:
05B7 759300      E     MOV     DPX,#?C?XDATASEG
05BA E500        E     MOV     A,regTW88+01H
05BC 24E1              ADD     A,#0E1H
05BE F582              MOV     DPL,A
05C0 E500        E     MOV     A,regTW88
05C2 3404              ADDC    A,#04H
05C4 F583              MOV     DPH,A
05C6 759300      E     MOV     DPX,#?C?XDATASEG
05C9 7426              MOV     A,#026H
05CB F0                MOVX    @DPTR,A
05CC E4                CLR     A
05CD FF                MOV     R7,A
05CE FE                MOV     R6,A
05CF FD                MOV     R5,A
05D0 FC                MOV     R4,A
05D1 90000000    R     MOV     DPTR,#count
05D5 110000      E     ACALL   ?C?LSTXDATA
05D8 110000      E     ACALL   WaitOneVBlank
05DB C2A9              CLR     SFRB_ET0
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 258 

05DD AF00        E     MOV     R7,SystemClock+03H
05DF AE00        E     MOV     R6,SystemClock+02H
05E1 AD00        E     MOV     R5,SystemClock+01H
05E3 AC00        E     MOV     R4,SystemClock
05E5 90000000    R     MOV     DPTR,#CapturedSystemClock
05E9 110000      E     ACALL   ?C?LSTXDATA
05EC D2A9              SETB    SFRB_ET0
05EE 90000000    R     MOV     DPTR,#WaitInterval
05F2 E0                MOVX    A,@DPTR
05F3 FE                MOV     R6,A
05F4 A3                INC     DPTR
05F5 E0                MOVX    A,@DPTR
05F6 FF                MOV     R7,A
05F7 E4                CLR     A
05F8 FC                MOV     R4,A
05F9 FD                MOV     R5,A
05FA 90000000    R     MOV     DPTR,#CapturedSystemClock
05FE 22                RET     
05FF         L?1161:
05FF 7B00        R     MOV     R3,#MBYTE ?SC_6612
0601 7A00        R     MOV     R2,#HIGH ?SC_6612
0603 7900        R     MOV     R1,#LOW ?SC_6612
0605 110000      E     ACALL   _Printf
0608 759300      E     MOV     DPX,#?C?XDATASEG
060B E500        E     MOV     A,regTW88+01H
060D 24E1              ADD     A,#0E1H
060F F582              MOV     DPL,A
0611 E500        E     MOV     A,regTW88
0613 3404              ADDC    A,#04H
0615 F583              MOV     DPH,A
0617 759300      E     MOV     DPX,#?C?XDATASEG
061A 22                RET     
061B         L?1245:
061B 110000      E     ACALL   _Printf
061E 7B00        R     MOV     R3,#MBYTE ?SC_6558
0620 7A00        R     MOV     R2,#HIGH ?SC_6558
0622 7900        R     MOV     R1,#LOW ?SC_6558
0624 22                RET     
0625         L?1368:
0625 110000      E     ACALL   _Printf
0628 7B00        R     MOV     R3,#MBYTE ?SC_6558
062A 7A00        R     MOV     R2,#HIGH ?SC_6558
062C 7900        R     MOV     R1,#LOW ?SC_6558
062E 22                RET     
             ; FUNCTION Test_Checkclock (END)

             ; FUNCTION _Test_McuSpeed (BEGIN)
                                           ; SOURCE LINE # 4190
0000 90000000    R     MOV     DPTR,#count
0004 EE                MOV     A,R6
0005 F0                MOVX    @DPTR,A
0006 A3                INC     DPTR
0007 EF                MOV     A,R7
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 4191
                                           ; SOURCE LINE # 4198
0009 7B00        R     MOV     R3,#MBYTE ?SC_6779
000B 7A00        R     MOV     R2,#HIGH ?SC_6779
000D 7900        R     MOV     R1,#LOW ?SC_6779
000F 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 4199
0012 E4                CLR     A
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 259 

0013 F59C              MOV     SFR_CACHE_EN,A
                                           ; SOURCE LINE # 4201
0015 C2A9              CLR     SFRB_ET0
                                           ; SOURCE LINE # 4202
0017 90000000    R     MOV     DPTR,#StartClock
                                           ; SOURCE LINE # 4203
001B 110000      R     ACALL   L?1229
                                           ; SOURCE LINE # 4205
001E E4                CLR     A
001F 90000000    R     MOV     DPTR,#i
0023 F0                MOVX    @DPTR,A
0024 A3                INC     DPTR
0025 F0                MOVX    @DPTR,A
0026         ?C0796:
0026 90000000    R     MOV     DPTR,#count
002A 110000      R     ACALL   L?1351
002D 90000000    R     MOV     DPTR,#i+01H
0031 E0                MOVX    A,@DPTR
0032 9F                SUBB    A,R7
0033 90000000    R     MOV     DPTR,#i
0037 E0                MOVX    A,@DPTR
0038 9E                SUBB    A,R6
0039 5026              JNC     ?C0797
                                           ; SOURCE LINE # 4206
;---- Variable 'j' assigned to Register 'R7' ----
003B E4                CLR     A
003C FF                MOV     R7,A
003D         ?C0799:
                                           ; SOURCE LINE # 4207
;---- Variable 'k' assigned to Register 'R6' ----
003D E4                CLR     A
003E FE                MOV     R6,A
003F         ?C0802:
                                           ; SOURCE LINE # 4209
003F 0E                INC     R6
0040 EE                MOV     A,R6
0041 B464FB            CJNE    A,#064H,?C0802
                                           ; SOURCE LINE # 4210
0044         ?C0801:
0044 0F                INC     R7
0045 EF                MOV     A,R7
0046 B464F4            CJNE    A,#064H,?C0799
0049         ?C0800:
                                           ; SOURCE LINE # 4211
0049 110000      R     ACALL   L?1226
004C 110000      E     ACALL   _Puts
                                           ; SOURCE LINE # 4212
004F 90000000    R     MOV     DPTR,#i+01H
0053 E0                MOVX    A,@DPTR
0054 04                INC     A
0055 F0                MOVX    @DPTR,A
0056 70CE              JNZ     ?C0796
0058 90000000    R     MOV     DPTR,#i
005C E0                MOVX    A,@DPTR
005D 04                INC     A
005E F0                MOVX    @DPTR,A
005F         ?C0827:
005F 80C5              SJMP    ?C0796
0061         ?C0797:
                                           ; SOURCE LINE # 4213
0061 C2A9              CLR     SFRB_ET0
                                           ; SOURCE LINE # 4214
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 260 

0063 AF00        E     MOV     R7,SystemClock+03H
0065 AE00        E     MOV     R6,SystemClock+02H
0067 AD00        E     MOV     R5,SystemClock+01H
0069 AC00        E     MOV     R4,SystemClock
006B 90000000    R     MOV     DPTR,#UsedClock
006F 110000      E     ACALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 4215
0072 D2A9              SETB    SFRB_ET0
                                           ; SOURCE LINE # 4216
0074 90000000    R     MOV     DPTR,#UsedClock
0078 110000      R     ACALL   L?1009
007B 90000000    R     MOV     DPTR,#StartClock
007F 110000      R     ACALL   L?1075
0082 FB                MOV     R3,A
0083 C3                CLR     C
0084 EF                MOV     A,R7
0085 9B                SUBB    A,R3
0086 FF                MOV     R7,A
0087 EE                MOV     A,R6
0088 9A                SUBB    A,R2
0089 FE                MOV     R6,A
008A ED                MOV     A,R5
008B 99                SUBB    A,R1
008C FD                MOV     R5,A
008D EC                MOV     A,R4
008E 98                SUBB    A,R0
008F FC                MOV     R4,A
0090 A3                INC     DPTR
0091 110000      E     ACALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 4220
0094 7B64              MOV     R3,#064H
0096 110000      R     ACALL   L?1236
0099 110000      R     ACALL   L?1009
009C 110000      E     ACALL   ?C?ULDIV
009F 90000000    R     MOV     DPTR,#ms
00A3 EB                MOV     A,R3
00A4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 4221
00A5 90000000    R     MOV     DPTR,#UsedClock
00A9 110000      R     ACALL   L?1009
00AC 7B64              MOV     R3,#064H
00AE 110000      R     ACALL   L?1328
                                           ; SOURCE LINE # 4222
00B1 110000      R     ACALL   L?1179
00B4 90000000    R     MOV     DPTR,#UsedClock
00B8 110000      R     ACALL   L?1075
00BB FB                MOV     R3,A
00BC C3                CLR     C
00BD 110000      E     ACALL   ?C?ULCMP
00C0 7007              JNZ     ?C0805
                                           ; SOURCE LINE # 4223
00C2 90000000    R     MOV     DPTR,#sec
00C6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 4224
                                           ; SOURCE LINE # 4225
                                           ; SOURCE LINE # 4226
00C7 802C              SJMP    ?C0997
00C9         ?C0805:
                                           ; SOURCE LINE # 4227
                                           ; SOURCE LINE # 4228
00C9 110000      R     ACALL   L?1234
00CC 110000      R     ACALL   L?1009
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 261 

00CF 110000      E     ACALL   ?C?ULDIV
00D2 90000000    R     MOV     DPTR,#sec
00D6 EB                MOV     A,R3
00D7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 4229
00D8 90000000    R     MOV     DPTR,#UsedClock
00DC 110000      R     ACALL   L?1009
00DF 7B3C              MOV     R3,#03CH
00E1 110000      R     ACALL   L?1328
                                           ; SOURCE LINE # 4230
00E4 110000      R     ACALL   L?1179
00E7 90000000    R     MOV     DPTR,#UsedClock
00EB 110000      R     ACALL   L?1075
00EE FB                MOV     R3,A
00EF C3                CLR     C
00F0 110000      E     ACALL   ?C?ULCMP
00F3 700C              JNZ     ?C0807
                                           ; SOURCE LINE # 4231
00F5         ?C0997:
00F5 90000000    R     MOV     DPTR,#min
00F9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 4232
00FA 90000000    R     MOV     DPTR,#hour
00FE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 4233
00FF 801E              SJMP    ?C0806
0101         ?C0807:
                                           ; SOURCE LINE # 4234
                                           ; SOURCE LINE # 4235
0101 110000      R     ACALL   L?1234
0104 110000      R     ACALL   L?1009
0107 110000      E     ACALL   ?C?ULDIV
010A 90000000    R     MOV     DPTR,#min
010E EB                MOV     A,R3
010F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 4236
0110 110000      R     ACALL   L?1235
0113 110000      R     ACALL   L?1009
0116 110000      E     ACALL   ?C?ULDIV
0119 90000000    R     MOV     DPTR,#hour
011D EF                MOV     A,R7
011E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 4237
                                           ; SOURCE LINE # 4238
011F         ?C0806:
                                           ; SOURCE LINE # 4239
011F 7B00        R     MOV     R3,#MBYTE ?SC_6787
0121 7A00        R     MOV     R2,#HIGH ?SC_6787
0123 7900        R     MOV     R1,#LOW ?SC_6787
0125 90000000    R     MOV     DPTR,#hour
0129 110000      R     ACALL   L?1092
012C 90000000    R     MOV     DPTR,#min
0130 110000      R     ACALL   L?1301
0133 90000000    R     MOV     DPTR,#sec
0137 110000      R     ACALL   L?1361
013A 90000000    R     MOV     DPTR,#ms
013E E0                MOVX    A,@DPTR
013F 90000000    E     MOV     DPTR,#?_Printf?BYTE+06H
0143 F0                MOVX    @DPTR,A
0144 110000      E     ACALL   _Printf
                                           ; SOURCE LINE # 4242
0147 759C01            MOV     SFR_CACHE_EN,#01H
C51 COMPILER V9.56.0.0   MONITOR                                                           07/18/2018 10:44:39 PAGE 262 

                                           ; SOURCE LINE # 4243
014A 22                RET     
             ; FUNCTION _Test_McuSpeed (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =  18449    ----
   CONSTANT SIZE    =   6821    ----
   XDATA SIZE       =    108     198
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
